# 1 "bfs.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 365 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "bfs.cpp" 2
# 1 "/opt/rocm/hip/include/hip/hip_runtime.h" 1
# 42 "/opt/rocm/hip/include/hip/hip_runtime.h"
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stdint.h" 1 3
# 63 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stdint.h" 3
# 1 "/usr/include/stdint.h" 1 3 4
# 25 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 345 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 346 "/usr/include/features.h" 2 3 4
# 367 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 410 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 411 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 368 "/usr/include/features.h" 2 3 4
# 391 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 392 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4








typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;

typedef long int int64_t;







typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 65 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 103 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 119 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 134 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 64 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stdint.h" 2 3
# 43 "/opt/rocm/hip/include/hip/hip_runtime.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 29 "/usr/include/stdio.h" 3 4
extern "C" {




# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 1 3 4
# 62 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 36 "/usr/include/stdio.h" 2 3 4








struct _IO_FILE;



typedef struct _IO_FILE FILE;
# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stdarg.h" 1 3 4
# 30 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 48 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 521 "/usr/include/libio.h" 3 4
}
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 195 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void) ;
# 205 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;
# 237 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 272 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 297 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();
# 356 "/usr/include/stdio.h" 3 4
extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
# 425 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 471 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 531 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 573 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);
# 622 "/usr/include/stdio.h" 3 4
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
          ;
# 638 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));
# 649 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;
# 689 "/usr/include/stdio.h" 3 4
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 726 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);
# 749 "/usr/include/stdio.h" 3 4
extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 798 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 818 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;
# 846 "/usr/include/stdio.h" 3 4
extern void perror (const char *__s);







# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 872 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 933 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __arg)
{
  return vfprintf (stdout, __fmt, __arg);
}



extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
 feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
 ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 934 "/usr/include/stdio.h" 2 3 4








}
# 44 "/opt/rocm/hip/include/hip/hip_runtime.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 61 "/usr/include/endian.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 97 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 235 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 236 "/usr/include/stdlib.h" 2 3 4



extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern __inline __attribute__ ((__gnu_inline__)) int
 atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
 atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}




__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
 atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}
# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 98 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 59 "/usr/include/time.h" 3 4
typedef __clock_t clock_t;
# 75 "/usr/include/time.h" 3 4
typedef __time_t time_t;
# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;






# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 200 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;






# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4








typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));


__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
 gnu_dev_major (unsigned long long int __dev) throw ()
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
 gnu_dev_minor (unsigned long long int __dev) throw ()
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned long long int
 gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw ()
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}

}
# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;






# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];


    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 315 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));
# 466 "/usr/include/stdlib.h" 3 4
extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;
# 480 "/usr/include/stdlib.h" 3 4
extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();




# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 535 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;





extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 629 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 651 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 673 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 683 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 693 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 705 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 716 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;






extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 760 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 811 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();
# 887 "/usr/include/stdlib.h" 3 4
extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 898 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
 atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}
# 955 "/usr/include/stdlib.h" 2 3 4
# 967 "/usr/include/stdlib.h" 3 4
}
# 45 "/opt/rocm/hip/include/hip/hip_runtime.h" 2
# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 46 "/opt/rocm/hip/include/hip/hip_runtime.h" 2


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/thread" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/thread" 3





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/chrono" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/chrono" 3





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ratio" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ratio" 3





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++config.h" 1 3
# 194 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 482 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++config.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/os_defines.h" 1 3
# 483 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++config.h" 2 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/cpu_defines.h" 1 3
# 486 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++config.h" 2 3
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 2 3



namespace std
{
  typedef unsigned short uint_least16_t;
  typedef unsigned int uint_least32_t;
}





namespace std __attribute__ ((__visibility__ ("default")))
{
# 68 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const { return value; }






    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;



  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public integral_constant<bool, !_Pp::value>
    { };






  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };
# 288 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };
# 316 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...)>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......)>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile &&>
    : public true_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args>
    struct __is_referenceable<_Res(_Args...)>
    : public true_type
    { };

  template<typename _Res, typename... _Args>
    struct __is_referenceable<_Res(_Args......)>
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };
# 688 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>::type
    { };




  template<typename>
    struct add_rvalue_reference;





  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>::type
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>::type
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;






  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>::type
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };
# 900 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  struct __do_is_static_castable_impl
  {
    template<typename _From, typename _To, typename
             = decltype(static_cast<_To>(declval<_From>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _From, typename _To>
    struct __is_static_castable_impl
    : public __do_is_static_castable_impl
    {
      typedef decltype(__test<_From, _To>(0)) type;
    };

  template<typename _From, typename _To>
    struct __is_static_castable_safe
    : public __is_static_castable_impl<_From, _To>::type
    { };


  template<typename _From, typename _To>
    struct __is_static_castable
    : public integral_constant<bool, (__is_static_castable_safe<
          _From, _To>::value)>
    { };






  struct __do_is_direct_constructible_impl
  {
    template<typename _Tp, typename _Arg, typename
      = decltype(::new _Tp(declval<_Arg>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_impl
    : public __do_is_direct_constructible_impl
    {
      typedef decltype(__test<_Tp, _Arg>(0)) type;
    };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new_safe
    : public __and_<is_destructible<_Tp>,
                    __is_direct_constructible_impl<_Tp, _Arg>>::type
    { };

  template<typename, typename>
    struct is_same;

  template<typename, typename>
    struct is_base_of;

  template<typename>
    struct remove_reference;

  template<typename _From, typename _To, bool
           = __not_<__or_<is_void<_From>,
                          is_function<_From>>>::value>
    struct __is_base_to_derived_ref;



  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<_From
        >::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<_To
        >::type>::type __dst_t;
      typedef __and_<__not_<is_same<__src_t, __dst_t>>,
       is_base_of<__src_t, __dst_t>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, false>
    : public false_type
    { };

  template<typename _From, typename _To, bool
           = __and_<is_lvalue_reference<_From>,
                    is_rvalue_reference<_To>>::value>
    struct __is_lvalue_to_rvalue_ref;



  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<
        _From>::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<
        _To>::type>::type __dst_t;
      typedef __and_<__not_<is_function<__src_t>>,
        __or_<is_same<__src_t, __dst_t>,
      is_base_of<__dst_t, __src_t>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, false>
    : public false_type
    { };







  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_ref_cast
    : public __and_<__is_static_castable<_Arg, _Tp>,
                    __not_<__or_<__is_base_to_derived_ref<_Arg, _Tp>,
                                 __is_lvalue_to_rvalue_ref<_Arg, _Tp>
                   >>>::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new
    : public conditional<is_reference<_Tp>::value,
    __is_direct_constructible_ref_cast<_Tp, _Arg>,
    __is_direct_constructible_new_safe<_Tp, _Arg>
    >::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible
    : public __is_direct_constructible_new<_Tp, _Arg>::type
    { };






  struct __do_is_nary_constructible_impl
  {
    template<typename _Tp, typename... _Args, typename
             = decltype(_Tp(declval<_Args>()...))>
      static true_type __test(int);

    template<typename, typename...>
      static false_type __test(...);
  };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible_impl
    : public __do_is_nary_constructible_impl
    {
      typedef decltype(__test<_Tp, _Args...>(0)) type;
    };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible
    : public __is_nary_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(sizeof...(_Args) > 1,
                    "Only useful for > 1 arguments");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __is_nary_constructible<_Tp, _Args...>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_constructible_impl<_Tp, _Arg>
    : public __is_direct_constructible<_Tp, _Arg>
    { };

  template<typename _Tp>
    struct __is_constructible_impl<_Tp>
    : public is_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public __is_constructible_impl<_Tp, _Args...>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>::type
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>::type
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    class __is_assignable_helper
    {
      template<typename _Tp1, typename _Up1,
        typename = decltype(declval<_Tp1>() = declval<_Up1>())>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __is_assignable_helper<_Tp, _Up>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __and_<is_constructible<_Tp, _Args...>, integral_constant<bool,
   __is_trivially_constructible(_Tp, _Args...)>>::type
    { };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>::type
    { };


  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __and_<is_copy_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>::type
    { };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __and_<is_move_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp, _Up)>>::type
    { };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __and_<is_copy_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, const _Tp&)>>::type
    { };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __and_<is_move_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, _Tp&&)>>::type
    { };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>::type
    { };


  template<typename _Tp>
    struct has_trivial_default_constructor
    : public integral_constant<bool, __has_trivial_constructor(_Tp)>
    { } __attribute__ ((__deprecated__));


  template<typename _Tp>
    struct has_trivial_copy_constructor
    : public integral_constant<bool, __has_trivial_copy(_Tp)>
    { } __attribute__ ((__deprecated__));


  template<typename _Tp>
    struct has_trivial_copy_assign
    : public integral_constant<bool, __has_trivial_assign(_Tp)>
    { } __attribute__ ((__deprecated__));


  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };





  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };
# 1574 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };
# 1631 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<wchar_t> : __make_unsigned<int>
    { };
# 1718 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      typedef conditional<__b2, unsigned int, unsigned long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };
# 1800 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<>
    struct __make_signed<char16_t> : __make_signed<uint_least16_t>
    { };
  template<>
    struct __make_signed<char32_t> : __make_signed<uint_least32_t>
    { };
# 1830 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {

      typedef signed char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(signed short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(signed int);
      typedef conditional<__b2, signed int, signed long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, signed short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;
# 1888 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };
# 1925 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };
# 1964 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 1984 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 2023 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };


  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }


  template<typename _Signature>
    class result_of;






  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __success_type<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      )> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __success_type<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      )> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __success_type<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      )> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __success_type<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      )> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type, _Arg>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type, _Arg, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __success_type<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      )> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
     _Functor, _ArgTypes...
      >::type
    { };
# 2407 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
  template<typename...> using __void_t = void;
# 2426 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/type_traits" 3
}
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ratio" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdint" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdint" 3
# 46 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdint" 3
namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ratio" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ratio" 3
  template<intmax_t _Pn>
    struct __static_sign
    : integral_constant<intmax_t, (_Pn < 0) ? -1 : 1>
    { };

  template<intmax_t _Pn>
    struct __static_abs
    : integral_constant<intmax_t, _Pn * __static_sign<_Pn>::value>
    { };

  template<intmax_t _Pn, intmax_t _Qn>
    struct __static_gcd
    : __static_gcd<_Qn, (_Pn % _Qn)>
    { };

  template<intmax_t _Pn>
    struct __static_gcd<_Pn, 0>
    : integral_constant<intmax_t, __static_abs<_Pn>::value>
    { };

  template<intmax_t _Qn>
    struct __static_gcd<0, _Qn>
    : integral_constant<intmax_t, __static_abs<_Qn>::value>
    { };







  template<intmax_t _Pn, intmax_t _Qn>
    struct __safe_multiply
    {
    private:
      static const uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);

      static const uintmax_t __a0 = __static_abs<_Pn>::value % __c;
      static const uintmax_t __a1 = __static_abs<_Pn>::value / __c;
      static const uintmax_t __b0 = __static_abs<_Qn>::value % __c;
      static const uintmax_t __b1 = __static_abs<_Qn>::value / __c;

      static_assert(__a1 == 0 || __b1 == 0,
      "overflow in multiplication");
      static_assert(__a0 * __b1 + __b0 * __a1 < (__c >> 1),
      "overflow in multiplication");
      static_assert(__b0 * __a0 <= 9223372036854775807L,
      "overflow in multiplication");
      static_assert((__a0 * __b1 + __b0 * __a1) * __c
      <= 9223372036854775807L - __b0 * __a0,
      "overflow in multiplication");

    public:
      static const intmax_t value = _Pn * _Qn;
    };



  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_less
    : integral_constant<bool, (__hi1 < __hi2
          || (__hi1 == __hi2 && __lo1 < __lo2))>
    { };

  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_add
    {
      static constexpr uintmax_t __lo = __lo1 + __lo2;
      static constexpr uintmax_t __hi = (__hi1 + __hi2 +
      (__lo1 + __lo2 < __lo1));
    };


  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_sub
    {
      static_assert(!__big_less<__hi1, __lo1, __hi2, __lo2>::value,
      "Internal library error");
      static constexpr uintmax_t __lo = __lo1 - __lo2;
      static constexpr uintmax_t __hi = (__hi1 - __hi2 -
      (__lo1 < __lo2));
    };


  template<uintmax_t __x, uintmax_t __y>
    struct __big_mul
    {
    private:
      static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);
      static constexpr uintmax_t __x0 = __x % __c;
      static constexpr uintmax_t __x1 = __x / __c;
      static constexpr uintmax_t __y0 = __y % __c;
      static constexpr uintmax_t __y1 = __y / __c;
      static constexpr uintmax_t __x0y0 = __x0 * __y0;
      static constexpr uintmax_t __x0y1 = __x0 * __y1;
      static constexpr uintmax_t __x1y0 = __x1 * __y0;
      static constexpr uintmax_t __x1y1 = __x1 * __y1;
      static constexpr uintmax_t __mix = __x0y1 + __x1y0;
      static constexpr uintmax_t __mix_lo = __mix * __c;
      static constexpr uintmax_t __mix_hi
      = __mix / __c + ((__mix < __x0y1) ? __c : 0);
      typedef __big_add<__mix_hi, __mix_lo, __x1y1, __x0y0> _Res;
    public:
      static constexpr uintmax_t __hi = _Res::__hi;
      static constexpr uintmax_t __lo = _Res::__lo;
    };



  template<uintmax_t __n1, uintmax_t __n0, uintmax_t __d>
    struct __big_div_impl
    {
    private:
      static_assert(__d >= (uintmax_t(1) << (sizeof(intmax_t) * 8 - 1)),
      "Internal library error");
      static_assert(__n1 < __d, "Internal library error");
      static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);
      static constexpr uintmax_t __d1 = __d / __c;
      static constexpr uintmax_t __d0 = __d % __c;

      static constexpr uintmax_t __q1x = __n1 / __d1;
      static constexpr uintmax_t __r1x = __n1 % __d1;
      static constexpr uintmax_t __m = __q1x * __d0;
      static constexpr uintmax_t __r1y = __r1x * __c + __n0 / __c;
      static constexpr uintmax_t __r1z = __r1y + __d;
      static constexpr uintmax_t __r1
      = ((__r1y < __m) ? ((__r1z >= __d) && (__r1z < __m))
  ? (__r1z + __d) : __r1z : __r1y) - __m;
      static constexpr uintmax_t __q1
      = __q1x - ((__r1y < __m)
   ? ((__r1z >= __d) && (__r1z < __m)) ? 2 : 1 : 0);
      static constexpr uintmax_t __q0x = __r1 / __d1;
      static constexpr uintmax_t __r0x = __r1 % __d1;
      static constexpr uintmax_t __n = __q0x * __d0;
      static constexpr uintmax_t __r0y = __r0x * __c + __n0 % __c;
      static constexpr uintmax_t __r0z = __r0y + __d;
      static constexpr uintmax_t __r0
      = ((__r0y < __n) ? ((__r0z >= __d) && (__r0z < __n))
  ? (__r0z + __d) : __r0z : __r0y) - __n;
      static constexpr uintmax_t __q0
      = __q0x - ((__r0y < __n) ? ((__r0z >= __d)
      && (__r0z < __n)) ? 2 : 1 : 0);

    public:
      static constexpr uintmax_t __quot = __q1 * __c + __q0;
      static constexpr uintmax_t __rem = __r0;

    private:
      typedef __big_mul<__quot, __d> _Prod;
      typedef __big_add<_Prod::__hi, _Prod::__lo, 0, __rem> _Sum;
      static_assert(_Sum::__hi == __n1 && _Sum::__lo == __n0,
      "Internal library error");
  };

  template<uintmax_t __n1, uintmax_t __n0, uintmax_t __d>
    struct __big_div
    {
    private:
      static_assert(__d != 0, "Internal library error");
      static_assert(sizeof (uintmax_t) == sizeof (unsigned long long),
      "This library calls __builtin_clzll on uintmax_t, which "
      "is unsafe on your platform. Please complain to "
      "http://gcc.gnu.org/bugzilla/");
      static constexpr int __shift = __builtin_clzll(__d);
      static constexpr int __coshift_ = sizeof(uintmax_t) * 8 - __shift;
      static constexpr int __coshift = (__shift != 0) ? __coshift_ : 0;
      static constexpr uintmax_t __c1 = uintmax_t(1) << __shift;
      static constexpr uintmax_t __c2 = uintmax_t(1) << __coshift;
      static constexpr uintmax_t __new_d = __d * __c1;
      static constexpr uintmax_t __new_n0 = __n0 * __c1;
      static constexpr uintmax_t __n1_shifted = (__n1 % __d) * __c1;
      static constexpr uintmax_t __n0_top = (__shift != 0) ? (__n0 / __c2) : 0;
      static constexpr uintmax_t __new_n1 = __n1_shifted + __n0_top;
      typedef __big_div_impl<__new_n1, __new_n0, __new_d> _Res;

    public:
      static constexpr uintmax_t __quot_hi = __n1 / __d;
      static constexpr uintmax_t __quot_lo = _Res::__quot;
      static constexpr uintmax_t __rem = _Res::__rem / __c1;

    private:
      typedef __big_mul<__quot_lo, __d> _P0;
      typedef __big_mul<__quot_hi, __d> _P1;
      typedef __big_add<_P0::__hi, _P0::__lo, _P1::__lo, __rem> _Sum;

      static_assert(_P1::__hi == 0, "Internal library error");
      static_assert(_Sum::__hi >= _P0::__hi, "Internal library error");

      static_assert(_Sum::__hi == __n1 && _Sum::__lo == __n0,
      "Internal library error");
      static_assert(__rem < __d, "Internal library error");
    };
# 262 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ratio" 3
  template<intmax_t _Num, intmax_t _Den = 1>
    struct ratio
    {
      static_assert(_Den != 0, "denominator cannot be zero");
      static_assert(_Num >= -9223372036854775807L && _Den >= -9223372036854775807L,
      "out of range");


      static constexpr intmax_t num =
        _Num * __static_sign<_Den>::value / __static_gcd<_Num, _Den>::value;

      static constexpr intmax_t den =
        __static_abs<_Den>::value / __static_gcd<_Num, _Den>::value;

      typedef ratio<num, den> type;
    };

  template<intmax_t _Num, intmax_t _Den>
    constexpr intmax_t ratio<_Num, _Den>::num;

  template<intmax_t _Num, intmax_t _Den>
    constexpr intmax_t ratio<_Num, _Den>::den;

  template<typename _R1, typename _R2>
    struct __ratio_multiply
    {
    private:
      static const intmax_t __gcd1 =
        __static_gcd<_R1::num, _R2::den>::value;
      static const intmax_t __gcd2 =
        __static_gcd<_R2::num, _R1::den>::value;

    public:
      typedef ratio<
        __safe_multiply<(_R1::num / __gcd1),
                        (_R2::num / __gcd2)>::value,
        __safe_multiply<(_R1::den / __gcd2),
                        (_R2::den / __gcd1)>::value> type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_multiply<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_multiply<_R1, _R2>::den;


  template<typename _R1, typename _R2>
    using ratio_multiply = typename __ratio_multiply<_R1, _R2>::type;

  template<typename _R1, typename _R2>
    struct __ratio_divide
    {
      static_assert(_R2::num != 0, "division by 0");

      typedef typename __ratio_multiply<
        _R1,
        ratio<_R2::den, _R2::num>>::type type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_divide<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_divide<_R1, _R2>::den;


  template<typename _R1, typename _R2>
    using ratio_divide = typename __ratio_divide<_R1, _R2>::type;


  template<typename _R1, typename _R2>
    struct ratio_equal
    : integral_constant<bool, _R1::num == _R2::num && _R1::den == _R2::den>
    { };


  template<typename _R1, typename _R2>
    struct ratio_not_equal
    : integral_constant<bool, !ratio_equal<_R1, _R2>::value>
    { };


  template<typename _R1, typename _R2,
           typename _Left = __big_mul<_R1::num,_R2::den>,
           typename _Right = __big_mul<_R2::num,_R1::den> >
    struct __ratio_less_impl_1
    : integral_constant<bool, __big_less<_Left::__hi, _Left::__lo,
           _Right::__hi, _Right::__lo>::value>
    { };

  template<typename _R1, typename _R2,
    bool = (_R1::num == 0 || _R2::num == 0
     || (__static_sign<_R1::num>::value
         != __static_sign<_R2::num>::value)),
    bool = (__static_sign<_R1::num>::value == -1
     && __static_sign<_R2::num>::value == -1)>
    struct __ratio_less_impl
    : __ratio_less_impl_1<_R1, _R2>::type
    { };

  template<typename _R1, typename _R2>
    struct __ratio_less_impl<_R1, _R2, true, false>
    : integral_constant<bool, _R1::num < _R2::num>
    { };

  template<typename _R1, typename _R2>
    struct __ratio_less_impl<_R1, _R2, false, true>
    : __ratio_less_impl_1<ratio<-_R2::num, _R2::den>,
           ratio<-_R1::num, _R1::den> >::type
    { };


  template<typename _R1, typename _R2>
    struct ratio_less
    : __ratio_less_impl<_R1, _R2>::type
    { };


  template<typename _R1, typename _R2>
    struct ratio_less_equal
    : integral_constant<bool, !ratio_less<_R2, _R1>::value>
    { };


  template<typename _R1, typename _R2>
    struct ratio_greater
    : integral_constant<bool, ratio_less<_R2, _R1>::value>
    { };


  template<typename _R1, typename _R2>
    struct ratio_greater_equal
    : integral_constant<bool, !ratio_less<_R1, _R2>::value>
    { };

  template<typename _R1, typename _R2,
      bool = (_R1::num >= 0),
      bool = (_R2::num >= 0),
      bool = ratio_less<ratio<__static_abs<_R1::num>::value, _R1::den>,
        ratio<__static_abs<_R2::num>::value, _R2::den> >::value>
    struct __ratio_add_impl
    {
    private:
      typedef typename __ratio_add_impl<
        ratio<-_R1::num, _R1::den>,
        ratio<-_R2::num, _R2::den> >::type __t;
    public:
      typedef ratio<-__t::num, __t::den> type;
    };


  template<typename _R1, typename _R2, bool __b>
    struct __ratio_add_impl<_R1, _R2, true, true, __b>
    {
    private:
      static constexpr uintmax_t __g = __static_gcd<_R1::den, _R2::den>::value;
      static constexpr uintmax_t __d2 = _R2::den / __g;
      typedef __big_mul<_R1::den, __d2> __d;
      typedef __big_mul<_R1::num, _R2::den / __g> __x;
      typedef __big_mul<_R2::num, _R1::den / __g> __y;
      typedef __big_add<__x::__hi, __x::__lo, __y::__hi, __y::__lo> __n;
      static_assert(__n::__hi >= __x::__hi, "Internal library error");
      typedef __big_div<__n::__hi, __n::__lo, __g> __ng;
      static constexpr uintmax_t __g2 = __static_gcd<__ng::__rem, __g>::value;
      typedef __big_div<__n::__hi, __n::__lo, __g2> __n_final;
      static_assert(__n_final::__rem == 0, "Internal library error");
      static_assert(__n_final::__quot_hi == 0 &&
        __n_final::__quot_lo <= 9223372036854775807L, "overflow in addition");
      typedef __big_mul<_R1::den / __g2, __d2> __d_final;
      static_assert(__d_final::__hi == 0 &&
        __d_final::__lo <= 9223372036854775807L, "overflow in addition");
    public:
      typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;
    };

  template<typename _R1, typename _R2>
    struct __ratio_add_impl<_R1, _R2, false, true, true>
    : __ratio_add_impl<_R2, _R1>
    { };


  template<typename _R1, typename _R2>
    struct __ratio_add_impl<_R1, _R2, true, false, false>
    {
    private:
      static constexpr uintmax_t __g = __static_gcd<_R1::den, _R2::den>::value;
      static constexpr uintmax_t __d2 = _R2::den / __g;
      typedef __big_mul<_R1::den, __d2> __d;
      typedef __big_mul<_R1::num, _R2::den / __g> __x;
      typedef __big_mul<-_R2::num, _R1::den / __g> __y;
      typedef __big_sub<__x::__hi, __x::__lo, __y::__hi, __y::__lo> __n;
      typedef __big_div<__n::__hi, __n::__lo, __g> __ng;
      static constexpr uintmax_t __g2 = __static_gcd<__ng::__rem, __g>::value;
      typedef __big_div<__n::__hi, __n::__lo, __g2> __n_final;
      static_assert(__n_final::__rem == 0, "Internal library error");
      static_assert(__n_final::__quot_hi == 0 &&
        __n_final::__quot_lo <= 9223372036854775807L, "overflow in addition");
      typedef __big_mul<_R1::den / __g2, __d2> __d_final;
      static_assert(__d_final::__hi == 0 &&
        __d_final::__lo <= 9223372036854775807L, "overflow in addition");
    public:
      typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;
    };

  template<typename _R1, typename _R2>
    struct __ratio_add
    {
      typedef typename __ratio_add_impl<_R1, _R2>::type type;
      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_add<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_add<_R1, _R2>::den;


  template<typename _R1, typename _R2>
    using ratio_add = typename __ratio_add<_R1, _R2>::type;

  template<typename _R1, typename _R2>
    struct __ratio_subtract
    {
      typedef typename __ratio_add<
        _R1,
        ratio<-_R2::num, _R2::den>>::type type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_subtract<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_subtract<_R1, _R2>::den;


  template<typename _R1, typename _R2>
    using ratio_subtract = typename __ratio_subtract<_R1, _R2>::type;


  typedef ratio<1, 1000000000000000000> atto;
  typedef ratio<1, 1000000000000000> femto;
  typedef ratio<1, 1000000000000> pico;
  typedef ratio<1, 1000000000> nano;
  typedef ratio<1, 1000000> micro;
  typedef ratio<1, 1000> milli;
  typedef ratio<1, 100> centi;
  typedef ratio<1, 10> deci;
  typedef ratio< 10, 1> deca;
  typedef ratio< 100, 1> hecto;
  typedef ratio< 1000, 1> kilo;
  typedef ratio< 1000000, 1> mega;
  typedef ratio< 1000000000, 1> giga;
  typedef ratio< 1000000000000, 1> tera;
  typedef ratio< 1000000000000000, 1> peta;
  typedef ratio< 1000000000000000000, 1> exa;



}
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/chrono" 2 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 1 3
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
# 158 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 202 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;


    static constexpr bool is_integer = false;




    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;
# 288 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 314 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() noexcept { return _Tp(); }


      static constexpr _Tp
      max() noexcept { return _Tp(); }




      static constexpr _Tp
      lowest() noexcept { return _Tp(); }




      static constexpr _Tp
      epsilon() noexcept { return _Tp(); }


      static constexpr _Tp
      round_error() noexcept { return _Tp(); }


      static constexpr _Tp
      infinity() noexcept { return _Tp(); }



      static constexpr _Tp
      quiet_NaN() noexcept { return _Tp(); }



      static constexpr _Tp
      signaling_NaN() noexcept { return _Tp(); }




      static constexpr _Tp
      denorm_min() noexcept { return _Tp(); }
    };


  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };






  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() noexcept { return false; }

      static constexpr bool
      max() noexcept { return true; }


      static constexpr bool
      lowest() noexcept { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() noexcept { return false; }

      static constexpr bool
      round_error() noexcept { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() noexcept { return false; }

      static constexpr bool
      quiet_NaN() noexcept { return false; }

      static constexpr bool
      signaling_NaN() noexcept { return false; }

      static constexpr bool
      denorm_min() noexcept { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() noexcept { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static constexpr char
      max() noexcept { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() noexcept { return 0; }

      static constexpr char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() noexcept { return char(); }

      static constexpr char
      quiet_NaN() noexcept { return char(); }

      static constexpr char
      signaling_NaN() noexcept { return char(); }

      static constexpr char
      denorm_min() noexcept { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() noexcept { return -127 - 1; }

      static constexpr signed char
      max() noexcept { return 127; }


      static constexpr signed char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() noexcept { return 0; }

      static constexpr signed char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() noexcept
      { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() noexcept
      { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() noexcept { return 0; }

      static constexpr unsigned char
      max() noexcept { return 127 * 2U + 1; }


      static constexpr unsigned char
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() noexcept { return 0; }

      static constexpr unsigned char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() noexcept { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static constexpr wchar_t
      max() noexcept { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() noexcept { return 0; }

      static constexpr wchar_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() noexcept { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() noexcept { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() noexcept { return (((char16_t)(-1) < 0) ? -(((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0) - 1 : (char16_t)0); }

      static constexpr char16_t
      max() noexcept { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }

      static constexpr char16_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() noexcept { return 0; }

      static constexpr char16_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() noexcept { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      denorm_min() noexcept { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() noexcept { return (((char32_t)(-1) < 0) ? -(((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0) - 1 : (char32_t)0); }

      static constexpr char32_t
      max() noexcept { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }

      static constexpr char32_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() noexcept { return 0; }

      static constexpr char32_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() noexcept { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      denorm_min() noexcept { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() noexcept { return -32767 - 1; }

      static constexpr short
      max() noexcept { return 32767; }


      static constexpr short
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() noexcept { return 0; }

      static constexpr short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() noexcept { return short(); }

      static constexpr short
      quiet_NaN() noexcept { return short(); }

      static constexpr short
      signaling_NaN() noexcept { return short(); }

      static constexpr short
      denorm_min() noexcept { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() noexcept { return 0; }

      static constexpr unsigned short
      max() noexcept { return 32767 * 2U + 1; }


      static constexpr unsigned short
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() noexcept { return 0; }

      static constexpr unsigned short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() noexcept { return -2147483647 - 1; }

      static constexpr int
      max() noexcept { return 2147483647; }


      static constexpr int
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() noexcept { return 0; }

      static constexpr int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() noexcept { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      denorm_min() noexcept { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() noexcept { return 0; }

      static constexpr unsigned int
      max() noexcept { return 2147483647 * 2U + 1; }


      static constexpr unsigned int
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() noexcept { return 0; }

      static constexpr unsigned int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() noexcept { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() noexcept { return -9223372036854775807L - 1; }

      static constexpr long
      max() noexcept { return 9223372036854775807L; }


      static constexpr long
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() noexcept { return 0; }

      static constexpr long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() noexcept { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      denorm_min() noexcept { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() noexcept { return 0; }

      static constexpr unsigned long
      max() noexcept { return 9223372036854775807L * 2UL + 1; }


      static constexpr unsigned long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() noexcept { return -9223372036854775807LL - 1; }

      static constexpr long long
      max() noexcept { return 9223372036854775807LL; }


      static constexpr long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() noexcept { return 0; }

      static constexpr long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() noexcept
      { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() noexcept { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() noexcept { return 0; }

      static constexpr unsigned long long
      max() noexcept { return 9223372036854775807LL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 1592 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/limits" 3
  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() noexcept { return 1.17549435e-38F; }

      static constexpr float
      max() noexcept { return 3.40282347e+38F; }


      static constexpr float
      lowest() noexcept { return -3.40282347e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() noexcept { return 1.19209290e-7F; }

      static constexpr float
      round_error() noexcept { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() noexcept { return __builtin_huge_valf(); }

      static constexpr float
      quiet_NaN() noexcept { return __builtin_nanf(""); }

      static constexpr float
      signaling_NaN() noexcept { return __builtin_nansf(""); }

      static constexpr float
      denorm_min() noexcept { return 1.40129846e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() noexcept { return 2.2250738585072014e-308; }

      static constexpr double
      max() noexcept { return 1.7976931348623157e+308; }


      static constexpr double
      lowest() noexcept { return -1.7976931348623157e+308; }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() noexcept { return 2.2204460492503131e-16; }

      static constexpr double
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() noexcept { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() noexcept { return __builtin_nan(""); }

      static constexpr double
      signaling_NaN() noexcept { return __builtin_nans(""); }

      static constexpr double
      denorm_min() noexcept { return 4.9406564584124654e-324; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() noexcept { return 3.36210314311209350626e-4932L; }

      static constexpr long double
      max() noexcept { return 1.18973149535723176502e+4932L; }


      static constexpr long double
      lowest() noexcept { return -1.18973149535723176502e+4932L; }


      static constexpr int digits = 64;
      static constexpr int digits10 = 18;

      static constexpr int max_digits10
  = (2 + (64) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() noexcept { return 1.08420217248550443401e-19L; }

      static constexpr long double
      round_error() noexcept { return 0.5L; }

      static constexpr int min_exponent = (-16381);
      static constexpr int min_exponent10 = (-4931);
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() noexcept { return __builtin_huge_vall(); }

      static constexpr long double
      quiet_NaN() noexcept { return __builtin_nanl(""); }

      static constexpr long double
      signaling_NaN() noexcept { return __builtin_nansl(""); }

      static constexpr long double
      denorm_min() noexcept { return 3.64519953188247460253e-4951L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };






}
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/chrono" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ctime" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ctime" 3


# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
extern "C" {








# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 88 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 89 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 42 "/usr/include/time.h" 2 3 4
# 133 "/usr/include/time.h" 3 4
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 161 "/usr/include/time.h" 3 4
struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 189 "/usr/include/time.h" 3 4
extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();





extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) throw ();
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 403 "/usr/include/time.h" 3 4
extern int getdate_err;
# 412 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 426 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 43 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ctime" 2 3
# 58 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ctime" 3
namespace std
{
  using ::clock_t;
  using ::time_t;
  using ::tm;

  using ::clock;
  using ::difftime;
  using ::mktime;
  using ::time;
  using ::asctime;
  using ::ctime;
  using ::gmtime;
  using ::localtime;
  using ::strftime;
}
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/chrono" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/parse_numbers.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/parse_numbers.h" 3
# 43 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/chrono" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/chrono" 3
  namespace chrono
  {


    template<typename _Rep, typename _Period = ratio<1>>
      struct duration;

    template<typename _Clock, typename _Dur = typename _Clock::duration>
      struct time_point;


  }





  template<typename _CT, typename _Period1, typename _Period2>
    struct __duration_common_type_wrapper
    {
    private:
      typedef __static_gcd<_Period1::num, _Period2::num> __gcd_num;
      typedef __static_gcd<_Period1::den, _Period2::den> __gcd_den;
      typedef typename _CT::type __cr;
      typedef ratio<__gcd_num::value,
        (_Period1::den / __gcd_den::value) * _Period2::den> __r;
    public:
      typedef __success_type<chrono::duration<__cr, __r>> type;
    };

  template<typename _Period1, typename _Period2>
    struct __duration_common_type_wrapper<__failure_type, _Period1, _Period2>
    { typedef __failure_type type; };

  template<typename _Rep1, typename _Period1, typename _Rep2, typename _Period2>
    struct common_type<chrono::duration<_Rep1, _Period1>,
             chrono::duration<_Rep2, _Period2>>
    : public __duration_common_type_wrapper<typename __member_type_wrapper<
             common_type<_Rep1, _Rep2>>::type, _Period1, _Period2>::type
    { };



  template<typename _CT, typename _Clock>
    struct __timepoint_common_type_wrapper
    {
      typedef __success_type<chrono::time_point<_Clock, typename _CT::type>>
        type;
    };

  template<typename _Clock>
    struct __timepoint_common_type_wrapper<__failure_type, _Clock>
    { typedef __failure_type type; };

  template<typename _Clock, typename _Duration1, typename _Duration2>
    struct common_type<chrono::time_point<_Clock, _Duration1>,
             chrono::time_point<_Clock, _Duration2>>
    : public __timepoint_common_type_wrapper<typename __member_type_wrapper<
             common_type<_Duration1, _Duration2>>::type, _Clock>::type
    { };



  namespace chrono
  {



    template<typename _ToDur, typename _CF, typename _CR,
      bool _NumIsOne = false, bool _DenIsOne = false>
      struct __duration_cast_impl
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(static_cast<_CR>(__d.count())
       * static_cast<_CR>(_CF::num)
       / static_cast<_CR>(_CF::den)));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, true, true>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(__d.count()));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, true, false>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(
       static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, false, true>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(
       static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
   }
      };

    template<typename _Tp>
      struct __is_duration
      : std::false_type
      { };

    template<typename _Rep, typename _Period>
      struct __is_duration<duration<_Rep, _Period>>
      : std::true_type
      { };


    template<typename _ToDur, typename _Rep, typename _Period>
      constexpr typename enable_if<__is_duration<_ToDur>::value,
       _ToDur>::type
      duration_cast(const duration<_Rep, _Period>& __d)
      {
 typedef typename _ToDur::period __to_period;
 typedef typename _ToDur::rep __to_rep;
 typedef ratio_divide<_Period, __to_period> __cf;
 typedef typename common_type<__to_rep, _Rep, intmax_t>::type
          __cr;
 typedef __duration_cast_impl<_ToDur, __cf, __cr,
          __cf::num == 1, __cf::den == 1> __dc;
 return __dc::__cast(__d);
      }


    template<typename _Rep>
      struct treat_as_floating_point
      : is_floating_point<_Rep>
      { };


    template<typename _Rep>
      struct duration_values
      {
 static constexpr _Rep
 zero()
 { return _Rep(0); }

 static constexpr _Rep
 max()
 { return numeric_limits<_Rep>::max(); }

 static constexpr _Rep
 min()
 { return numeric_limits<_Rep>::lowest(); }
      };

    template<typename _Tp>
      struct __is_ratio
      : std::false_type
      { };

    template<intmax_t _Num, intmax_t _Den>
      struct __is_ratio<ratio<_Num, _Den>>
      : std::true_type
      { };


    template<typename _Rep, typename _Period>
      struct duration
      {
 typedef _Rep rep;
 typedef _Period period;

 static_assert(!__is_duration<_Rep>::value, "rep cannot be a duration");
 static_assert(__is_ratio<_Period>::value,
        "period must be a specialization of ratio");
 static_assert(_Period::num > 0, "period must be positive");


 constexpr duration() = default;




 duration(const duration&) = default;

 template<typename _Rep2, typename = typename
        enable_if<is_convertible<_Rep2, rep>::value
    && (treat_as_floating_point<rep>::value
        || !treat_as_floating_point<_Rep2>::value)>::type>
   constexpr explicit duration(const _Rep2& __rep)
   : __r(static_cast<rep>(__rep)) { }

 template<typename _Rep2, typename _Period2, typename = typename
        enable_if<treat_as_floating_point<rep>::value
    || (ratio_divide<_Period2, period>::den == 1
        && !treat_as_floating_point<_Rep2>::value)>::type>
   constexpr duration(const duration<_Rep2, _Period2>& __d)
   : __r(duration_cast<duration>(__d).count()) { }

 ~duration() = default;
 duration& operator=(const duration&) = default;


 constexpr rep
 count() const
 { return __r; }


 constexpr duration
 operator+() const
 { return *this; }

 constexpr duration
 operator-() const
 { return duration(-__r); }

 duration&
 operator++()
 {
   ++__r;
   return *this;
 }

 duration
 operator++(int)
 { return duration(__r++); }

 duration&
 operator--()
 {
   --__r;
   return *this;
 }

 duration
 operator--(int)
 { return duration(__r--); }

 duration&
 operator+=(const duration& __d)
 {
   __r += __d.count();
   return *this;
 }

 duration&
 operator-=(const duration& __d)
 {
   __r -= __d.count();
   return *this;
 }

 duration&
 operator*=(const rep& __rhs)
 {
   __r *= __rhs;
   return *this;
 }

 duration&
 operator/=(const rep& __rhs)
 {
   __r /= __rhs;
   return *this;
 }


 template<typename _Rep2 = rep>
   typename enable_if<!treat_as_floating_point<_Rep2>::value,
        duration&>::type
   operator%=(const rep& __rhs)
   {
     __r %= __rhs;
     return *this;
   }

 template<typename _Rep2 = rep>
   typename enable_if<!treat_as_floating_point<_Rep2>::value,
        duration&>::type
   operator%=(const duration& __d)
   {
     __r %= __d.count();
     return *this;
   }


 static constexpr duration
 zero()
 { return duration(duration_values<rep>::zero()); }

 static constexpr duration
 min()
 { return duration(duration_values<rep>::min()); }

 static constexpr duration
 max()
 { return duration(duration_values<rep>::max()); }

      private:
 rep __r;
      };

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator+(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() + __cd(__rhs).count());
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator-(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() - __cd(__rhs).count());
      }

    template<typename _Rep1, typename _Rep2, bool =
      is_convertible<_Rep2,
       typename common_type<_Rep1, _Rep2>::type>::value>
      struct __common_rep_type { };

    template<typename _Rep1, typename _Rep2>
      struct __common_rep_type<_Rep1, _Rep2, true>
      { typedef typename common_type<_Rep1, _Rep2>::type type; };

    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr
      duration<typename __common_rep_type<_Rep1, _Rep2>::type, _Period>
      operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() * __s);
      }

    template<typename _Rep1, typename _Rep2, typename _Period>
      constexpr
      duration<typename __common_rep_type<_Rep2, _Rep1>::type, _Period>
      operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)
      { return __d * __s; }

    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr duration<typename __common_rep_type<_Rep1, typename
 enable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>
      operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() / __s);
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<_Rep1, _Rep2>::type
      operator/(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__lhs).count() / __cd(__rhs).count();
      }


    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr duration<typename __common_rep_type<_Rep1, typename
 enable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>
      operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() % __s);
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator%(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() % __cd(__rhs).count());
      }


    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator==(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __ct;
 return __ct(__lhs).count() == __ct(__rhs).count();
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __ct;
 return __ct(__lhs).count() < __ct(__rhs).count();
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator!=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__lhs == __rhs); }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator<=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__rhs < __lhs); }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator>(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      { return __rhs < __lhs; }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator>=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__lhs < __rhs); }


    typedef duration<int64_t, nano> nanoseconds;


    typedef duration<int64_t, micro> microseconds;


    typedef duration<int64_t, milli> milliseconds;


    typedef duration<int64_t> seconds;


    typedef duration<int64_t, ratio< 60>> minutes;


    typedef duration<int64_t, ratio<3600>> hours;


    template<typename _Clock, typename _Dur>
      struct time_point
      {
 typedef _Clock clock;
 typedef _Dur duration;
 typedef typename duration::rep rep;
 typedef typename duration::period period;

 constexpr time_point() : __d(duration::zero())
 { }

 constexpr explicit time_point(const duration& __dur)
 : __d(__dur)
 { }


 template<typename _Dur2>
   constexpr time_point(const time_point<clock, _Dur2>& __t)
   : __d(__t.time_since_epoch())
   { }


 constexpr duration
 time_since_epoch() const
 { return __d; }


 time_point&
 operator+=(const duration& __dur)
 {
   __d += __dur;
   return *this;
 }

 time_point&
 operator-=(const duration& __dur)
 {
   __d -= __dur;
   return *this;
 }


 static constexpr time_point
 min()
 { return time_point(duration::min()); }

 static constexpr time_point
 max()
 { return time_point(duration::max()); }

      private:
 duration __d;
      };


    template<typename _ToDur, typename _Clock, typename _Dur>
      constexpr typename enable_if<__is_duration<_ToDur>::value,
       time_point<_Clock, _ToDur>>::type
      time_point_cast(const time_point<_Clock, _Dur>& __t)
      {
 typedef time_point<_Clock, _ToDur> __time_point;
 return __time_point(duration_cast<_ToDur>(__t.time_since_epoch()));
      }

    template<typename _Clock, typename _Dur1,
      typename _Rep2, typename _Period2>
      constexpr time_point<_Clock,
 typename common_type<_Dur1, duration<_Rep2, _Period2>>::type>
      operator+(const time_point<_Clock, _Dur1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<_Dur1,__dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__lhs.time_since_epoch() + __rhs);
      }

    template<typename _Rep1, typename _Period1,
      typename _Clock, typename _Dur2>
      constexpr time_point<_Clock,
 typename common_type<duration<_Rep1, _Period1>, _Dur2>::type>
      operator+(const duration<_Rep1, _Period1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef typename common_type<__dur1,_Dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__rhs.time_since_epoch() + __lhs);
      }

    template<typename _Clock, typename _Dur1,
      typename _Rep2, typename _Period2>
      constexpr time_point<_Clock,
 typename common_type<_Dur1, duration<_Rep2, _Period2>>::type>
      operator-(const time_point<_Clock, _Dur1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<_Dur1,__dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__lhs.time_since_epoch() -__rhs);
      }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr typename common_type<_Dur1, _Dur2>::type
      operator-(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator==(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() == __rhs.time_since_epoch(); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator!=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__lhs == __rhs); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator<(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() < __rhs.time_since_epoch(); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator<=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__rhs < __lhs); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator>(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __rhs < __lhs; }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator>=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__lhs < __rhs); }
# 709 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/chrono" 3
    inline namespace _V2 {






    struct system_clock
    {
      typedef chrono::nanoseconds duration;
      typedef duration::rep rep;
      typedef duration::period period;
      typedef chrono::time_point<system_clock, duration> time_point;

      static_assert(system_clock::duration::min()
      < system_clock::duration::zero(),
      "a clock's minimum duration cannot be less than its epoch");

      static constexpr bool is_steady = false;

      static time_point
      now() noexcept;


      static std::time_t
      to_time_t(const time_point& __t) noexcept
      {
 return std::time_t(duration_cast<chrono::seconds>
      (__t.time_since_epoch()).count());
      }

      static time_point
      from_time_t(std::time_t __t) noexcept
      {
 typedef chrono::time_point<system_clock, seconds> __from;
 return time_point_cast<system_clock::duration>
        (__from(chrono::seconds(__t)));
      }
    };







    struct steady_clock
    {
      typedef chrono::nanoseconds duration;
      typedef duration::rep rep;
      typedef duration::period period;
      typedef chrono::time_point<steady_clock, duration> time_point;

      static constexpr bool is_steady = true;

      static time_point
      now() noexcept;
    };
# 776 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/chrono" 3
    using high_resolution_clock = system_clock;

    }


  }
# 881 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/chrono" 3
}
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/thread" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 1 3
# 47 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_function.h" 1 3
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 104 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 166 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {

      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {

      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {

      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {

      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {

      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {

      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 351 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {

      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {

      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {

      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {

      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {

      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {

      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 524 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {

      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {

      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {

      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };
# 617 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_function.h" 3
  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {

      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {

      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {

      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {

      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };
# 741 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:

      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }


      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>

    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:

      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }


      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>

    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 818 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 938 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/binders.h" 1 3
# 60 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std __attribute__ ((__visibility__ ("default")))
{
# 107 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1129 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_function.h" 2 3
# 50 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 2 3



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/typeinfo" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/typeinfo" 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 3

#pragma GCC visibility push(default)



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_lockfree_defines.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_lockfree_defines.h" 3
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 2 3

extern "C++" {

namespace std
{
# 60 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;



    virtual const char* what() const noexcept;
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char* what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 127 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 3
  bool uncaught_exception() noexcept __attribute__ ((__pure__));


}

namespace __gnu_cxx
{
# 152 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/exception_ptr.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/exception_defines.h" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/exception_ptr.h" 2 3





extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {




    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 111 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 138 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

  }



  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {

      try
 {
   throw __ex;
 }
      catch(...)
 {
   return current_exception();
 }



    }





  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept __attribute__ ((__deprecated__));

  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept
    { return std::make_exception_ptr<_Ex>(__ex); }


}

}

#pragma GCC visibility pop
# 163 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/nested_exception.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/nested_exception.h" 3
#pragma GCC visibility push(default)
# 45 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };

  template<typename _Tp,
    bool __with_nested = !__is_base_of(nested_exception, _Tp)>
    struct _Throw_with_nested_impl
    {
      template<typename _Up>
 static void _S_throw(_Up&& __t)
 { throw _Nested_exception<_Tp>{static_cast<_Up&&>(__t)}; }
    };

  template<typename _Tp>
    struct _Throw_with_nested_impl<_Tp, false>
    {
      template<typename _Up>
 static void _S_throw(_Up&& __t)
 { throw static_cast<_Up&&>(__t); }
    };

  template<typename _Tp, bool = __is_class(_Tp) && !__is_final(_Tp)>
    struct _Throw_with_nested_helper : _Throw_with_nested_impl<_Tp>
    { };

  template<typename _Tp>
    struct _Throw_with_nested_helper<_Tp, false>
    : _Throw_with_nested_impl<_Tp, false>
    { };

  template<typename _Tp>
    struct _Throw_with_nested_helper<_Tp&, false>
    : _Throw_with_nested_helper<_Tp>
    { };

  template<typename _Tp>
    struct _Throw_with_nested_helper<_Tp&&, false>
    : _Throw_with_nested_helper<_Tp>
    { };



  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      _Throw_with_nested_helper<_Tp>::_S_throw(static_cast<_Tp&&>(__t));
    }

  template<typename _Tp, bool = __is_polymorphic(_Tp)>
    struct _Rethrow_if_nested_impl
    {
      static void _S_rethrow(const _Tp& __t)
      {
 if (auto __tp = dynamic_cast<const nested_exception*>(&__t))
   __tp->rethrow_nested();
      }
    };

  template<typename _Tp>
    struct _Rethrow_if_nested_impl<_Tp, false>
    {
      static void _S_rethrow(const _Tp&) { }
    };


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    {
      _Rethrow_if_nested_impl<_Ex>::_S_rethrow(__ex);
    }


}

}



#pragma GCC visibility pop
# 164 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/exception" 2 3
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/typeinfo" 2 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/hash_bytes.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 136 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }


    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 54 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/new" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/new" 3




#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { };



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };


  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 111 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/new" 3
void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));
void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));


inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}

#pragma GCC visibility pop
# 55 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/tuple" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/tuple" 3





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/utility" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/utility" 3
# 69 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/utility" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_relops.h" 1 3
# 67 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace rel_ops
  {
# 85 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }


  }

}
# 70 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/utility" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_pair.h" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_pair.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/move.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/move.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/concept_check.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/concept_check.h" 3
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) noexcept
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


}




namespace std __attribute__ ((__visibility__ ("default")))
{
# 74 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 118 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 133 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }


  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }



}
# 159 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 174 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)

    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)

    {



      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])

    noexcept(noexcept(swap(*__a, *__b)))

    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 60 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 76 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_pair.h" 3
  struct piecewise_construct_t { };


  constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();


  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;
# 95 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      constexpr pair()
      : first(), second() { }


      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }







      template<class _U1, class _U2, class = typename
        enable_if<__and_<is_convertible<const _U1&, _T1>,
    is_convertible<const _U2&, _T2>>::value>::type>
 constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }

      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<class _U1, class = typename
        enable_if<is_convertible<_U1, _T1>::value>::type>
 constexpr pair(_U1&& __x, const _T2& __y)
 : first(std::forward<_U1>(__x)), second(__y) { }

      template<class _U2, class = typename
        enable_if<is_convertible<_U2, _T2>::value>::type>
 constexpr pair(const _T1& __x, _U2&& __y)
 : first(__x), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(const pair& __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(pair&& __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
               is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<class _U1, class _U2>
 pair&
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<class _U1, class _U2>
 pair&
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      noexcept(noexcept(swap(first, __p.first))
        && noexcept(swap(second, __p.second)))
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>
        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };


  template<class _T1, class _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<class _T1, class _T2>
    inline void
    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
# 273 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 293 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_pair.h" 3
}
# 71 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/utility" 2 3




# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/initializer_list" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 76 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/utility" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<class _Tp>
    class tuple_size;

  template<std::size_t _Int, class _Tp>
    class tuple_element;




  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };


  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };


  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }
# 205 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/utility" 3
  template<size_t... _Indexes>
    struct _Index_tuple
    {
      typedef _Index_tuple<_Indexes..., sizeof...(_Indexes)> __next;
    };


  template<size_t _Num>
    struct _Build_index_tuple
    {
      typedef typename _Build_index_tuple<_Num - 1>::__type::__next __type;
    };

  template<>
    struct _Build_index_tuple<0>
    {
      typedef _Index_tuple<> __type;
    };
# 268 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/utility" 3
}
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/tuple" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/array" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/array" 3





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/stdexcept" 1 3
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/stdexcept" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/string" 1 3
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/string" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stringfwd.h" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stringfwd.h" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/memoryfwd.h" 1 3
# 47 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/memoryfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;


  template<typename, typename>
    struct uses_allocator;




}
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stringfwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 52 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stringfwd.h" 3
  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;




  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;





  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;


}




}
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/string" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/char_traits.h" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/char_traits.h" 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 1 3
# 60 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/functexcept.h" 1 3
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/functexcept.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/cpp_type_traits.h" 1 3
# 36 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/cpp_type_traits.h" 3
# 68 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 287 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<typename _Iterator>
    class move_iterator;

  template<typename _Iterator>
    struct __is_move_iterator< move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



}
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/type_traits.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/numeric_traits.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 54 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_types.h" 1 3
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 143 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 177 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }





  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };


  template<typename _InIter>
    using _RequireInputIter = typename
      enable_if<is_convertible<typename
  iterator_traits<_InIter>::iterator_category,
          input_iterator_tag>::value>::type;



}
# 66 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_funcs.h" 1 3
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_funcs.h" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/debug/debug.h" 1 3
# 46 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 66 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }
# 112 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


                                     ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      __i += __n;
    }
# 171 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _ForwardIterator>
    inline _ForwardIterator
    next(_ForwardIterator __x, typename
  iterator_traits<_ForwardIterator>::difference_type __n = 1)
    {
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {
      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 1 3
# 66 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ptr_traits.h" 1 3
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ptr_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


template<typename _Tp, typename = __void_t<>> struct __has_element_type : false_type { }; template<typename _Tp> struct __has_element_type<_Tp, __void_t<typename _Tp::element_type>> : true_type { };
template<typename _Tp, typename = __void_t<>> struct __has_difference_type : false_type { }; template<typename _Tp> struct __has_difference_type<_Tp, __void_t<typename _Tp::difference_type>> : true_type { };

  template<typename _Tp, bool = __has_element_type<_Tp>::value>
    struct __ptrtr_elt_type;

  template<typename _Tp>
    struct __ptrtr_elt_type<_Tp, true>
    {
      typedef typename _Tp::element_type __type;
    };

  template<template<typename, typename...> class _SomePtr, typename _Tp,
            typename... _Args>
    struct __ptrtr_elt_type<_SomePtr<_Tp, _Args...>, false>
    {
      typedef _Tp __type;
    };

  template<typename _Tp, bool = __has_difference_type<_Tp>::value>
    struct __ptrtr_diff_type
    {
      typedef typename _Tp::difference_type __type;
    };

  template<typename _Tp>
    struct __ptrtr_diff_type<_Tp, false>
    {
      typedef ptrdiff_t __type;
    };

  template<typename _Ptr, typename _Up>
    class __ptrtr_rebind_helper
    {
      template<typename _Ptr2, typename _Up2>
 static constexpr true_type
 _S_chk(typename _Ptr2::template rebind<_Up2>*);

      template<typename, typename>
 static constexpr false_type
 _S_chk(...);

    public:
      using __type = decltype(_S_chk<_Ptr, _Up>(nullptr));
    };

  template<typename _Tp, typename _Up,
           bool = __ptrtr_rebind_helper<_Tp, _Up>::__type::value>
    struct __ptrtr_rebind;

  template<typename _Tp, typename _Up>
    struct __ptrtr_rebind<_Tp, _Up, true>
    {
      typedef typename _Tp::template rebind<_Up> __type;
    };

  template<template<typename, typename...> class _SomePtr, typename _Up,
            typename _Tp, typename... _Args>
    struct __ptrtr_rebind<_SomePtr<_Tp, _Args...>, _Up, false>
    {
      typedef _SomePtr<_Up, _Args...> __type;
    };

  template<typename _Tp, typename = typename remove_cv<_Tp>::type>
    struct __ptrtr_not_void
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __ptrtr_not_void<_Tp, void>
    {
      struct __type { };
    };

  template<typename _Ptr>
    class __ptrtr_pointer_to
    {
      typedef typename __ptrtr_elt_type<_Ptr>::__type __orig_type;
      typedef typename __ptrtr_not_void<__orig_type>::__type __element_type;

    public:
      static _Ptr pointer_to(__element_type& __e)
      { return _Ptr::pointer_to(__e); }
    };





  template<typename _Ptr>
    struct pointer_traits : __ptrtr_pointer_to<_Ptr>
    {

      typedef _Ptr pointer;

      typedef typename __ptrtr_elt_type<_Ptr>::__type element_type;

      typedef typename __ptrtr_diff_type<_Ptr>::__type difference_type;

      template<typename _Up>
        using rebind = typename __ptrtr_rebind<_Ptr, _Up>::__type;
    };





  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;






      static pointer
      pointer_to(typename __ptrtr_not_void<element_type>::__type& __r) noexcept
      { return std::addressof(__r); }
    };


}
# 67 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 96 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }
# 160 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 290 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>


    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())





    { return __y.base() - __x.base(); }
# 414 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 448 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 490 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 505 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 538 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 580 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 599 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 650 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 694 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 718 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }


      reference
      operator*() const noexcept
      { return *_M_current; }

      pointer
      operator->() const noexcept
      { return _M_current; }

      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }


      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 818 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}



namespace std __attribute__ ((__visibility__ ("default")))
{
# 958 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;
      typedef typename __traits_type::reference __base_ref;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;


      typedef typename conditional<is_reference<__base_ref>::value,
    typename remove_reference<__base_ref>::type&&,
    __base_ref>::type reference;

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>
 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
      { return static_cast<reference>(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline auto
    operator-(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(__i); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }




}
# 68 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/predefined_ops.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>

      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
    };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {
    template<typename _Value, typename _Iterator>
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
    };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
    };

  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
    };

  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      _Iter_comp_iter(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Iterator1, typename _Iterator2>

        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>

    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(__comp); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

      _Iter_comp_val(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Iterator, typename _Value>
 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(__comp); }

  template<typename _Compare>
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(__comp._M_comp); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

      _Val_comp_iter(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Value, typename _Iterator>
 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(__comp); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(__comp._M_comp); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      typename std::iterator_traits<_Iterator1>::reference _M_ref;

      _Iter_equals_iter(_Iterator1 __it1)
 : _M_ref(*__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == _M_ref; }
    };

  template<typename _Iterator>
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

      _Iter_pred(_Predicate __pred)
 : _M_pred(__pred)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(__pred); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(__comp), _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
    __iter_comp_val(_Compare __comp, _Value &__val)
    { return _Iter_comp_to_val<_Compare, _Value>(__comp, __val); }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      typename std::iterator_traits<_Iterator1>::reference _M_ref;

      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(__comp), _M_ref(*__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, _M_ref)); }
    };

  template<typename _Compare, typename _Iterator>
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    { return _Iter_comp_to_iter<_Compare, _Iterator>(__comp._M_comp, __it); }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

      _Iter_negate(_Predicate __pred)
 : _M_pred(__pred)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(__pred._M_pred); }

}
}
# 72 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 118 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
# 148 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 164 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 192 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _Tp>

    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _Tp>

    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 240 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>

    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 262 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>

    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 460 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 493 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 636 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 672 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }
# 738 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 798 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   if (const size_t __len = (__last1 - __first1))
     return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
   return true;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 return std::__lexicographical_compare_impl(__first1, __last1,
         __first2, __last2,
     __gnu_cxx::__ops::__iter_less_iter());
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = __builtin_memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 998 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {




                                                                  ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline constexpr int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }
# 1055 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1087 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1215 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {
# 1229 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1251 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {



                                                       ;
                                                       ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1294 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1327 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 1428 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algobase.h" 3
}
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/char_traits.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/postypes.h" 1 3
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/postypes.h" 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwchar" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 51 "/usr/include/wchar.h" 3 4
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 1 3 4
# 132 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 52 "/usr/include/wchar.h" 2 3 4
# 106 "/usr/include/wchar.h" 3 4
typedef __mbstate_t mbstate_t;
# 132 "/usr/include/wchar.h" 3 4
extern "C" {




struct tm;
# 147 "/usr/include/wchar.h" 3 4
extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();





extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    __locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, __locale_t __loc) throw ();





extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();
# 209 "/usr/include/wchar.h" 3 4
extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        __locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, __locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));
# 230 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));
# 240 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));






extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));
# 269 "/usr/include/wchar.h" 3 4
extern wchar_t *wcspbrk (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));
# 280 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsstr (const wchar_t *__haystack, const wchar_t *__needle)
     throw () __attribute__ ((__pure__));



extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));
# 302 "/usr/include/wchar.h" 3 4
extern wchar_t *wcswcs (const wchar_t *__haystack, const wchar_t *__needle)
     throw () __attribute__ ((__pure__));





extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));
# 323 "/usr/include/wchar.h" 3 4
extern wchar_t *wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)
     throw () __attribute__ ((__pure__));



extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();





extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();






extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();
# 389 "/usr/include/wchar.h" 3 4
extern wint_t __btowc_alias (int __c) __asm ("btowc");
extern __inline __attribute__ ((__gnu_inline__)) wint_t
 btowc (int __c) throw ()
{ return (__builtin_constant_p (__c) && __c >= '\0' && __c <= '\x7f'
   ? (wint_t) __c : __btowc_alias (__c)); }

extern int __wctob_alias (wint_t __c) __asm ("wctob");
extern __inline __attribute__ ((__gnu_inline__)) int
 wctob (wint_t __wc) throw ()
{ return (__builtin_constant_p (__wc) && __wc >= L'\0' && __wc <= L'\x7f'
   ? (int) __wc : __wctob_alias (__wc)); }

extern __inline __attribute__ ((__gnu_inline__)) size_t
 mbrlen (const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps) throw ()

{ return (__ps != __null
   ? mbrtowc (__null, __s, __n, __ps) : __mbrlen (__s, __n, __null)); }





extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();






extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();






extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();





extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();







extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();






__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();






__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();
# 533 "/usr/include/wchar.h" 3 4
extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     __locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, __locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, __locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, __locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         __locale_t __loc) throw ();






extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();






extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();






extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;
# 692 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 748 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 804 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 830 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 840 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);







extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();







extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) throw ();
# 894 "/usr/include/wchar.h" 3 4
}
# 45 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwchar" 2 3
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }



}







namespace __gnu_cxx
{





  using ::wcstold;
# 257 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 277 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/postypes.h" 2 3
# 68 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 88 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/char_traits.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwchar" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 45 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwchar" 2 3
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/char_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 57 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 82 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{
# 226 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;
 return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;
 return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;
 return wmemcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;
 return wmemchr(__s, __a, __n);
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemmove(__s1, __s2, __n);
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemcpy(__s1, __s2, __n);
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return wmemset(__s, __a, __n);
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}






namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/string" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocator.h" 1 3
# 46 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocator.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++allocator.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++allocator.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/new_allocator.h" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 57 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };




      typedef std::true_type propagate_on_container_move_assignment;


      new_allocator() noexcept { }

      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) noexcept { }

      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const noexcept
      { return size_t(-1) / sizeof(_Tp); }


      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void
        destroy(_Up* __p) { __p->~_Up(); }
# 135 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/new_allocator.h" 3
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++allocator.h" 2 3


namespace std
{
# 47 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocator.h" 3
  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

    };
# 91 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __allocator_base<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;


      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return false; }






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {

 try
   {
     _Tp(__make_move_if_noexcept_iterator(__c.begin()),
  __make_move_if_noexcept_iterator(__c.end()),
  __c.get_allocator()).swap(__c);
     return true;
   }
 catch(...)
   { return false; }



      }
    };



}
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/string" 2 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/localefwd.h" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/localefwd.h" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++locale.h" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++locale.h" 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/clocale" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 53 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 120 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();
# 151 "/usr/include/locale.h" 3 4
extern __locale_t newlocale (int __category_mask, const char *__locale,
        __locale_t __base) throw ();
# 186 "/usr/include/locale.h" 3 4
extern __locale_t duplocale (__locale_t __dataset) throw ();



extern void freelocale (__locale_t __dataset) throw ();






extern __locale_t uselocale (__locale_t __dataset) throw ();







}
# 43 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/clocale" 2 3








namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/localefwd.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/iosfwd" 1 3
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/iosfwd" 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 74 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/localefwd.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cctype" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 46 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 110 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();
# 136 "/usr/include/ctype.h" 3 4
extern int isblank (int) throw ();






extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 271 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) throw ();
extern int isalpha_l (int, __locale_t) throw ();
extern int iscntrl_l (int, __locale_t) throw ();
extern int isdigit_l (int, __locale_t) throw ();
extern int islower_l (int, __locale_t) throw ();
extern int isgraph_l (int, __locale_t) throw ();
extern int isprint_l (int, __locale_t) throw ();
extern int ispunct_l (int, __locale_t) throw ();
extern int isspace_l (int, __locale_t) throw ();
extern int isupper_l (int, __locale_t) throw ();
extern int isxdigit_l (int, __locale_t) throw ();

extern int isblank_l (int, __locale_t) throw ();



extern int __tolower_l (int __c, __locale_t __l) throw ();
extern int tolower_l (int __c, __locale_t __l) throw ();


extern int __toupper_l (int __c, __locale_t __l) throw ();
extern int toupper_l (int __c, __locale_t __l) throw ();
# 347 "/usr/include/ctype.h" 3 4
}
# 43 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cctype" 2 3
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 43 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);


  template<typename _CharT>
    bool
    isblank(_CharT, const locale&);


  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {

  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}


  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}


  class messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


}
# 44 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/string" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ostream_insert.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ostream_insert.h" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/cxxabi_forced.h" 1 3
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/string" 2 3






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/range_access.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/range_access.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{







  template<class _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<class _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<class _Tp, size_t _Nm>
    inline _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<class _Tp, size_t _Nm>
    inline _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }
# 234 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/range_access.h" 3
}
# 52 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/string" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/atomicity.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/atomicity.h" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr.h" 1 3
# 30 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr-default.h" 1 3
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 23 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 28 "/usr/include/sched.h" 3 4
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 1 3 4
# 29 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 72 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int setns (int __fd, int __nstype) throw ();



}







struct __sched_param
  {
    int __sched_priority;
  };
# 118 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 201 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 44 "/usr/include/sched.h" 2 3 4




extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 118 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 114 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 155 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 190 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 228 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 494 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 506 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 540 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 742 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 806 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 888 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1000 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1044 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1111 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();




extern __inline __attribute__ ((__gnu_inline__)) int
 pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ()
{
  return __thread1 == __thread2;
}


}
# 36 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr-default.h" 2 3
# 47 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 101 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));

static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));

static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_init) __gthrw_pthread_cond_init __attribute__ ((__weakref__("pthread_cond_init")));
static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));

static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 236 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr-default.h" 3
static __typeof(pthread_key_create) __gthrw___pthread_key_create __attribute__ ((__weakref__("__pthread_key_create")));
# 246 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw___pthread_key_create;
  return __gthread_active_ptr != 0;
}
# 658 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    __gthrw_pthread_mutex_init (__mutex, __null);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}


static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 807 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 849 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr-default.h" 3
static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 149 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/atomicity.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/atomic_word.h" 1 3
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/alloc_traits.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/alloc_traits.h" 3



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 1 3
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc, typename _Tp>
    class __alloctr_rebind_helper
    {
      template<typename _Alloc2, typename _Tp2>
 static constexpr true_type
 _S_chk(typename _Alloc2::template rebind<_Tp2>::other*);

      template<typename, typename>
 static constexpr false_type
 _S_chk(...);

    public:
      using __type = decltype(_S_chk<_Alloc, _Tp>(nullptr));
    };

  template<typename _Alloc, typename _Tp,
    bool = __alloctr_rebind_helper<_Alloc, _Tp>::__type::value>
    struct __alloctr_rebind;

  template<typename _Alloc, typename _Tp>
    struct __alloctr_rebind<_Alloc, _Tp, true>
    {
      typedef typename _Alloc::template rebind<_Tp>::other __type;
    };

  template<template<typename, typename...> class _Alloc, typename _Tp,
    typename _Up, typename... _Args>
    struct __alloctr_rebind<_Alloc<_Up, _Args...>, _Tp, false>
    {
      typedef _Alloc<_Tp, _Args...> __type;
    };

  template<typename _Alloc, typename _Tp>
    using __alloc_rebind = typename __alloctr_rebind<_Alloc, _Tp>::__type;





  template<typename _Alloc>
    struct allocator_traits
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;
# 98 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
private: template<typename _Tp> static typename _Tp::pointer _S_pointer_helper(_Tp*); static value_type* _S_pointer_helper(...); typedef decltype(_S_pointer_helper((_Alloc*)0)) __pointer; public:






      typedef __pointer pointer;

private: template<typename _Tp> static typename _Tp::const_pointer _S_const_pointer_helper(_Tp*); static typename pointer_traits<pointer>::template rebind<const value_type> _S_const_pointer_helper(...); typedef decltype(_S_const_pointer_helper((_Alloc*)0)) __const_pointer; public:
# 116 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      typedef __const_pointer const_pointer;

private: template<typename _Tp> static typename _Tp::void_pointer _S_void_pointer_helper(_Tp*); static typename pointer_traits<pointer>::template rebind<void> _S_void_pointer_helper(...); typedef decltype(_S_void_pointer_helper((_Alloc*)0)) __void_pointer; public:
# 127 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      typedef __void_pointer void_pointer;

private: template<typename _Tp> static typename _Tp::const_void_pointer _S_const_void_pointer_helper(_Tp*); static typename pointer_traits<pointer>::template rebind<const void> _S_const_void_pointer_helper(...); typedef decltype(_S_const_void_pointer_helper((_Alloc*)0)) __const_void_pointer; public:
# 138 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      typedef __const_void_pointer const_void_pointer;

private: template<typename _Tp> static typename _Tp::difference_type _S_difference_type_helper(_Tp*); static typename pointer_traits<pointer>::difference_type _S_difference_type_helper(...); typedef decltype(_S_difference_type_helper((_Alloc*)0)) __difference_type; public:
# 149 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      typedef __difference_type difference_type;

private: template<typename _Tp> static typename _Tp::size_type _S_size_type_helper(_Tp*); static typename make_unsigned<difference_type>::type _S_size_type_helper(...); typedef decltype(_S_size_type_helper((_Alloc*)0)) __size_type; public:
# 160 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      typedef __size_type size_type;

private: template<typename _Tp> static typename _Tp::propagate_on_container_copy_assignment _S_propagate_on_container_copy_assignment_helper(_Tp*); static false_type _S_propagate_on_container_copy_assignment_helper(...); typedef decltype(_S_propagate_on_container_copy_assignment_helper((_Alloc*)0)) __propagate_on_container_copy_assignment; public:
# 171 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      typedef __propagate_on_container_copy_assignment
 propagate_on_container_copy_assignment;

private: template<typename _Tp> static typename _Tp::propagate_on_container_move_assignment _S_propagate_on_container_move_assignment_helper(_Tp*); static false_type _S_propagate_on_container_move_assignment_helper(...); typedef decltype(_S_propagate_on_container_move_assignment_helper((_Alloc*)0)) __propagate_on_container_move_assignment; public:
# 183 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      typedef __propagate_on_container_move_assignment
 propagate_on_container_move_assignment;

private: template<typename _Tp> static typename _Tp::propagate_on_container_swap _S_propagate_on_container_swap_helper(_Tp*); static false_type _S_propagate_on_container_swap_helper(...); typedef decltype(_S_propagate_on_container_swap_helper((_Alloc*)0)) __propagate_on_container_swap; public:
# 195 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      typedef __propagate_on_container_swap propagate_on_container_swap;



      template<typename _Tp>
 using rebind_alloc = typename __alloctr_rebind<_Alloc, _Tp>::__type;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 struct __allocate_helper
 {
   template<typename _Alloc3,
     typename = decltype(std::declval<_Alloc3*>()->allocate(
    std::declval<size_type>(),
    std::declval<const_void_pointer>()))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Alloc2>
 using __has_allocate = typename __allocate_helper<_Alloc2>::type;

      template<typename _Alloc2,
        typename = _Require<__has_allocate<_Alloc2>>>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint)
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2, typename _UnusedHint,
        typename = _Require<__not_<__has_allocate<_Alloc2>>>>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, _UnusedHint)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 { ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }

      template<typename _Tp>
 struct __destroy_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->destroy(
    std::declval<_Tp*>()))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp>
 using __has_destroy = typename __destroy_helper<_Tp>::type;

      template<typename _Tp>
 static _Require<__has_destroy<_Tp>>
 _S_destroy(_Alloc& __a, _Tp* __p)
 { __a.destroy(__p); }

      template<typename _Tp>
 static _Require<__not_<__has_destroy<_Tp>>>
 _S_destroy(_Alloc&, _Tp* __p)
 { __p->~_Tp(); }

      template<typename _Alloc2>
 struct __maxsize_helper
 {
   template<typename _Alloc3,
     typename = decltype(std::declval<_Alloc3*>()->max_size())>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc2>(0));
 };

      template<typename _Alloc2>
 using __has_max_size = typename __maxsize_helper<_Alloc2>::type;

      template<typename _Alloc2,
        typename = _Require<__has_max_size<_Alloc2>>>
 static size_type
 _S_max_size(_Alloc2& __a, int)
 { return __a.max_size(); }

      template<typename _Alloc2,
        typename = _Require<__not_<__has_max_size<_Alloc2>>>>
 static size_type
 _S_max_size(_Alloc2&, ...)
 { return __gnu_cxx::__numeric_traits<size_type>::__max; }

      template<typename _Alloc2>
 struct __select_helper
 {
   template<typename _Alloc3, typename
     = decltype(std::declval<_Alloc3*>()
  ->select_on_container_copy_construction())>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc2>(0));
 };

      template<typename _Alloc2>
 using __has_soccc = typename __select_helper<_Alloc2>::type;

      template<typename _Alloc2,
        typename = _Require<__has_soccc<_Alloc2>>>
 static _Alloc2
 _S_select(_Alloc2& __a, int)
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2,
        typename = _Require<__not_<__has_soccc<_Alloc2>>>>
 static _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:
# 358 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 373 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint); }
# 385 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      static void deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 399 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>
 static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
# 412 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      template<typename _Tp>
 static void destroy(_Alloc& __a, _Tp* __p)
 { _S_destroy(__a, __p); }
# 424 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      static size_type max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }
# 435 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };


  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;

      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 489 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 503 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
      { return __a.allocate(__n, __hint); }
# 515 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 527 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 static void
 construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }
# 539 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h" 3
      template<typename _Up>
 static void
 destroy(allocator_type& __a, _Up* __p)
 { __a.destroy(__p); }






      static size_type
      max_size(const allocator_type& __a) noexcept
      { return __a.max_size(); }






      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };


  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
    }

  template<typename _Alloc>
    inline _Alloc __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;
      __do_alloc_on_swap(__one, __two, __pocs());
    }

  template<typename _Alloc>
    class __is_copy_insertable_impl
    {
      typedef allocator_traits<_Alloc> _Traits;

      template<typename _Up, typename
        = decltype(_Traits::construct(std::declval<_Alloc&>(),
          std::declval<_Up*>(),
          std::declval<const _Up&>()))>
 static true_type
 _M_select(int);

      template<typename _Up>
 static false_type
 _M_select(...);

    public:
      typedef decltype(_M_select<typename _Alloc::value_type>(0)) type;
    };


  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_copy_insertable_impl<_Alloc>::type
    { };


  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };


}
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/alloc_traits.h" 2 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _Alloc>
    struct __allocator_always_compares_equal : std::false_type { };

  template<typename _Tp>
    struct __allocator_always_compares_equal<std::allocator<_Tp>>
    : std::true_type { };

  template<typename, typename> struct array_allocator;

  template<typename _Tp, typename _Array>
    struct __allocator_always_compares_equal<array_allocator<_Tp, _Array>>
    : std::true_type { };

  template<typename> struct bitmap_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<bitmap_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct malloc_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<malloc_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct mt_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<mt_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct new_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<new_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct pool_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<pool_allocator<_Tp>>
    : std::true_type { };






template<typename _Alloc>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      {
 _Base_type::construct(__a, std::addressof(*__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return __allocator_always_compares_equal<_Alloc>::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    static constexpr bool _S_nothrow_swap()
    {
      using std::swap;
      return !_S_propagate_on_swap()
        || noexcept(swap(std::declval<_Alloc&>(), std::declval<_Alloc&>()));
    }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 210 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/alloc_traits.h" 3
  };


}
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{



namespace __cxx11 {
# 70 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;


      static const size_type npos = static_cast<size_type>(-1);

    private:




      typedef const_iterator __const_iterator;



      struct _Alloc_hider : allocator_type
      {
 _Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 : allocator_type(__a), _M_p(__dat) { }

 pointer _M_p;
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

      pointer
      _M_local_data()
      {

 return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);



      }

      const_pointer
      _M_local_data() const
      {

 return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);



      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

      bool
      _M_is_local() const
      { return _M_data() == _M_local_data(); }


      pointer
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }



      template<typename _InIterator>
        void
        _M_construct_aux(_InIterator __beg, _InIterator __end,
    std::__false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          _M_construct(__beg, __end, _Tag());
 }



      template<typename _Integer>
        void
        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 { _M_construct_aux_2(static_cast<size_type>(__beg), __end); }

      void
      _M_construct_aux_2(size_type __req, _CharT __c)
      { _M_construct(__req, __c); }

      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   _M_construct_aux(__beg, __end, _Integral());
        }


      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);



      template<typename _FwdIterator>
        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

      void
      _M_construct(size_type __req, _CharT __c);

      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }

    private:
# 257 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)"),

       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }



      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_assign(const basic_string& __rcs);

      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

      void
      _M_erase(size_type __pos, size_type __n);

    public:







      basic_string()

      noexcept(is_nothrow_default_constructible<_Alloc>::value)

      : _M_dataplus(_M_local_data())
      { _M_set_length(0); }




      explicit
      basic_string(const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_set_length(0); }





      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(), __str._M_get_allocator())
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
# 410 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 426 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 444 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s + __n); }






      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }







      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }
# 476 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
   }
 else
   {
     _M_data(__str._M_data());
     _M_capacity(__str._M_allocated_capacity);
   }




 _M_length(__str.length());
 __str._M_data(__str._M_local_data());
 __str._M_set_length(0);
      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__l.begin(), __l.end()); }

      basic_string(const basic_string& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__str.begin(), __str.end()); }

      basic_string(basic_string&& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 if (__str.get_allocator() == __a)
   *this = std::move(__str);
 else
   _M_construct(__str.begin(), __str.end());
      }
# 529 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a)
 { _M_construct(__beg, __end); }




      ~basic_string()
      { _M_dispose(); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 568 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 586 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      {
 this->swap(__str);
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }







      iterator
      begin() noexcept
      { return iterator(_M_data()); }





      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      iterator
      end() noexcept
      { return iterator(_M_data() + this->size()); }





      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const noexcept
      { return _M_string_length; }



      size_type
      length() const noexcept
      { return _M_string_length; }


      size_type
      max_size() const noexcept
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
# 739 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 752 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit() noexcept
      {

 if (capacity() > size())
   {
     try
       { reserve(0); }
     catch(...)
       { }
   }

      }






      size_type
      capacity() const noexcept
      {
 return _M_is_local() ? size_type(_S_local_capacity)
                      : _M_allocated_capacity;
      }
# 801 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear() noexcept
      { _M_set_length(0); }





      bool
      empty() const noexcept
      { return this->size() == 0; }
# 830 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const noexcept
      {
                                       ;
 return _M_data()[__pos];
      }
# 847 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {


                                       ;

                                                                   ;
 return _M_data()[__pos];
      }
# 868 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
 return _M_data()[__n];
      }
# 889 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
 return _M_data()[__n];
      }






      reference
      front() noexcept
      { return operator[](0); }





      const_reference
      front() const noexcept
      { return operator[](0); }





      reference
      back() noexcept
      { return operator[](this->size() - 1); }





      const_reference
      back() const noexcept
      { return operator[](this->size() - 1); }
# 940 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }







      basic_string&
      append(const basic_string& __str)
      { return _M_append(__str._M_data(), __str.size()); }
# 998 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n)
      { return _M_append(__str._M_data()
    + __str._M_check(__pos, "basic_string::append"),
    __str._M_limit(__pos, __n)); }







      basic_string&
      append(const _CharT* __s, size_type __n)
      {
                                        ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }
# 1040 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1064 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }






      basic_string&
      assign(const basic_string& __str)
      {
 this->_M_assign(__str);
 return *this;
      }
# 1108 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      {


 return *this = std::move(__str);
      }
# 1130 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }
# 1146 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
                                        ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }
# 1162 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }
# 1179 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1192 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(begin(), end(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1228 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      iterator
      insert(const_iterator __p, size_type __n, _CharT __c)
      {
                                                         ;
 const size_type __pos = __p - begin();
 this->replace(__p, __p, __n, __c);
 return iterator(this->_M_data() + __pos);
      }
# 1270 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
        {
                                                           ;
   const size_type __pos = __p - begin();
   this->replace(__p, __p, __beg, __end);
   return iterator(this->_M_data() + __pos);
 }
# 1306 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
                                                         ;
 this->insert(__p - begin(), __l.begin(), __l.size());
      }
# 1326 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }
# 1349 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }
# 1372 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }
# 1391 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }
# 1415 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1433 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      iterator
      insert(__const_iterator __p, _CharT __c)
      {
                                                         ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }
# 1457 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 this->_M_erase(_M_check(__pos, "basic_string::erase"),
         _M_limit(__pos, __n));
 return *this;
      }
# 1473 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }
# 1492 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }







      void
      pop_back() noexcept
      { _M_erase(size()-1, 1); }
# 1530 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1552 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1577 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
                                         ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }
# 1602 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1626 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1644 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1664 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }
# 1686 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1707 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }
# 1732 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        basic_string&
        replace(const_iterator __i1, const_iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                        ;
                                             ;
   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
        std::__false_type());
 }
# 1764 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1823 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string& replace(const_iterator __i1, const_iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.end()); }


    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:
# 1866 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1876 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      void
      swap(basic_string& __s) noexcept;
# 1886 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }







      const _CharT*
      data() const noexcept
      { return _M_data(); }




      allocator_type
      get_allocator() const noexcept
      { return _M_get_allocator(); }
# 1919 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1932 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
 noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 1947 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1964 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 1977 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
 noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1994 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 2007 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 2024 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 2038 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
 noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 2055 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2068 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2087 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 2102 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
 noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2119 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2132 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2151 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 2165 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
 noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2182 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2196 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2213 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
 noexcept;
# 2228 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
 noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2245 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2259 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2276 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
 noexcept;
# 2292 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2311 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2343 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2369 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2387 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2411 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2438 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
}
# 4781 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 4902 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 4948 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 4985 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 5022 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 5059 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 5096 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 5133 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 5152 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 5170 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 5193 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 5210 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}




# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/string_conversions.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/string_conversions.h" 3








# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
# 114 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline long
  abs(long __i) { return __builtin_labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 196 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
}
# 209 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 241 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/string_conversions.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwchar" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 45 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwchar" 2 3
# 43 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/string_conversions.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdio" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdio" 3
# 96 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;


  using ::gets;

  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdio" 3
namespace __gnu_cxx
{
# 175 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 44 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/string_conversions.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cerrno" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cerrno" 3

# 1 "/usr/include/errno.h" 1 3 4
# 31 "/usr/include/errno.h" 3 4
extern "C" {




# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
extern int *__errno_location (void) throw () __attribute__ ((__const__));
# 36 "/usr/include/errno.h" 2 3 4
# 54 "/usr/include/errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;



}
# 68 "/usr/include/errno.h" 3 4
typedef int error_t;
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cerrno" 2 3
# 45 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;
      (*__errno_location ()) = 0;
      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
        || (std::__are_same<_Ret, int>::__value
     && (__tmp < __numeric_traits<int>::__min
         || __tmp > __numeric_traits<int>::__max)))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 5250 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {


  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }




  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }


  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }



  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }



}

}






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/functional_hash.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/functional_hash.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{
# 49 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type;
      typedef _Arg argument_type;
    };


  template<typename _Tp>
    struct hash;


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 80 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };



  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };

  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };







  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 5472 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string>> : std::false_type
    { };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring>> : std::false_type
    { };





  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string>> : std::false_type
    { };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string>> : std::false_type
    { };
# 5583 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h" 3
}
# 53 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/string" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.tcc" 1 3
# 43 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s) noexcept
    {
      if (this == &__s)
 return;




      std::__alloc_swap<allocator_type>::_S_do_it(_M_get_allocator(),
        __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      _S_local_capacity + 1);
       }
     else if (__s.length())
       {
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      _S_local_capacity + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         _S_local_capacity + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    _S_local_capacity + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {


      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));




      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;

   if (__capacity > max_size())
     __capacity = max_size();
 }



      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 while (__beg != __end && __len < __capacity)
   {
     _M_data()[__len++] = *__beg;
     ++__beg;
   }

 try
   {
     while (__beg != __end)
       {
  if (__len == __capacity)
    {

      __capacity = __len + 1;
      pointer __another = _M_create(__capacity, __len);
      this->_S_copy(__another, _M_data(), __len);
      _M_dispose();
      _M_data(__another);
      _M_capacity(__capacity);
    }
  _M_data()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {

 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   std::__throw_logic_error(("basic_string::" "_M_construct null not valid"));


 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }


 try
   { this->_S_copy_chars(_M_data(), __beg, __end); }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != &__str)
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {

      if (__res < length())
 __res = length();

      const size_type __capacity = capacity();
      if (__res != __capacity)
 {
   if (__res > __capacity
       || __res > size_type(_S_local_capacity))
     {
       pointer __tmp = _M_create(__res, __capacity);
       this->_S_copy(__tmp, _M_data(), length() + 1);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__res);
     }
   else if (!_M_is_local())
     {
       this->_S_copy(_M_local_data(), _M_data(), length() + 1);
       _M_destroy(__capacity);
       _M_data(_M_local_data());
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_erase(__n, __size - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   _CharT* __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   _CharT* __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
   if (_M_disjunct(__s))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     {

       if (__len2 && __len2 <= __len1)
  this->_S_move(__p, __s, __len2);
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2 > __len1)
  {
    if (__s + __len2 <= __p + __len1)
      this->_S_move(__p, __s, __len2);
    else if (__s >= __p + __len1)
      this->_S_copy(__p, __s + __len2 - __len1, __len2);
    else
      {
        const size_type __nleft = (__p + __len1) - __s;
        this->_S_move(__p, __s, __nleft);
        this->_S_copy(__p + __nleft, __p + __len2,
        __len2 - __nleft);
      }
  }
     }
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);

      return __n;
    }
# 1149 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 54 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/string" 2 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/stdexcept" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{





  struct __cow_string
  {
    union {
      const char* _M_p;
      char _M_bytes[sizeof(const char*)];
    };

    __cow_string();
    __cow_string(const std::string&);
    __cow_string(const char*, size_t);
    __cow_string(const __cow_string&) noexcept;
    __cow_string& operator=(const __cow_string&) noexcept;
    ~__cow_string();

    __cow_string(__cow_string&&) noexcept;
    __cow_string& operator=(__cow_string&&) noexcept;

  };

  typedef basic_string<char> __sso_string;
# 113 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/stdexcept" 3
  class logic_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    logic_error(const string& __arg);


    explicit
    logic_error(const char*);



    logic_error(const logic_error&) noexcept;
    logic_error& operator=(const logic_error&) noexcept;


    virtual ~logic_error() noexcept;



    virtual const char*
    what() const noexcept;
  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg);

    explicit domain_error(const char*);

    virtual ~domain_error() noexcept;
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg);

    explicit invalid_argument(const char*);

    virtual ~invalid_argument() noexcept;
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg);

    explicit length_error(const char*);

    virtual ~length_error() noexcept;
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg);

    explicit out_of_range(const char*);

    virtual ~out_of_range() noexcept;
  };






  class runtime_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg);


    explicit
    runtime_error(const char*);



    runtime_error(const runtime_error&) noexcept;
    runtime_error& operator=(const runtime_error&) noexcept;


    virtual ~runtime_error() noexcept;



    virtual const char*
    what() const noexcept;
  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg);

    explicit range_error(const char*);

    virtual ~range_error() noexcept;
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg);

    explicit overflow_error(const char*);

    virtual ~overflow_error() noexcept;
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg);

    explicit underflow_error(const char*);

    virtual ~underflow_error() noexcept;
  };




}
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/array" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, std::size_t _Nm>
    struct __array_traits
    {
      typedef _Tp _Type[_Nm];

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }

      static constexpr _Tp*
      _S_ptr(const _Type& __t) noexcept
      { return const_cast<_Tp*>(__t); }
    };

 template<typename _Tp>
   struct __array_traits<_Tp, 0>
   {
     struct _Type { };

     static constexpr _Tp&
     _S_ref(const _Type&, std::size_t) noexcept
     { return *static_cast<_Tp*>(nullptr); }

     static constexpr _Tp*
     _S_ptr(const _Type&) noexcept
     { return nullptr; }
   };
# 88 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/array" 3
  template<typename _Tp, std::size_t _Nm>
    struct array
    {
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef value_type* iterator;
      typedef const value_type* const_iterator;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;


      typedef std::__array_traits<_Tp, _Nm> _AT_Type;
      typename _AT_Type::_Type _M_elems;




      void
      fill(const value_type& __u)
      { std::fill_n(begin(), size(), __u); }

      void
      swap(array& __other)
      noexcept(noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>())))
      { std::swap_ranges(begin(), end(), __other.begin()); }


      iterator
      begin() noexcept
      { return iterator(data()); }

      const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      iterator
      end() noexcept
      { return iterator(data() + _Nm); }

      const_iterator
      end() const noexcept
      { return const_iterator(data() + _Nm); }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      const_iterator
      cbegin() const noexcept
      { return const_iterator(data()); }

      const_iterator
      cend() const noexcept
      { return const_iterator(data() + _Nm); }

      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      constexpr size_type
      size() const noexcept { return _Nm; }

      constexpr size_type
      max_size() const noexcept { return _Nm; }

      constexpr bool
      empty() const noexcept { return size() == 0; }


      reference
      operator[](size_type __n) noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      reference
      at(size_type __n)
      {
 if (__n >= _Nm)
   std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)"),

     __n, _Nm);
 return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      at(size_type __n) const
      {


 return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
   : (std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)"),

        __n, _Nm),
      _AT_Type::_S_ref(_M_elems, 0));
      }

      reference
      front() noexcept
      { return *begin(); }

      constexpr const_reference
      front() const noexcept
      { return _AT_Type::_S_ref(_M_elems, 0); }

      reference
      back() noexcept
      { return _Nm ? *(end() - 1) : *end(); }

      constexpr const_reference
      back() const noexcept
      {
 return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
             : _AT_Type::_S_ref(_M_elems, 0);
      }

      pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      const_pointer
      data() const noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
    };


  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one == __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)
    {
      return std::lexicographical_compare(__a.begin(), __a.end(),
       __b.begin(), __b.end());
    }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return __two < __one; }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one > __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one < __two); }


  template<typename _Tp, std::size_t _Nm>
    inline void
    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)
    noexcept(noexcept(__one.swap(__two)))
    { __one.swap(__two); }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&
    get(array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&&
    get(array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      return std::move(std::get<_Int>(__arr));
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr const _Tp&
    get(const array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{





  template<typename _Tp>
    class tuple_size;


  template<typename _Tp, std::size_t _Nm>
    struct tuple_size<std::array<_Tp, _Nm>>
    : public integral_constant<std::size_t, _Nm> { };


  template<std::size_t _Int, typename _Tp>
    class tuple_element;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    struct tuple_element<_Int, std::array<_Tp, _Nm>>
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      typedef _Tp type;
    };


}
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/tuple" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/uses_allocator.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/uses_allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct allocator_arg_t { };

  constexpr allocator_arg_t allocator_arg = allocator_arg_t();

  template<typename _Tp, typename _Alloc, typename = __void_t<>>
    struct __uses_allocator_helper
    : false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc,
       __void_t<typename _Tp::allocator_type>>
    : is_convertible<_Alloc, typename _Tp::allocator_type>::type
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : __uses_allocator_helper<_Tp, _Alloc>::type
    { };

  struct __uses_alloc_base { };

  struct __uses_alloc0 : __uses_alloc_base
  {
    struct _Sink { void operator=(const void*) { } } _M_a;
  };

  template<typename _Alloc>
    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };

  template<typename _Alloc>
    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };

  template<bool, typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc;

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<true, _Tp, _Alloc, _Args...>
    : conditional<
        is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>::value,
        __uses_alloc1<_Alloc>,
        __uses_alloc2<_Alloc>>::type
    { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<false, _Tp, _Alloc, _Args...>
    : __uses_alloc0 { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    using __uses_alloc_t =
      __uses_alloc<uses_allocator<_Tp, _Alloc>::value, _Tp, _Alloc, _Args...>;

  template<typename _Tp, typename _Alloc, typename... _Args>
    inline __uses_alloc_t<_Tp, _Alloc, _Args...>
    __use_alloc(const _Alloc& __a)
    {
      __uses_alloc_t<_Tp, _Alloc, _Args...> __ret;
      __ret._M_a = &__a;
      return __ret;
    }


}
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/tuple" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<std::size_t _Idx, typename _Head, bool _IsEmptyNotFinal>
    struct _Head_base;

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
      : _Head(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _Head(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _Head() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _Head(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _Head(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _M_head_impl() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _M_head_impl(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _M_head_impl(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }

      _Head _M_head_impl;
    };
# 158 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/tuple" 3
  template<std::size_t _Idx, typename... _Elements>
    struct _Tuple_impl;

  template<typename _Tp>
    struct __is_empty_non_tuple : is_empty<_Tp> { };


  template<typename _El0, typename... _El>
    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };


  template<typename _Tp>
    using __empty_not_final
    = typename conditional<__is_final(_Tp), false_type,
      __is_empty_non_tuple<_Tp>>::type;






  template<std::size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head, __empty_not_final<_Head>::value>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
               is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))),
 _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename... _UElements>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _UHead, typename... _UTails>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a),
          _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head, const _Tail&... __tail)
 : _Inherited(__tag, __a, __tail...),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead, typename... _UTail,
               typename = typename enable_if<sizeof...(_Tail)
          == sizeof...(_UTail)>::type>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head, _UTail&&... __tail)
 : _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
          _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Inherited(__tag, __a, _M_tail(__in)),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Inherited(__tag, __a, std::move(_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename... _UElements>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(__tag, __a,
       _Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  _Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead, typename... _UTails>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(__tag, __a, std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head(*this) = _M_head(__in);
 _M_tail(*this) = _M_tail(__in);
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_assignable<_Head>,
               is_nothrow_move_assignable<_Inherited>>::value)
      {
 _M_head(*this) = std::forward<_Head>(_M_head(__in));
 _M_tail(*this) = std::move(_M_tail(__in));
 return *this;
      }

      template<typename... _UElements>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
   _M_tail(*this) = _Tuple_impl<_Idx, _UElements...>::_M_tail(__in);
   return *this;
 }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
   _M_head(*this) = std::forward<_UHead>
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
   _M_tail(*this) = std::move
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in));
   return *this;
 }

    protected:
      void
      _M_swap(_Tuple_impl& __in)
      noexcept(noexcept(swap(std::declval<_Head&>(),
        std::declval<_Head&>()))
        && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
 _Inherited::_M_swap(_M_tail(__in));
      }
    };


  template<std::size_t _Idx, typename _Head>
    struct _Tuple_impl<_Idx, _Head>
    : private _Head_base<_Idx, _Head, __empty_not_final<_Head>::value>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      constexpr _Tuple_impl()
      : _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head)
      : _Base(__head) { }

      template<typename _UHead>
        explicit
        constexpr _Tuple_impl(_UHead&& __head)
 : _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename _UHead>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _UHead>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  _Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head(*this) = _M_head(__in);
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_assignable<_Head>::value)
      {
 _M_head(*this) = std::forward<_Head>(_M_head(__in));
 return *this;
      }

      template<typename _UHead>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UHead>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
   return *this;
 }

      template<typename _UHead>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead>&& __in)
        {
   _M_head(*this)
     = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
   return *this;
 }

    protected:
      void
      _M_swap(_Tuple_impl& __in)
      noexcept(noexcept(swap(std::declval<_Head&>(), std::declval<_Head&>())))
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
      }
    };


  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }

      template<typename... _UElements, typename = typename
        enable_if<__and_<is_convertible<_UElements,
     _Elements>...>::value>::type>
 explicit
        constexpr tuple(_UElements&&... __elements)
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename... _UElements, typename = typename
        enable_if<__and_<is_convertible<const _UElements&,
     _Elements>...>::value>::type>
        constexpr tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename = typename
        enable_if<__and_<is_convertible<_UElements,
     _Elements>...>::value>::type>
        constexpr tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
        { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      noexcept(is_nothrow_move_assignable<_Inherited>::value)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
        tuple&
        operator=(const tuple<_UElements...>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
        tuple&
        operator=(tuple<_UElements...>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      noexcept(noexcept(__in._M_swap(__in)))
      { _Inherited::_M_swap(__in); }
    };


  template<>
    class tuple<>
    {
    public:
      void swap(tuple&) noexcept { }
    };



  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _T1& __a1, const _T2& __a2)
      : _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2, typename = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
        explicit
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename _U1, typename _U2, typename = typename
 enable_if<__and_<is_convertible<const _U1&, _T1>,
    is_convertible<const _U2&, _T2>>::value>::type>
        constexpr tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2, typename = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
        constexpr tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2, typename = typename
 enable_if<__and_<is_convertible<const _U1&, _T1>,
    is_convertible<const _U2&, _T2>>::value>::type>
        constexpr tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2, typename = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
        constexpr tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _U1, typename _U2>
 tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _U1, typename _U2>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2>
        tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2>
        tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      noexcept(is_nothrow_move_assignable<_Inherited>::value)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const tuple<_U1, _U2>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(tuple<_U1, _U2>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const pair<_U1, _U2>& __in)
        {
   this->_M_head(*this) = __in.first;
   this->_M_tail(*this)._M_head(*this) = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(pair<_U1, _U2>&& __in)
        {
   this->_M_head(*this) = std::forward<_U1>(__in.first);
   this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
   return *this;
 }

      void
      swap(tuple& __in)
      noexcept(noexcept(__in._M_swap(__in)))
      { _Inherited::_M_swap(__in); }
    };



  template<std::size_t __i, typename _Tp>
    struct tuple_element;





  template<std::size_t __i, typename _Head, typename... _Tail>
    struct tuple_element<__i, tuple<_Head, _Tail...> >
    : tuple_element<__i - 1, tuple<_Tail...> > { };




  template<typename _Head, typename... _Tail>
    struct tuple_element<0, tuple<_Head, _Tail...> >
    {
      typedef _Head type;
    };


  template<std::size_t __i, typename _Tp>
    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
    };
# 797 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/tuple" 3
  template<typename _Tp>
    struct tuple_size;



  template<typename _Tp>
    struct tuple_size<const _Tp>
    : integral_constant<size_t, tuple_size<_Tp>::value> { };

  template<typename _Tp>
    struct tuple_size<volatile _Tp>
    : integral_constant<size_t, tuple_size<_Tp>::value> { };

  template<typename _Tp>
    struct tuple_size<const volatile _Tp>
    : integral_constant<size_t, tuple_size<_Tp>::value> { };


  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr _Head&
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr const _Head&
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
    get(tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<__element_type&&>(std::get<__i>(__t));
    }
# 884 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/tuple" 3
  template<typename _Tp, typename _Up, size_t __i, size_t __size>
    struct __tuple_compare
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) == std::get<__i>(__u))
   && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
      }

      static constexpr bool
      __less(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) < std::get<__i>(__u))
   || (!bool(std::get<__i>(__u) < std::get<__i>(__t))
       && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));
      }
    };

  template<typename _Tp, typename _Up, size_t __size>
    struct __tuple_compare<_Tp, _Up, __size, __size>
    {
      static constexpr bool
      __eq(const _Tp&, const _Up&) { return true; }

      static constexpr bool
      __less(const _Tp&, const _Up&) { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__eq(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__less(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }


  template<typename... _Elements>
    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }

  template<typename... _Elements>
    tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };

  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<pair<_T1, _T2>> : true_type
    { };

  template<typename _Tp, std::size_t _Nm>
    struct __is_tuple_like_impl<array<_Tp, _Nm>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<typename std::remove_cv
            <typename std::remove_reference<_Tp>::type>::type>::type
    { };

  template<size_t, typename, typename, size_t>
    struct __make_tuple_impl;

  template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>
    struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
    : __make_tuple_impl<_Idx + 1,
   tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,
   _Tuple, _Nm>
    { };

  template<std::size_t _Nm, typename _Tuple, typename... _Tp>
    struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
    {
      typedef tuple<_Tp...> __type;
    };

  template<typename _Tuple>
    struct __do_make_tuple
    : __make_tuple_impl<0, tuple<>, _Tuple, std::tuple_size<_Tuple>::value>
    { };


  template<typename _Tuple>
    struct __make_tuple
    : public __do_make_tuple<typename std::remove_cv
            <typename std::remove_reference<_Tuple>::type>::type>
    { };


  template<typename...>
    struct __combine_tuples;

  template<>
    struct __combine_tuples<>
    {
      typedef tuple<> __type;
    };

  template<typename... _Ts>
    struct __combine_tuples<tuple<_Ts...>>
    {
      typedef tuple<_Ts...> __type;
    };

  template<typename... _T1s, typename... _T2s, typename... _Rem>
    struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
    {
      typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
     _Rem...>::__type __type;
    };


  template<typename... _Tpls>
    struct __tuple_cat_result
    {
      typedef typename __combine_tuples
        <typename __make_tuple<_Tpls>::__type...>::__type __type;
    };



  template<typename...>
    struct __make_1st_indices;

  template<>
    struct __make_1st_indices<>
    {
      typedef std::_Index_tuple<> __type;
    };

  template<typename _Tp, typename... _Tpls>
    struct __make_1st_indices<_Tp, _Tpls...>
    {
      typedef typename std::_Build_index_tuple<std::tuple_size<
 typename std::remove_reference<_Tp>::type>::value>::__type __type;
    };




  template<typename _Ret, typename _Indices, typename... _Tpls>
    struct __tuple_concater;

  template<typename _Ret, std::size_t... _Is, typename _Tp, typename... _Tpls>
    struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>
    {
      template<typename... _Us>
        static constexpr _Ret
        _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
        {
   typedef typename __make_1st_indices<_Tpls...>::__type __idx;
   typedef __tuple_concater<_Ret, __idx, _Tpls...> __next;
   return __next::_S_do(std::forward<_Tpls>(__tps)...,
          std::forward<_Us>(__us)...,
          std::get<_Is>(std::forward<_Tp>(__tp))...);
 }
    };

  template<typename _Ret>
    struct __tuple_concater<_Ret, std::_Index_tuple<>>
    {
      template<typename... _Us>
 static constexpr _Ret
 _S_do(_Us&&... __us)
        {
   return _Ret(std::forward<_Us>(__us)...);
 }
    };


  template<typename... _Tpls, typename = typename
           enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>
    constexpr auto
    tuple_cat(_Tpls&&... __tpls)
    -> typename __tuple_cat_result<_Tpls...>::__type
    {
      typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
      typedef typename __make_1st_indices<_Tpls...>::__type __idx;
      typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
      return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
    }


  template<typename... _Elements>
    inline tuple<_Elements&...>
    tie(_Elements&... __args) noexcept
    { return tuple<_Elements&...>(__args...); }


  template<typename... _Elements>
    inline void
    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }



  struct _Swallow_assign
  {
    template<class _Tp>
      const _Swallow_assign&
      operator=(const _Tp&) const
      { return *this; }
  };

  const _Swallow_assign ignore{};


  template<typename... _Types, typename _Alloc>
    struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };


  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      inline
      pair<_T1, _T2>::
      pair(piecewise_construct_t,
    tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
      typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
      typename _Build_index_tuple<sizeof...(_Args2)>::__type())
      { }

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
    _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
      { }




}
# 56 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _MemberPointer>
    class _Mem_fn;
  template<typename _Tp, typename _Class>
    _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::*) noexcept;


  template<typename _Functor, typename = __void_t<>>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<_Functor,
      __void_t<typename _Functor::result_type>>
    { typedef typename _Functor::result_type result_type; };





  template<typename _Functor>
    struct _Weak_result_type_impl
    : _Maybe_get_result_type<_Functor>
    { };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) const>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)
      const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)
      const volatile>
    { typedef _Res result_type; };





  template<typename _Functor>
    struct _Weak_result_type
    : _Weak_result_type_impl<typename remove_cv<_Functor>::type>
    { };





  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (!is_member_pointer<_Functor>::value
       && !is_function<_Functor>::value
       && !is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor&(_Args&&...)>::type
    >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }

  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
             (is_member_pointer<_Functor>::value
              && !is_function<_Functor>::value
              && !is_function<typename remove_pointer<_Functor>::type>::value),
             typename result_of<_Functor(_Args&&...)>::type
           >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return std::mem_fn(__f)(std::forward<_Args>(__args)...);
    }


  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (is_pointer<_Functor>::value
       && is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor(_Args&&...)>::type
    >::type
    __invoke(_Functor __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }






  template<bool _Unary, bool _Binary, typename _Tp>
    struct _Reference_wrapper_base_impl;


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, false, _Tp>
    : _Weak_result_type<_Tp>
    { };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, false, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
    };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };


   template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };

  template<typename _Tp, typename = __void_t<>> struct __has_argument_type : false_type { }; template<typename _Tp> struct __has_argument_type<_Tp, __void_t<typename _Tp::argument_type>> : true_type { };
  template<typename _Tp, typename = __void_t<>> struct __has_first_argument_type : false_type { }; template<typename _Tp> struct __has_first_argument_type<_Tp, __void_t<typename _Tp::first_argument_type>> : true_type { };
  template<typename _Tp, typename = __void_t<>> struct __has_second_argument_type : false_type { }; template<typename _Tp> struct __has_second_argument_type<_Tp, __void_t<typename _Tp::second_argument_type>> : true_type { };







  template<typename _Tp>
    struct _Reference_wrapper_base
    : _Reference_wrapper_base_impl<
      __has_argument_type<_Tp>::value,
      __has_first_argument_type<_Tp>::value
      && __has_second_argument_type<_Tp>::value,
      _Tp>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1)>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) volatile>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const volatile>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(*)(_T1)>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(*)(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)()>
    : unary_function<_T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2)>
    : binary_function<_T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const>
    : unary_function<const _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const>
    : binary_function<const _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() volatile>
    : unary_function<volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) volatile>
    : binary_function<volatile _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const volatile>
    : unary_function<const volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const volatile>
    : binary_function<const volatile _T1*, _T2, _Res>
    { };






  template<typename _Tp>
    class reference_wrapper
    : public _Reference_wrapper_base<typename remove_cv<_Tp>::type>
    {
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata) noexcept
      : _M_data(std::__addressof(__indata))
      { }

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper&) = default;

      reference_wrapper&
      operator=(const reference_wrapper&) = default;

      operator _Tp&() const noexcept
      { return this->get(); }

      _Tp&
      get() const noexcept
      { return *_M_data; }

      template<typename... _Args>
 typename result_of<_Tp&(_Args&&...)>::type
 operator()(_Args&&... __args) const
 {
   return __invoke(get(), std::forward<_Args>(__args)...);
 }
    };



  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
    { return reference_wrapper<_Tp>(__t); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(const _Tp& __t) noexcept
    { return reference_wrapper<const _Tp>(__t); }

  template<typename _Tp>
    void ref(const _Tp&&) = delete;

  template<typename _Tp>
    void cref(const _Tp&&) = delete;


  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(reference_wrapper<_Tp> __t) noexcept
    { return ref(__t.get()); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(reference_wrapper<_Tp> __t) noexcept
    { return cref(__t.get()); }



  template<typename... _Types>
    struct _Pack : integral_constant<size_t, sizeof...(_Types)>
    { };

  template<typename _From, typename _To, bool = _From::value == _To::value>
    struct _AllConvertible : false_type
    { };

  template<typename... _From, typename... _To>
    struct _AllConvertible<_Pack<_From...>, _Pack<_To...>, true>
    : __and_<is_convertible<_From, _To>...>
    { };

  template<typename _Tp1, typename _Tp2>
    using _NotSame = __not_<is_same<typename std::decay<_Tp1>::type,
        typename std::decay<_Tp2>::type>>;






  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };


  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
    : std::unary_function<_T1, _Res> { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>
    : std::binary_function<_T1, _T2, _Res> { };

  template<typename _Signature>
    struct _Mem_fn_traits;

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Mem_fn_traits_base
    {
      using __result_type = _Res;
      using __class_type = _Class;
      using __arg_types = _Pack<_ArgTypes...>;
      using __maybe_type
 = _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>;
      using __arity = integral_constant<size_t, sizeof...(_ArgTypes)>;
    };
# 540 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes...) ; using __lvalue = true_type; using __rvalue = true_type; using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes... ...) ; using __lvalue = true_type; using __rvalue = true_type; using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes...) const ; using __lvalue = true_type; using __rvalue = true_type; using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes... ...) const ; using __lvalue = true_type; using __rvalue = true_type; using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes...) volatile ; using __lvalue = true_type; using __rvalue = true_type; using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes... ...) volatile ; using __lvalue = true_type; using __rvalue = true_type; using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes...) const volatile ; using __lvalue = true_type; using __rvalue = true_type; using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes... ...) const volatile ; using __lvalue = true_type; using __rvalue = true_type; using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes...) &; using __lvalue = true_type; using __rvalue = false_type; using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes... ...) &; using __lvalue = true_type; using __rvalue = false_type; using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes...) const &; using __lvalue = true_type; using __rvalue = false_type; using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes... ...) const &; using __lvalue = true_type; using __rvalue = false_type; using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes...) volatile &; using __lvalue = true_type; using __rvalue = false_type; using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes... ...) volatile &; using __lvalue = true_type; using __rvalue = false_type; using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes...) const volatile &; using __lvalue = true_type; using __rvalue = false_type; using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes... ...) const volatile &; using __lvalue = true_type; using __rvalue = false_type; using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes...) &&; using __lvalue = false_type; using __rvalue = true_type; using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes... ...) &&; using __lvalue = false_type; using __rvalue = true_type; using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes...) const &&; using __lvalue = false_type; using __rvalue = true_type; using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes... ...) const &&; using __lvalue = false_type; using __rvalue = true_type; using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes...) volatile &&; using __lvalue = false_type; using __rvalue = true_type; using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes... ...) volatile &&; using __lvalue = false_type; using __rvalue = true_type; using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes...) const volatile &&; using __lvalue = false_type; using __rvalue = true_type; using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __pmf_type = _Res (_Class::*)(_ArgTypes... ...) const volatile &&; using __lvalue = false_type; using __rvalue = true_type; using __vararg = true_type; };




  template<typename _MemFunPtr,
    bool __is_mem_fn = is_member_function_pointer<_MemFunPtr>::value>
    class _Mem_fn_base
    : public _Mem_fn_traits<_MemFunPtr>::__maybe_type
    {
      using _Traits = _Mem_fn_traits<_MemFunPtr>;

      using _Class = typename _Traits::__class_type;
      using _ArgTypes = typename _Traits::__arg_types;
      using _Pmf = typename _Traits::__pmf_type;

      using _Arity = typename _Traits::__arity;
      using _Varargs = typename _Traits::__vararg;

      template<typename _Func, typename... _BoundArgs>
 friend struct _Bind_check_arity;



      template<typename _Args>
 using _CheckArgs = typename conditional<_Varargs::value,
   __bool_constant<(_Args::value >= _ArgTypes::value)>,
   _AllConvertible<_Args, _ArgTypes>
 >::type;

    public:
      using result_type = typename _Traits::__result_type;

      explicit _Mem_fn_base(_Pmf __pmf) : _M_pmf(__pmf) { }


      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
 result_type
 operator()(_Class& __object, _Args&&... __args) const
 { return (__object.*_M_pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__rvalue,
                          _CheckArgs<_Pack<_Args...>>>>
 result_type
 operator()(_Class&& __object, _Args&&... __args) const
 {
   return (std::move(__object).*_M_pmf)(std::forward<_Args>(__args)...);
 }


      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
 result_type
 operator()(_Class* __object, _Args&&... __args) const
 { return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }


      template<typename _Tp, typename... _Args, typename _Req
               = _Require<_NotSame<_Class, _Tp>, _NotSame<_Class*, _Tp>,
                          _CheckArgs<_Pack<_Args...>>>>
 result_type
 operator()(_Tp&& __object, _Args&&... __args) const
 {
   return _M_call(std::forward<_Tp>(__object), &__object,
       std::forward<_Args>(__args)...);
 }


      template<typename _Tp, typename... _Args, typename _Req
               = _Require<is_base_of<_Class, _Tp>, typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
 result_type
 operator()(reference_wrapper<_Tp> __ref, _Args&&... __args) const
 { return operator()(__ref.get(), std::forward<_Args>(__args)...); }

    private:
      template<typename _Tp, typename... _Args>
 result_type
 _M_call(_Tp&& __object, const volatile _Class *,
  _Args&&... __args) const
 {
   return (std::forward<_Tp>(__object).*_M_pmf)
     (std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args>
 result_type
 _M_call(_Tp&& __ptr, const volatile void *, _Args&&... __args) const
 { return ((*__ptr).*_M_pmf)(std::forward<_Args>(__args)...); }

      _Pmf _M_pmf;
    };


  template<typename _Res, typename _Class>
    class _Mem_fn_base<_Res _Class::*, false>
    {
      using __pm_type = _Res _Class::*;




      template<typename _Tp>
 auto
 _M_call(_Tp&& __object, const _Class *) const noexcept
 -> decltype(std::forward<_Tp>(__object).*std::declval<__pm_type&>())
 { return std::forward<_Tp>(__object).*_M_pm; }

      template<typename _Tp, typename _Up>
 auto
 _M_call(_Tp&& __object, _Up * const *) const noexcept
 -> decltype((*std::forward<_Tp>(__object)).*std::declval<__pm_type&>())
 { return (*std::forward<_Tp>(__object)).*_M_pm; }

      template<typename _Tp>
 auto
 _M_call(_Tp&& __ptr, const volatile void*) const
 noexcept(noexcept((*__ptr).*std::declval<__pm_type&>()))
 -> decltype((*__ptr).*std::declval<__pm_type&>())
 { return (*__ptr).*_M_pm; }

      using _Arity = integral_constant<size_t, 0>;
      using _Varargs = false_type;

      template<typename _Func, typename... _BoundArgs>
 friend struct _Bind_check_arity;

    public:
      explicit
      _Mem_fn_base(_Res _Class::*__pm) noexcept : _M_pm(__pm) { }


      _Res&
      operator()(_Class& __object) const noexcept
      { return __object.*_M_pm; }

      const _Res&
      operator()(const _Class& __object) const noexcept
      { return __object.*_M_pm; }

      _Res&&
      operator()(_Class&& __object) const noexcept
      { return std::forward<_Class>(__object).*_M_pm; }

      const _Res&&
      operator()(const _Class&& __object) const noexcept
      { return std::forward<const _Class>(__object).*_M_pm; }


      _Res&
      operator()(_Class* __object) const noexcept
      { return __object->*_M_pm; }

      const _Res&
      operator()(const _Class* __object) const noexcept
      { return __object->*_M_pm; }


      template<typename _Tp, typename _Req = _Require<_NotSame<_Class*, _Tp>>>
 auto
 operator()(_Tp&& __unknown) const
 noexcept(noexcept(std::declval<_Mem_fn_base*>()->_M_call
     (std::forward<_Tp>(__unknown), &__unknown)))
 -> decltype(this->_M_call(std::forward<_Tp>(__unknown), &__unknown))
 { return _M_call(std::forward<_Tp>(__unknown), &__unknown); }

      template<typename _Tp, typename _Req = _Require<is_base_of<_Class, _Tp>>>
 auto
 operator()(reference_wrapper<_Tp> __ref) const
 noexcept(noexcept(std::declval<_Mem_fn_base&>()(__ref.get())))
 -> decltype((*this)(__ref.get()))
 { return (*this)(__ref.get()); }

    private:
      _Res _Class::*_M_pm;
    };

  template<typename _Res, typename _Class>
    struct _Mem_fn<_Res _Class::*>
    : _Mem_fn_base<_Res _Class::*>
    {
      using _Mem_fn_base<_Res _Class::*>::_Mem_fn_base;
    };
# 737 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
  template<typename _Tp, typename _Class>
    inline _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::* __pm) noexcept
    {
      return _Mem_fn<_Tp _Class::*>(__pm);
    }







  template<typename _Tp>
    struct is_bind_expression
    : public false_type { };






  template<typename _Tp>
    struct is_placeholder
    : public integral_constant<int, 0>
    { };




  template<int _Num> struct _Placeholder { };







  namespace placeholders
  {





    extern const _Placeholder<1> _1;
    extern const _Placeholder<2> _2;
    extern const _Placeholder<3> _3;
    extern const _Placeholder<4> _4;
    extern const _Placeholder<5> _5;
    extern const _Placeholder<6> _6;
    extern const _Placeholder<7> _7;
    extern const _Placeholder<8> _8;
    extern const _Placeholder<9> _9;
    extern const _Placeholder<10> _10;
    extern const _Placeholder<11> _11;
    extern const _Placeholder<12> _12;
    extern const _Placeholder<13> _13;
    extern const _Placeholder<14> _14;
    extern const _Placeholder<15> _15;
    extern const _Placeholder<16> _16;
    extern const _Placeholder<17> _17;
    extern const _Placeholder<18> _18;
    extern const _Placeholder<19> _19;
    extern const _Placeholder<20> _20;
    extern const _Placeholder<21> _21;
    extern const _Placeholder<22> _22;
    extern const _Placeholder<23> _23;
    extern const _Placeholder<24> _24;
    extern const _Placeholder<25> _25;
    extern const _Placeholder<26> _26;
    extern const _Placeholder<27> _27;
    extern const _Placeholder<28> _28;
    extern const _Placeholder<29> _29;

  }
# 821 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
  template<int _Num>
    struct is_placeholder<_Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };

  template<int _Num>
    struct is_placeholder<const _Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };





  struct _No_tuple_element;






  template<std::size_t __i, typename _Tuple, bool _IsSafe>
    struct _Safe_tuple_element_impl
    : tuple_element<__i, _Tuple> { };






  template<std::size_t __i, typename _Tuple>
    struct _Safe_tuple_element_impl<__i, _Tuple, false>
    {
      typedef _No_tuple_element type;
    };





 template<std::size_t __i, typename _Tuple>
   struct _Safe_tuple_element
   : _Safe_tuple_element_impl<__i, _Tuple,
         (__i < tuple_size<_Tuple>::value)>
   { };
# 878 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
  template<typename _Arg,
    bool _IsBindExp = is_bind_expression<_Arg>::value,
    bool _IsPlaceholder = (is_placeholder<_Arg>::value > 0)>
    class _Mu;





  template<typename _Tp>
    class _Mu<reference_wrapper<_Tp>, false, false>
    {
    public:
      typedef _Tp& result_type;





      template<typename _CVRef, typename _Tuple>
 result_type
 operator()(_CVRef& __arg, _Tuple&) const volatile
 { return __arg.get(); }
    };






  template<typename _Arg>
    class _Mu<_Arg, true, false>
    {
    public:
      template<typename _CVArg, typename... _Args>
 auto
 operator()(_CVArg& __arg,
     tuple<_Args...>& __tuple) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {

   typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
     _Indexes;
   return this->__call(__arg, __tuple, _Indexes());
 }

    private:


      template<typename _CVArg, typename... _Args, std::size_t... _Indexes>
 auto
 __call(_CVArg& __arg, tuple<_Args...>& __tuple,
        const _Index_tuple<_Indexes...>&) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {
   return __arg(std::forward<_Args>(std::get<_Indexes>(__tuple))...);
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, true>
    {
    public:
      template<typename _Signature> class result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 class result<_CVMu(_CVArg, _Tuple)>
 {



   typedef typename _Safe_tuple_element<(is_placeholder<_Arg>::value
      - 1), _Tuple>::type
     __base_type;

 public:
   typedef typename add_rvalue_reference<__base_type>::type type;
 };

      template<typename _Tuple>
 typename result<_Mu(_Arg, _Tuple)>::type
 operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 {
   return std::forward<typename result<_Mu(_Arg, _Tuple)>::type>(
       ::std::get<(is_placeholder<_Arg>::value - 1)>(__tuple));
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, false>
    {
    public:
      template<typename _Signature> struct result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 struct result<_CVMu(_CVArg, _Tuple)>
 {
   typedef typename add_lvalue_reference<_CVArg>::type type;
 };


      template<typename _CVArg, typename _Tuple>
 _CVArg&&
 operator()(_CVArg&& __arg, _Tuple&) const volatile
 { return std::forward<_CVArg>(__arg); }
    };






  template<typename _Tp>
    struct _Maybe_wrap_member_pointer
    {
      typedef _Tp type;

      static const _Tp&
      __do_wrap(const _Tp& __x)
      { return __x; }

      static _Tp&&
      __do_wrap(_Tp&& __x)
      { return static_cast<_Tp&&>(__x); }
    };






  template<typename _Tp, typename _Class>
    struct _Maybe_wrap_member_pointer<_Tp _Class::*>
    {
      typedef _Mem_fn<_Tp _Class::*> type;

      static type
      __do_wrap(_Tp _Class::* __pm)
      { return type(__pm); }
    };





  template<>
    struct _Maybe_wrap_member_pointer<void>
    {
      typedef void type;
    };


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(volatile tuple<_Tp...>& __tuple)
    -> __tuple_element_t<_Ind, tuple<_Tp...>> volatile&
    { return std::get<_Ind>(const_cast<tuple<_Tp...>&>(__tuple)); }


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(const volatile tuple<_Tp...>& __tuple)
    -> __tuple_element_t<_Ind, tuple<_Tp...>> const volatile&
    { return std::get<_Ind>(const_cast<const tuple<_Tp...>&>(__tuple)); }


  template<typename _Signature>
    struct _Bind;

   template<typename _Functor, typename... _Bound_args>
    class _Bind<_Functor(_Bound_args...)>
    : public _Weak_result_type<_Functor>
    {
      typedef _Bind __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return _M_f(_Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return _M_f(_Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_v(tuple<_Args...>&& __args,
   _Index_tuple<_Indexes...>) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_c_v(tuple<_Args...>&& __args,
     _Index_tuple<_Indexes...>) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

     public:
      template<typename... _Args>
 explicit _Bind(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args, typename _Result
 = decltype( std::declval<_Functor&>()(
       _Mu<_Bound_args>()( std::declval<_Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
         typename add_const<_Functor>::type&>::type>()(
       _Mu<_Bound_args>()( std::declval<const _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const
 {
   return this->__call_c<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_volatile<_Functor>::type&>::type>()(
       _Mu<_Bound_args>()( std::declval<volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) volatile
 {
   return this->__call_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_cv<_Functor>::type&>::type>()(
       _Mu<_Bound_args>()( std::declval<const volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const volatile
 {
   return this->__call_c_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };


  template<typename _Result, typename _Signature>
    struct _Bind_result;

  template<typename _Result, typename _Functor, typename... _Bound_args>
    class _Bind_result<_Result, _Functor(_Bound_args...)>
    {
      typedef _Bind_result __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Res>
 struct __enable_if_void : enable_if<is_void<_Res>::value, int> { };
      template<typename _Res>
 struct __disable_if_void : enable_if<!is_void<_Res>::value, int> { };


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0)
 {
   return _M_f(_Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0)
 {
   _M_f(_Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const
 {
   return _M_f(_Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const
 {
   _M_f(_Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 void
 __call(tuple<_Args...>&& __args,
        _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

    public:
      typedef _Result result_type;

      template<typename... _Args>
 explicit _Bind_result(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind_result(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind_result(const _Bind_result&) = default;

      _Bind_result(_Bind_result&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };





  template<typename _Signature>
    struct is_bind_expression<_Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<volatile _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const volatile _Bind<_Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<_Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<volatile _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const volatile _Bind_result<_Result, _Signature>>
    : public true_type { };

  template<typename _Func, typename... _BoundArgs>
    struct _Bind_check_arity { };

  template<typename _Ret, typename... _Args, typename... _BoundArgs>
    struct _Bind_check_arity<_Ret (*)(_Args...), _BoundArgs...>
    {
      static_assert(sizeof...(_BoundArgs) == sizeof...(_Args),
                   "Wrong number of arguments for function");
    };

  template<typename _Ret, typename... _Args, typename... _BoundArgs>
    struct _Bind_check_arity<_Ret (*)(_Args......), _BoundArgs...>
    {
      static_assert(sizeof...(_BoundArgs) >= sizeof...(_Args),
                   "Wrong number of arguments for function");
    };

  template<typename _Tp, typename _Class, typename... _BoundArgs>
    struct _Bind_check_arity<_Tp _Class::*, _BoundArgs...>
    {
      using _Arity = typename _Mem_fn<_Tp _Class::*>::_Arity;
      using _Varargs = typename _Mem_fn<_Tp _Class::*>::_Varargs;
      static_assert(_Varargs::value
      ? sizeof...(_BoundArgs) >= _Arity::value + 1
      : sizeof...(_BoundArgs) == _Arity::value + 1,
      "Wrong number of arguments for pointer-to-member");
    };




  template<typename _Tp, typename _Tp2 = typename decay<_Tp>::type>
    using __is_socketlike = __or_<is_integral<_Tp2>, is_enum<_Tp2>>;

  template<bool _SocketLike, typename _Func, typename... _BoundArgs>
    struct _Bind_helper
    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>
 __maybe_type;
      typedef typename __maybe_type::type __func_type;
      typedef _Bind<__func_type(typename decay<_BoundArgs>::type...)> type;
    };




  template<typename _Func, typename... _BoundArgs>
    struct _Bind_helper<true, _Func, _BoundArgs...>
    { };





  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Func>(__f)),
      std::forward<_BoundArgs>(__args)...);
    }

  template<typename _Result, typename _Func, typename... _BoundArgs>
    struct _Bindres_helper
    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>
 __maybe_type;
      typedef typename __maybe_type::type __functor_type;
      typedef _Bind_result<_Result,
      __functor_type(typename decay<_BoundArgs>::type...)>
 type;
    };





  template<typename _Result, typename _Func, typename... _BoundArgs>
    inline
    typename _Bindres_helper<_Result, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bindres_helper<_Result, _Func, _BoundArgs...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Func>(__f)),
      std::forward<_BoundArgs>(__args)...);
    }

  template<typename _Signature>
    struct _Bind_simple;

  template<typename _Callable, typename... _Args>
    struct _Bind_simple<_Callable(_Args...)>
    {
      typedef typename result_of<_Callable(_Args...)>::type result_type;

      template<typename _Tp, typename... _Up>
        explicit
        _Bind_simple(_Tp&& __f, _Up&&... __args)
        : _M_bound(std::forward<_Tp>(__f), std::forward<_Up>(__args)...)
        { }

      _Bind_simple(const _Bind_simple&) = default;
      _Bind_simple(_Bind_simple&&) = default;

      result_type
      operator()()
      {
        typedef typename _Build_index_tuple<sizeof...(_Args)>::__type _Indices;
        return _M_invoke(_Indices());
      }

    private:
      template<std::size_t... _Indices>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
        {


          return std::forward<_Callable>(std::get<0>(_M_bound))(
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
        }

      std::tuple<_Callable, _Args...> _M_bound;
    };

  template<typename _Func, typename... _BoundArgs>
    struct _Bind_simple_helper
    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>
        __maybe_type;
      typedef typename __maybe_type::type __func_type;
      typedef _Bind_simple<__func_type(typename decay<_BoundArgs>::type...)>
        __type;
    };



  template<typename _Callable, typename... _Args>
    typename _Bind_simple_helper<_Callable, _Args...>::__type
    __bind_simple(_Callable&& __callable, _Args&&... __args)
    {
      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::__type __result_type;
      return __result_type(
          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),
          std::forward<_Args>(__args)...);
    }






  class bad_function_call : public std::exception
  {
  public:
    virtual ~bad_function_call() noexcept;

    const char* what() const noexcept;
  };







  template<typename _Tp>
    struct __is_location_invariant
    : is_trivially_copyable<_Tp>::type
    { };

  class _Undefined_class;

  union _Nocopy_types
  {
    void* _M_object;
    const void* _M_const_object;
    void (*_M_function_pointer)();
    void (_Undefined_class::*_M_member_pointer)();
  };

  union _Any_data
  {
    void* _M_access() { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const
      { return *static_cast<const _Tp*>(_M_access()); }

    _Nocopy_types _M_unused;
    char _M_pod_data[sizeof(_Nocopy_types)];
  };

  enum _Manager_operation
  {
    __get_type_info,
    __get_functor_ptr,
    __clone_functor,
    __destroy_functor
  };



  template<typename _Tp>
    struct _Simple_type_wrapper
    {
      _Simple_type_wrapper(_Tp __value) : __value(__value) { }

      _Tp __value;
    };

  template<typename _Tp>
    struct __is_location_invariant<_Simple_type_wrapper<_Tp> >
    : __is_location_invariant<_Tp>
    { };



  template<typename _Functor>
    inline _Functor&
    __callable_functor(_Functor& __f)
    { return __f; }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* &__p)
    { return std::mem_fn(__p); }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* const &__p)
    { return std::mem_fn(__p); }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* volatile &__p)
    { return std::mem_fn(__p); }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* const volatile &__p)
    { return std::mem_fn(__p); }

  template<typename _Signature>
    class function;


  class _Function_base
  {
  public:
    static const std::size_t _M_max_size = sizeof(_Nocopy_types);
    static const std::size_t _M_max_align = __alignof__(_Nocopy_types);

    template<typename _Functor>
      class _Base_manager
      {
      protected:
 static const bool __stored_locally =
 (__is_location_invariant<_Functor>::value
  && sizeof(_Functor) <= _M_max_size
  && __alignof__(_Functor) <= _M_max_align
  && (_M_max_align % __alignof__(_Functor) == 0));

 typedef integral_constant<bool, __stored_locally> _Local_storage;


 static _Functor*
 _M_get_pointer(const _Any_data& __source)
 {
   const _Functor* __ptr =
     __stored_locally? std::__addressof(__source._M_access<_Functor>())
                                 : __source._M_access<_Functor*>();
   return const_cast<_Functor*>(__ptr);
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 {
   new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 {
   __dest._M_access<_Functor*>() =
     new _Functor(*__source._M_access<_Functor*>());
 }



 static void
 _M_destroy(_Any_data& __victim, true_type)
 {
   __victim._M_access<_Functor>().~_Functor();
 }


 static void
 _M_destroy(_Any_data& __victim, false_type)
 {
   delete __victim._M_access<_Functor*>();
 }

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = _M_get_pointer(__source);
       break;

     case __clone_functor:
       _M_clone(__dest, __source, _Local_storage());
       break;

     case __destroy_functor:
       _M_destroy(__dest, _Local_storage());
       break;
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f)
 { _M_init_functor(__functor, std::move(__f), _Local_storage()); }

 template<typename _Signature>
   static bool
   _M_not_empty_function(const function<_Signature>& __f)
   { return static_cast<bool>(__f); }

 template<typename _Tp>
   static bool
   _M_not_empty_function(_Tp* const& __fp)
   { return __fp; }

 template<typename _Class, typename _Tp>
   static bool
   _M_not_empty_function(_Tp _Class::* const& __mp)
   { return __mp; }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp&)
   { return true; }

      private:
 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 { new (__functor._M_access()) _Functor(std::move(__f)); }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    template<typename _Functor>
      class _Ref_manager : public _Base_manager<_Functor*>
      {
 typedef _Function_base::_Base_manager<_Functor*> _Base;

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = *_Base::_M_get_pointer(__source);
       return is_const<_Functor>::value;
       break;

     default:
       _Base::_M_manager(__dest, __source, __op);
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, reference_wrapper<_Functor> __f)
 {
   _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
 }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 _M_manager(_M_functor, _M_functor, __destroy_functor);
    }


    bool _M_empty() const { return !_M_manager; }

    typedef bool (*_Manager_type)(_Any_data&, const _Any_data&,
      _Manager_operation);

    _Any_data _M_functor;
    _Manager_type _M_manager;
  };

  template<typename _Signature, typename _Functor>
    class _Function_handler;

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
 return (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
 (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
 return std::__callable_functor(**_Base::_M_get_pointer(__functor))(
       std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
 std::__callable_functor(**_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename _Res,
    typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Member _Class::*>
    : public _Function_handler<void(_ArgTypes...), _Member _Class::*>
    {
      typedef _Function_handler<void(_ArgTypes...), _Member _Class::*>
 _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
 return std::mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Member _Class::*>
    : public _Function_base::_Base_manager<
   _Simple_type_wrapper< _Member _Class::* > >
    {
      typedef _Member _Class::* _Functor;
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   _Manager_operation __op)
      {
 switch (__op)
   {

   case __get_type_info:
     __dest._M_access<const type_info*>() = &typeid(_Functor);
     break;

   case __get_functor_ptr:
     __dest._M_access<_Functor*>() =
       &_Base::_M_get_pointer(__source)->__value;
     break;

   default:
     _Base::_M_manager(__dest, __source, __op);
   }
 return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
 std::mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _From, typename _To>
    using __check_func_return_type
      = __or_<is_void<_To>, is_convertible<_From, _To>>;







  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
      private _Function_base
    {
      typedef _Res _Signature_type(_ArgTypes...);

      template<typename _Func,
        typename _Res2 = typename result_of<_Func(_ArgTypes...)>::type>
 struct _Callable : __check_func_return_type<_Res2, _Res> { };



      template<typename _Tp>
 struct _Callable<function, _Tp> : false_type { };

      template<typename _Cond, typename _Tp>
 using _Requires = typename enable_if<_Cond::value, _Tp>::type;

    public:
      typedef _Res result_type;







      function() noexcept
      : _Function_base() { }





      function(nullptr_t) noexcept
      : _Function_base() { }
# 2019 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
      function(const function& __x);
# 2028 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
      function(function&& __x) : _Function_base()
      {
 __x.swap(*this);
      }
# 2051 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
      template<typename _Functor,
        typename = _Requires<__not_<is_same<_Functor, function>>, void>,
        typename = _Requires<_Callable<_Functor>, void>>
 function(_Functor);
# 2068 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
      function&
      operator=(const function& __x)
      {
 function(__x).swap(*this);
 return *this;
      }
# 2086 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
      function&
      operator=(function&& __x)
      {
 function(std::move(__x)).swap(*this);
 return *this;
      }
# 2100 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
      function&
      operator=(nullptr_t) noexcept
      {
 if (_M_manager)
   {
     _M_manager(_M_functor, _M_functor, __destroy_functor);
     _M_manager = nullptr;
     _M_invoker = nullptr;
   }
 return *this;
      }
# 2128 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
      template<typename _Functor>
 _Requires<_Callable<typename decay<_Functor>::type>, function&>
 operator=(_Functor&& __f)
 {
   function(std::forward<_Functor>(__f)).swap(*this);
   return *this;
 }


      template<typename _Functor>
 function&
 operator=(reference_wrapper<_Functor> __f) noexcept
 {
   function(__f).swap(*this);
   return *this;
 }
# 2154 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
      void swap(function& __x)
      {
 std::swap(_M_functor, __x._M_functor);
 std::swap(_M_manager, __x._M_manager);
 std::swap(_M_invoker, __x._M_invoker);
      }
# 2182 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
      explicit operator bool() const noexcept
      { return !_M_empty(); }
# 2195 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
      _Res operator()(_ArgTypes... __args) const;
# 2208 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
      const type_info& target_type() const noexcept;
# 2219 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
      template<typename _Functor> _Functor* target() noexcept;


      template<typename _Functor> const _Functor* target() const noexcept;


    private:
      using _Invoker_type = _Res (*)(const _Any_data&, _ArgTypes&&...);
      _Invoker_type _M_invoker;
  };


  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 {
   __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   _M_invoker = __x._M_invoker;
   _M_manager = __x._M_manager;
 }
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
      function(_Functor __f)
      : _Function_base()
      {
 typedef _Function_handler<_Signature_type, _Functor> _My_handler;

 if (_My_handler::_M_not_empty_function(__f))
   {
     _My_handler::_M_init_functor(_M_functor, std::move(__f));
     _M_invoker = &_My_handler::_M_invoke;
     _M_manager = &_My_handler::_M_manager;
   }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 __throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }


  template<typename _Res, typename... _ArgTypes>
    const type_info&
    function<_Res(_ArgTypes...)>::
    target_type() const noexcept
    {
      if (_M_manager)
 {
   _Any_data __typeinfo_result;
   _M_manager(__typeinfo_result, _M_functor, __get_type_info);
   return *__typeinfo_result._M_access<const type_info*>();
 }
      else
 return typeid(void);
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      _Functor*
      function<_Res(_ArgTypes...)>::
      target() noexcept
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     if (_M_manager(__ptr, _M_functor, __get_functor_ptr)
  && !is_const<_Functor>::value)
       return 0;
     else
       return __ptr._M_access<_Functor*>();
   }
 else
   return 0;
      }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      const _Functor*
      function<_Res(_ArgTypes...)>::
      target() const noexcept
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     _M_manager(__ptr, _M_functor, __get_functor_ptr);
     return __ptr._M_access<const _Functor*>();
   }
 else
   return 0;
      }
# 2331 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return !static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator==(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return !static_cast<bool>(__f); }
# 2349 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator!=(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return static_cast<bool>(__f); }
# 2367 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/functional" 3
  template<typename _Res, typename... _Args>
    inline void
    swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y)
    { __x.swap(__y); }


}
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/thread" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/memory" 1 3
# 47 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/memory" 3
# 64 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/memory" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_construct.h" 1 3
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
# 90 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_construct.h" 3
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 65 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/memory" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, ++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 105 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;




      typedef typename iterator_traits<_InputIterator>::reference _RefType1;
      typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;


      return std::__uninitialized_copy<__is_trivial(_ValueType1)
           && __is_trivial(_ValueType2)
           && __assignable>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 171 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;


      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { return std::fill_n(__first, __n, __x); }
    };
# 234 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __first != __last; ++__first, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 (std::__make_move_if_noexcept_iterator(__first),
  std::__make_move_if_noexcept_iterator(__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
# 370 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }





  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur));
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   return std::fill_n(__first, __n, _ValueType());
 }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_1<__is_trivial(_ValueType)
         && __assignable>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_default_n_1<__is_trivial(_ValueType)
           && __assignable>::
 __uninit_default_n(__first, __n);
    }





  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }


  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __n > 0; --__n, ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur);
   throw;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }
# 677 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }



}
# 66 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/memory" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tempbuf.h" 1 3
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tempbuf.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 83 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len) noexcept
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 110 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {



    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer __first, _Pointer __last,
       _ForwardIterator __seed)
        {
   if(__first == __last)
     return;

   _Pointer __cur = __first;
   try
     {
       std::_Construct(std::__addressof(*__first),
         std::move(*__seed));
       _Pointer __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       *__seed = std::move(*__prev);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer, _Pointer, _ForwardIterator) { }
    };
# 229 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tempbuf.h" 3
  template<typename _Pointer, typename _ForwardIterator>
    inline void
    __uninitialized_construct_buf(_Pointer __first, _Pointer __last,
      _ForwardIterator __seed)
    {
      typedef typename std::iterator_traits<_Pointer>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __seed);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      try
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if (_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            __first);
 }
      catch(...)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }


}
# 67 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/memory" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_raw_storage_iter.h" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_raw_storage_iter.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{






  template <class _OutputIterator, class _Tp>
    class raw_storage_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _OutputIterator _M_iter;

    public:
      explicit
      raw_storage_iterator(_OutputIterator __x)
      : _M_iter(__x) {}

      raw_storage_iterator&
      operator*() { return *this; }

      raw_storage_iterator&
      operator=(const _Tp& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), __element);
 return *this;
      }

      raw_storage_iterator<_OutputIterator, _Tp>&
      operator++()
      {
 ++_M_iter;
 return *this;
      }

      raw_storage_iterator<_OutputIterator, _Tp>
      operator++(int)
      {
 raw_storage_iterator<_OutputIterator, _Tp> __tmp = *this;
 ++_M_iter;
 return __tmp;
      }
    };


}
# 68 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/memory" 2 3






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/concurrence.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/concurrence.h" 3







namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  enum _Lock_policy { _S_single, _S_mutex, _S_atomic };



  static const _Lock_policy __default_lock_policy =



  _S_atomic;
# 67 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/concurrence.h" 3
  class __concurrence_lock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_lock_error"; }
  };

  class __concurrence_unlock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_unlock_error"; }
  };

  class __concurrence_broadcast_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_broadcast_error"; }
  };

  class __concurrence_wait_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_wait_error"; }
  };


  inline void
  __throw_concurrence_lock_error()
  { (throw (__concurrence_lock_error())); }

  inline void
  __throw_concurrence_unlock_error()
  { (throw (__concurrence_unlock_error())); }


  inline void
  __throw_concurrence_broadcast_error()
  { (throw (__concurrence_broadcast_error())); }

  inline void
  __throw_concurrence_wait_error()
  { (throw (__concurrence_wait_error())); }


  class __mutex
  {
  private:

    __gthread_mutex_t _M_mutex = { { 0, 0, 0, 0, 0, 0, 0, { 0, 0 } } };




    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex()
    {




    }
# 147 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_mutex_t* gthread_mutex(void)
      { return &_M_mutex; }
  };

  class __recursive_mutex
  {
  private:

    __gthread_recursive_mutex_t _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0, { 0, 0 } } };




    __recursive_mutex(const __recursive_mutex&);
    __recursive_mutex& operator=(const __recursive_mutex&);

  public:
    __recursive_mutex()
    {




    }
# 202 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_recursive_mutex_t* gthread_recursive_mutex(void)
    { return &_M_mutex; }
  };




  class __scoped_lock
  {
  public:
    typedef __mutex __mutex_type;

  private:
    __mutex_type& _M_device;

    __scoped_lock(const __scoped_lock&);
    __scoped_lock& operator=(const __scoped_lock&);

  public:
    explicit __scoped_lock(__mutex_type& __name) : _M_device(__name)
    { _M_device.lock(); }

    ~__scoped_lock() throw()
    { _M_device.unlock(); }
  };


  class __cond
  {
  private:

    __gthread_cond_t _M_cond = { { 0, 0, 0, 0, 0, (void *) 0, 0, 0 } };




    __cond(const __cond&);
    __cond& operator=(const __cond&);

  public:
    __cond()
    {




    }
# 280 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/concurrence.h" 3
    void broadcast()
    {

      if (__gthread_active_p())
 {
   if (__gthread_cond_broadcast(&_M_cond) != 0)
     __throw_concurrence_broadcast_error();
 }

    }

    void wait(__mutex *mutex)
    {

      {
   if (__gthread_cond_wait(&_M_cond, mutex->gthread_mutex()) != 0)
     __throw_concurrence_wait_error();
      }

    }

    void wait_recursive(__recursive_mutex *mutex)
    {

      {
   if (__gthread_cond_wait_recursive(&_M_cond,
         mutex->gthread_recursive_mutex())
       != 0)
     __throw_concurrence_wait_error();
      }

    }
  };



}
# 75 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/memory" 2 3






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/unique_ptr.h" 1 3
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/unique_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 49 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/unique_ptr.h" 3
  template<typename> class auto_ptr;



  template<typename _Tp>
    struct default_delete
    {

      constexpr default_delete() noexcept = default;






      template<typename _Up, typename = typename
        enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }


      void
      operator()(_Tp* __ptr) const
      {
 static_assert(!is_void<_Tp>::value,
        "can't delete pointer to incomplete type");
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete __ptr;
      }
    };




  template<typename _Tp>
    struct default_delete<_Tp[]>
    {
    private:
      template<typename _Up>
 using __remove_cv = typename remove_cv<_Up>::type;


      template<typename _Up>
 using __is_derived_Tp
   = __and_< is_base_of<_Tp, _Up>,
      __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;

    public:

      constexpr default_delete() noexcept = default;
# 109 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/unique_ptr.h" 3
      template<typename _Up, typename = typename
        enable_if<!__is_derived_Tp<_Up>::value>::type>
        default_delete(const default_delete<_Up[]>&) noexcept { }


      void
      operator()(_Tp* __ptr) const
      {
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete [] __ptr;
      }

      template<typename _Up>
 typename enable_if<__is_derived_Tp<_Up>::value>::type
 operator()(_Up*) const = delete;
    };


  template <typename _Tp, typename _Dp = default_delete<_Tp> >
    class unique_ptr
    {

      class _Pointer
      {
 template<typename _Up>
   static typename _Up::pointer __test(typename _Up::pointer*);

 template<typename _Up>
   static _Tp* __test(...);

 typedef typename remove_reference<_Dp>::type _Del;

      public:
 typedef decltype(__test<_Del>(0)) type;
      };

      typedef std::tuple<typename _Pointer::type, _Dp> __tuple_type;
      __tuple_type _M_t;

    public:
      typedef typename _Pointer::type pointer;
      typedef _Tp element_type;
      typedef _Dp deleter_type;




      constexpr unique_ptr() noexcept
      : _M_t()
      { static_assert(!is_pointer<deleter_type>::value,
       "constructed with null function pointer deleter"); }







      explicit
      unique_ptr(pointer __p) noexcept
      : _M_t(__p, deleter_type())
      { static_assert(!is_pointer<deleter_type>::value,
       "constructed with null function pointer deleter"); }
# 181 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/unique_ptr.h" 3
      unique_ptr(pointer __p,
   typename conditional<is_reference<deleter_type>::value,
     deleter_type, const deleter_type&>::type __d) noexcept
      : _M_t(__p, __d) { }
# 193 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/unique_ptr.h" 3
      unique_ptr(pointer __p,
   typename remove_reference<deleter_type>::type&& __d) noexcept
      : _M_t(std::move(__p), std::move(__d))
      { static_assert(!std::is_reference<deleter_type>::value,
        "rvalue deleter bound to reference"); }


      constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }




      unique_ptr(unique_ptr&& __u) noexcept
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }







      template<typename _Up, typename _Ep, typename = _Require<
        is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
        __not_<is_array<_Up>>,
        typename conditional<is_reference<_Dp>::value,
        is_same<_Ep, _Dp>,
        is_convertible<_Ep, _Dp>>::type>>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }



      template<typename _Up, typename = _Require<
        is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
 unique_ptr(auto_ptr<_Up>&& __u) noexcept;



      ~unique_ptr() noexcept
      {
 auto& __ptr = std::get<0>(_M_t);
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }
# 248 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/unique_ptr.h" 3
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
      {
 reset(__u.release());
 get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 return *this;
      }
# 263 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
 typename enable_if< __and_<
   is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
   __not_<is_array<_Up>>
   >::value,
   unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename add_lvalue_reference<element_type>::type
      operator*() const
      {
                                          ;
 return *get();
      }


      pointer
      operator->() const noexcept
      {
                                          ;
 return get();
      }


      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }


      deleter_type&
      get_deleter() noexcept
      { return std::get<1>(_M_t); }


      const deleter_type&
      get_deleter() const noexcept
      { return std::get<1>(_M_t); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      {
 pointer __p = get();
 std::get<0>(_M_t) = pointer();
 return __p;
      }







      void
      reset(pointer __p = pointer()) noexcept
      {
 using std::swap;
 swap(std::get<0>(_M_t), __p);
 if (__p != pointer())
   get_deleter()(__p);
      }


      void
      swap(unique_ptr& __u) noexcept
      {
 using std::swap;
 swap(_M_t, __u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;
  };





  template<typename _Tp, typename _Dp>
    class unique_ptr<_Tp[], _Dp>
    {

      class _Pointer
      {
 template<typename _Up>
   static typename _Up::pointer __test(typename _Up::pointer*);

 template<typename _Up>
   static _Tp* __test(...);

 typedef typename remove_reference<_Dp>::type _Del;

      public:
 typedef decltype(__test<_Del>(0)) type;
      };

      typedef std::tuple<typename _Pointer::type, _Dp> __tuple_type;
      __tuple_type _M_t;

      template<typename _Up>
 using __remove_cv = typename remove_cv<_Up>::type;


      template<typename _Up>
 using __is_derived_Tp
   = __and_< is_base_of<_Tp, _Up>,
      __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;

      template<typename _Up, typename _Ep,
        typename _Tp_pointer = typename _Pointer::type,
        typename _Up_pointer = typename unique_ptr<_Up, _Ep>::pointer>
 using __safe_conversion = __and_<
     is_convertible<_Up_pointer, _Tp_pointer>,
     is_array<_Up>,
     __or_<__not_<is_pointer<_Up_pointer>>,
    __not_<is_pointer<_Tp_pointer>>,
    __not_<__is_derived_Tp<typename remove_extent<_Up>::type>>
     >
   >;

    public:
      typedef typename _Pointer::type pointer;
      typedef _Tp element_type;
      typedef _Dp deleter_type;




      constexpr unique_ptr() noexcept
      : _M_t()
      { static_assert(!std::is_pointer<deleter_type>::value,
        "constructed with null function pointer deleter"); }







      explicit
      unique_ptr(pointer __p) noexcept
      : _M_t(__p, deleter_type())
      { static_assert(!is_pointer<deleter_type>::value,
        "constructed with null function pointer deleter"); }


      template<typename _Up, typename = _Require<is_pointer<pointer>,
        is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>
 explicit
 unique_ptr(_Up* __p) = delete;
# 444 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/unique_ptr.h" 3
      unique_ptr(pointer __p,
   typename conditional<is_reference<deleter_type>::value,
       deleter_type, const deleter_type&>::type __d) noexcept
      : _M_t(__p, __d) { }
# 456 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/unique_ptr.h" 3
      unique_ptr(pointer __p, typename
   remove_reference<deleter_type>::type&& __d) noexcept
      : _M_t(std::move(__p), std::move(__d))
      { static_assert(!is_reference<deleter_type>::value,
        "rvalue deleter bound to reference"); }


      unique_ptr(unique_ptr&& __u) noexcept
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }


      constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }

      template<typename _Up, typename _Ep,
        typename = _Require<__safe_conversion<_Up, _Ep>,
   typename conditional<is_reference<_Dp>::value,
          is_same<_Ep, _Dp>,
          is_convertible<_Ep, _Dp>>::type
        >>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }


      ~unique_ptr()
      {
 auto& __ptr = std::get<0>(_M_t);
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }
# 496 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/unique_ptr.h" 3
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
      {
 reset(__u.release());
 get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 return *this;
      }
# 511 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
 typename
 enable_if<__safe_conversion<_Up, _Ep>::value, unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
      {
                                          ;
 return get()[__i];
      }


      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }


      deleter_type&
      get_deleter() noexcept
      { return std::get<1>(_M_t); }


      const deleter_type&
      get_deleter() const noexcept
      { return std::get<1>(_M_t); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      {
 pointer __p = get();
 std::get<0>(_M_t) = pointer();
 return __p;
      }







      void
      reset(pointer __p = pointer()) noexcept
      {
 using std::swap;
 swap(std::get<0>(_M_t), __p);
 if (__p != nullptr)
   get_deleter()(__p);
      }


      template<typename _Up, typename = _Require<is_pointer<pointer>,
        is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>
 void reset(_Up*) = delete;


      void
      swap(unique_ptr& __u) noexcept
      {
 using std::swap;
 swap(_M_t, __u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;


      template<typename _Up, typename = _Require<is_pointer<pointer>,
        is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>
 unique_ptr(_Up*, typename
     conditional<is_reference<deleter_type>::value,
     deleter_type, const deleter_type&>::type) = delete;


      template<typename _Up, typename = _Require<is_pointer<pointer>,
        is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>
 unique_ptr(_Up*, typename
     remove_reference<deleter_type>::type&&) = delete;
    };

  template<typename _Tp, typename _Dp>
    inline void
    swap(unique_ptr<_Tp, _Dp>& __x,
  unique_ptr<_Tp, _Dp>& __y) noexcept
    { __x.swap(__y); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() == __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return !__x; }

  template<typename _Tp, typename _Dp>
    inline bool
    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return !__x; }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return (bool)__x; }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return (bool)__x; }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    {
      typedef typename
 std::common_type<typename unique_ptr<_Tp, _Dp>::pointer,
                  typename unique_ptr<_Up, _Ep>::pointer>::type _CT;
      return std::less<_CT>()(__x.get(), __y.get());
    }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get()); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__y < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(nullptr < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(__x < nullptr); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    { return (__y < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get()); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__x < __y); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(__x < nullptr); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(nullptr < __x); }


  template<typename _Tp, typename _Dp>
    struct hash<unique_ptr<_Tp, _Dp>>
    : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>
    {
      size_t
      operator()(const unique_ptr<_Tp, _Dp>& __u) const noexcept
      {
 typedef unique_ptr<_Tp, _Dp> _UP;
 return std::hash<typename _UP::pointer>()(__u.get());
      }
    };
# 782 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/unique_ptr.h" 3
}
# 82 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/memory" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 1 3
# 52 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h" 1 3
# 52 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocated_ptr.h" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/allocated_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Alloc>
    struct __allocated_ptr
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;


      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
      { }


      template<typename _Ptr,
        typename _Req = _Require<is_same<_Ptr, value_type*>>>
      __allocated_ptr(_Alloc& __a, _Ptr __ptr)
      : _M_alloc(&__a), _M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))
      { }


      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }


      ~__allocated_ptr()
      {
 if (_M_ptr != nullptr)
   std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }


      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
 _M_ptr = nullptr;
 return *this;
      }


      value_type* get() { return _S_raw_ptr(_M_ptr); }

    private:
      value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }

      template<typename _Ptr>
 auto _S_raw_ptr(_Ptr __ptr) -> decltype(_S_raw_ptr(__ptr.operator->()))
 { return _S_raw_ptr(__ptr.operator->()); }

      _Alloc* _M_alloc;
      pointer _M_ptr;
    };


  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
    }


}
# 53 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/aligned_buffer.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/aligned_buffer.h" 3







namespace __gnu_cxx
{




  template<typename _Tp>
    struct __aligned_membuf
    {



      struct _Tp2 { _Tp _M_t; };

      alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];

      __aligned_membuf() = default;


      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }

      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };






  template<typename _Tp>
    struct __aligned_buffer
    : std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>
    {
      typename
 std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>::type
 _M_storage;

      __aligned_buffer() = default;


      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
      }

      const void*
      _M_addr() const noexcept
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };

}
# 54 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename> class auto_ptr;






  class bad_weak_ptr : public std::exception
  {
  public:
    virtual char const*
    what() const noexcept;

    virtual ~bad_weak_ptr() noexcept;
  };


  inline void
  __throw_bad_weak_ptr()
  { (throw (bad_weak_ptr())); }

  using __gnu_cxx::_Lock_policy;
  using __gnu_cxx::__default_lock_policy;
  using __gnu_cxx::_S_single;
  using __gnu_cxx::_S_mutex;
  using __gnu_cxx::_S_atomic;


  template<_Lock_policy _Lp>
    class _Mutex_base
    {
    protected:

      enum { _S_need_barriers = 0 };
    };

  template<>
    class _Mutex_base<_S_mutex>
    : public __gnu_cxx::__mutex
    {
    protected:



      enum { _S_need_barriers = 1 };
    };

  template<_Lock_policy _Lp = __default_lock_policy>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }

      virtual
      ~_Sp_counted_base() noexcept
      { }



      virtual void
      _M_dispose() noexcept = 0;


      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept = 0;

      void
      _M_add_ref_copy()
      { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }

      void
      _M_add_ref_lock();

      bool
      _M_add_ref_lock_nothrow();

      void
      _M_release() noexcept
      {

                                                              ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   {
                                                                 ;
     _M_dispose();




     if (_Mutex_base<_Lp>::_S_need_barriers)
       {
         __asm __volatile ("":::"memory");
         __asm __volatile ("":::"memory");
       }


                                                                   ;
     if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
             -1) == 1)
              {
                                                                      ;
         _M_destroy();
              }
   }
      }

      void
      _M_weak_add_ref() noexcept
      { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }

      void
      _M_weak_release() noexcept
      {

                                                               ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)
   {
                                                                  ;
     if (_Mutex_base<_Lp>::_S_need_barriers)
       {


         __asm __volatile ("":::"memory");
         __asm __volatile ("":::"memory");
       }
     _M_destroy();
   }
      }

      long
      _M_get_use_count() const noexcept
      {


        return __atomic_load_n(&_M_use_count, 0);
      }

    private:
      _Sp_counted_base(_Sp_counted_base const&) = delete;
      _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;

      _Atomic_word _M_use_count;
      _Atomic_word _M_weak_count;
    };

  template<>
    inline void
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock()
    {
      if (_M_use_count == 0)
 __throw_bad_weak_ptr();
      ++_M_use_count;
    }

  template<>
    inline void
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock()
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   __throw_bad_weak_ptr();
 }
    }

  template<>
    inline void
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock()
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     __throw_bad_weak_ptr();


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
    }

  template<>
    inline bool
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock_nothrow()
    {
      if (_M_use_count == 0)
 return false;
      ++_M_use_count;
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock_nothrow()
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   return false;
 }
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock_nothrow()
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     return false;


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
      return true;
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
        }
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_add_ref() noexcept
    { ++_M_weak_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_release() noexcept
    {
      if (--_M_weak_count == 0)
        _M_destroy();
    }

  template<>
    inline long
    _Sp_counted_base<_S_single>::_M_get_use_count() const noexcept
    { return _M_use_count; }



  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __shared_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __weak_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __enable_shared_from_this;

  template<typename _Tp>
    class shared_ptr;

  template<typename _Tp>
    class weak_ptr;

  template<typename _Tp>
    struct owner_less;

  template<typename _Tp>
    class enable_shared_from_this;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __weak_count;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __shared_count;



  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }

      _Sp_counted_ptr(const _Sp_counted_ptr&) = delete;
      _Sp_counted_ptr& operator=(const _Sp_counted_ptr&) = delete;

    private:
      _Ptr _M_ptr;
    };

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }

  template<int _Nm, typename _Tp,
    bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Sp_ebo_helper;


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
    };


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, false>
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh)
      { return __eboh._M_tp; }

    private:
      _Tp _M_tp;
    };


  template<typename _Ptr, typename _Deleter, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_deleter final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Deleter> _Del_base;
 typedef _Sp_ebo_helper<1, _Alloc> _Alloc_base;

      public:
 _Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 : _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 { }

 _Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 _Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }

 _Ptr _M_ptr;
      };

    public:
      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_deleter>;


      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }


      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }

      virtual void
      _M_destroy() noexcept
      {
 __allocator_type __a(_M_impl._M_alloc());
 __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 this->~_Sp_counted_deleter();
      }

      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
      {



        return __ti == typeid(_Deleter)
   ? std::__addressof(_M_impl._M_del())
   : nullptr;



      }

    private:
      _Impl _M_impl;
    };



  struct _Sp_make_shared_tag { };

  template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Alloc> _A_base;

      public:
 explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }

 _Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }

 __gnu_cxx::__aligned_buffer<_Tp> _M_storage;
      };

    public:
      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_ptr_inplace>;

      template<typename... _Args>
 _Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 : _M_impl(__a)
 {


   allocator_traits<_Alloc>::construct(__a, _M_ptr(),
       std::forward<_Args>(__args)...);
 }

      ~_Sp_counted_ptr_inplace() noexcept { }

      virtual void
      _M_dispose() noexcept
      {
 allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
      }


      virtual void
      _M_destroy() noexcept
      {
 __allocator_type __a(_M_impl._M_alloc());
 __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 this->~_Sp_counted_ptr_inplace();
      }


      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
      {

 if (__ti == typeid(_Sp_make_shared_tag))
   return const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());

 return nullptr;
      }

    private:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }

      _Impl _M_impl;
    };


  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
 __shared_count(_Ptr __p) : _M_pi(0)
 {
   try
     {
       _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
     }
   catch(...)
     {
       delete __p;
       throw;
     }
 }

      template<typename _Ptr, typename _Deleter>
 __shared_count(_Ptr __p, _Deleter __d)
 : __shared_count(__p, std::move(__d), allocator<void>())
 { }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
 __shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 {
   typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;
   try
     {
       typename _Sp_cd_type::__allocator_type __a2(__a);
       auto __guard = std::__allocate_guarded(__a2);
       _Sp_cd_type* __mem = __guard.get();
       ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
       _M_pi = __mem;
       __guard = nullptr;
     }
   catch(...)
     {
       __d(__p);
       throw;
     }
 }

      template<typename _Tp, typename _Alloc, typename... _Args>
 __shared_count(_Sp_make_shared_tag, _Tp*, const _Alloc& __a,
         _Args&&... __args)
 : _M_pi(0)
 {
   typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
   typename _Sp_cp_type::__allocator_type __a2(__a);
   auto __guard = std::__allocate_guarded(__a2);
   _Sp_cp_type* __mem = __guard.get();
   ::new (__mem) _Sp_cp_type(std::move(__a),
        std::forward<_Args>(__args)...);
   _M_pi = __mem;
   __guard = nullptr;
 }



      template<typename _Tp>
        explicit
 __shared_count(std::auto_ptr<_Tp>&& __r);



      template<typename _Tp, typename _Del>
        explicit
 __shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 {
   using _Ptr = typename unique_ptr<_Tp, _Del>::pointer;
   using _Del2 = typename conditional<is_reference<_Del>::value,
       reference_wrapper<typename remove_reference<_Del>::type>,
       _Del>::type;
   using _Sp_cd_type
     = _Sp_counted_deleter<_Ptr, _Del2, allocator<void>, _Lp>;
   using _Alloc = allocator<_Sp_cd_type>;
   using _Alloc_traits = allocator_traits<_Alloc>;
   _Alloc __a;
   _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
   _Alloc_traits::construct(__a, __mem, __r.release(),
       __r.get_deleter());
   _M_pi = __mem;
 }


      explicit __shared_count(const __weak_count<_Lp>& __r);


      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != 0)
   _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != _M_pi)
   {
     if (__tmp != 0)
       __tmp->_M_add_ref_copy();
     if (_M_pi != 0)
       _M_pi->_M_release();
     _M_pi = __tmp;
   }
 return *this;
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_unique() const noexcept
      { return this->_M_get_use_count() == 1; }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_pi ? _M_pi->_M_get_deleter(__ti) : nullptr; }

      bool
      _M_less(const __shared_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __weak_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __shared_count& __a, const __shared_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __weak_count<_Lp>;

      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    class __weak_count
    {
    public:
      constexpr __weak_count() noexcept : _M_pi(nullptr)
      { }

      __weak_count(const __shared_count<_Lp>& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(const __weak_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(__weak_count&& __r) noexcept
      : _M_pi(__r._M_pi)
      { __r._M_pi = nullptr; }

      ~__weak_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
      }

      __weak_count&
      operator=(const __shared_count<_Lp>& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != nullptr)
   __tmp->_M_weak_add_ref();
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count&
      operator=(const __weak_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != nullptr)
   __tmp->_M_weak_add_ref();
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count&
      operator=(__weak_count&& __r) noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __r._M_pi;
        __r._M_pi = nullptr;
 return *this;
      }

      void
      _M_swap(__weak_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_less(const __weak_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __shared_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __weak_count& __a, const __weak_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __shared_count<_Lp>;

      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
 _M_pi->_M_add_ref_lock();
      else
 __throw_bad_weak_ptr();
    }


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::
    __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
 if (!_M_pi->_M_add_ref_lock_nothrow())
   _M_pi = nullptr;
    }




  template<_Lock_policy _Lp, typename _Tp1, typename _Tp2>
    void
    __enable_shared_from_this_helper(const __shared_count<_Lp>&,
         const __enable_shared_from_this<_Tp1,
         _Lp>*, const _Tp2*) noexcept;


  template<typename _Tp1, typename _Tp2>
    void
    __enable_shared_from_this_helper(const __shared_count<>&,
         const enable_shared_from_this<_Tp1>*,
         const _Tp2*) noexcept;

  template<_Lock_policy _Lp>
    inline void
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
    {
      template<typename _Ptr>
 using _Convertible
   = typename enable_if<is_convertible<_Ptr, _Tp*>::value>::type;

    public:
      typedef _Tp element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
 explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 {

   static_assert( !is_void<_Tp1>::value, "incomplete type" );
   static_assert( sizeof(_Tp1) > 0, "incomplete type" );
   __enable_shared_from_this_helper(_M_refcount, __p, __p);
 }

      template<typename _Tp1, typename _Deleter>
 __shared_ptr(_Tp1* __p, _Deleter __d)
 : _M_ptr(__p), _M_refcount(__p, __d)
 {


   __enable_shared_from_this_helper(_M_refcount, __p, __p);
 }

      template<typename _Tp1, typename _Deleter, typename _Alloc>
 __shared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)
 : _M_ptr(__p), _M_refcount(__p, __d, std::move(__a))
 {


   __enable_shared_from_this_helper(_M_refcount, __p, __p);
 }

      template<typename _Deleter>
 __shared_ptr(nullptr_t __p, _Deleter __d)
 : _M_ptr(0), _M_refcount(__p, __d)
 { }

      template<typename _Deleter, typename _Alloc>
        __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : _M_ptr(0), _M_refcount(__p, __d, std::move(__a))
 { }

      template<typename _Tp1>
 __shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
 : _M_ptr(__p), _M_refcount(__r._M_refcount)
 { }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;

      template<typename _Tp1, typename = _Convertible<_Tp1*>>
 __shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
 _M_refcount._M_swap(__r._M_refcount);
 __r._M_ptr = 0;
      }

      template<typename _Tp1, typename = _Convertible<_Tp1*>>
 __shared_ptr(__shared_ptr<_Tp1, _Lp>&& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount()
 {
   _M_refcount._M_swap(__r._M_refcount);
   __r._M_ptr = 0;
 }

      template<typename _Tp1>
 explicit __shared_ptr(const __weak_ptr<_Tp1, _Lp>& __r)
 : _M_refcount(__r._M_refcount)
 {




   _M_ptr = __r._M_ptr;
 }


      template<typename _Tp1, typename _Del, typename
        = _Convertible<typename unique_ptr<_Tp1, _Del>::pointer>>
 __shared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)
 : _M_ptr(__r.get()), _M_refcount()
 {

   auto __raw = _S_raw_ptr(__r.get());
   _M_refcount = __shared_count<_Lp>(std::move(__r));
   __enable_shared_from_this_helper(_M_refcount, __raw, __raw);
 }



      template<typename _Tp1>
 __shared_ptr(std::auto_ptr<_Tp1>&& __r);


      constexpr __shared_ptr(nullptr_t) noexcept : __shared_ptr() { }

      template<typename _Tp1>
 __shared_ptr&
 operator=(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }


      template<typename _Tp1>
 __shared_ptr&
 operator=(std::auto_ptr<_Tp1>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }


      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
      {
 __shared_ptr(std::move(__r)).swap(*this);
 return *this;
      }

      template<class _Tp1>
 __shared_ptr&
 operator=(__shared_ptr<_Tp1, _Lp>&& __r) noexcept
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      template<typename _Tp1, typename _Del>
 __shared_ptr&
 operator=(std::unique_ptr<_Tp1, _Del>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      void
      reset() noexcept
      { __shared_ptr().swap(*this); }

      template<typename _Tp1>
 void
 reset(_Tp1* __p)
 {

                                                   ;
   __shared_ptr(__p).swap(*this);
 }

      template<typename _Tp1, typename _Deleter>
 void
 reset(_Tp1* __p, _Deleter __d)
 { __shared_ptr(__p, __d).swap(*this); }

      template<typename _Tp1, typename _Deleter, typename _Alloc>
 void
        reset(_Tp1* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, __d, std::move(__a)).swap(*this); }


      typename std::add_lvalue_reference<_Tp>::type
      operator*() const noexcept
      {
                                   ;
 return *_M_ptr;
      }

      _Tp*
      operator->() const noexcept
      {
                                   ;
 return _M_ptr;
      }

      _Tp*
      get() const noexcept
      { return _M_ptr; }

      explicit operator bool() const
      { return _M_ptr == 0 ? false : true; }

      bool
      unique() const noexcept
      { return _M_refcount._M_unique(); }

      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
      {
 std::swap(_M_ptr, __other._M_ptr);
 _M_refcount._M_swap(__other._M_refcount);
      }

      template<typename _Tp1>
 bool
 owner_before(__shared_ptr<_Tp1, _Lp> const& __rhs) const
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const
 { return _M_refcount._M_less(__rhs._M_refcount); }


    protected:

      template<typename _Alloc, typename... _Args>
 __shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
       _Args&&... __args)
 : _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,
    std::forward<_Args>(__args)...)
 {


   void* __p = _M_refcount._M_get_deleter(typeid(__tag));
   _M_ptr = static_cast<_Tp*>(__p);
   __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
 }
# 1139 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h" 3
      template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,
        typename... _Args>
 friend __shared_ptr<_Tp1, _Lp1>
 __allocate_shared(const _Alloc& __a, _Args&&... __args);



      __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t)
      : _M_refcount(__r._M_refcount, std::nothrow)
      {
 _M_ptr = _M_refcount._M_get_use_count() ? __r._M_ptr : nullptr;
      }

      friend class __weak_ptr<_Tp, _Lp>;

    private:
      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_refcount._M_get_deleter(__ti); }

      template<typename _Tp1>
 static _Tp1*
 _S_raw_ptr(_Tp1* __ptr)
 { return __ptr; }

      template<typename _Tp1>
 static auto
 _S_raw_ptr(_Tp1 __ptr) -> decltype(std::__addressof(*__ptr))
 { return std::__addressof(*__ptr); }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;

      template<typename _Del, typename _Tp1, _Lock_policy _Lp1>
 friend _Del* get_deleter(const __shared_ptr<_Tp1, _Lp1>&) noexcept;

      _Tp* _M_ptr;
      __shared_count<_Lp> _M_refcount;
    };



  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() == __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !__a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !__a; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return (bool)__a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return (bool)__a; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp1, _Lp>& __a,
       const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    {
      typedef typename std::common_type<_Tp1*, _Tp2*>::type _CT;
      return std::less<_CT>()(__a.get(), __b.get());
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return std::less<_Tp*>()(__a.get(), nullptr); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return std::less<_Tp*>()(nullptr, __a.get()); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp1, _Lp>& __a,
       const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return (__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return std::less<_Tp*>()(nullptr, __a.get()); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return std::less<_Tp*>()(__a.get(), nullptr); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__a < __b); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(nullptr < __a); }

  template<typename _Sp>
    struct _Sp_less : public binary_function<_Sp, _Sp, bool>
    {
      bool
      operator()(const _Sp& __lhs, const _Sp& __rhs) const noexcept
      {
 typedef typename _Sp::element_type element_type;
 return std::less<element_type*>()(__lhs.get(), __rhs.get());
      }
    };

  template<typename _Tp, _Lock_policy _Lp>
    struct less<__shared_ptr<_Tp, _Lp>>
    : public _Sp_less<__shared_ptr<_Tp, _Lp>>
    { };


  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__shared_ptr<_Tp, _Lp>& __a, __shared_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }
# 1309 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h" 3
  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    static_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    { return __shared_ptr<_Tp, _Lp>(__r, static_cast<_Tp*>(__r.get())); }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    const_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    { return __shared_ptr<_Tp, _Lp>(__r, const_cast<_Tp*>(__r.get())); }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    dynamic_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      if (_Tp* __p = dynamic_cast<_Tp*>(__r.get()))
 return __shared_ptr<_Tp, _Lp>(__r, __p);
      return __shared_ptr<_Tp, _Lp>();
    }


  template<typename _Tp, _Lock_policy _Lp>
    class __weak_ptr
    {
      template<typename _Ptr>
 using _Convertible
   = typename enable_if<is_convertible<_Ptr, _Tp*>::value>::type;

    public:
      typedef _Tp element_type;

      constexpr __weak_ptr() noexcept
      : _M_ptr(nullptr), _M_refcount()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;

      ~__weak_ptr() = default;
# 1371 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h" 3
      template<typename _Tp1, typename = _Convertible<_Tp1*>>
 __weak_ptr(const __weak_ptr<_Tp1, _Lp>& __r) noexcept
 : _M_refcount(__r._M_refcount)
        { _M_ptr = __r.lock().get(); }

      template<typename _Tp1, typename = _Convertible<_Tp1*>>
 __weak_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __weak_ptr(__weak_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount(std::move(__r._M_refcount))
      { __r._M_ptr = nullptr; }

      template<typename _Tp1, typename = _Convertible<_Tp1*>>
 __weak_ptr(__weak_ptr<_Tp1, _Lp>&& __r) noexcept
 : _M_ptr(__r.lock().get()), _M_refcount(std::move(__r._M_refcount))
        { __r._M_ptr = nullptr; }

      __weak_ptr&
      operator=(const __weak_ptr& __r) noexcept = default;

      template<typename _Tp1>
 __weak_ptr&
 operator=(const __weak_ptr<_Tp1, _Lp>& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = __r._M_refcount;
   return *this;
 }

      template<typename _Tp1>
 __weak_ptr&
 operator=(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }

      __weak_ptr&
      operator=(__weak_ptr&& __r) noexcept
      {
 _M_ptr = __r._M_ptr;
 _M_refcount = std::move(__r._M_refcount);
 __r._M_ptr = nullptr;
 return *this;
      }

      template<typename _Tp1>
 __weak_ptr&
 operator=(__weak_ptr<_Tp1, _Lp>&& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = std::move(__r._M_refcount);
   __r._M_ptr = nullptr;
   return *this;
 }

      __shared_ptr<_Tp, _Lp>
      lock() const noexcept
      { return __shared_ptr<element_type, _Lp>(*this, std::nothrow); }

      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      bool
      expired() const noexcept
      { return _M_refcount._M_get_use_count() == 0; }

      template<typename _Tp1>
 bool
 owner_before(const __shared_ptr<_Tp1, _Lp>& __rhs) const
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(const __weak_ptr<_Tp1, _Lp>& __rhs) const
 { return _M_refcount._M_less(__rhs._M_refcount); }

      void
      reset() noexcept
      { __weak_ptr().swap(*this); }

      void
      swap(__weak_ptr& __s) noexcept
      {
 std::swap(_M_ptr, __s._M_ptr);
 _M_refcount._M_swap(__s._M_refcount);
      }

    private:

      void
      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
      {
 _M_ptr = __ptr;
 _M_refcount = __refcount;
      }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;
      friend class __enable_shared_from_this<_Tp, _Lp>;
      friend class enable_shared_from_this<_Tp>;

      _Tp* _M_ptr;
      __weak_count<_Lp> _M_refcount;
    };


  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }

  template<typename _Tp, typename _Tp1>
    struct _Sp_owner_less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __lhs, const _Tp& __rhs) const
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp& __lhs, const _Tp1& __rhs) const
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp1& __lhs, const _Tp& __rhs) const
      { return __lhs.owner_before(__rhs); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__shared_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__shared_ptr<_Tp, _Lp>, __weak_ptr<_Tp, _Lp>>
    { };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__weak_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__weak_ptr<_Tp, _Lp>, __shared_ptr<_Tp, _Lp>>
    { };


  template<typename _Tp, _Lock_policy _Lp>
    class __enable_shared_from_this
    {
    protected:
      constexpr __enable_shared_from_this() noexcept { }

      __enable_shared_from_this(const __enable_shared_from_this&) noexcept { }

      __enable_shared_from_this&
      operator=(const __enable_shared_from_this&) noexcept
      { return *this; }

      ~__enable_shared_from_this() { }

    public:
      __shared_ptr<_Tp, _Lp>
      shared_from_this()
      { return __shared_ptr<_Tp, _Lp>(this->_M_weak_this); }

      __shared_ptr<const _Tp, _Lp>
      shared_from_this() const
      { return __shared_ptr<const _Tp, _Lp>(this->_M_weak_this); }

    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }

      template<_Lock_policy _Lp1, typename _Tp1, typename _Tp2>
 friend void
 __enable_shared_from_this_helper(const __shared_count<_Lp1>&,
      const __enable_shared_from_this<_Tp1,
      _Lp1>*, const _Tp2*) noexcept;

      mutable __weak_ptr<_Tp, _Lp> _M_weak_this;
    };

  template<_Lock_policy _Lp1, typename _Tp1, typename _Tp2>
    inline void
    __enable_shared_from_this_helper(const __shared_count<_Lp1>& __pn,
         const __enable_shared_from_this<_Tp1,
         _Lp1>* __pe,
         const _Tp2* __px) noexcept
    {
      if (__pe != nullptr)
 __pe->_M_weak_assign(const_cast<_Tp2*>(__px), __pn);
    }

  template<typename _Tp, _Lock_policy _Lp, typename _Alloc, typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return __shared_ptr<_Tp, _Lp>(_Sp_make_shared_tag(), __a,
        std::forward<_Args>(__args)...);
    }

  template<typename _Tp, _Lock_policy _Lp, typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __make_shared(_Args&&... __args)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::__allocate_shared<_Tp, _Lp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp, _Lock_policy _Lp>
    struct hash<__shared_ptr<_Tp, _Lp>>
    : public __hash_base<size_t, __shared_ptr<_Tp, _Lp>>
    {
      size_t
      operator()(const __shared_ptr<_Tp, _Lp>& __s) const noexcept
      { return std::hash<_Tp*>()(__s.get()); }
    };


}
# 53 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 64 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 3
  template<typename _Ch, typename _Tr, typename _Tp, _Lock_policy _Lp>
    inline std::basic_ostream<_Ch, _Tr>&
    operator<<(std::basic_ostream<_Ch, _Tr>& __os,
        const __shared_ptr<_Tp, _Lp>& __p)
    {
      __os << __p.get();
      return __os;
    }


  template<typename _Del, typename _Tp, _Lock_policy _Lp>
    inline _Del*
    get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept
    {

      return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));



    }
# 92 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 3
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
    {
      template<typename _Ptr>
 using _Convertible
   = typename enable_if<is_convertible<_Ptr, _Tp*>::value>::type;

    public:




      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;







      template<typename _Tp1>
 explicit shared_ptr(_Tp1* __p)
        : __shared_ptr<_Tp>(__p) { }
# 132 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 3
      template<typename _Tp1, typename _Deleter>
 shared_ptr(_Tp1* __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, __d) { }
# 149 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 3
      template<typename _Deleter>
 shared_ptr(nullptr_t __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, __d) { }
# 168 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 3
      template<typename _Tp1, typename _Deleter, typename _Alloc>
 shared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }
# 187 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 3
      template<typename _Deleter, typename _Alloc>
 shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }
# 209 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 3
      template<typename _Tp1>
 shared_ptr(const shared_ptr<_Tp1>& __r, _Tp* __p) noexcept
 : __shared_ptr<_Tp>(__r, __p) { }
# 220 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 3
      template<typename _Tp1, typename = _Convertible<_Tp1*>>
 shared_ptr(const shared_ptr<_Tp1>& __r) noexcept
        : __shared_ptr<_Tp>(__r) { }






      shared_ptr(shared_ptr&& __r) noexcept
      : __shared_ptr<_Tp>(std::move(__r)) { }






      template<typename _Tp1, typename = _Convertible<_Tp1*>>
 shared_ptr(shared_ptr<_Tp1>&& __r) noexcept
 : __shared_ptr<_Tp>(std::move(__r)) { }
# 249 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 3
      template<typename _Tp1>
 explicit shared_ptr(const weak_ptr<_Tp1>& __r)
 : __shared_ptr<_Tp>(__r) { }


      template<typename _Tp1>
 shared_ptr(std::auto_ptr<_Tp1>&& __r);




      template<typename _Tp1, typename _Del, typename
        = _Convertible<typename unique_ptr<_Tp1, _Del>::pointer>>
 shared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)
 : __shared_ptr<_Tp>(std::move(__r)) { }





      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;

      template<typename _Tp1>
 shared_ptr&
 operator=(const shared_ptr<_Tp1>& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(__r);
   return *this;
 }


      template<typename _Tp1>
 shared_ptr&
 operator=(std::auto_ptr<_Tp1>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }


      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
 this->__shared_ptr<_Tp>::operator=(std::move(__r));
 return *this;
      }

      template<class _Tp1>
 shared_ptr&
 operator=(shared_ptr<_Tp1>&& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      template<typename _Tp1, typename _Del>
 shared_ptr&
 operator=(std::unique_ptr<_Tp1, _Del>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

    private:

      template<typename _Alloc, typename... _Args>
 shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
     _Args&&... __args)
 : __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 { }

      template<typename _Tp1, typename _Alloc, typename... _Args>
 friend shared_ptr<_Tp1>
 allocate_shared(const _Alloc& __a, _Args&&... __args);


      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t)
      : __shared_ptr<_Tp>(__r, std::nothrow) { }

      friend class weak_ptr<_Tp>;
    };


  template<typename _Tp1, typename _Tp2>
    inline bool
    operator==(const shared_ptr<_Tp1>& __a,
        const shared_ptr<_Tp2>& __b) noexcept
    { return __a.get() == __b.get(); }

  template<typename _Tp>
    inline bool
    operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !__a; }

  template<typename _Tp>
    inline bool
    operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !__a; }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator!=(const shared_ptr<_Tp1>& __a,
        const shared_ptr<_Tp2>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp>
    inline bool
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return (bool)__a; }

  template<typename _Tp>
    inline bool
    operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return (bool)__a; }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator<(const shared_ptr<_Tp1>& __a,
       const shared_ptr<_Tp2>& __b) noexcept
    {
      typedef typename std::common_type<_Tp1*, _Tp2*>::type _CT;
      return std::less<_CT>()(__a.get(), __b.get());
    }

  template<typename _Tp>
    inline bool
    operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return std::less<_Tp*>()(__a.get(), nullptr); }

  template<typename _Tp>
    inline bool
    operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return std::less<_Tp*>()(nullptr, __a.get()); }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator<=(const shared_ptr<_Tp1>& __a,
        const shared_ptr<_Tp2>& __b) noexcept
    { return !(__b < __a); }

  template<typename _Tp>
    inline bool
    operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp>
    inline bool
    operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator>(const shared_ptr<_Tp1>& __a,
       const shared_ptr<_Tp2>& __b) noexcept
    { return (__b < __a); }

  template<typename _Tp>
    inline bool
    operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return std::less<_Tp*>()(nullptr, __a.get()); }

  template<typename _Tp>
    inline bool
    operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return std::less<_Tp*>()(__a.get(), nullptr); }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator>=(const shared_ptr<_Tp1>& __a,
        const shared_ptr<_Tp2>& __b) noexcept
    { return !(__a < __b); }

  template<typename _Tp>
    inline bool
    operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp>
    inline bool
    operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp>
    struct less<shared_ptr<_Tp>> : public _Sp_less<shared_ptr<_Tp>>
    { };


  template<typename _Tp>
    inline void
    swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }


  template<typename _Tp, typename _Tp1>
    inline shared_ptr<_Tp>
    static_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept
    { return shared_ptr<_Tp>(__r, static_cast<_Tp*>(__r.get())); }

  template<typename _Tp, typename _Tp1>
    inline shared_ptr<_Tp>
    const_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept
    { return shared_ptr<_Tp>(__r, const_cast<_Tp*>(__r.get())); }

  template<typename _Tp, typename _Tp1>
    inline shared_ptr<_Tp>
    dynamic_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept
    {
      if (_Tp* __p = dynamic_cast<_Tp*>(__r.get()))
 return shared_ptr<_Tp>(__r, __p);
      return shared_ptr<_Tp>();
    }







  template<typename _Tp>
    class weak_ptr : public __weak_ptr<_Tp>
    {
      template<typename _Ptr>
 using _Convertible
   = typename enable_if<is_convertible<_Ptr, _Tp*>::value>::type;

    public:
      constexpr weak_ptr() noexcept = default;

      template<typename _Tp1, typename = _Convertible<_Tp1*>>
 weak_ptr(const shared_ptr<_Tp1>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      weak_ptr(const weak_ptr&) noexcept = default;

      template<typename _Tp1, typename = _Convertible<_Tp1*>>
 weak_ptr(const weak_ptr<_Tp1>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      weak_ptr(weak_ptr&&) noexcept = default;

      template<typename _Tp1, typename = _Convertible<_Tp1*>>
 weak_ptr(weak_ptr<_Tp1>&& __r) noexcept
 : __weak_ptr<_Tp>(std::move(__r)) { }

      weak_ptr&
      operator=(const weak_ptr& __r) noexcept = default;

      template<typename _Tp1>
 weak_ptr&
 operator=(const weak_ptr<_Tp1>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      template<typename _Tp1>
 weak_ptr&
 operator=(const shared_ptr<_Tp1>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      weak_ptr&
      operator=(weak_ptr&& __r) noexcept = default;

      template<typename _Tp1>
 weak_ptr&
 operator=(weak_ptr<_Tp1>&& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      shared_ptr<_Tp>
      lock() const noexcept
      { return shared_ptr<_Tp>(*this, std::nothrow); }
    };


  template<typename _Tp>
    inline void
    swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }



  template<typename _Tp>
    struct owner_less;


  template<typename _Tp>
    struct owner_less<shared_ptr<_Tp>>
    : public _Sp_owner_less<shared_ptr<_Tp>, weak_ptr<_Tp>>
    { };


  template<typename _Tp>
    struct owner_less<weak_ptr<_Tp>>
    : public _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp>>
    { };




  template<typename _Tp>
    class enable_shared_from_this
    {
    protected:
      constexpr enable_shared_from_this() noexcept { }

      enable_shared_from_this(const enable_shared_from_this&) noexcept { }

      enable_shared_from_this&
      operator=(const enable_shared_from_this&) noexcept
      { return *this; }

      ~enable_shared_from_this() { }

    public:
      shared_ptr<_Tp>
      shared_from_this()
      { return shared_ptr<_Tp>(this->_M_weak_this); }

      shared_ptr<const _Tp>
      shared_from_this() const
      { return shared_ptr<const _Tp>(this->_M_weak_this); }

    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }

      template<typename _Tp1, typename _Tp2>
 friend void
 __enable_shared_from_this_helper(const __shared_count<>&,
      const enable_shared_from_this<_Tp1>*,
      const _Tp2*) noexcept;

      mutable weak_ptr<_Tp> _M_weak_this;
    };

  template<typename _Tp1, typename _Tp2>
    inline void
    __enable_shared_from_this_helper(const __shared_count<>& __pn,
         const enable_shared_from_this<_Tp1>*
         __pe, const _Tp2* __px) noexcept
    {
      if (__pe != nullptr)
 __pe->_M_weak_assign(const_cast<_Tp2*>(__px), __pn);
    }
# 615 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 3
  template<typename _Tp, typename _Alloc, typename... _Args>
    inline shared_ptr<_Tp>
    allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,
        std::forward<_Args>(__args)...);
    }
# 630 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h" 3
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp>
    struct hash<shared_ptr<_Tp>>
    : public __hash_base<size_t, shared_ptr<_Tp>>
    {
      size_t
      operator()(const shared_ptr<_Tp>& __s) const noexcept
      { return std::hash<_Tp*>()(__s.get()); }
    };




}
# 83 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/memory" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_atomic.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_atomic.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_base.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_base.h" 3
# 43 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_base.h" 3
  typedef enum memory_order
    {
      memory_order_relaxed,
      memory_order_consume,
      memory_order_acquire,
      memory_order_release,
      memory_order_acq_rel,
      memory_order_seq_cst
    } memory_order;

  enum __memory_order_modifier
    {
      __memory_order_mask = 0x0ffff,
      __memory_order_modifier_mask = 0xffff0000,
      __memory_order_hle_acquire = 0x10000,
      __memory_order_hle_release = 0x20000
    };

  constexpr memory_order
  operator|(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(__m | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(__m & int(__mod));
  }


  constexpr memory_order
  __cmpexch_failure_order2(memory_order __m) noexcept
  {
    return __m == memory_order_acq_rel ? memory_order_acquire
      : __m == memory_order_release ? memory_order_relaxed : __m;
  }

  constexpr memory_order
  __cmpexch_failure_order(memory_order __m) noexcept
  {
    return memory_order(__cmpexch_failure_order2(__m & __memory_order_mask)
      | (__m & __memory_order_modifier_mask));
  }

  inline __attribute__((__always_inline__)) void
  atomic_thread_fence(memory_order __m) noexcept
  { __atomic_thread_fence(__m); }

  inline __attribute__((__always_inline__)) void
  atomic_signal_fence(memory_order __m) noexcept
  { __atomic_signal_fence(__m); }


  template<typename _Tp>
    inline _Tp
    kill_dependency(_Tp __y) noexcept
    {
      _Tp __ret(__y);
      return __ret;
    }



  template<typename _IntTp>
    struct __atomic_base;




  template<typename _Tp>
    struct atomic;

  template<typename _Tp>
    struct atomic<_Tp*>;



    typedef bool __atomic_flag_data_type;
# 148 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_base.h" 3
  extern "C" {

  struct __atomic_flag_base
  {
    __atomic_flag_data_type _M_i;
  };

  }




  struct atomic_flag : public __atomic_flag_base
  {
    atomic_flag() noexcept = default;
    ~atomic_flag() noexcept = default;
    atomic_flag(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) volatile = delete;


    constexpr atomic_flag(bool __i) noexcept
      : __atomic_flag_base{ _S_init(__i) }
    { }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_test_and_set (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_test_and_set (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) noexcept
    {
      memory_order __b = __m & __memory_order_mask;
                                                   ;
                                                   ;
                                                   ;

      __atomic_clear (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      memory_order __b = __m & __memory_order_mask;
                                                   ;
                                                   ;
                                                   ;

      __atomic_clear (&_M_i, __m);
    }

  private:
    static constexpr __atomic_flag_data_type
    _S_init(bool __i)
    { return __i ? 1 : 0; }
  };
# 237 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_base.h" 3
  template<typename _ITp>
    struct __atomic_base
    {
    private:
      typedef _ITp __int_type;

      static constexpr int _S_alignment =
 sizeof(_ITp) > alignof(_ITp) ? sizeof(_ITp) : alignof(_ITp);

      alignas(_S_alignment) __int_type _M_i;

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }

      operator __int_type() const noexcept
      { return load(); }

      operator __int_type() const volatile noexcept
      { return load(); }

      __int_type
      operator=(__int_type __i) noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator=(__int_type __i) volatile noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __int_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __int_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __int_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __int_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator+=(__int_type __i) noexcept
      { return __atomic_add_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator+=(__int_type __i) volatile noexcept
      { return __atomic_add_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator-=(__int_type __i) noexcept
      { return __atomic_sub_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator-=(__int_type __i) volatile noexcept
      { return __atomic_sub_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator&=(__int_type __i) noexcept
      { return __atomic_and_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator&=(__int_type __i) volatile noexcept
      { return __atomic_and_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator|=(__int_type __i) noexcept
      { return __atomic_or_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator|=(__int_type __i) volatile noexcept
      { return __atomic_or_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator^=(__int_type __i) noexcept
      { return __atomic_xor_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator^=(__int_type __i) volatile noexcept
      { return __atomic_xor_fetch(&_M_i, __i, memory_order_seq_cst); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
        memory_order __b = __m & __memory_order_mask;
                                              ;
                                              ;
                                              ;

 __atomic_store_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
        memory_order __b = __m & __memory_order_mask;
                                              ;
                                              ;
                                              ;

 __atomic_store_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
       memory_order __b = __m & __memory_order_mask;
                                              ;
                                              ;

 return __atomic_load_n(&_M_i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
        memory_order __b = __m & __memory_order_mask;
                                              ;
                                              ;

 return __atomic_load_n(&_M_i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, __m);
      }


      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1, memory_order __m2) noexcept
      {
       memory_order __b2 = __m2 & __memory_order_mask;
       memory_order __b1 = __m1 & __memory_order_mask;
                                               ;
                                               ;
                               ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      {
       memory_order __b2 = __m2 & __memory_order_mask;
       memory_order __b1 = __m1 & __memory_order_mask;
                                               ;
                                               ;
                               ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1, memory_order __m2) noexcept
      {
        memory_order __b2 = __m2 & __memory_order_mask;
        memory_order __b1 = __m1 & __memory_order_mask;
                                               ;
                                               ;
                               ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
        memory_order __b2 = __m2 & __memory_order_mask;
        memory_order __b1 = __m1 & __memory_order_mask;

                                               ;
                                               ;
                               ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
   memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_and(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_and(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_or(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_or(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_xor(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_xor(&_M_i, __i, __m); }
    };



  template<typename _PTp>
    struct __atomic_base<_PTp*>
    {
    private:
      typedef _PTp* __pointer_type;

      __pointer_type _M_p;


      constexpr ptrdiff_t
      _M_type_size(ptrdiff_t __d) const { return __d * sizeof(_PTp); }

      constexpr ptrdiff_t
      _M_type_size(ptrdiff_t __d) const volatile { return __d * sizeof(_PTp); }

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }

      operator __pointer_type() const noexcept
      { return load(); }

      operator __pointer_type() const volatile noexcept
      { return load(); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __pointer_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __pointer_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      {
        memory_order __b = __m & __memory_order_mask;

                                              ;
                                              ;
                                              ;

 __atomic_store_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
        memory_order __b = __m & __memory_order_mask;
                                              ;
                                              ;
                                              ;

 __atomic_store_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
        memory_order __b = __m & __memory_order_mask;
                                              ;
                                              ;

 return __atomic_load_n(&_M_p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
        memory_order __b = __m & __memory_order_mask;
                                              ;
                                              ;

 return __atomic_load_n(&_M_p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, __m);
      }


      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) noexcept
      {
        memory_order __b2 = __m2 & __memory_order_mask;
        memory_order __b1 = __m1 & __memory_order_mask;
                                               ;
                                               ;
                               ;

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
        memory_order __b2 = __m2 & __memory_order_mask;
        memory_order __b1 = __m1 & __memory_order_mask;

                                               ;
                                               ;
                               ;

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), __m); }
    };




}
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_atomic.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  struct _Sp_locker
  {
    _Sp_locker(const _Sp_locker&) = delete;
    _Sp_locker& operator=(const _Sp_locker&) = delete;


    explicit
    _Sp_locker(const void*) noexcept;
    _Sp_locker(const void*, const void*) noexcept;
    ~_Sp_locker();

  private:
    unsigned char _M_key1;
    unsigned char _M_key2;



  };







  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_is_lock_free(const __shared_ptr<_Tp, _Lp>* __p)
    {

      return __gthread_active_p() == 0;



    }

  template<typename _Tp>
    inline bool
    atomic_is_lock_free(const shared_ptr<_Tp>* __p)
    { return std::atomic_is_lock_free<_Tp, __default_lock_policy>(__p); }
# 96 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
    {
      _Sp_locker __lock{__p};
      return *__p;
    }

  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_load(const shared_ptr<_Tp>* __p)
    { return std::atomic_load_explicit(__p, memory_order_seq_cst); }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_load_explicit(const __shared_ptr<_Tp, _Lp>* __p, memory_order)
    {
      _Sp_locker __lock{__p};
      return *__p;
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_load(const __shared_ptr<_Tp, _Lp>* __p)
    { return std::atomic_load_explicit(__p, memory_order_seq_cst); }
# 132 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    inline void
    atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,
     memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
    }

  template<typename _Tp>
    inline void
    atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
    { std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); }

  template<typename _Tp, _Lock_policy _Lp>
    inline void
    atomic_store_explicit(__shared_ptr<_Tp, _Lp>* __p,
     __shared_ptr<_Tp, _Lp> __r,
     memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline void
    atomic_store(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)
    { std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); }
# 169 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,
        memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
      return __r;
    }

  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
    {
      return std::atomic_exchange_explicit(__p, std::move(__r),
        memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_exchange_explicit(__shared_ptr<_Tp, _Lp>* __p,
        __shared_ptr<_Tp, _Lp> __r,
        memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
      return __r;
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_exchange(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)
    {
      return std::atomic_exchange_explicit(__p, std::move(__r),
        memory_order_seq_cst);
    }
# 218 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    bool
    atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p,
         shared_ptr<_Tp>* __v,
         shared_ptr<_Tp> __w,
         memory_order,
         memory_order)
    {
      shared_ptr<_Tp> __x;
      _Sp_locker __lock{__p, __v};
      owner_less<shared_ptr<_Tp>> __less;
      if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
 {
   __x = std::move(*__p);
   *__p = std::move(__w);
   return true;
 }
      __x = std::move(*__v);
      *__v = *__p;
      return false;
    }

  template<typename _Tp>
    inline bool
    atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
     shared_ptr<_Tp> __w)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp>
    inline bool
    atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p,
       shared_ptr<_Tp>* __v,
       shared_ptr<_Tp> __w,
       memory_order __success,
       memory_order __failure)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), __success, __failure);
    }

  template<typename _Tp>
    inline bool
    atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
     shared_ptr<_Tp> __w)
    {
      return std::atomic_compare_exchange_weak_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
    bool
    atomic_compare_exchange_strong_explicit(__shared_ptr<_Tp, _Lp>* __p,
         __shared_ptr<_Tp, _Lp>* __v,
         __shared_ptr<_Tp, _Lp> __w,
         memory_order,
         memory_order)
    {
      __shared_ptr<_Tp, _Lp> __x;
      _Sp_locker __lock{__p, __v};
      owner_less<__shared_ptr<_Tp, _Lp>> __less;
      if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
 {
   __x = std::move(*__p);
   *__p = std::move(__w);
   return true;
 }
      __x = std::move(*__v);
      *__v = *__p;
      return false;
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_compare_exchange_strong(__shared_ptr<_Tp, _Lp>* __p,
       __shared_ptr<_Tp, _Lp>* __v,
       __shared_ptr<_Tp, _Lp> __w)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_compare_exchange_weak_explicit(__shared_ptr<_Tp, _Lp>* __p,
       __shared_ptr<_Tp, _Lp>* __v,
       __shared_ptr<_Tp, _Lp> __w,
       memory_order __success,
       memory_order __failure)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), __success, __failure);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_compare_exchange_weak(__shared_ptr<_Tp, _Lp>* __p,
     __shared_ptr<_Tp, _Lp>* __v,
     __shared_ptr<_Tp, _Lp> __w)
    {
      return std::atomic_compare_exchange_weak_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }





}
# 84 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/memory" 2 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 1 3
# 36 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 47 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 3
  template<typename _Tp1>
    struct auto_ptr_ref
    {
      _Tp1* _M_ptr;

      explicit
      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }
    } __attribute__ ((__deprecated__));
# 86 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 3
  template<typename _Tp>
    class auto_ptr
    {
    private:
      _Tp* _M_ptr;

    public:

      typedef _Tp element_type;







      explicit
      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }
# 112 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }
# 124 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }
# 135 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 3
      auto_ptr&
      operator=(auto_ptr& __a) throw()
      {
 reset(__a.release());
 return *this;
      }
# 152 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr&
        operator=(auto_ptr<_Tp1>& __a) throw()
        {
   reset(__a.release());
   return *this;
 }
# 170 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 3
      ~auto_ptr() { delete _M_ptr; }
# 180 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 3
      element_type&
      operator*() const throw()
      {
                                   ;
 return *_M_ptr;
      }







      element_type*
      operator->() const throw()
      {
                                   ;
 return _M_ptr;
      }
# 210 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 3
      element_type*
      get() const throw() { return _M_ptr; }
# 224 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 3
      element_type*
      release() throw()
      {
 element_type* __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 239 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 3
      void
      reset(element_type* __p = 0) throw()
      {
 if (__p != _M_ptr)
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 260 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr_ref<element_type> __ref) throw()
      : _M_ptr(__ref._M_ptr) { }

      auto_ptr&
      operator=(auto_ptr_ref<element_type> __ref) throw()
      {
 if (__ref._M_ptr != this->get())
   {
     delete _M_ptr;
     _M_ptr = __ref._M_ptr;
   }
 return *this;
      }

      template<typename _Tp1>
        operator auto_ptr_ref<_Tp1>() throw()
        { return auto_ptr_ref<_Tp1>(this->release()); }

      template<typename _Tp1>
        operator auto_ptr<_Tp1>() throw()
        { return auto_ptr<_Tp1>(this->release()); }
    } __attribute__ ((__deprecated__));



  template<>
    class auto_ptr<void>
    {
    public:
      typedef void element_type;
    } __attribute__ ((__deprecated__));


  template<_Lock_policy _Lp>
  template<typename _Tp>
    inline
    __shared_count<_Lp>::__shared_count(std::auto_ptr<_Tp>&& __r)
    : _M_pi(new _Sp_counted_ptr<_Tp*, _Lp>(__r.get()))
    { __r.release(); }

  template<typename _Tp, _Lock_policy _Lp>
  template<typename _Tp1>
    inline
    __shared_ptr<_Tp, _Lp>::__shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : _M_ptr(__r.get()), _M_refcount()
    {

      static_assert( sizeof(_Tp1) > 0, "incomplete type" );
      _Tp1* __tmp = __r.get();
      _M_refcount = __shared_count<_Lp>(std::move(__r));
      __enable_shared_from_this_helper(_M_refcount, __tmp, __tmp);
    }

  template<typename _Tp>
  template<typename _Tp1>
    inline
    shared_ptr<_Tp>::shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : __shared_ptr<_Tp>(std::move(__r)) { }

  template<typename _Tp, typename _Dp>
  template<typename _Up, typename>
    inline
    unique_ptr<_Tp, _Dp>::unique_ptr(auto_ptr<_Up>&& __u) noexcept
    : _M_t(__u.release(), deleter_type()) { }



}
# 86 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/memory" 2 3








namespace std __attribute__ ((__visibility__ ("default")))
{
# 114 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/memory" 3
inline void*
align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept
{
  const auto __intptr = reinterpret_cast<uintptr_t>(__ptr);
  const auto __aligned = (__intptr - 1u + __align) & -__align;
  const auto __diff = __aligned - __intptr;
  if ((__size + __diff) > __space)
    return nullptr;
  else
    {
      __space -= __diff;
      return __ptr = reinterpret_cast<void*>(__aligned);
    }
}


}
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/thread" 2 3






namespace std __attribute__ ((__visibility__ ("default")))
{
# 60 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/thread" 3
  class thread
  {
  public:
    typedef __gthread_t native_handle_type;
    struct _Impl_base;
    typedef shared_ptr<_Impl_base> __shared_base_type;


    class id
    {
      native_handle_type _M_thread;

    public:
      id() noexcept : _M_thread() { }

      explicit
      id(native_handle_type __id) : _M_thread(__id) { }

    private:
      friend class thread;
      friend class hash<thread::id>;

      friend bool
      operator==(thread::id __x, thread::id __y) noexcept
      { return __gthread_equal(__x._M_thread, __y._M_thread); }

      friend bool
      operator<(thread::id __x, thread::id __y) noexcept
      { return __x._M_thread < __y._M_thread; }

      template<class _CharT, class _Traits>
 friend basic_ostream<_CharT, _Traits>&
 operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id);
    };



    struct _Impl_base
    {
      __shared_base_type _M_this_ptr;

      inline virtual ~_Impl_base();

      virtual void _M_run() = 0;
    };

    template<typename _Callable>
      struct _Impl : public _Impl_base
      {
 _Callable _M_func;

 _Impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))
 { }

 void
 _M_run() { _M_func(); }
      };

  private:
    id _M_id;

  public:
    thread() noexcept = default;


    thread(thread&) = delete;
    thread(const thread&) = delete;

    thread(thread&& __t) noexcept
    { swap(__t); }

    template<typename _Callable, typename... _Args>
      explicit
      thread(_Callable&& __f, _Args&&... __args)
      {


        _M_start_thread(_M_make_routine(std::__bind_simple(
                std::forward<_Callable>(__f),
                std::forward<_Args>(__args)...)),
     reinterpret_cast<void(*)()>(&pthread_create));





      }

    ~thread()
    {
      if (joinable())
 std::terminate();
    }

    thread& operator=(const thread&) = delete;

    thread& operator=(thread&& __t) noexcept
    {
      if (joinable())
 std::terminate();
      swap(__t);
      return *this;
    }

    void
    swap(thread& __t) noexcept
    { std::swap(_M_id, __t._M_id); }

    bool
    joinable() const noexcept
    { return !(_M_id == id()); }

    void
    join();

    void
    detach();

    thread::id
    get_id() const noexcept
    { return _M_id; }



    native_handle_type
    native_handle()
    { return _M_id._M_thread; }


    static unsigned int
    hardware_concurrency() noexcept;

  private:
    void
    _M_start_thread(__shared_base_type, void (*)());

    void
    _M_start_thread(__shared_base_type);

    template<typename _Callable>
      shared_ptr<_Impl<_Callable>>
      _M_make_routine(_Callable&& __f)
      {

 return std::make_shared<_Impl<_Callable>>(std::forward<_Callable>(__f));
      }
  };

  inline thread::_Impl_base::~_Impl_base() = default;

  inline void
  swap(thread& __x, thread& __y) noexcept
  { __x.swap(__y); }

  inline bool
  operator!=(thread::id __x, thread::id __y) noexcept
  { return !(__x == __y); }

  inline bool
  operator<=(thread::id __x, thread::id __y) noexcept
  { return !(__y < __x); }

  inline bool
  operator>(thread::id __x, thread::id __y) noexcept
  { return __y < __x; }

  inline bool
  operator>=(thread::id __x, thread::id __y) noexcept
  { return !(__x < __y); }



  template<>
    struct hash<thread::id>
    : public __hash_base<size_t, thread::id>
    {
      size_t
      operator()(const thread::id& __id) const noexcept
      { return std::_Hash_impl::hash(__id._M_thread); }
    };

  template<class _CharT, class _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id)
    {
      if (__id == thread::id())
 return __out << "thread::id of a non-executing thread";
      else
 return __out << __id._M_thread;
    }







  namespace this_thread
  {



    inline thread::id
    get_id() noexcept { return thread::id(__gthread_self()); }


    inline void
    yield() noexcept
    {

      __gthread_yield();

    }

    void
    __sleep_for(chrono::seconds, chrono::nanoseconds);


    template<typename _Rep, typename _Period>
      inline void
      sleep_for(const chrono::duration<_Rep, _Period>& __rtime)
      {
 if (__rtime <= __rtime.zero())
   return;
 auto __s = chrono::duration_cast<chrono::seconds>(__rtime);
 auto __ns = chrono::duration_cast<chrono::nanoseconds>(__rtime - __s);

 __gthread_time_t __ts =
   {
     static_cast<std::time_t>(__s.count()),
     static_cast<long>(__ns.count())
   };
 ::nanosleep(&__ts, 0);



      }


    template<typename _Clock, typename _Duration>
      inline void
      sleep_until(const chrono::time_point<_Clock, _Duration>& __atime)
      {
 auto __now = _Clock::now();
 if (__now < __atime)
   sleep_for(__atime - __now);
      }


  }



}
# 49 "/opt/rocm/hip/include/hip/hip_runtime.h" 2



# 1 "/opt/rocm/hip/include/hip/hip_common.h" 1
# 53 "/opt/rocm/hip/include/hip/hip_runtime.h" 2


# 1 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h" 1
# 37 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 3




# 1 "/usr/include/math.h" 1 3 4
# 28 "/usr/include/math.h" 3 4
extern "C" {



# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 32 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 36 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 39 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 42 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 45 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
typedef float float_t;
typedef double double_t;
# 49 "/usr/include/math.h" 2 3 4
# 83 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


 extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

 extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




 extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();






extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







 extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


 extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();
# 153 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();
# 178 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));
# 208 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));
# 247 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();
# 375 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));






extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 84 "/usr/include/math.h" 2 3 4
# 104 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


 extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

 extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




 extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();






extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







 extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


 extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();
# 153 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();
# 178 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));
# 204 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) throw () __attribute__ ((__const__));



extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));






extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();
# 375 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));






extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 105 "/usr/include/math.h" 2 3 4
# 151 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


 extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

 extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();






extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







 extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


 extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();
# 153 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();
# 178 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));
# 204 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) throw () __attribute__ ((__const__));



extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));






extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();
# 375 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));






extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 152 "/usr/include/math.h" 2 3 4
# 168 "/usr/include/math.h" 3 4
extern int signgam;
# 209 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 347 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 370 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 472 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 1 3 4
# 126 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
 __signbitf (float __x) throw ()
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x8) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
 __signbit (double __x) throw ()
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x80) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
 __signbitl (long double __x) throw ()
{
  __extension__ union { long double __l; int __i[3]; } __u = { __l: __x };
  return (__u.__i[2] & 0x8000) != 0;
}
# 473 "/usr/include/math.h" 2 3 4
# 534 "/usr/include/math.h" 3 4
}
# 45 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 2 3
# 75 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }



  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 431 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 555 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{





  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }


  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }


  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }

  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }

  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }


  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }

  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }

  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }


  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }



  constexpr bool
  signbit(float __x)
  { return __builtin_signbitf(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbitl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }


  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }


  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }


  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }


  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }


  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }


  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 947 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 3
}
# 1062 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;

  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;

  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }


  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }


  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }


  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }


  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }


  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }


  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }


  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }


  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }


  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }


  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }


  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }


  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }


  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }


  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }


  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }


  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }


  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }


  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }


  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }


  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }



  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }


  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }


  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }


  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }


  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }


  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }


  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }


  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }


  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }


  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }


  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }


  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }


  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }


  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }


  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }


  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }


}
# 38 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h" 2
# 50 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h"
# 1 "/opt/rocm/hip/include/hip/hip_runtime_api.h" 1
# 34 "/opt/rocm/hip/include/hip/hip_runtime_api.h"
# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4
extern "C" {





# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 106 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 117 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));
# 162 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 231 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 272 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 337 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 368 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();
# 433 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 484 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 512 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));
# 599 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) throw () __attribute__ ((__nonnull__ (1)));
# 648 "/usr/include/string.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
__mempcpy_inline (void *__restrict __dest,
    const void *__restrict __src, size_t __n)
{
  return (char *) memcpy (__dest, __src, __n) + __n;
}




}
# 35 "/opt/rocm/hip/include/hip/hip_runtime_api.h" 2


enum {
HIP_SUCCESS = 0,
HIP_ERROR_INVALID_VALUE,
HIP_ERROR_NOT_INITIALIZED,
HIP_ERROR_LAUNCH_OUT_OF_RESOURCES
};

typedef struct {

    unsigned hasGlobalInt32Atomics : 1;
    unsigned hasGlobalFloatAtomicExch : 1;
    unsigned hasSharedInt32Atomics : 1;
    unsigned hasSharedFloatAtomicExch : 1;
    unsigned hasFloatAtomicAdd : 1;


    unsigned hasGlobalInt64Atomics : 1;
    unsigned hasSharedInt64Atomics : 1;


    unsigned hasDoubles : 1;


    unsigned hasWarpVote : 1;
    unsigned hasWarpBallot : 1;
    unsigned hasWarpShuffle : 1;
    unsigned hasFunnelShift : 1;


    unsigned hasThreadFenceSystem : 1;
    unsigned hasSyncThreadsExt : 1;


    unsigned hasSurfaceFuncs : 1;
    unsigned has3dGrid : 1;
    unsigned hasDynamicParallelism : 1;
} hipDeviceArch_t;
# 83 "/opt/rocm/hip/include/hip/hip_runtime_api.h"
typedef struct hipDeviceProp_t {
    char name[256];
    size_t totalGlobalMem;
    size_t sharedMemPerBlock;
    int regsPerBlock;
    int warpSize;
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int clockRate;
    int memoryClockRate;
    int memoryBusWidth;
    size_t totalConstMem;
    int major;
    int minor;
    int multiProcessorCount;
    int l2CacheSize;
    int maxThreadsPerMultiProcessor;
    int computeMode;
    int clockInstructionRate;
    hipDeviceArch_t arch;
    int concurrentKernels;
    int pciBusID;
    int pciDeviceID;
    size_t maxSharedMemoryPerMultiProcessor;
    int isMultiGpuBoard;
    int canMapHostMemory;
    int gcnArch;
 } hipDeviceProp_t;





enum hipMemoryType {
    hipMemoryTypeHost,
    hipMemoryTypeDevice
};






typedef struct hipPointerAttribute_t {
    enum hipMemoryType memoryType;
    int device;
    void *devicePointer;
    void *hostPointer;
    int isManaged;
    unsigned allocationFlags;

} hipPointerAttribute_t;
# 154 "/opt/rocm/hip/include/hip/hip_runtime_api.h"
typedef enum hipError_t {
    hipSuccess = 0,
    hipErrorOutOfMemory = 2,
    hipErrorNotInitialized = 3,
    hipErrorDeinitialized = 4,
    hipErrorProfilerDisabled = 5,
    hipErrorProfilerNotInitialized = 6,
    hipErrorProfilerAlreadyStarted = 7,
    hipErrorProfilerAlreadyStopped = 8,
    hipErrorInvalidImage = 200,
    hipErrorInvalidContext = 201,
    hipErrorContextAlreadyCurrent = 202,
    hipErrorMapFailed = 205,
    hipErrorUnmapFailed = 206,
    hipErrorArrayIsMapped = 207,
    hipErrorAlreadyMapped = 208,
    hipErrorNoBinaryForGpu = 209,
    hipErrorAlreadyAcquired = 210,
    hipErrorNotMapped = 211,
    hipErrorNotMappedAsArray = 212,
    hipErrorNotMappedAsPointer = 213,
    hipErrorECCNotCorrectable = 214,
    hipErrorUnsupportedLimit = 215,
    hipErrorContextAlreadyInUse = 216,
    hipErrorPeerAccessUnsupported = 217,
    hipErrorInvalidKernelFile = 218,
    hipErrorInvalidGraphicsContext = 219,
    hipErrorInvalidSource = 300,
    hipErrorFileNotFound = 301,
    hipErrorSharedObjectSymbolNotFound = 302,
    hipErrorSharedObjectInitFailed = 303,
    hipErrorOperatingSystem = 304,
    hipErrorSetOnActiveProcess = 305,
    hipErrorInvalidHandle = 400,
    hipErrorNotFound = 500,
    hipErrorIllegalAddress = 700,
    hipErrorInvalidSymbol = 701,

    hipErrorMissingConfiguration = 1001,
    hipErrorMemoryAllocation = 1002,
    hipErrorInitializationError = 1003,
    hipErrorLaunchFailure = 1004,
    hipErrorPriorLaunchFailure = 1005,
    hipErrorLaunchTimeOut = 1006,
    hipErrorLaunchOutOfResources = 1007,
    hipErrorInvalidDeviceFunction = 1008,
    hipErrorInvalidConfiguration = 1009,
    hipErrorInvalidDevice = 1010,
    hipErrorInvalidValue = 1011,
    hipErrorInvalidDevicePointer = 1017,
    hipErrorInvalidMemcpyDirection = 1021,
    hipErrorUnknown = 1030,
    hipErrorInvalidResourceHandle = 1033,
    hipErrorNotReady = 1034,
    hipErrorNoDevice = 1038,
    hipErrorPeerAccessAlreadyEnabled = 1050,

    hipErrorPeerAccessNotEnabled = 1051,
    hipErrorRuntimeMemory = 1052,
    hipErrorRuntimeOther = 1053,
    hipErrorHostMemoryAlreadyRegistered = 1061,
    hipErrorHostMemoryNotRegistered = 1062,
    hipErrorMapBufferObjectFailed = 1071,
    hipErrorTbd
} hipError_t;






typedef enum hipDeviceAttribute_t {
    hipDeviceAttributeMaxThreadsPerBlock,
    hipDeviceAttributeMaxBlockDimX,
    hipDeviceAttributeMaxBlockDimY,
    hipDeviceAttributeMaxBlockDimZ,
    hipDeviceAttributeMaxGridDimX,
    hipDeviceAttributeMaxGridDimY,
    hipDeviceAttributeMaxGridDimZ,
    hipDeviceAttributeMaxSharedMemoryPerBlock,
    hipDeviceAttributeTotalConstantMemory,
    hipDeviceAttributeWarpSize,
    hipDeviceAttributeMaxRegistersPerBlock,
    hipDeviceAttributeClockRate,
    hipDeviceAttributeMemoryClockRate,
    hipDeviceAttributeMemoryBusWidth,
    hipDeviceAttributeMultiprocessorCount,
    hipDeviceAttributeComputeMode,
    hipDeviceAttributeL2CacheSize,
    hipDeviceAttributeMaxThreadsPerMultiProcessor,
    hipDeviceAttributeComputeCapabilityMajor,
    hipDeviceAttributeComputeCapabilityMinor,
    hipDeviceAttributeConcurrentKernels,
    hipDeviceAttributePciBusId,
    hipDeviceAttributePciDeviceId,
    hipDeviceAttributeMaxSharedMemoryPerMultiprocessor,
    hipDeviceAttributeIsMultiGpuBoard,
} hipDeviceAttribute_t;








# 1 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h" 1
# 31 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 1 3
# 51 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 3
typedef long int ptrdiff_t;
# 118 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 3
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/__stddef_max_align_t.h" 1 3
# 35 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/__stddef_max_align_t.h" 3
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 119 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/stddef.h" 2 3
# 32 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/iostream" 1 3
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/iostream" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 1 3
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ios" 1 3
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ios" 3





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 98 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 117 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    locale() throw();
# 126 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 136 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 151 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 162 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    explicit
    locale(const std::string& __s) : locale(__s.c_str()) { }
# 177 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    locale(const locale& __base, const std::string& __s, category __cat)
    : locale(__base, __s.c_str(), __cat) { }
# 192 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 205 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 219 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 234 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    __attribute ((__abi_tag__ ("cxx11")))
    string
    name() const;
# 254 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 282 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 298 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    static locale
    global(const locale& __loc);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 333 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);


    static const id* const _S_twinned_facets[];

  };
# 371 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 402 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);

    class __shim;

    const facet* _M_sso_shim(const id*) const;
    const facet* _M_cow_shim(const id*) const;
  };
# 474 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    template<typename _Facet>
      void
      _M_init_facet_unchecked(_Facet* __facet)
      {
 __facet->_M_add_reference();
 _M_facets[_Facet::id._M_id()] = __facet;
      }

    void
    _M_install_cache(const facet*, size_t);

    void _M_init_extra(facet**);
    void _M_init_extra(void*, void*, const char*, const char*);
  };
# 632 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
  template<typename _CharT>
    class __cxx11:: collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 659 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 673 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 690 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 709 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 723 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 752 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 766 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 779 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class __cxx11:: collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }


      explicit
      collate_byname(const string& __s, size_t __refs = 0)
      : collate_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~collate_byname() { }
    };


}


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.tcc" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }
# 102 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.tcc" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }
# 130 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.tcc" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 843 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_classes.h" 2 3
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 2 3




# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/system_error" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/system_error" 3






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/error_constants.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/error_constants.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cerrno" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cerrno" 3

# 1 "/usr/include/errno.h" 1 3 4
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cerrno" 2 3
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/error_constants.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  enum class errc
    {
      address_family_not_supported = 97,
      address_in_use = 98,
      address_not_available = 99,
      already_connected = 106,
      argument_list_too_long = 7,
      argument_out_of_domain = 33,
      bad_address = 14,
      bad_file_descriptor = 9,


      bad_message = 74,


      broken_pipe = 32,
      connection_aborted = 103,
      connection_already_in_progress = 114,
      connection_refused = 111,
      connection_reset = 104,
      cross_device_link = 18,
      destination_address_required = 89,
      device_or_resource_busy = 16,
      directory_not_empty = 39,
      executable_format_error = 8,
      file_exists = 17,
      file_too_large = 27,
      filename_too_long = 36,
      function_not_supported = 38,
      host_unreachable = 113,


      identifier_removed = 43,


      illegal_byte_sequence = 84,
      inappropriate_io_control_operation = 25,
      interrupted = 4,
      invalid_argument = 22,
      invalid_seek = 29,
      io_error = 5,
      is_a_directory = 21,
      message_size = 90,
      network_down = 100,
      network_reset = 102,
      network_unreachable = 101,
      no_buffer_space = 105,
      no_child_process = 10,


      no_link = 67,


      no_lock_available = 37,


      no_message_available = 61,


      no_message = 42,
      no_protocol_option = 92,
      no_space_on_device = 28,


      no_stream_resources = 63,


      no_such_device_or_address = 6,
      no_such_device = 19,
      no_such_file_or_directory = 2,
      no_such_process = 3,
      not_a_directory = 20,
      not_a_socket = 88,


      not_a_stream = 60,


      not_connected = 107,
      not_enough_memory = 12,


      not_supported = 95,



      operation_canceled = 125,


      operation_in_progress = 115,
      operation_not_permitted = 1,
      operation_not_supported = 95,
      operation_would_block = 11,


      owner_dead = 130,


      permission_denied = 13,


      protocol_error = 71,


      protocol_not_supported = 93,
      read_only_file_system = 30,
      resource_deadlock_would_occur = 35,
      resource_unavailable_try_again = 11,
      result_out_of_range = 34,


      state_not_recoverable = 131,



      stream_timeout = 62,



      text_file_busy = 26,


      timed_out = 110,
      too_many_files_open_in_system = 23,
      too_many_files_open = 24,
      too_many_links = 31,
      too_many_symbolic_link_levels = 40,


      value_too_large = 75,


      wrong_protocol_type = 91
    };


}
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/system_error" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  class error_code;
  class error_condition;
  class system_error;


  template<typename _Tp>
    struct is_error_code_enum : public false_type { };


  template<typename _Tp>
    struct is_error_condition_enum : public false_type { };

  template<>
    struct is_error_condition_enum<errc>
    : public true_type { };

  inline namespace _V2 {


  class error_category
  {
  public:
    constexpr error_category() noexcept = default;

    virtual ~error_category();

    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;

    virtual const char*
    name() const noexcept = 0;






  private:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual __cow_string
    _M_message(int) const;

  public:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual string
    message(int) const = 0;
# 102 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/system_error" 3
  public:
    virtual error_condition
    default_error_condition(int __i) const noexcept;

    virtual bool
    equivalent(int __i, const error_condition& __cond) const noexcept;

    virtual bool
    equivalent(const error_code& __code, int __i) const noexcept;

    bool
    operator<(const error_category& __other) const noexcept
    { return less<const error_category*>()(this, &__other); }

    bool
    operator==(const error_category& __other) const noexcept
    { return this == &__other; }

    bool
    operator!=(const error_category& __other) const noexcept
    { return this != &__other; }
  };


  __attribute__ ((__const__)) const error_category& system_category() noexcept;
  __attribute__ ((__const__)) const error_category& generic_category() noexcept;

  }

  error_code make_error_code(errc) noexcept;

  template<typename _Tp>
    struct hash;



  struct error_code
  {
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorCodeEnum, typename = typename
      enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type>
      error_code(_ErrorCodeEnum __e) noexcept
      { *this = make_error_code(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }

    void
    clear() noexcept
    { assign(0, system_category()); }


    template<typename _ErrorCodeEnum>
      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,
    error_code&>::type
      operator=(_ErrorCodeEnum __e) noexcept
      { return *this = make_error_code(__e); }

    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    error_condition
    default_error_condition() const noexcept;

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0 ? true : false; }


  private:
    friend class hash<error_code>;

    int _M_value;
    const error_category* _M_cat;
  };


  inline error_code
  make_error_code(errc __e) noexcept
  { return error_code(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
    { return (__os << __e.category().name() << ':' << __e.value()); }

  error_condition make_error_condition(errc) noexcept;



  struct error_condition
  {
    error_condition() noexcept
    : _M_value(0), _M_cat(&generic_category()) { }

    error_condition(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorConditionEnum, typename = typename
  enable_if<is_error_condition_enum<_ErrorConditionEnum>::value>::type>
      error_condition(_ErrorConditionEnum __e) noexcept
      { *this = make_error_condition(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }


    template<typename _ErrorConditionEnum>
      typename enable_if<is_error_condition_enum
    <_ErrorConditionEnum>::value, error_condition&>::type
      operator=(_ErrorConditionEnum __e) noexcept
      { return *this = make_error_condition(__e); }

    void
    clear() noexcept
    { assign(0, generic_category()); }


    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0 ? true : false; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };


  inline error_condition
  make_error_condition(errc __e) noexcept
  { return error_condition(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_condition& __lhs,
     const error_condition& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }


  inline bool
  operator==(const error_code& __lhs, const error_code& __rhs) noexcept
  { return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value()); }

  inline bool
  operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
  {
    return (__lhs.category().equivalent(__lhs.value(), __rhs)
     || __rhs.category().equivalent(__lhs, __rhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
  {
    return (__rhs.category().equivalent(__rhs.value(), __lhs)
     || __lhs.category().equivalent(__rhs, __lhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  {
    return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value());
  }

  inline bool
  operator!=(const error_code& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }







  class system_error : public std::runtime_error
  {
  private:
    error_code _M_code;

  public:
    system_error(error_code __ec = error_code())
    : runtime_error(__ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + ": " + __ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }

    system_error(int __v, const error_category& __ecat)
    : runtime_error(error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    system_error(int __v, const error_category& __ecat, const string& __what)
    : runtime_error(__what + ": " + error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    virtual ~system_error() noexcept;

    const error_code&
    code() const noexcept { return _M_code; }
  };


}





namespace std __attribute__ ((__visibility__ ("default")))
{




  template<>
    struct hash<error_code>
    : public __hash_base<size_t, error_code>
    {
      size_t
      operator()(const error_code& __e) const noexcept
      {
 const size_t __tmp = std::_Hash_impl::hash(__e._M_value);
 return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);
      }
    };


}
# 47 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16,
      _S_ios_fmtflags_max = 2147483647,
      _S_ios_fmtflags_min = ~2147483647
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16,
      _S_ios_openmode_max = 2147483647,
      _S_ios_openmode_min = ~2147483647
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16,
      _S_ios_iostate_max = 2147483647,
      _S_ios_iostate_min = ~2147483647
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };



  enum class io_errc { stream = 1 };

  template <> struct is_error_code_enum<io_errc> : public true_type { };

  const error_category& iostream_category() noexcept;

  inline error_code
  make_error_code(io_errc e) noexcept
  { return error_code(static_cast<int>(e), iostream_category()); }

  inline error_condition
  make_error_condition(io_errc e) noexcept
  { return error_condition(static_cast<int>(e), iostream_category()); }
# 228 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
  class ios_base
  {
# 246 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
  public:
# 255 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    class __attribute ((__abi_tag__ ("cxx11"))) failure : public system_error
    {
    public:
      explicit
      failure(const string& __str);


      explicit
      failure(const string&, const error_code&);

      explicit
      failure(const char*, const error_code& = io_errc::stream);


      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();
    };
# 323 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 398 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 429 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 461 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 487 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 504 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 516 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

                                                             ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
                                                                ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 629 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 645 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 662 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 688 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 739 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 751 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 762 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 773 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 792 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 808 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 829 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 846 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();
# 860 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ios_base.h" 3
  public:
    ios_base(const ios_base&) = delete;

    ios_base&
    operator=(const ios_base&) = delete;

  protected:
    void
    _M_move(ios_base&) noexcept;

    void
    _M_swap(ios_base& __rhs) noexcept;

  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }






  inline ios_base&
  hexfloat(ios_base& __base)
  {
    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  defaultfloat(ios_base& __base)
  {
    __base.unsetf(ios_base::floatfield);
    return __base;
  }



}
# 43 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ios" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 1 3
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3








namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 119 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 208 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 225 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 238 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 250 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 262 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 283 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 297 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 315 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 337 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 356 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 371 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 396 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 423 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 449 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 463 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 481 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 497 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 508 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 528 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 544 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 554 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 575 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      virtual void
      imbue(const locale& __loc)
      { }
# 590 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 601 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 613 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 626 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      virtual int
      sync() { return 0; }
# 648 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 664 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 686 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 699 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 723 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      virtual int_type
      pbackfail(int_type __c = traits_type::eof())
      { return traits_type::eof(); }
# 741 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 767 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      virtual int_type
      overflow(int_type __c = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 782 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }




    protected:

      basic_streambuf(const basic_streambuf&);

      basic_streambuf&
      operator=(const basic_streambuf&);


      void
      swap(basic_streambuf& __sb)
      {
 std::swap(_M_in_beg, __sb._M_in_beg);
 std::swap(_M_in_cur, __sb._M_in_cur);
 std::swap(_M_in_end, __sb._M_in_end);
 std::swap(_M_out_beg, __sb._M_out_beg);
 std::swap(_M_out_cur, __sb._M_out_cur);
 std::swap(_M_out_end, __sb._M_out_end);
 std::swap(_M_buf_locale, __sb._M_buf_locale);
      }

    };


  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>::
    basic_streambuf(const basic_streambuf&) = default;

  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>&
    std::basic_streambuf<_CharT, _Traits>::
    operator=(const basic_streambuf&) = default;



  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);



}


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/streambuf.tcc" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 851 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/streambuf" 2 3
# 44 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ios" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwctype" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwctype" 3
# 50 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 33 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 34 "/usr/include/wctype.h" 2 3 4
# 52 "/usr/include/wctype.h" 3 4
typedef unsigned long int wctype_t;
# 71 "/usr/include/wctype.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {
# 111 "/usr/include/wctype.h" 3 4
extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 171 "/usr/include/wctype.h" 3 4
extern wctype_t wctype (const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();
# 186 "/usr/include/wctype.h" 3 4
typedef const __int32_t *wctrans_t;







extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();


}
# 213 "/usr/include/wctype.h" 3 4
extern "C" {




extern wctrans_t wctrans (const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();
# 230 "/usr/include/wctype.h" 3 4
extern int iswalnum_l (wint_t __wc, __locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, __locale_t __locale) throw ();



extern wctype_t wctype_l (const char *__property, __locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, __locale_t __locale)
     throw ();







extern wint_t towlower_l (wint_t __wc, __locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, __locale_t __locale) throw ();



extern wctrans_t wctrans_l (const char *__property, __locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      __locale_t __locale) throw ();



}
# 51 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwctype" 2 3
# 80 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cctype" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cctype" 3
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/ctype_base.h" 1 3
# 36 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;

    static const mask blank = _ISblank;

  };


}
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 2 3






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/streambuf_iterator.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 49 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
                      _CharT*,


        _CharT>



    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      constexpr istreambuf_iterator() noexcept
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;

      ~istreambuf_iterator() = default;



      istreambuf_iterator(istream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const noexcept
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }




}
# 49 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 71 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 149 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 168 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 185 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 201 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 217 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 231 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 246 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 260 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 275 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 292 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 311 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 330 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 352 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 377 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 396 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 415 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 434 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 452 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 469 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 485 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 502 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 521 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 542 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 563 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 588 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 611 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 680 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 717 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 730 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 743 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 758 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 772 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 786 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 801 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 818 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 834 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 851 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 871 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 898 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 929 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 962 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1011 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1028 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1044 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1061 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1081 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1104 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1130 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const
      { return __c; }
# 1156 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1181 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1214 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1225 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1249 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1268 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1286 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1304 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1321 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1338 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1354 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1371 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1391 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1413 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1436 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1462 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0)
      : ctype_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };



}



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/ctype_inline.h" 1 3
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1535 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }

namespace __cxx11 {
# 1665 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1703 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1717 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1731 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1744 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1775 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1788 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1801 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1818 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1830 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1843 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1856 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1869 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }


      explicit
      numpunct_byname(const string& __s, size_t __refs = 0)
      : numpunct_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~numpunct_byname() { }
    };

}
# 1947 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1968 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1994 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2031 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2091 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2134 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      __attribute ((__abi_tag__ ("cxx11")))
      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 __attribute ((__abi_tag__ ("cxx11")))
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2207 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
# 2270 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2288 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2309 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2327 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2369 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2432 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2457 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2505 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;
# 2563 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 3
  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }



  template<typename _CharT>
    inline bool
    isblank(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c); }



  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.tcc" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   const string& __g = __np.grouping();
   _M_grouping_size = __g.size();
   __grouping = new char[_M_grouping_size];
   __g.copy(__grouping, _M_grouping_size);
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(__grouping[0]) > 0
        && (__grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   const basic_string<_CharT>& __tn = __np.truename();
   _M_truename_size = __tn.size();
   __truename = new _CharT[_M_truename_size];
   __tn.copy(__truename, _M_truename_size);

   const basic_string<_CharT>& __fn = __np.falsename();
   _M_falsename_size = __fn.size();
   __falsename = new _CharT[_M_falsename_size];
   __fn.copy(__falsename, _M_falsename_size);

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);

   _M_grouping = __grouping;
   _M_truename = __truename;
   _M_falsename = __falsename;
   _M_allocated = true;
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 139 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    __attribute ((__abi_tag__ ("cxx11")))
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      __attribute ((__abi_tag__ ("cxx11")))
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 735 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 971 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);



 const bool __use_prec =
   (__io.flags() & ios_base::floatfield) != ios_base::floatfield;



 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 if (__use_prec)
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __prec, __v);
 else
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     if (__use_prec)
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __prec, __v);
     else
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __v);
   }
# 1044 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1169 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1206 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class __cxx11:: numpunct<char>;
  extern template class __cxx11:: numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class __cxx11:: numpunct<wchar_t>;
  extern template class __cxx11:: numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2652 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/locale_facets.h" 2 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 66 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:
# 117 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      explicit operator bool() const
      { return !this->fail(); }





      bool
      operator!() const
      { return this->fail(); }
# 136 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 147 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 200 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 221 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 256 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 294 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 306 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 346 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 360 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 389 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 409 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 429 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 448 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);


      basic_ios(const basic_ios&) = delete;
      basic_ios& operator=(const basic_ios&) = delete;

      void
      move(basic_ios& __rhs)
      {
 ios_base::_M_move(__rhs);
 _M_cache_locale(_M_ios_locale);
 this->tie(__rhs.tie(nullptr));
 _M_fill = __rhs._M_fill;
 _M_fill_init = __rhs._M_fill_init;
 _M_streambuf = nullptr;
      }

      void
      move(basic_ios&& __rhs)
      { this->move(__rhs); }

      void
      swap(basic_ios& __rhs) noexcept
      {
 ios_base::_M_swap(__rhs);
 _M_cache_locale(_M_ios_locale);
 __rhs._M_cache_locale(__rhs._M_ios_locale);
 std::swap(_M_tie, __rhs._M_tie);
 std::swap(_M_fill, __rhs._M_fill);
 std::swap(_M_fill_init, __rhs._M_fill_init);
      }

      void
      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
      { _M_streambuf = __sb; }


      void
      _M_cache_locale(const locale& __loc);
    };


}


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.tcc" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 517 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_ios.h" 2 3
# 45 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ios" 2 3
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 57 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
# 219 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 244 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 269 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 302 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      __ostream_type&
      put(char_type __c);






      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 334 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 347 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      __ostream_type&
      flush();
# 357 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      pos_type
      tellp();
# 368 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 380 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }



      basic_ostream(basic_iostream<_CharT, _Traits>&) { }

      basic_ostream(const basic_ostream&) = delete;

      basic_ostream(basic_ostream&& __rhs)
      : __ios_type()
      { __ios_type::move(__rhs); }



      basic_ostream& operator=(const basic_ostream&) = delete;

      basic_ostream&
      operator=(basic_ostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_ostream& __rhs)
      { __ios_type::swap(__rhs); }


      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);
    };
# 425 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 444 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 454 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 473 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 495 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 537 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 588 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 600 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 626 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 3
  template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)
    {
      __os << __x;
      return __os;
    }



}


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ostream.tcc" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 639 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ostream" 2 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/iostream" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 1 3
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 57 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 119 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
# 213 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 234 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 258 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 268 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 301 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      int_type
      get();
# 315 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      get(char_type& __c);
# 342 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 353 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 376 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 386 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 415 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 426 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 450 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 467 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      int_type
      peek();
# 485 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 504 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 521 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      putback(char_type __c);
# 537 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      unget();
# 555 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      int
      sync();
# 570 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      pos_type
      tellg();
# 585 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      seekg(pos_type);
# 601 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }


      basic_istream(const basic_istream&) = delete;

      basic_istream(basic_istream&& __rhs)
      : __ios_type(), _M_gcount(__rhs._M_gcount)
      {
 __ios_type::move(__rhs);
 __rhs._M_gcount = 0;
      }



      basic_istream& operator=(const basic_istream&) = delete;

      basic_istream&
      operator=(basic_istream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_istream& __rhs)
      {
 __ios_type::swap(__rhs);
 std::swap(_M_gcount, __rhs._M_gcount);
      }


      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 685 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 721 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 732 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 750 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 792 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 823 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }


      basic_iostream(const basic_iostream&) = delete;

      basic_iostream(basic_iostream&& __rhs)
      : __istream_type(std::move(__rhs)), __ostream_type(*this)
      { }



      basic_iostream& operator=(const basic_iostream&) = delete;

      basic_iostream&
      operator=(basic_iostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_iostream& __rhs)
      { __istream_type::swap(__rhs); }

    };
# 906 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 922 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 3
  template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>&& __is, _Tp& __x)
    {
      __is >> __x;
      return __is;
    }



}


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/istream.tcc" 1 3
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 513 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 935 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/istream" 2 3
# 41 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/iostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 60 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 33 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h" 2





# 1 "/opt/rocm/hip/include/hip/hcc_detail/host_defines.h" 1
# 39 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h" 2
# 1 "/opt/rocm/hip/include/hip/hip_runtime_api.h" 1
# 40 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h" 2
# 1 "/opt/rocm/hip/include/hip/hip_texture.h" 1
# 27 "/opt/rocm/hip/include/hip/hip_texture.h"
# 1 "/opt/rocm/hip/include/hip/hcc_detail/hip_texture.h" 1
# 33 "/opt/rocm/hip/include/hip/hcc_detail/hip_texture.h"
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/limits.h" 1 3
# 37 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/limits.h" 3
# 1 "/usr/include/limits.h" 1 3 4
# 143 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 144 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 148 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 152 "/usr/include/limits.h" 2 3 4
# 38 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/limits.h" 2 3
# 34 "/opt/rocm/hip/include/hip/hcc_detail/hip_texture.h" 2
# 1 "/opt/rocm/hip/include/hip/hcc_detail/driver_types.h" 1
# 26 "/opt/rocm/hip/include/hip/hcc_detail/driver_types.h"
enum hipChannelFormatKind
{
  hipChannelFormatKindSigned = 0,
  hipChannelFormatKindUnsigned = 1,
  hipChannelFormatKindFloat = 2,
  hipChannelFormatKindNone = 3
};

struct hipChannelFormatDesc
{
  int x;
  int y;
  int z;
  int w;
  enum hipChannelFormatKind f;
};
# 35 "/opt/rocm/hip/include/hip/hcc_detail/hip_texture.h" 2
# 1 "/opt/rocm/hip/include/hip/hcc_detail/channel_descriptor.h" 1
# 27 "/opt/rocm/hip/include/hip/hcc_detail/channel_descriptor.h"
# 1 "/opt/rocm/hip/include/hip/hcc_detail/hip_vector_types.h" 1
# 72 "/opt/rocm/hip/include/hip/hcc_detail/hip_vector_types.h"
struct uchar1 {

    public:
    __attribute__((hc)) __attribute__((cpu)) uchar1() {} __attribute__((hc)) __attribute__((cpu)) uchar1(const uchar1& val) : x(val.x) { } __attribute__((hc)) __attribute__((cpu)) ~uchar1() {}
    __attribute__((hc)) __attribute__((cpu)) uchar1(unsigned char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uchar1(signed char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uchar1(unsigned short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uchar1(signed short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uchar1(unsigned int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uchar1(signed int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uchar1(float val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uchar1(double val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uchar1(unsigned long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uchar1(signed long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uchar1(unsigned long long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uchar1(signed long long val) : x(val) {}


  unsigned char x;

} __attribute__((aligned(1)));

struct uchar2 {

    public:
    __attribute__((hc)) __attribute__((cpu)) uchar2() {} __attribute__((hc)) __attribute__((cpu)) uchar2(const uchar2& val) : x(val.x), y(val.y) { } __attribute__((hc)) __attribute__((cpu)) ~uchar2() {}

    __attribute__((hc)) __attribute__((cpu)) uchar2(unsigned char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uchar2(unsigned char val1, unsigned char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uchar2(signed char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uchar2(signed char val1, signed char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uchar2(unsigned short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uchar2(unsigned short val1, unsigned short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uchar2(signed short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uchar2(signed short val1, signed short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uchar2(unsigned int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uchar2(unsigned int val1, unsigned int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uchar2(signed int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uchar2(signed int val1, signed int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uchar2(float val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uchar2(float val1, float val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uchar2(double val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uchar2(double val1, double val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uchar2(unsigned long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uchar2(unsigned long val1, unsigned long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uchar2(signed long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uchar2(signed long val1, signed long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uchar2(unsigned long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uchar2(unsigned long long val1, unsigned long long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uchar2(signed long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uchar2(signed long long val1, signed long long val2) : x(val1), y(val2) {}

  union {
    struct {
      unsigned char x, y;
    };
    unsigned short a;
  };
} __attribute__((aligned(2)));

struct uchar3 {

    public:
    __attribute__((hc)) __attribute__((cpu)) uchar3() {} __attribute__((hc)) __attribute__((cpu)) uchar3(const uchar3& val) : x(val.x), y(val.y), z(val.z) { } __attribute__((hc)) __attribute__((cpu)) ~uchar3() {}

    __attribute__((hc)) __attribute__((cpu)) uchar3(unsigned char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uchar3(unsigned char val1, unsigned char val2, unsigned char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uchar3(signed char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uchar3(signed char val1, signed char val2, signed char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uchar3(unsigned short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uchar3(unsigned short val1, unsigned short val2, unsigned short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uchar3(signed short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uchar3(signed short val1, signed short val2, signed short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uchar3(unsigned int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uchar3(unsigned int val1, unsigned int val2, unsigned int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uchar3(signed int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uchar3(signed int val1, signed int val2, signed int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uchar3(float val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uchar3(float val1, float val2, float val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uchar3(double val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uchar3(double val1, double val2, double val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uchar3(unsigned long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uchar3(unsigned long val1, unsigned long val2, unsigned long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uchar3(signed long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uchar3(signed long val1, signed long val2, signed long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uchar3(unsigned long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uchar3(unsigned long long val1, unsigned long long val2, unsigned long long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uchar3(signed long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uchar3(signed long long val1, signed long long val2, signed long long val3) : x(val1), y(val2), z(val3) {}

  unsigned char x, y, z;
};

struct uchar4 {

    public:
    __attribute__((hc)) __attribute__((cpu)) uchar4() {} __attribute__((hc)) __attribute__((cpu)) uchar4(const uchar4& val) : x(val.x), y(val.y), z(val.z), w(val.w) { } __attribute__((hc)) __attribute__((cpu)) ~uchar4() {}

    __attribute__((hc)) __attribute__((cpu)) uchar4(unsigned char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uchar4(unsigned char val1, unsigned char val2, unsigned char val3, unsigned char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uchar4(signed char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uchar4(signed char val1, signed char val2, signed char val3, signed char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uchar4(unsigned short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uchar4(unsigned short val1, unsigned short val2, unsigned short val3, unsigned short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uchar4(signed short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uchar4(signed short val1, signed short val2, signed short val3, signed short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uchar4(unsigned int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uchar4(unsigned int val1, unsigned int val2, unsigned int val3, unsigned int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uchar4(signed int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uchar4(signed int val1, signed int val2, signed int val3, signed int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uchar4(float val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uchar4(float val1, float val2, float val3, float val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uchar4(double val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uchar4(double val1, double val2, double val3, double val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uchar4(unsigned long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uchar4(unsigned long val1, unsigned long val2, unsigned long val3, unsigned long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uchar4(signed long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uchar4(signed long val1, signed long val2, signed long val3, signed long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uchar4(unsigned long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uchar4(unsigned long long val1, unsigned long long val2, unsigned long long val3, unsigned long long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uchar4(signed long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uchar4(signed long long val1, signed long long val2, signed long long val3, signed long long val4) : x(val1), y(val2), z(val3), w(val4) {}

  union {
    struct {
      unsigned char x, y, z, w;
    };
    unsigned int a;
  };
} __attribute__((aligned(4)));


struct char1 {

    public:
    __attribute__((hc)) __attribute__((cpu)) char1() {} __attribute__((hc)) __attribute__((cpu)) char1(const char1& val) : x(val.x) { } __attribute__((hc)) __attribute__((cpu)) ~char1() {}

    __attribute__((hc)) __attribute__((cpu)) char1(unsigned char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) char1(signed char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) char1(unsigned short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) char1(signed short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) char1(unsigned int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) char1(signed int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) char1(float val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) char1(double val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) char1(unsigned long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) char1(signed long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) char1(unsigned long long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) char1(signed long long val) : x(val) {}

  signed char x;
} __attribute__((aligned(1)));

struct char2 {

    public:
    __attribute__((hc)) __attribute__((cpu)) char2() {} __attribute__((hc)) __attribute__((cpu)) char2(const char2& val) : x(val.x), y(val.y) { } __attribute__((hc)) __attribute__((cpu)) ~char2() {}

    __attribute__((hc)) __attribute__((cpu)) char2(unsigned char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) char2(unsigned char val1, unsigned char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) char2(signed char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) char2(signed char val1, signed char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) char2(unsigned short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) char2(unsigned short val1, unsigned short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) char2(signed short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) char2(signed short val1, signed short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) char2(unsigned int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) char2(unsigned int val1, unsigned int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) char2(signed int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) char2(signed int val1, signed int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) char2(float val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) char2(float val1, float val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) char2(double val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) char2(double val1, double val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) char2(unsigned long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) char2(unsigned long val1, unsigned long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) char2(signed long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) char2(signed long val1, signed long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) char2(unsigned long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) char2(unsigned long long val1, unsigned long long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) char2(signed long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) char2(signed long long val1, signed long long val2) : x(val1), y(val2) {}

  union {
    struct {
      signed char x, y;
    };
    unsigned short a;
  };
} __attribute__((aligned(2)));

struct char3 {

    public:
    __attribute__((hc)) __attribute__((cpu)) char3() {} __attribute__((hc)) __attribute__((cpu)) char3(const char3& val) : x(val.x), y(val.y), z(val.z) { } __attribute__((hc)) __attribute__((cpu)) ~char3() {}
    __attribute__((hc)) __attribute__((cpu)) char3(unsigned char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) char3(unsigned char val1, unsigned char val2, unsigned char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) char3(signed char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) char3(signed char val1, signed char val2, signed char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) char3(unsigned short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) char3(unsigned short val1, unsigned short val2, unsigned short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) char3(signed short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) char3(signed short val1, signed short val2, signed short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) char3(unsigned int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) char3(unsigned int val1, unsigned int val2, unsigned int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) char3(signed int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) char3(signed int val1, signed int val2, signed int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) char3(float val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) char3(float val1, float val2, float val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) char3(double val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) char3(double val1, double val2, double val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) char3(unsigned long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) char3(unsigned long val1, unsigned long val2, unsigned long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) char3(signed long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) char3(signed long val1, signed long val2, signed long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) char3(unsigned long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) char3(unsigned long long val1, unsigned long long val2, unsigned long long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) char3(signed long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) char3(signed long long val1, signed long long val2, signed long long val3) : x(val1), y(val2), z(val3) {}

  signed char x, y, z;
};

struct char4 {

    public:
    __attribute__((hc)) __attribute__((cpu)) char4() {} __attribute__((hc)) __attribute__((cpu)) char4(const char4& val) : x(val.x), y(val.y), z(val.z), w(val.w) { } __attribute__((hc)) __attribute__((cpu)) ~char4() {}

    __attribute__((hc)) __attribute__((cpu)) char4(unsigned char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) char4(unsigned char val1, unsigned char val2, unsigned char val3, unsigned char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) char4(signed char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) char4(signed char val1, signed char val2, signed char val3, signed char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) char4(unsigned short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) char4(unsigned short val1, unsigned short val2, unsigned short val3, unsigned short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) char4(signed short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) char4(signed short val1, signed short val2, signed short val3, signed short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) char4(unsigned int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) char4(unsigned int val1, unsigned int val2, unsigned int val3, unsigned int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) char4(signed int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) char4(signed int val1, signed int val2, signed int val3, signed int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) char4(float val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) char4(float val1, float val2, float val3, float val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) char4(double val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) char4(double val1, double val2, double val3, double val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) char4(unsigned long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) char4(unsigned long val1, unsigned long val2, unsigned long val3, unsigned long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) char4(signed long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) char4(signed long val1, signed long val2, signed long val3, signed long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) char4(unsigned long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) char4(unsigned long long val1, unsigned long long val2, unsigned long long val3, unsigned long long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) char4(signed long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) char4(signed long long val1, signed long long val2, signed long long val3, signed long long val4) : x(val1), y(val2), z(val3), w(val4) {}

  union {
    struct {
      signed char x, y, z, w;
    };
    unsigned int a;
  };
} __attribute__((aligned(4)));



struct ushort1 {

    public:
    __attribute__((hc)) __attribute__((cpu)) ushort1() {} __attribute__((hc)) __attribute__((cpu)) ushort1(const ushort1& val) : x(val.x) { } __attribute__((hc)) __attribute__((cpu)) ~ushort1() {}

    __attribute__((hc)) __attribute__((cpu)) ushort1(unsigned char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ushort1(signed char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ushort1(unsigned short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ushort1(signed short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ushort1(unsigned int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ushort1(signed int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ushort1(float val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ushort1(double val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ushort1(unsigned long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ushort1(signed long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ushort1(unsigned long long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ushort1(signed long long val) : x(val) {}

  unsigned short x;
} __attribute__((aligned(2)));

struct ushort2 {

    public:
    __attribute__((hc)) __attribute__((cpu)) ushort2() {} __attribute__((hc)) __attribute__((cpu)) ushort2(const ushort2& val) : x(val.x), y(val.y) { } __attribute__((hc)) __attribute__((cpu)) ~ushort2() {}

    __attribute__((hc)) __attribute__((cpu)) ushort2(unsigned char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ushort2(unsigned char val1, unsigned char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ushort2(signed char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ushort2(signed char val1, signed char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ushort2(unsigned short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ushort2(unsigned short val1, unsigned short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ushort2(signed short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ushort2(signed short val1, signed short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ushort2(unsigned int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ushort2(unsigned int val1, unsigned int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ushort2(signed int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ushort2(signed int val1, signed int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ushort2(float val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ushort2(float val1, float val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ushort2(double val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ushort2(double val1, double val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ushort2(unsigned long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ushort2(unsigned long val1, unsigned long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ushort2(signed long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ushort2(signed long val1, signed long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ushort2(unsigned long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ushort2(unsigned long long val1, unsigned long long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ushort2(signed long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ushort2(signed long long val1, signed long long val2) : x(val1), y(val2) {}

  union {
    struct {
      unsigned short x, y;
    };
    unsigned int a;
  };
} __attribute__((aligned(4)));

struct ushort3 {

    public:
    __attribute__((hc)) __attribute__((cpu)) ushort3() {} __attribute__((hc)) __attribute__((cpu)) ushort3(const ushort3& val) : x(val.x), y(val.y), z(val.z) { } __attribute__((hc)) __attribute__((cpu)) ~ushort3() {}

    __attribute__((hc)) __attribute__((cpu)) ushort3(unsigned char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ushort3(unsigned char val1, unsigned char val2, unsigned char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ushort3(signed char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ushort3(signed char val1, signed char val2, signed char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ushort3(unsigned short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ushort3(unsigned short val1, unsigned short val2, unsigned short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ushort3(signed short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ushort3(signed short val1, signed short val2, signed short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ushort3(unsigned int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ushort3(unsigned int val1, unsigned int val2, unsigned int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ushort3(signed int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ushort3(signed int val1, signed int val2, signed int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ushort3(float val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ushort3(float val1, float val2, float val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ushort3(double val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ushort3(double val1, double val2, double val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ushort3(unsigned long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ushort3(unsigned long val1, unsigned long val2, unsigned long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ushort3(signed long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ushort3(signed long val1, signed long val2, signed long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ushort3(unsigned long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ushort3(unsigned long long val1, unsigned long long val2, unsigned long long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ushort3(signed long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ushort3(signed long long val1, signed long long val2, signed long long val3) : x(val1), y(val2), z(val3) {}

  unsigned short x, y, z;
};

struct ushort4 {

    public:
    __attribute__((hc)) __attribute__((cpu)) ushort4() {} __attribute__((hc)) __attribute__((cpu)) ushort4(const ushort4& val) : x(val.x), y(val.y), z(val.z), w(val.w) { } __attribute__((hc)) __attribute__((cpu)) ~ushort4() {}

    __attribute__((hc)) __attribute__((cpu)) ushort4(unsigned char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ushort4(unsigned char val1, unsigned char val2, unsigned char val3, unsigned char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ushort4(signed char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ushort4(signed char val1, signed char val2, signed char val3, signed char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ushort4(unsigned short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ushort4(unsigned short val1, unsigned short val2, unsigned short val3, unsigned short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ushort4(signed short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ushort4(signed short val1, signed short val2, signed short val3, signed short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ushort4(unsigned int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ushort4(unsigned int val1, unsigned int val2, unsigned int val3, unsigned int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ushort4(signed int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ushort4(signed int val1, signed int val2, signed int val3, signed int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ushort4(float val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ushort4(float val1, float val2, float val3, float val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ushort4(double val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ushort4(double val1, double val2, double val3, double val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ushort4(unsigned long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ushort4(unsigned long val1, unsigned long val2, unsigned long val3, unsigned long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ushort4(signed long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ushort4(signed long val1, signed long val2, signed long val3, signed long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ushort4(unsigned long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ushort4(unsigned long long val1, unsigned long long val2, unsigned long long val3, unsigned long long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ushort4(signed long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ushort4(signed long long val1, signed long long val2, signed long long val3, signed long long val4) : x(val1), y(val2), z(val3), w(val4) {}

  union {
    struct {
      unsigned short x, y, z, w;
    };
    unsigned int a, b;
  };
} __attribute__((aligned(8)));

struct short1 {

    public:
    __attribute__((hc)) __attribute__((cpu)) short1() {} __attribute__((hc)) __attribute__((cpu)) short1(const short1& val) : x(val.x) { } __attribute__((hc)) __attribute__((cpu)) ~short1() {}

    __attribute__((hc)) __attribute__((cpu)) short1(unsigned char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) short1(signed char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) short1(unsigned short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) short1(signed short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) short1(unsigned int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) short1(signed int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) short1(float val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) short1(double val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) short1(unsigned long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) short1(signed long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) short1(unsigned long long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) short1(signed long long val) : x(val) {}

  signed short x;
} __attribute__((aligned(2)));

struct short2 {

    public:
    __attribute__((hc)) __attribute__((cpu)) short2() {} __attribute__((hc)) __attribute__((cpu)) short2(const short2& val) : x(val.x), y(val.y) { } __attribute__((hc)) __attribute__((cpu)) ~short2() {}

    __attribute__((hc)) __attribute__((cpu)) short2(unsigned char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) short2(unsigned char val1, unsigned char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) short2(signed char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) short2(signed char val1, signed char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) short2(unsigned short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) short2(unsigned short val1, unsigned short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) short2(signed short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) short2(signed short val1, signed short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) short2(unsigned int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) short2(unsigned int val1, unsigned int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) short2(signed int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) short2(signed int val1, signed int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) short2(float val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) short2(float val1, float val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) short2(double val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) short2(double val1, double val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) short2(unsigned long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) short2(unsigned long val1, unsigned long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) short2(signed long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) short2(signed long val1, signed long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) short2(unsigned long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) short2(unsigned long long val1, unsigned long long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) short2(signed long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) short2(signed long long val1, signed long long val2) : x(val1), y(val2) {}

  union {
    struct {
      signed short x, y;
    };
    unsigned int a;
  };

} __attribute__((aligned(4)));

struct short3 {

    public:
    __attribute__((hc)) __attribute__((cpu)) short3() {} __attribute__((hc)) __attribute__((cpu)) short3(const short3& val) : x(val.x), y(val.y), z(val.z) { } __attribute__((hc)) __attribute__((cpu)) ~short3() {}

    __attribute__((hc)) __attribute__((cpu)) short3(unsigned char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) short3(unsigned char val1, unsigned char val2, unsigned char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) short3(signed char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) short3(signed char val1, signed char val2, signed char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) short3(unsigned short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) short3(unsigned short val1, unsigned short val2, unsigned short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) short3(signed short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) short3(signed short val1, signed short val2, signed short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) short3(unsigned int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) short3(unsigned int val1, unsigned int val2, unsigned int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) short3(signed int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) short3(signed int val1, signed int val2, signed int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) short3(float val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) short3(float val1, float val2, float val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) short3(double val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) short3(double val1, double val2, double val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) short3(unsigned long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) short3(unsigned long val1, unsigned long val2, unsigned long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) short3(signed long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) short3(signed long val1, signed long val2, signed long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) short3(unsigned long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) short3(unsigned long long val1, unsigned long long val2, unsigned long long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) short3(signed long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) short3(signed long long val1, signed long long val2, signed long long val3) : x(val1), y(val2), z(val3) {}

  signed short x, y, z;
};

struct short4 {

    public:
    __attribute__((hc)) __attribute__((cpu)) short4() {} __attribute__((hc)) __attribute__((cpu)) short4(const short4& val) : x(val.x), y(val.y), z(val.z), w(val.w) { } __attribute__((hc)) __attribute__((cpu)) ~short4() {}

    __attribute__((hc)) __attribute__((cpu)) short4(unsigned char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) short4(unsigned char val1, unsigned char val2, unsigned char val3, unsigned char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) short4(signed char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) short4(signed char val1, signed char val2, signed char val3, signed char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) short4(unsigned short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) short4(unsigned short val1, unsigned short val2, unsigned short val3, unsigned short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) short4(signed short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) short4(signed short val1, signed short val2, signed short val3, signed short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) short4(unsigned int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) short4(unsigned int val1, unsigned int val2, unsigned int val3, unsigned int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) short4(signed int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) short4(signed int val1, signed int val2, signed int val3, signed int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) short4(float val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) short4(float val1, float val2, float val3, float val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) short4(double val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) short4(double val1, double val2, double val3, double val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) short4(unsigned long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) short4(unsigned long val1, unsigned long val2, unsigned long val3, unsigned long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) short4(signed long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) short4(signed long val1, signed long val2, signed long val3, signed long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) short4(unsigned long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) short4(unsigned long long val1, unsigned long long val2, unsigned long long val3, unsigned long long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) short4(signed long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) short4(signed long long val1, signed long long val2, signed long long val3, signed long long val4) : x(val1), y(val2), z(val3), w(val4) {}

  union {
    struct {
      signed short x, y, z, w;
    };
    unsigned int a, b;
  };
} __attribute__((aligned(8)));


struct uint1 {

    public:
    __attribute__((hc)) __attribute__((cpu)) uint1() {} __attribute__((hc)) __attribute__((cpu)) uint1(const uint1& val) : x(val.x) { } __attribute__((hc)) __attribute__((cpu)) ~uint1() {}

    __attribute__((hc)) __attribute__((cpu)) uint1(unsigned char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uint1(signed char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uint1(unsigned short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uint1(signed short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uint1(unsigned int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uint1(signed int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uint1(float val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uint1(double val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uint1(unsigned long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uint1(signed long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uint1(unsigned long long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) uint1(signed long long val) : x(val) {}

  unsigned int x;
} __attribute__((aligned(4)));

struct uint2 {

    public:
    __attribute__((hc)) __attribute__((cpu)) uint2() {} __attribute__((hc)) __attribute__((cpu)) uint2(const uint2& val) : x(val.x), y(val.y) { } __attribute__((hc)) __attribute__((cpu)) ~uint2() {}

    __attribute__((hc)) __attribute__((cpu)) uint2(unsigned char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uint2(unsigned char val1, unsigned char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uint2(signed char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uint2(signed char val1, signed char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uint2(unsigned short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uint2(unsigned short val1, unsigned short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uint2(signed short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uint2(signed short val1, signed short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uint2(unsigned int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uint2(unsigned int val1, unsigned int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uint2(signed int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uint2(signed int val1, signed int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uint2(float val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uint2(float val1, float val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uint2(double val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uint2(double val1, double val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uint2(unsigned long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uint2(unsigned long val1, unsigned long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uint2(signed long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uint2(signed long val1, signed long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uint2(unsigned long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uint2(unsigned long long val1, unsigned long long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) uint2(signed long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) uint2(signed long long val1, signed long long val2) : x(val1), y(val2) {}

  unsigned int x, y;
} __attribute__((aligned(8)));

struct uint3 {

    public:
    __attribute__((hc)) __attribute__((cpu)) uint3() {} __attribute__((hc)) __attribute__((cpu)) uint3(const uint3& val) : x(val.x), y(val.y), z(val.z) { } __attribute__((hc)) __attribute__((cpu)) ~uint3() {}

    __attribute__((hc)) __attribute__((cpu)) uint3(unsigned char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uint3(unsigned char val1, unsigned char val2, unsigned char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uint3(signed char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uint3(signed char val1, signed char val2, signed char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uint3(unsigned short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uint3(unsigned short val1, unsigned short val2, unsigned short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uint3(signed short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uint3(signed short val1, signed short val2, signed short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uint3(unsigned int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uint3(unsigned int val1, unsigned int val2, unsigned int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uint3(signed int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uint3(signed int val1, signed int val2, signed int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uint3(float val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uint3(float val1, float val2, float val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uint3(double val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uint3(double val1, double val2, double val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uint3(unsigned long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uint3(unsigned long val1, unsigned long val2, unsigned long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uint3(signed long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uint3(signed long val1, signed long val2, signed long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uint3(unsigned long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uint3(unsigned long long val1, unsigned long long val2, unsigned long long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) uint3(signed long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) uint3(signed long long val1, signed long long val2, signed long long val3) : x(val1), y(val2), z(val3) {}

  unsigned int x, y, z;
};

struct uint4 {

    public:
    __attribute__((hc)) __attribute__((cpu)) uint4() {} __attribute__((hc)) __attribute__((cpu)) uint4(const uint4& val) : x(val.x), y(val.y), z(val.z), w(val.w) { } __attribute__((hc)) __attribute__((cpu)) ~uint4() {}

    __attribute__((hc)) __attribute__((cpu)) uint4(unsigned char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uint4(unsigned char val1, unsigned char val2, unsigned char val3, unsigned char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uint4(signed char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uint4(signed char val1, signed char val2, signed char val3, signed char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uint4(unsigned short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uint4(unsigned short val1, unsigned short val2, unsigned short val3, unsigned short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uint4(signed short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uint4(signed short val1, signed short val2, signed short val3, signed short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uint4(unsigned int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uint4(unsigned int val1, unsigned int val2, unsigned int val3, unsigned int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uint4(signed int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uint4(signed int val1, signed int val2, signed int val3, signed int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uint4(float val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uint4(float val1, float val2, float val3, float val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uint4(double val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uint4(double val1, double val2, double val3, double val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uint4(unsigned long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uint4(unsigned long val1, unsigned long val2, unsigned long val3, unsigned long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uint4(signed long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uint4(signed long val1, signed long val2, signed long val3, signed long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uint4(unsigned long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uint4(unsigned long long val1, unsigned long long val2, unsigned long long val3, unsigned long long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) uint4(signed long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) uint4(signed long long val1, signed long long val2, signed long long val3, signed long long val4) : x(val1), y(val2), z(val3), w(val4) {}

  unsigned int x, y, z, w;
} __attribute__((aligned(16)));

struct int1 {

    public:
    __attribute__((hc)) __attribute__((cpu)) int1() {} __attribute__((hc)) __attribute__((cpu)) int1(const int1& val) : x(val.x) { } __attribute__((hc)) __attribute__((cpu)) ~int1() {}

    __attribute__((hc)) __attribute__((cpu)) int1(unsigned char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) int1(signed char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) int1(unsigned short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) int1(signed short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) int1(unsigned int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) int1(signed int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) int1(float val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) int1(double val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) int1(unsigned long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) int1(signed long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) int1(unsigned long long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) int1(signed long long val) : x(val) {}

  signed int x;
} __attribute__((aligned(4)));

struct int2 {

    public:
    __attribute__((hc)) __attribute__((cpu)) int2() {} __attribute__((hc)) __attribute__((cpu)) int2(const int2& val) : x(val.x), y(val.y) { } __attribute__((hc)) __attribute__((cpu)) ~int2() {}

    __attribute__((hc)) __attribute__((cpu)) int2(unsigned char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) int2(unsigned char val1, unsigned char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) int2(signed char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) int2(signed char val1, signed char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) int2(unsigned short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) int2(unsigned short val1, unsigned short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) int2(signed short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) int2(signed short val1, signed short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) int2(unsigned int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) int2(unsigned int val1, unsigned int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) int2(signed int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) int2(signed int val1, signed int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) int2(float val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) int2(float val1, float val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) int2(double val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) int2(double val1, double val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) int2(unsigned long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) int2(unsigned long val1, unsigned long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) int2(signed long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) int2(signed long val1, signed long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) int2(unsigned long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) int2(unsigned long long val1, unsigned long long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) int2(signed long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) int2(signed long long val1, signed long long val2) : x(val1), y(val2) {}

  signed int x, y;
} __attribute__((aligned(8)));

struct int3 {

    public:
    __attribute__((hc)) __attribute__((cpu)) int3() {} __attribute__((hc)) __attribute__((cpu)) int3(const int3& val) : x(val.x), y(val.y), z(val.z) { } __attribute__((hc)) __attribute__((cpu)) ~int3() {}

    __attribute__((hc)) __attribute__((cpu)) int3(unsigned char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) int3(unsigned char val1, unsigned char val2, unsigned char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) int3(signed char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) int3(signed char val1, signed char val2, signed char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) int3(unsigned short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) int3(unsigned short val1, unsigned short val2, unsigned short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) int3(signed short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) int3(signed short val1, signed short val2, signed short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) int3(unsigned int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) int3(unsigned int val1, unsigned int val2, unsigned int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) int3(signed int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) int3(signed int val1, signed int val2, signed int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) int3(float val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) int3(float val1, float val2, float val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) int3(double val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) int3(double val1, double val2, double val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) int3(unsigned long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) int3(unsigned long val1, unsigned long val2, unsigned long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) int3(signed long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) int3(signed long val1, signed long val2, signed long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) int3(unsigned long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) int3(unsigned long long val1, unsigned long long val2, unsigned long long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) int3(signed long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) int3(signed long long val1, signed long long val2, signed long long val3) : x(val1), y(val2), z(val3) {}

  signed int x, y, z;
};

struct int4 {

    public:
    __attribute__((hc)) __attribute__((cpu)) int4() {} __attribute__((hc)) __attribute__((cpu)) int4(const int4& val) : x(val.x), y(val.y), z(val.z), w(val.w) { } __attribute__((hc)) __attribute__((cpu)) ~int4() {}

    __attribute__((hc)) __attribute__((cpu)) int4(unsigned char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) int4(unsigned char val1, unsigned char val2, unsigned char val3, unsigned char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) int4(signed char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) int4(signed char val1, signed char val2, signed char val3, signed char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) int4(unsigned short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) int4(unsigned short val1, unsigned short val2, unsigned short val3, unsigned short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) int4(signed short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) int4(signed short val1, signed short val2, signed short val3, signed short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) int4(unsigned int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) int4(unsigned int val1, unsigned int val2, unsigned int val3, unsigned int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) int4(signed int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) int4(signed int val1, signed int val2, signed int val3, signed int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) int4(float val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) int4(float val1, float val2, float val3, float val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) int4(double val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) int4(double val1, double val2, double val3, double val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) int4(unsigned long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) int4(unsigned long val1, unsigned long val2, unsigned long val3, unsigned long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) int4(signed long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) int4(signed long val1, signed long val2, signed long val3, signed long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) int4(unsigned long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) int4(unsigned long long val1, unsigned long long val2, unsigned long long val3, unsigned long long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) int4(signed long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) int4(signed long long val1, signed long long val2, signed long long val3, signed long long val4) : x(val1), y(val2), z(val3), w(val4) {}

  signed int x, y, z, w;
} __attribute__((aligned(16)));


struct float1 {

    public:
    __attribute__((hc)) __attribute__((cpu)) float1() {} __attribute__((hc)) __attribute__((cpu)) float1(const float1& val) : x(val.x) { } __attribute__((hc)) __attribute__((cpu)) ~float1() {}

    __attribute__((hc)) __attribute__((cpu)) float1(unsigned char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) float1(signed char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) float1(unsigned short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) float1(signed short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) float1(unsigned int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) float1(signed int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) float1(float val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) float1(double val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) float1(unsigned long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) float1(signed long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) float1(unsigned long long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) float1(signed long long val) : x(val) {}

  float x;
} __attribute__((aligned(4)));

struct float2 {

    public:
    __attribute__((hc)) __attribute__((cpu)) float2() {} __attribute__((hc)) __attribute__((cpu)) float2(const float2& val) : x(val.x), y(val.y) { } __attribute__((hc)) __attribute__((cpu)) ~float2() {}

    __attribute__((hc)) __attribute__((cpu)) float2(unsigned char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) float2(unsigned char val1, unsigned char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) float2(signed char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) float2(signed char val1, signed char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) float2(unsigned short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) float2(unsigned short val1, unsigned short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) float2(signed short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) float2(signed short val1, signed short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) float2(unsigned int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) float2(unsigned int val1, unsigned int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) float2(signed int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) float2(signed int val1, signed int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) float2(float val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) float2(float val1, float val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) float2(double val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) float2(double val1, double val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) float2(unsigned long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) float2(unsigned long val1, unsigned long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) float2(signed long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) float2(signed long val1, signed long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) float2(unsigned long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) float2(unsigned long long val1, unsigned long long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) float2(signed long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) float2(signed long long val1, signed long long val2) : x(val1), y(val2) {}

  float x, y;
} __attribute__((aligned(8)));

struct float3 {

    public:
    __attribute__((hc)) __attribute__((cpu)) float3() {} __attribute__((hc)) __attribute__((cpu)) float3(const float3& val) : x(val.x), y(val.y), z(val.z) { } __attribute__((hc)) __attribute__((cpu)) ~float3() {}

    __attribute__((hc)) __attribute__((cpu)) float3(unsigned char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) float3(unsigned char val1, unsigned char val2, unsigned char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) float3(signed char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) float3(signed char val1, signed char val2, signed char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) float3(unsigned short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) float3(unsigned short val1, unsigned short val2, unsigned short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) float3(signed short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) float3(signed short val1, signed short val2, signed short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) float3(unsigned int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) float3(unsigned int val1, unsigned int val2, unsigned int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) float3(signed int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) float3(signed int val1, signed int val2, signed int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) float3(float val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) float3(float val1, float val2, float val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) float3(double val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) float3(double val1, double val2, double val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) float3(unsigned long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) float3(unsigned long val1, unsigned long val2, unsigned long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) float3(signed long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) float3(signed long val1, signed long val2, signed long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) float3(unsigned long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) float3(unsigned long long val1, unsigned long long val2, unsigned long long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) float3(signed long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) float3(signed long long val1, signed long long val2, signed long long val3) : x(val1), y(val2), z(val3) {}

  float x, y, z;
};

struct float4 {

    public:
    __attribute__((hc)) __attribute__((cpu)) float4() {} __attribute__((hc)) __attribute__((cpu)) float4(const float4& val) : x(val.x), y(val.y), z(val.z), w(val.w) { } __attribute__((hc)) __attribute__((cpu)) ~float4() {}

    __attribute__((hc)) __attribute__((cpu)) float4(unsigned char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) float4(unsigned char val1, unsigned char val2, unsigned char val3, unsigned char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) float4(signed char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) float4(signed char val1, signed char val2, signed char val3, signed char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) float4(unsigned short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) float4(unsigned short val1, unsigned short val2, unsigned short val3, unsigned short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) float4(signed short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) float4(signed short val1, signed short val2, signed short val3, signed short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) float4(unsigned int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) float4(unsigned int val1, unsigned int val2, unsigned int val3, unsigned int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) float4(signed int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) float4(signed int val1, signed int val2, signed int val3, signed int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) float4(float val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) float4(float val1, float val2, float val3, float val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) float4(double val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) float4(double val1, double val2, double val3, double val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) float4(unsigned long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) float4(unsigned long val1, unsigned long val2, unsigned long val3, unsigned long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) float4(signed long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) float4(signed long val1, signed long val2, signed long val3, signed long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) float4(unsigned long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) float4(unsigned long long val1, unsigned long long val2, unsigned long long val3, unsigned long long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) float4(signed long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) float4(signed long long val1, signed long long val2, signed long long val3, signed long long val4) : x(val1), y(val2), z(val3), w(val4) {}

  float x, y, z, w;
} __attribute__((aligned(16)));



struct double1 {

    public:
    __attribute__((hc)) __attribute__((cpu)) double1() {} __attribute__((hc)) __attribute__((cpu)) double1(const double1& val) : x(val.x) { } __attribute__((hc)) __attribute__((cpu)) ~double1() {}

    __attribute__((hc)) __attribute__((cpu)) double1(unsigned char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) double1(signed char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) double1(unsigned short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) double1(signed short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) double1(unsigned int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) double1(signed int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) double1(float val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) double1(double val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) double1(unsigned long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) double1(signed long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) double1(unsigned long long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) double1(signed long long val) : x(val) {}

  double x;
} __attribute__((aligned(8)));

struct double2 {

    public:
    __attribute__((hc)) __attribute__((cpu)) double2() {} __attribute__((hc)) __attribute__((cpu)) double2(const double2& val) : x(val.x), y(val.y) { } __attribute__((hc)) __attribute__((cpu)) ~double2() {}

    __attribute__((hc)) __attribute__((cpu)) double2(unsigned char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) double2(unsigned char val1, unsigned char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) double2(signed char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) double2(signed char val1, signed char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) double2(unsigned short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) double2(unsigned short val1, unsigned short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) double2(signed short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) double2(signed short val1, signed short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) double2(unsigned int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) double2(unsigned int val1, unsigned int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) double2(signed int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) double2(signed int val1, signed int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) double2(float val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) double2(float val1, float val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) double2(double val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) double2(double val1, double val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) double2(unsigned long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) double2(unsigned long val1, unsigned long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) double2(signed long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) double2(signed long val1, signed long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) double2(unsigned long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) double2(unsigned long long val1, unsigned long long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) double2(signed long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) double2(signed long long val1, signed long long val2) : x(val1), y(val2) {}

  double x, y;
} __attribute__((aligned(16)));

struct double3 {

    public:
    __attribute__((hc)) __attribute__((cpu)) double3() {} __attribute__((hc)) __attribute__((cpu)) double3(const double3& val) : x(val.x), y(val.y), z(val.z) { } __attribute__((hc)) __attribute__((cpu)) ~double3() {}

    __attribute__((hc)) __attribute__((cpu)) double3(unsigned char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) double3(unsigned char val1, unsigned char val2, unsigned char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) double3(signed char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) double3(signed char val1, signed char val2, signed char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) double3(unsigned short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) double3(unsigned short val1, unsigned short val2, unsigned short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) double3(signed short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) double3(signed short val1, signed short val2, signed short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) double3(unsigned int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) double3(unsigned int val1, unsigned int val2, unsigned int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) double3(signed int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) double3(signed int val1, signed int val2, signed int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) double3(float val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) double3(float val1, float val2, float val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) double3(double val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) double3(double val1, double val2, double val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) double3(unsigned long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) double3(unsigned long val1, unsigned long val2, unsigned long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) double3(signed long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) double3(signed long val1, signed long val2, signed long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) double3(unsigned long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) double3(unsigned long long val1, unsigned long long val2, unsigned long long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) double3(signed long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) double3(signed long long val1, signed long long val2, signed long long val3) : x(val1), y(val2), z(val3) {}

  double x, y, z;
};

struct double4 {

    public:
    __attribute__((hc)) __attribute__((cpu)) double4() {} __attribute__((hc)) __attribute__((cpu)) double4(const double4& val) : x(val.x), y(val.y), z(val.z), w(val.w) { } __attribute__((hc)) __attribute__((cpu)) ~double4() {}

    __attribute__((hc)) __attribute__((cpu)) double4(unsigned char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) double4(unsigned char val1, unsigned char val2, unsigned char val3, unsigned char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) double4(signed char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) double4(signed char val1, signed char val2, signed char val3, signed char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) double4(unsigned short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) double4(unsigned short val1, unsigned short val2, unsigned short val3, unsigned short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) double4(signed short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) double4(signed short val1, signed short val2, signed short val3, signed short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) double4(unsigned int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) double4(unsigned int val1, unsigned int val2, unsigned int val3, unsigned int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) double4(signed int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) double4(signed int val1, signed int val2, signed int val3, signed int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) double4(float val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) double4(float val1, float val2, float val3, float val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) double4(double val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) double4(double val1, double val2, double val3, double val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) double4(unsigned long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) double4(unsigned long val1, unsigned long val2, unsigned long val3, unsigned long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) double4(signed long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) double4(signed long val1, signed long val2, signed long val3, signed long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) double4(unsigned long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) double4(unsigned long long val1, unsigned long long val2, unsigned long long val3, unsigned long long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) double4(signed long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) double4(signed long long val1, signed long long val2, signed long long val3, signed long long val4) : x(val1), y(val2), z(val3), w(val4) {}

  double x, y, z, w;
} __attribute__((aligned(32)));


struct ulong1 {

    public:
    __attribute__((hc)) __attribute__((cpu)) ulong1() {} __attribute__((hc)) __attribute__((cpu)) ulong1(const ulong1& val) : x(val.x) { } __attribute__((hc)) __attribute__((cpu)) ~ulong1() {}

    __attribute__((hc)) __attribute__((cpu)) ulong1(unsigned char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulong1(signed char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulong1(unsigned short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulong1(signed short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulong1(unsigned int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulong1(signed int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulong1(float val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulong1(double val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulong1(unsigned long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulong1(signed long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulong1(unsigned long long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulong1(signed long long val) : x(val) {}

  unsigned long x;
} __attribute__((aligned(8)));

struct ulong2 {

    public:
    __attribute__((hc)) __attribute__((cpu)) ulong2() {} __attribute__((hc)) __attribute__((cpu)) ulong2(const ulong2& val) : x(val.x), y(val.y) { } __attribute__((hc)) __attribute__((cpu)) ~ulong2() {}

    __attribute__((hc)) __attribute__((cpu)) ulong2(unsigned char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulong2(unsigned char val1, unsigned char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulong2(signed char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulong2(signed char val1, signed char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulong2(unsigned short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulong2(unsigned short val1, unsigned short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulong2(signed short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulong2(signed short val1, signed short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulong2(unsigned int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulong2(unsigned int val1, unsigned int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulong2(signed int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulong2(signed int val1, signed int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulong2(float val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulong2(float val1, float val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulong2(double val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulong2(double val1, double val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulong2(unsigned long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulong2(unsigned long val1, unsigned long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulong2(signed long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulong2(signed long val1, signed long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulong2(unsigned long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulong2(unsigned long long val1, unsigned long long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulong2(signed long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulong2(signed long long val1, signed long long val2) : x(val1), y(val2) {}

  unsigned long x, y;
} __attribute__((aligned(16)));

struct ulong3 {

    public:
    __attribute__((hc)) __attribute__((cpu)) ulong3() {} __attribute__((hc)) __attribute__((cpu)) ulong3(const ulong3& val) : x(val.x), y(val.y), z(val.z) { } __attribute__((hc)) __attribute__((cpu)) ~ulong3() {}

    __attribute__((hc)) __attribute__((cpu)) ulong3(unsigned char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulong3(unsigned char val1, unsigned char val2, unsigned char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulong3(signed char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulong3(signed char val1, signed char val2, signed char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulong3(unsigned short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulong3(unsigned short val1, unsigned short val2, unsigned short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulong3(signed short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulong3(signed short val1, signed short val2, signed short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulong3(unsigned int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulong3(unsigned int val1, unsigned int val2, unsigned int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulong3(signed int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulong3(signed int val1, signed int val2, signed int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulong3(float val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulong3(float val1, float val2, float val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulong3(double val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulong3(double val1, double val2, double val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulong3(unsigned long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulong3(unsigned long val1, unsigned long val2, unsigned long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulong3(signed long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulong3(signed long val1, signed long val2, signed long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulong3(unsigned long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulong3(unsigned long long val1, unsigned long long val2, unsigned long long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulong3(signed long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulong3(signed long long val1, signed long long val2, signed long long val3) : x(val1), y(val2), z(val3) {}

  unsigned long x, y, z;
};

struct ulong4 {

    public:
    __attribute__((hc)) __attribute__((cpu)) ulong4() {} __attribute__((hc)) __attribute__((cpu)) ulong4(const ulong4& val) : x(val.x), y(val.y), z(val.z), w(val.w) { } __attribute__((hc)) __attribute__((cpu)) ~ulong4() {}

    __attribute__((hc)) __attribute__((cpu)) ulong4(unsigned char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulong4(unsigned char val1, unsigned char val2, unsigned char val3, unsigned char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulong4(signed char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulong4(signed char val1, signed char val2, signed char val3, signed char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulong4(unsigned short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulong4(unsigned short val1, unsigned short val2, unsigned short val3, unsigned short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulong4(signed short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulong4(signed short val1, signed short val2, signed short val3, signed short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulong4(unsigned int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulong4(unsigned int val1, unsigned int val2, unsigned int val3, unsigned int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulong4(signed int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulong4(signed int val1, signed int val2, signed int val3, signed int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulong4(float val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulong4(float val1, float val2, float val3, float val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulong4(double val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulong4(double val1, double val2, double val3, double val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulong4(unsigned long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulong4(unsigned long val1, unsigned long val2, unsigned long val3, unsigned long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulong4(signed long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulong4(signed long val1, signed long val2, signed long val3, signed long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulong4(unsigned long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulong4(unsigned long long val1, unsigned long long val2, unsigned long long val3, unsigned long long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulong4(signed long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulong4(signed long long val1, signed long long val2, signed long long val3, signed long long val4) : x(val1), y(val2), z(val3), w(val4) {}

  unsigned long x, y, z, w;
} __attribute__((aligned(32)));


struct long1 {

    public:
    __attribute__((hc)) __attribute__((cpu)) long1() {} __attribute__((hc)) __attribute__((cpu)) long1(const long1& val) : x(val.x) { } __attribute__((hc)) __attribute__((cpu)) ~long1() {}

    __attribute__((hc)) __attribute__((cpu)) long1(unsigned char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) long1(signed char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) long1(unsigned short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) long1(signed short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) long1(unsigned int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) long1(signed int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) long1(float val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) long1(double val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) long1(unsigned long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) long1(signed long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) long1(unsigned long long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) long1(signed long long val) : x(val) {}

  signed long x;
} __attribute__((aligned(8)));

struct long2 {

    public:
    __attribute__((hc)) __attribute__((cpu)) long2() {} __attribute__((hc)) __attribute__((cpu)) long2(const long2& val) : x(val.x), y(val.y) { } __attribute__((hc)) __attribute__((cpu)) ~long2() {}

    __attribute__((hc)) __attribute__((cpu)) long2(unsigned char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) long2(unsigned char val1, unsigned char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) long2(signed char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) long2(signed char val1, signed char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) long2(unsigned short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) long2(unsigned short val1, unsigned short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) long2(signed short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) long2(signed short val1, signed short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) long2(unsigned int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) long2(unsigned int val1, unsigned int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) long2(signed int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) long2(signed int val1, signed int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) long2(float val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) long2(float val1, float val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) long2(double val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) long2(double val1, double val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) long2(unsigned long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) long2(unsigned long val1, unsigned long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) long2(signed long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) long2(signed long val1, signed long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) long2(unsigned long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) long2(unsigned long long val1, unsigned long long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) long2(signed long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) long2(signed long long val1, signed long long val2) : x(val1), y(val2) {}

  signed long x, y;
} __attribute__((aligned(16)));

struct long3 {

    public:
    __attribute__((hc)) __attribute__((cpu)) long3() {} __attribute__((hc)) __attribute__((cpu)) long3(const long3& val) : x(val.x), y(val.y), z(val.z) { } __attribute__((hc)) __attribute__((cpu)) ~long3() {}

    __attribute__((hc)) __attribute__((cpu)) long3(unsigned char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) long3(unsigned char val1, unsigned char val2, unsigned char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) long3(signed char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) long3(signed char val1, signed char val2, signed char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) long3(unsigned short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) long3(unsigned short val1, unsigned short val2, unsigned short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) long3(signed short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) long3(signed short val1, signed short val2, signed short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) long3(unsigned int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) long3(unsigned int val1, unsigned int val2, unsigned int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) long3(signed int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) long3(signed int val1, signed int val2, signed int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) long3(float val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) long3(float val1, float val2, float val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) long3(double val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) long3(double val1, double val2, double val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) long3(unsigned long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) long3(unsigned long val1, unsigned long val2, unsigned long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) long3(signed long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) long3(signed long val1, signed long val2, signed long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) long3(unsigned long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) long3(unsigned long long val1, unsigned long long val2, unsigned long long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) long3(signed long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) long3(signed long long val1, signed long long val2, signed long long val3) : x(val1), y(val2), z(val3) {}

  signed long x, y, z;
};

struct long4 {

    public:
    __attribute__((hc)) __attribute__((cpu)) long4() {} __attribute__((hc)) __attribute__((cpu)) long4(const long4& val) : x(val.x), y(val.y), z(val.z), w(val.w) { } __attribute__((hc)) __attribute__((cpu)) ~long4() {}

    __attribute__((hc)) __attribute__((cpu)) long4(unsigned char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) long4(unsigned char val1, unsigned char val2, unsigned char val3, unsigned char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) long4(signed char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) long4(signed char val1, signed char val2, signed char val3, signed char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) long4(unsigned short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) long4(unsigned short val1, unsigned short val2, unsigned short val3, unsigned short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) long4(signed short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) long4(signed short val1, signed short val2, signed short val3, signed short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) long4(unsigned int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) long4(unsigned int val1, unsigned int val2, unsigned int val3, unsigned int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) long4(signed int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) long4(signed int val1, signed int val2, signed int val3, signed int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) long4(float val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) long4(float val1, float val2, float val3, float val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) long4(double val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) long4(double val1, double val2, double val3, double val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) long4(unsigned long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) long4(unsigned long val1, unsigned long val2, unsigned long val3, unsigned long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) long4(signed long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) long4(signed long val1, signed long val2, signed long val3, signed long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) long4(unsigned long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) long4(unsigned long long val1, unsigned long long val2, unsigned long long val3, unsigned long long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) long4(signed long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) long4(signed long long val1, signed long long val2, signed long long val3, signed long long val4) : x(val1), y(val2), z(val3), w(val4) {}

  signed long x, y, z, w;
} __attribute__((aligned(32)));


struct ulonglong1 {

    public:
    __attribute__((hc)) __attribute__((cpu)) ulonglong1() {} __attribute__((hc)) __attribute__((cpu)) ulonglong1(const ulonglong1& val) : x(val.x) { } __attribute__((hc)) __attribute__((cpu)) ~ulonglong1() {}

    __attribute__((hc)) __attribute__((cpu)) ulonglong1(unsigned char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong1(signed char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong1(unsigned short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong1(signed short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong1(unsigned int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong1(signed int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong1(float val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong1(double val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong1(unsigned long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong1(signed long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong1(unsigned long long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong1(signed long long val) : x(val) {}

  unsigned long long x;
} __attribute__((aligned(8)));

struct ulonglong2 {

    public:
    __attribute__((hc)) __attribute__((cpu)) ulonglong2() {} __attribute__((hc)) __attribute__((cpu)) ulonglong2(const ulonglong2& val) : x(val.x), y(val.y) { } __attribute__((hc)) __attribute__((cpu)) ~ulonglong2() {}

    __attribute__((hc)) __attribute__((cpu)) ulonglong2(unsigned char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong2(unsigned char val1, unsigned char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong2(signed char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong2(signed char val1, signed char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong2(unsigned short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong2(unsigned short val1, unsigned short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong2(signed short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong2(signed short val1, signed short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong2(unsigned int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong2(unsigned int val1, unsigned int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong2(signed int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong2(signed int val1, signed int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong2(float val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong2(float val1, float val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong2(double val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong2(double val1, double val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong2(unsigned long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong2(unsigned long val1, unsigned long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong2(signed long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong2(signed long val1, signed long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong2(unsigned long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong2(unsigned long long val1, unsigned long long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong2(signed long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong2(signed long long val1, signed long long val2) : x(val1), y(val2) {}

  unsigned long long x, y;
} __attribute__((aligned(16)));

struct ulonglong3 {

    public:
    __attribute__((hc)) __attribute__((cpu)) ulonglong3() {} __attribute__((hc)) __attribute__((cpu)) ulonglong3(const ulonglong3& val) : x(val.x), y(val.y), z(val.z) { } __attribute__((hc)) __attribute__((cpu)) ~ulonglong3() {}

    __attribute__((hc)) __attribute__((cpu)) ulonglong3(unsigned char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong3(unsigned char val1, unsigned char val2, unsigned char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong3(signed char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong3(signed char val1, signed char val2, signed char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong3(unsigned short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong3(unsigned short val1, unsigned short val2, unsigned short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong3(signed short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong3(signed short val1, signed short val2, signed short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong3(unsigned int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong3(unsigned int val1, unsigned int val2, unsigned int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong3(signed int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong3(signed int val1, signed int val2, signed int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong3(float val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong3(float val1, float val2, float val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong3(double val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong3(double val1, double val2, double val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong3(unsigned long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong3(unsigned long val1, unsigned long val2, unsigned long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong3(signed long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong3(signed long val1, signed long val2, signed long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong3(unsigned long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong3(unsigned long long val1, unsigned long long val2, unsigned long long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong3(signed long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong3(signed long long val1, signed long long val2, signed long long val3) : x(val1), y(val2), z(val3) {}

  unsigned long long x, y, z;
};

struct ulonglong4 {

    public:
    __attribute__((hc)) __attribute__((cpu)) ulonglong4() {} __attribute__((hc)) __attribute__((cpu)) ulonglong4(const ulonglong4& val) : x(val.x), y(val.y), z(val.z), w(val.w) { } __attribute__((hc)) __attribute__((cpu)) ~ulonglong4() {}

    __attribute__((hc)) __attribute__((cpu)) ulonglong4(unsigned char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong4(unsigned char val1, unsigned char val2, unsigned char val3, unsigned char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong4(signed char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong4(signed char val1, signed char val2, signed char val3, signed char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong4(unsigned short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong4(unsigned short val1, unsigned short val2, unsigned short val3, unsigned short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong4(signed short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong4(signed short val1, signed short val2, signed short val3, signed short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong4(unsigned int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong4(unsigned int val1, unsigned int val2, unsigned int val3, unsigned int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong4(signed int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong4(signed int val1, signed int val2, signed int val3, signed int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong4(float val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong4(float val1, float val2, float val3, float val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong4(double val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong4(double val1, double val2, double val3, double val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong4(unsigned long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong4(unsigned long val1, unsigned long val2, unsigned long val3, unsigned long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong4(signed long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong4(signed long val1, signed long val2, signed long val3, signed long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong4(unsigned long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong4(unsigned long long val1, unsigned long long val2, unsigned long long val3, unsigned long long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) ulonglong4(signed long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) ulonglong4(signed long long val1, signed long long val2, signed long long val3, signed long long val4) : x(val1), y(val2), z(val3), w(val4) {}

  unsigned long long x, y, z, w;
} __attribute__((aligned(32)));


struct longlong1 {

    public:
    __attribute__((hc)) __attribute__((cpu)) longlong1() {} __attribute__((hc)) __attribute__((cpu)) longlong1(const longlong1& val) : x(val.x) { } __attribute__((hc)) __attribute__((cpu)) ~longlong1() {}

    __attribute__((hc)) __attribute__((cpu)) longlong1(unsigned char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) longlong1(signed char val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) longlong1(unsigned short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) longlong1(signed short val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) longlong1(unsigned int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) longlong1(signed int val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) longlong1(float val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) longlong1(double val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) longlong1(unsigned long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) longlong1(signed long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) longlong1(unsigned long long val) : x(val) {}
    __attribute__((hc)) __attribute__((cpu)) longlong1(signed long long val) : x(val) {}

  signed long long x;
} __attribute__((aligned(8)));

struct longlong2 {

    public:
    __attribute__((hc)) __attribute__((cpu)) longlong2() {} __attribute__((hc)) __attribute__((cpu)) longlong2(const longlong2& val) : x(val.x), y(val.y) { } __attribute__((hc)) __attribute__((cpu)) ~longlong2() {}

    __attribute__((hc)) __attribute__((cpu)) longlong2(unsigned char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) longlong2(unsigned char val1, unsigned char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) longlong2(signed char val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) longlong2(signed char val1, signed char val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) longlong2(unsigned short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) longlong2(unsigned short val1, unsigned short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) longlong2(signed short val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) longlong2(signed short val1, signed short val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) longlong2(unsigned int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) longlong2(unsigned int val1, unsigned int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) longlong2(signed int val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) longlong2(signed int val1, signed int val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) longlong2(float val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) longlong2(float val1, float val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) longlong2(double val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) longlong2(double val1, double val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) longlong2(unsigned long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) longlong2(unsigned long val1, unsigned long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) longlong2(signed long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) longlong2(signed long val1, signed long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) longlong2(unsigned long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) longlong2(unsigned long long val1, unsigned long long val2) : x(val1), y(val2) {}
    __attribute__((hc)) __attribute__((cpu)) longlong2(signed long long val) : x(val), y(val) {} __attribute__((hc)) __attribute__((cpu)) longlong2(signed long long val1, signed long long val2) : x(val1), y(val2) {}

  signed long long x, y;
} __attribute__((aligned(16)));

struct longlong3 {

    public:
    __attribute__((hc)) __attribute__((cpu)) longlong3() {} __attribute__((hc)) __attribute__((cpu)) longlong3(const longlong3& val) : x(val.x), y(val.y), z(val.z) { } __attribute__((hc)) __attribute__((cpu)) ~longlong3() {}

    __attribute__((hc)) __attribute__((cpu)) longlong3(unsigned char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) longlong3(unsigned char val1, unsigned char val2, unsigned char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) longlong3(signed char val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) longlong3(signed char val1, signed char val2, signed char val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) longlong3(unsigned short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) longlong3(unsigned short val1, unsigned short val2, unsigned short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) longlong3(signed short val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) longlong3(signed short val1, signed short val2, signed short val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) longlong3(unsigned int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) longlong3(unsigned int val1, unsigned int val2, unsigned int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) longlong3(signed int val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) longlong3(signed int val1, signed int val2, signed int val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) longlong3(float val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) longlong3(float val1, float val2, float val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) longlong3(double val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) longlong3(double val1, double val2, double val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) longlong3(unsigned long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) longlong3(unsigned long val1, unsigned long val2, unsigned long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) longlong3(signed long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) longlong3(signed long val1, signed long val2, signed long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) longlong3(unsigned long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) longlong3(unsigned long long val1, unsigned long long val2, unsigned long long val3) : x(val1), y(val2), z(val3) {}
    __attribute__((hc)) __attribute__((cpu)) longlong3(signed long long val) : x(val), y(val), z(val) {} __attribute__((hc)) __attribute__((cpu)) longlong3(signed long long val1, signed long long val2, signed long long val3) : x(val1), y(val2), z(val3) {}

  signed long long x, y, z;
};

struct longlong4 {

    public:
    __attribute__((hc)) __attribute__((cpu)) longlong4() {} __attribute__((hc)) __attribute__((cpu)) longlong4(const longlong4& val) : x(val.x), y(val.y), z(val.z), w(val.w) { } __attribute__((hc)) __attribute__((cpu)) ~longlong4() {}

    __attribute__((hc)) __attribute__((cpu)) longlong4(unsigned char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) longlong4(unsigned char val1, unsigned char val2, unsigned char val3, unsigned char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) longlong4(signed char val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) longlong4(signed char val1, signed char val2, signed char val3, signed char val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) longlong4(unsigned short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) longlong4(unsigned short val1, unsigned short val2, unsigned short val3, unsigned short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) longlong4(signed short val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) longlong4(signed short val1, signed short val2, signed short val3, signed short val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) longlong4(unsigned int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) longlong4(unsigned int val1, unsigned int val2, unsigned int val3, unsigned int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) longlong4(signed int val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) longlong4(signed int val1, signed int val2, signed int val3, signed int val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) longlong4(float val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) longlong4(float val1, float val2, float val3, float val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) longlong4(double val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) longlong4(double val1, double val2, double val3, double val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) longlong4(unsigned long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) longlong4(unsigned long val1, unsigned long val2, unsigned long val3, unsigned long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) longlong4(signed long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) longlong4(signed long val1, signed long val2, signed long val3, signed long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) longlong4(unsigned long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) longlong4(unsigned long long val1, unsigned long long val2, unsigned long long val3, unsigned long long val4) : x(val1), y(val2), z(val3), w(val4) {}
    __attribute__((hc)) __attribute__((cpu)) longlong4(signed long long val) : x(val), y(val), z(val), w(val) {} __attribute__((hc)) __attribute__((cpu)) longlong4(signed long long val1, signed long long val2, signed long long val3, signed long long val4) : x(val1), y(val2), z(val3), w(val4) {}

  signed long x, y, z, w;
} __attribute__((aligned(32)));
# 1166 "/opt/rocm/hip/include/hip/hcc_detail/hip_vector_types.h"
__attribute__((hc)) __attribute__((cpu)) static inline struct uchar1 make_uchar1(unsigned char x) { struct uchar1 ret; ret.x = x; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct uchar2 make_uchar2(unsigned char x, unsigned char y) { struct uchar2 ret; ret.x = x; ret.y = y; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) { struct uchar3 ret; ret.x = x; ret.y = y; ret.z = z; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) { struct uchar4 ret; ret.x = x; ret.y = y; ret.z = z; ret.w = w; return ret; };

__attribute__((hc)) __attribute__((cpu)) static inline struct char1 make_char1(signed char x) { struct char1 ret; ret.x = x; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct char2 make_char2(signed char x, signed char y) { struct char2 ret; ret.x = x; ret.y = y; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct char3 make_char3(signed char x, signed char y, signed char z) { struct char3 ret; ret.x = x; ret.y = y; ret.z = z; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct char4 make_char4(signed char x, signed char y, signed char z, signed char w) { struct char4 ret; ret.x = x; ret.y = y; ret.z = z; ret.w = w; return ret; };

__attribute__((hc)) __attribute__((cpu)) static inline struct ushort1 make_ushort1(unsigned short x) { struct ushort1 ret; ret.x = x; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct ushort2 make_ushort2(unsigned short x, unsigned short y) { struct ushort2 ret; ret.x = x; ret.y = y; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) { struct ushort3 ret; ret.x = x; ret.y = y; ret.z = z; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) { struct ushort4 ret; ret.x = x; ret.y = y; ret.z = z; ret.w = w; return ret; };

__attribute__((hc)) __attribute__((cpu)) static inline struct short1 make_short1(signed short x) { struct short1 ret; ret.x = x; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct short2 make_short2(signed short x, signed short y) { struct short2 ret; ret.x = x; ret.y = y; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct short3 make_short3(signed short x, signed short y, signed short z) { struct short3 ret; ret.x = x; ret.y = y; ret.z = z; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct short4 make_short4(signed short x, signed short y, signed short z, signed short w) { struct short4 ret; ret.x = x; ret.y = y; ret.z = z; ret.w = w; return ret; };

__attribute__((hc)) __attribute__((cpu)) static inline struct uint1 make_uint1(unsigned int x) { struct uint1 ret; ret.x = x; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct uint2 make_uint2(unsigned int x, unsigned int y) { struct uint2 ret; ret.x = x; ret.y = y; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z) { struct uint3 ret; ret.x = x; ret.y = y; ret.z = z; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w) { struct uint4 ret; ret.x = x; ret.y = y; ret.z = z; ret.w = w; return ret; };

__attribute__((hc)) __attribute__((cpu)) static inline struct int1 make_int1(signed int x) { struct int1 ret; ret.x = x; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct int2 make_int2(signed int x, signed int y) { struct int2 ret; ret.x = x; ret.y = y; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct int3 make_int3(signed int x, signed int y, signed int z) { struct int3 ret; ret.x = x; ret.y = y; ret.z = z; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct int4 make_int4(signed int x, signed int y, signed int z, signed int w) { struct int4 ret; ret.x = x; ret.y = y; ret.z = z; ret.w = w; return ret; };

__attribute__((hc)) __attribute__((cpu)) static inline struct float1 make_float1(float x) { struct float1 ret; ret.x = x; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct float2 make_float2(float x, float y) { struct float2 ret; ret.x = x; ret.y = y; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct float3 make_float3(float x, float y, float z) { struct float3 ret; ret.x = x; ret.y = y; ret.z = z; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct float4 make_float4(float x, float y, float z, float w) { struct float4 ret; ret.x = x; ret.y = y; ret.z = z; ret.w = w; return ret; };

__attribute__((hc)) __attribute__((cpu)) static inline struct double1 make_double1(double x) { struct double1 ret; ret.x = x; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct double2 make_double2(double x, double y) { struct double2 ret; ret.x = x; ret.y = y; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct double3 make_double3(double x, double y, double z) { struct double3 ret; ret.x = x; ret.y = y; ret.z = z; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct double4 make_double4(double x, double y, double z, double w) { struct double4 ret; ret.x = x; ret.y = y; ret.z = z; ret.w = w; return ret; };

__attribute__((hc)) __attribute__((cpu)) static inline struct ulong1 make_ulong1(unsigned long x) { struct ulong1 ret; ret.x = x; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct ulong2 make_ulong2(unsigned long x, unsigned long y) { struct ulong2 ret; ret.x = x; ret.y = y; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) { struct ulong3 ret; ret.x = x; ret.y = y; ret.z = z; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) { struct ulong4 ret; ret.x = x; ret.y = y; ret.z = z; ret.w = w; return ret; };

__attribute__((hc)) __attribute__((cpu)) static inline struct long1 make_long1(signed long x) { struct long1 ret; ret.x = x; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct long2 make_long2(signed long x, signed long y) { struct long2 ret; ret.x = x; ret.y = y; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct long3 make_long3(signed long x, signed long y, signed long z) { struct long3 ret; ret.x = x; ret.y = y; ret.z = z; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct long4 make_long4(signed long x, signed long y, signed long z, signed long w) { struct long4 ret; ret.x = x; ret.y = y; ret.z = z; ret.w = w; return ret; };

__attribute__((hc)) __attribute__((cpu)) static inline struct ulonglong1 make_ulonglong1(unsigned long x) { struct ulonglong1 ret; ret.x = x; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct ulonglong2 make_ulonglong2(unsigned long x, unsigned long y) { struct ulonglong2 ret; ret.x = x; ret.y = y; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct ulonglong3 make_ulonglong3(unsigned long x, unsigned long y, unsigned long z) { struct ulonglong3 ret; ret.x = x; ret.y = y; ret.z = z; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct ulonglong4 make_ulonglong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) { struct ulonglong4 ret; ret.x = x; ret.y = y; ret.z = z; ret.w = w; return ret; };

__attribute__((hc)) __attribute__((cpu)) static inline struct longlong1 make_longlong1(signed long x) { struct longlong1 ret; ret.x = x; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct longlong2 make_longlong2(signed long x, signed long y) { struct longlong2 ret; ret.x = x; ret.y = y; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct longlong3 make_longlong3(signed long x, signed long y, signed long z) { struct longlong3 ret; ret.x = x; ret.y = y; ret.z = z; return ret; };
__attribute__((hc)) __attribute__((cpu)) static inline struct longlong4 make_longlong4(signed long x, signed long y, signed long z, signed long w) { struct longlong4 ret; ret.x = x; ret.y = y; ret.z = z; ret.w = w; return ret; };
# 1562 "/opt/rocm/hip/include/hip/hcc_detail/hip_vector_types.h"
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator + (const uchar1& lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs.x + rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator - (const uchar1& lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs.x - rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (const uchar1& lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs.x * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator / (const uchar1& lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs.x / rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator % (const uchar1& lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs.x % rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator & (const uchar1& lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs.x & rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator | (const uchar1& lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs.x | rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator ^ (const uchar1& lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs.x ^ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator << (const uchar1& lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs.x << rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator >> (const uchar1& lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs.x >> rhs.x; return ret; }


__attribute__((hc)) __attribute__((cpu)) static inline uchar1& operator += ( uchar1& lhs, const uchar1& rhs) { lhs.x += rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1& operator -= ( uchar1& lhs, const uchar1& rhs) { lhs.x -= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1& operator *= ( uchar1& lhs, const uchar1& rhs) { lhs.x *= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1& operator /= ( uchar1& lhs, const uchar1& rhs) { lhs.x /= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1& operator %= ( uchar1& lhs, const uchar1& rhs) { lhs.x %= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1& operator &= ( uchar1& lhs, const uchar1& rhs) { lhs.x &= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1& operator |= ( uchar1& lhs, const uchar1& rhs) { lhs.x |= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1& operator ^= ( uchar1& lhs, const uchar1& rhs) { lhs.x ^= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1& operator <<= ( uchar1& lhs, const uchar1& rhs) { lhs.x <<= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1& operator >>= ( uchar1& lhs, const uchar1& rhs) { lhs.x >>= rhs.x; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline uchar1& operator ++ (uchar1& val) { ++ val.x; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1& operator -- (uchar1& val) { -- val.x; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator ++ (uchar1& val, int) { uchar1 ret; ret.x = val.x; val.x ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator -- (uchar1& val, int) { uchar1 ret; ret.x = val.x; val.x --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uchar1& lhs, uchar1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uchar1& lhs, uchar1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uchar1& lhs, const uchar1& rhs) { return lhs.x == rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uchar1& lhs, const uchar1& rhs) { return lhs.x == rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uchar1& lhs, uchar1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uchar1& lhs, uchar1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uchar1& lhs, const uchar1& rhs) { return lhs.x != rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uchar1& lhs, const uchar1& rhs) { return lhs.x != rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uchar1& lhs, uchar1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uchar1& lhs, uchar1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uchar1& lhs, const uchar1& rhs) { return lhs.x < rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uchar1& lhs, const uchar1& rhs) { return lhs.x < rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uchar1& lhs, uchar1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uchar1& lhs, uchar1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uchar1& lhs, const uchar1& rhs) { return lhs.x > rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uchar1& lhs, const uchar1& rhs) { return lhs.x > rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uchar1& lhs, uchar1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uchar1& lhs, uchar1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uchar1& lhs, const uchar1& rhs) { return lhs.x <= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uchar1& lhs, const uchar1& rhs) { return lhs.x <= rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uchar1& lhs, uchar1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uchar1& lhs, uchar1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uchar1& lhs, const uchar1& rhs) { return lhs.x >= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uchar1& lhs, const uchar1& rhs) { return lhs.x >= rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uchar1& lhs, uchar1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uchar1& lhs, uchar1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uchar1& lhs, const uchar1& rhs) { return lhs.x && rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uchar1& lhs, const uchar1& rhs) { return lhs.x && rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uchar1& lhs, uchar1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uchar1& lhs, uchar1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uchar1& lhs, const uchar1& rhs) { return lhs.x || rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uchar1& lhs, const uchar1& rhs) { return lhs.x || rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator ~(uchar1& rhs) { uchar1 ret; ret.x = ~ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (uchar1& rhs) { return ! rhs.x; }

__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (const uchar1& lhs, unsigned char rhs) { uchar1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (unsigned char lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (const uchar1& lhs, signed char rhs) { uchar1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (signed char lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (const uchar1& lhs, unsigned short rhs) { uchar1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (unsigned short lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (const uchar1& lhs, signed short rhs) { uchar1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (signed short lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (const uchar1& lhs, unsigned int rhs) { uchar1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (unsigned int lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (const uchar1& lhs, signed int rhs) { uchar1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (signed int lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (const uchar1& lhs, float rhs) { uchar1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (float lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (const uchar1& lhs, unsigned long rhs) { uchar1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (unsigned long lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (const uchar1& lhs, signed long rhs) { uchar1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (signed long lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (const uchar1& lhs, double rhs) { uchar1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (double lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (const uchar1& lhs, unsigned long long rhs) { uchar1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (unsigned long long lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (const uchar1& lhs, signed long long rhs) { uchar1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar1 operator * (signed long long lhs, const uchar1& rhs) { uchar1 ret; ret.x = lhs * rhs.x; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator + (const uchar2& lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator - (const uchar2& lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (const uchar2& lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator / (const uchar2& lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator % (const uchar2& lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator & (const uchar2& lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator | (const uchar2& lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator ^ (const uchar2& lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator << (const uchar2& lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator >> (const uchar2& lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline uchar2& operator += ( uchar2& lhs, const uchar2& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2& operator -= ( uchar2& lhs, const uchar2& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2& operator *= ( uchar2& lhs, const uchar2& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2& operator /= ( uchar2& lhs, const uchar2& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2& operator %= ( uchar2& lhs, const uchar2& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2& operator &= ( uchar2& lhs, const uchar2& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2& operator |= ( uchar2& lhs, const uchar2& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2& operator ^= ( uchar2& lhs, const uchar2& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2& operator <<= ( uchar2& lhs, const uchar2& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2& operator >>= ( uchar2& lhs, const uchar2& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline uchar2& operator ++ (uchar2& val) { ++ val.x; ++ val.y; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2& operator -- (uchar2& val) { -- val.x; -- val.y; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator ++ (uchar2& val, int) { uchar2 ret; ret.x = val.x; ret.y = val.y; val.x ++; val.y ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator -- (uchar2& val, int) { uchar2 ret; ret.x = val.x; ret.y = val.y; val.x --; val.y --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uchar2& lhs, uchar2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uchar2& lhs, uchar2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uchar2& lhs, const uchar2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uchar2& lhs, const uchar2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uchar2& lhs, uchar2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uchar2& lhs, uchar2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uchar2& lhs, const uchar2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uchar2& lhs, const uchar2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uchar2& lhs, uchar2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uchar2& lhs, uchar2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uchar2& lhs, const uchar2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uchar2& lhs, const uchar2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uchar2& lhs, uchar2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uchar2& lhs, uchar2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uchar2& lhs, const uchar2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uchar2& lhs, const uchar2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uchar2& lhs, uchar2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uchar2& lhs, uchar2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uchar2& lhs, const uchar2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uchar2& lhs, const uchar2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uchar2& lhs, uchar2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uchar2& lhs, uchar2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uchar2& lhs, const uchar2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uchar2& lhs, const uchar2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uchar2& lhs, uchar2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uchar2& lhs, uchar2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uchar2& lhs, const uchar2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uchar2& lhs, const uchar2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uchar2& lhs, uchar2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uchar2& lhs, uchar2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uchar2& lhs, const uchar2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uchar2& lhs, const uchar2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator ~(uchar2 &rhs) { uchar2 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (uchar2 &rhs) { return (! rhs.x) && (! rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (const uchar2& lhs, unsigned char rhs) { uchar2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (unsigned char lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (const uchar2& lhs, signed char rhs) { uchar2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (signed char lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (const uchar2& lhs, unsigned short rhs) { uchar2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (unsigned short lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (const uchar2& lhs, signed short rhs) { uchar2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (signed short lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (const uchar2& lhs, unsigned int rhs) { uchar2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (unsigned int lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (const uchar2& lhs, signed int rhs) { uchar2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (signed int lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (const uchar2& lhs, float rhs) { uchar2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (float lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (const uchar2& lhs, unsigned long rhs) { uchar2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (unsigned long lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (const uchar2& lhs, signed long rhs) { uchar2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (signed long lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (const uchar2& lhs, double rhs) { uchar2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (double lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (const uchar2& lhs, unsigned long long rhs) { uchar2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (unsigned long long lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (const uchar2& lhs, signed long long rhs) { uchar2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar2 operator * (signed long long lhs, const uchar2& rhs) { uchar2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator + (const uchar3& lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator - (const uchar3& lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (const uchar3& lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator / (const uchar3& lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator % (const uchar3& lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator & (const uchar3& lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator | (const uchar3& lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator ^ (const uchar3& lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator << (const uchar3& lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator >> (const uchar3& lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline uchar3& operator += ( uchar3& lhs, const uchar3& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3& operator -= ( uchar3& lhs, const uchar3& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3& operator *= ( uchar3& lhs, const uchar3& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3& operator /= ( uchar3& lhs, const uchar3& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3& operator %= ( uchar3& lhs, const uchar3& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3& operator &= ( uchar3& lhs, const uchar3& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3& operator |= ( uchar3& lhs, const uchar3& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3& operator ^= ( uchar3& lhs, const uchar3& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3& operator <<= ( uchar3& lhs, const uchar3& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3& operator >>= ( uchar3& lhs, const uchar3& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline uchar3& operator ++ (uchar3& val) { ++ val.x; ++ val.y; ++ val.z; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3& operator -- (uchar3& val) { -- val.x; -- val.y; -- val.z; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator ++ (uchar3& val, int) { uchar3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x ++; val.y ++; val.z ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator -- (uchar3& val, int) { uchar3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x --; val.y --; val.z --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uchar3& lhs, uchar3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uchar3& lhs, uchar3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uchar3& lhs, const uchar3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uchar3& lhs, const uchar3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uchar3& lhs, uchar3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uchar3& lhs, uchar3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uchar3& lhs, const uchar3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uchar3& lhs, const uchar3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uchar3& lhs, uchar3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uchar3& lhs, uchar3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uchar3& lhs, const uchar3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uchar3& lhs, const uchar3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uchar3& lhs, uchar3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uchar3& lhs, uchar3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uchar3& lhs, const uchar3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uchar3& lhs, const uchar3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uchar3& lhs, uchar3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uchar3& lhs, uchar3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uchar3& lhs, const uchar3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uchar3& lhs, const uchar3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uchar3& lhs, uchar3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uchar3& lhs, uchar3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uchar3& lhs, const uchar3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uchar3& lhs, const uchar3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uchar3& lhs, uchar3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uchar3& lhs, uchar3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uchar3& lhs, const uchar3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uchar3& lhs, const uchar3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uchar3& lhs, uchar3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uchar3& lhs, uchar3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uchar3& lhs, const uchar3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uchar3& lhs, const uchar3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator ~(uchar3 &rhs) { uchar3 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (uchar3 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (const uchar3& lhs, unsigned char rhs) { uchar3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (unsigned char lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (const uchar3& lhs, signed char rhs) { uchar3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (signed char lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (const uchar3& lhs, unsigned short rhs) { uchar3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (unsigned short lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (const uchar3& lhs, signed short rhs) { uchar3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (signed short lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (const uchar3& lhs, unsigned int rhs) { uchar3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (unsigned int lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (const uchar3& lhs, signed int rhs) { uchar3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (signed int lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (const uchar3& lhs, float rhs) { uchar3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (float lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (const uchar3& lhs, unsigned long rhs) { uchar3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (unsigned long lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (const uchar3& lhs, signed long rhs) { uchar3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (signed long lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (const uchar3& lhs, double rhs) { uchar3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (double lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (const uchar3& lhs, unsigned long long rhs) { uchar3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (unsigned long long lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (const uchar3& lhs, signed long long rhs) { uchar3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar3 operator * (signed long long lhs, const uchar3& rhs) { uchar3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator + ( const uchar4& lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; ret.w = lhs.w + rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator - ( const uchar4& lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; ret.w = lhs.w - rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * ( const uchar4& lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; ret.w = lhs.w * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator / ( const uchar4& lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; ret.w = lhs.w / rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator % ( const uchar4& lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; ret.w = lhs.w % rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator & ( const uchar4& lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; ret.w = lhs.w & rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator | ( const uchar4& lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; ret.w = lhs.w | rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator ^ ( const uchar4& lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; ret.w = lhs.w ^ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator << ( const uchar4& lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; ret.w = lhs.w << rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator >> ( const uchar4& lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; ret.w = lhs.w >> rhs.w; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline uchar4& operator += ( uchar4& lhs, const uchar4& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; lhs.w += rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4& operator -= ( uchar4& lhs, const uchar4& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; lhs.w -= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4& operator *= ( uchar4& lhs, const uchar4& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; lhs.w *= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4& operator /= ( uchar4& lhs, const uchar4& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; lhs.w /= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4& operator %= ( uchar4& lhs, const uchar4& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; lhs.w %= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4& operator &= ( uchar4& lhs, const uchar4& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; lhs.w &= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4& operator |= ( uchar4& lhs, const uchar4& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; lhs.w |= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4& operator ^= ( uchar4& lhs, const uchar4& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; lhs.w ^= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4& operator <<= ( uchar4& lhs, const uchar4& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; lhs.w <<= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4& operator >>= ( uchar4& lhs, const uchar4& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; lhs.w >>= rhs.w; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline uchar4& operator ++ (uchar4& val) { ++ val.x; ++ val.y; ++ val.z; ++ val.w; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4& operator -- (uchar4& val) { -- val.x; -- val.y; -- val.z; -- val.w; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator ++ (uchar4& val, int) { uchar4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x ++; val.y ++; val.z ++; val.w ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator -- (uchar4& val, int) { uchar4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x --; val.y --; val.z --; val.w --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uchar4& lhs, uchar4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uchar4& lhs, uchar4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uchar4& lhs, const uchar4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uchar4& lhs, const uchar4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uchar4& lhs, uchar4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uchar4& lhs, uchar4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uchar4& lhs, const uchar4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uchar4& lhs, const uchar4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uchar4& lhs, uchar4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uchar4& lhs, uchar4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uchar4& lhs, const uchar4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uchar4& lhs, const uchar4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uchar4& lhs, uchar4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uchar4& lhs, uchar4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uchar4& lhs, const uchar4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uchar4& lhs, const uchar4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uchar4& lhs, uchar4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uchar4& lhs, uchar4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uchar4& lhs, const uchar4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uchar4& lhs, const uchar4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uchar4& lhs, uchar4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uchar4& lhs, uchar4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uchar4& lhs, const uchar4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uchar4& lhs, const uchar4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uchar4& lhs, uchar4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uchar4& lhs, uchar4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uchar4& lhs, const uchar4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uchar4& lhs, const uchar4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uchar4& lhs, uchar4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uchar4& lhs, uchar4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uchar4& lhs, const uchar4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uchar4& lhs, const uchar4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator ~(uchar4 &rhs) { uchar4 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; ret.w = ~ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (uchar4 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z) && (! rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (const uchar4& lhs, unsigned char rhs) { uchar4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (unsigned char lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (const uchar4& lhs, signed char rhs) { uchar4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (signed char lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (const uchar4& lhs, unsigned short rhs) { uchar4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (unsigned short lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (const uchar4& lhs, signed short rhs) { uchar4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (signed short lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (const uchar4& lhs, unsigned int rhs) { uchar4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (unsigned int lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (const uchar4& lhs, signed int rhs) { uchar4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (signed int lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (const uchar4& lhs, float rhs) { uchar4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (float lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (const uchar4& lhs, unsigned long rhs) { uchar4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (unsigned long lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (const uchar4& lhs, signed long rhs) { uchar4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (signed long lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (const uchar4& lhs, double rhs) { uchar4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (double lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (const uchar4& lhs, unsigned long long rhs) { uchar4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (unsigned long long lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (const uchar4& lhs, signed long long rhs) { uchar4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uchar4 operator * (signed long long lhs, const uchar4& rhs) { uchar4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline char1 operator + (const char1& lhs, const char1& rhs) { char1 ret; ret.x = lhs.x + rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator - (const char1& lhs, const char1& rhs) { char1 ret; ret.x = lhs.x - rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (const char1& lhs, const char1& rhs) { char1 ret; ret.x = lhs.x * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator / (const char1& lhs, const char1& rhs) { char1 ret; ret.x = lhs.x / rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator % (const char1& lhs, const char1& rhs) { char1 ret; ret.x = lhs.x % rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator & (const char1& lhs, const char1& rhs) { char1 ret; ret.x = lhs.x & rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator | (const char1& lhs, const char1& rhs) { char1 ret; ret.x = lhs.x | rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator ^ (const char1& lhs, const char1& rhs) { char1 ret; ret.x = lhs.x ^ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator << (const char1& lhs, const char1& rhs) { char1 ret; ret.x = lhs.x << rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator >> (const char1& lhs, const char1& rhs) { char1 ret; ret.x = lhs.x >> rhs.x; return ret; }


__attribute__((hc)) __attribute__((cpu)) static inline char1& operator += ( char1& lhs, const char1& rhs) { lhs.x += rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char1& operator -= ( char1& lhs, const char1& rhs) { lhs.x -= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char1& operator *= ( char1& lhs, const char1& rhs) { lhs.x *= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char1& operator /= ( char1& lhs, const char1& rhs) { lhs.x /= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char1& operator %= ( char1& lhs, const char1& rhs) { lhs.x %= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char1& operator &= ( char1& lhs, const char1& rhs) { lhs.x &= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char1& operator |= ( char1& lhs, const char1& rhs) { lhs.x |= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char1& operator ^= ( char1& lhs, const char1& rhs) { lhs.x ^= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char1& operator <<= ( char1& lhs, const char1& rhs) { lhs.x <<= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char1& operator >>= ( char1& lhs, const char1& rhs) { lhs.x >>= rhs.x; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline char1& operator ++ (char1& val) { ++ val.x; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline char1& operator -- (char1& val) { -- val.x; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline char1 operator ++ (char1& val, int) { char1 ret; ret.x = val.x; val.x ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator -- (char1& val, int) { char1 ret; ret.x = val.x; val.x --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (char1& lhs, char1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const char1& lhs, char1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (char1& lhs, const char1& rhs) { return lhs.x == rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const char1& lhs, const char1& rhs) { return lhs.x == rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (char1& lhs, char1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const char1& lhs, char1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (char1& lhs, const char1& rhs) { return lhs.x != rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const char1& lhs, const char1& rhs) { return lhs.x != rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (char1& lhs, char1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const char1& lhs, char1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (char1& lhs, const char1& rhs) { return lhs.x < rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const char1& lhs, const char1& rhs) { return lhs.x < rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (char1& lhs, char1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const char1& lhs, char1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (char1& lhs, const char1& rhs) { return lhs.x > rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const char1& lhs, const char1& rhs) { return lhs.x > rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (char1& lhs, char1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const char1& lhs, char1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (char1& lhs, const char1& rhs) { return lhs.x <= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const char1& lhs, const char1& rhs) { return lhs.x <= rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (char1& lhs, char1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const char1& lhs, char1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (char1& lhs, const char1& rhs) { return lhs.x >= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const char1& lhs, const char1& rhs) { return lhs.x >= rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (char1& lhs, char1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const char1& lhs, char1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (char1& lhs, const char1& rhs) { return lhs.x && rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const char1& lhs, const char1& rhs) { return lhs.x && rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (char1& lhs, char1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const char1& lhs, char1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (char1& lhs, const char1& rhs) { return lhs.x || rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const char1& lhs, const char1& rhs) { return lhs.x || rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline char1 operator ~(char1& rhs) { char1 ret; ret.x = ~ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (char1& rhs) { return ! rhs.x; }

__attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (const char1& lhs, unsigned char rhs) { char1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (unsigned char lhs, const char1& rhs) { char1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (const char1& lhs, signed char rhs) { char1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (signed char lhs, const char1& rhs) { char1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (const char1& lhs, unsigned short rhs) { char1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (unsigned short lhs, const char1& rhs) { char1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (const char1& lhs, signed short rhs) { char1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (signed short lhs, const char1& rhs) { char1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (const char1& lhs, unsigned int rhs) { char1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (unsigned int lhs, const char1& rhs) { char1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (const char1& lhs, signed int rhs) { char1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (signed int lhs, const char1& rhs) { char1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (const char1& lhs, float rhs) { char1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (float lhs, const char1& rhs) { char1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (const char1& lhs, unsigned long rhs) { char1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (unsigned long lhs, const char1& rhs) { char1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (const char1& lhs, signed long rhs) { char1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (signed long lhs, const char1& rhs) { char1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (const char1& lhs, double rhs) { char1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (double lhs, const char1& rhs) { char1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (const char1& lhs, unsigned long long rhs) { char1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (unsigned long long lhs, const char1& rhs) { char1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (const char1& lhs, signed long long rhs) { char1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char1 operator * (signed long long lhs, const char1& rhs) { char1 ret; ret.x = lhs * rhs.x; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline char2 operator + (const char2& lhs, const char2& rhs) { char2 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator - (const char2& lhs, const char2& rhs) { char2 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (const char2& lhs, const char2& rhs) { char2 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator / (const char2& lhs, const char2& rhs) { char2 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator % (const char2& lhs, const char2& rhs) { char2 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator & (const char2& lhs, const char2& rhs) { char2 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator | (const char2& lhs, const char2& rhs) { char2 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator ^ (const char2& lhs, const char2& rhs) { char2 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator << (const char2& lhs, const char2& rhs) { char2 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator >> (const char2& lhs, const char2& rhs) { char2 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline char2& operator += ( char2& lhs, const char2& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char2& operator -= ( char2& lhs, const char2& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char2& operator *= ( char2& lhs, const char2& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char2& operator /= ( char2& lhs, const char2& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char2& operator %= ( char2& lhs, const char2& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char2& operator &= ( char2& lhs, const char2& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char2& operator |= ( char2& lhs, const char2& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char2& operator ^= ( char2& lhs, const char2& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char2& operator <<= ( char2& lhs, const char2& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char2& operator >>= ( char2& lhs, const char2& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline char2& operator ++ (char2& val) { ++ val.x; ++ val.y; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline char2& operator -- (char2& val) { -- val.x; -- val.y; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline char2 operator ++ (char2& val, int) { char2 ret; ret.x = val.x; ret.y = val.y; val.x ++; val.y ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator -- (char2& val, int) { char2 ret; ret.x = val.x; ret.y = val.y; val.x --; val.y --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (char2& lhs, char2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const char2& lhs, char2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (char2& lhs, const char2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const char2& lhs, const char2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (char2& lhs, char2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const char2& lhs, char2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (char2& lhs, const char2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const char2& lhs, const char2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (char2& lhs, char2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const char2& lhs, char2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (char2& lhs, const char2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const char2& lhs, const char2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (char2& lhs, char2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const char2& lhs, char2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (char2& lhs, const char2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const char2& lhs, const char2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (char2& lhs, char2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const char2& lhs, char2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (char2& lhs, const char2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const char2& lhs, const char2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (char2& lhs, char2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const char2& lhs, char2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (char2& lhs, const char2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const char2& lhs, const char2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (char2& lhs, char2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const char2& lhs, char2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (char2& lhs, const char2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const char2& lhs, const char2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (char2& lhs, char2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const char2& lhs, char2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (char2& lhs, const char2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const char2& lhs, const char2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline char2 operator ~(char2 &rhs) { char2 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (char2 &rhs) { return (! rhs.x) && (! rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (const char2& lhs, unsigned char rhs) { char2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (unsigned char lhs, const char2& rhs) { char2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (const char2& lhs, signed char rhs) { char2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (signed char lhs, const char2& rhs) { char2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (const char2& lhs, unsigned short rhs) { char2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (unsigned short lhs, const char2& rhs) { char2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (const char2& lhs, signed short rhs) { char2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (signed short lhs, const char2& rhs) { char2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (const char2& lhs, unsigned int rhs) { char2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (unsigned int lhs, const char2& rhs) { char2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (const char2& lhs, signed int rhs) { char2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (signed int lhs, const char2& rhs) { char2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (const char2& lhs, float rhs) { char2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (float lhs, const char2& rhs) { char2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (const char2& lhs, unsigned long rhs) { char2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (unsigned long lhs, const char2& rhs) { char2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (const char2& lhs, signed long rhs) { char2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (signed long lhs, const char2& rhs) { char2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (const char2& lhs, double rhs) { char2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (double lhs, const char2& rhs) { char2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (const char2& lhs, unsigned long long rhs) { char2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (unsigned long long lhs, const char2& rhs) { char2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (const char2& lhs, signed long long rhs) { char2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char2 operator * (signed long long lhs, const char2& rhs) { char2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline char3 operator + (const char3& lhs, const char3& rhs) { char3 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator - (const char3& lhs, const char3& rhs) { char3 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (const char3& lhs, const char3& rhs) { char3 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator / (const char3& lhs, const char3& rhs) { char3 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator % (const char3& lhs, const char3& rhs) { char3 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator & (const char3& lhs, const char3& rhs) { char3 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator | (const char3& lhs, const char3& rhs) { char3 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator ^ (const char3& lhs, const char3& rhs) { char3 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator << (const char3& lhs, const char3& rhs) { char3 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator >> (const char3& lhs, const char3& rhs) { char3 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline char3& operator += ( char3& lhs, const char3& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char3& operator -= ( char3& lhs, const char3& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char3& operator *= ( char3& lhs, const char3& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char3& operator /= ( char3& lhs, const char3& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char3& operator %= ( char3& lhs, const char3& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char3& operator &= ( char3& lhs, const char3& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char3& operator |= ( char3& lhs, const char3& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char3& operator ^= ( char3& lhs, const char3& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char3& operator <<= ( char3& lhs, const char3& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char3& operator >>= ( char3& lhs, const char3& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline char3& operator ++ (char3& val) { ++ val.x; ++ val.y; ++ val.z; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline char3& operator -- (char3& val) { -- val.x; -- val.y; -- val.z; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline char3 operator ++ (char3& val, int) { char3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x ++; val.y ++; val.z ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator -- (char3& val, int) { char3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x --; val.y --; val.z --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (char3& lhs, char3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const char3& lhs, char3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (char3& lhs, const char3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const char3& lhs, const char3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (char3& lhs, char3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const char3& lhs, char3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (char3& lhs, const char3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const char3& lhs, const char3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (char3& lhs, char3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const char3& lhs, char3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (char3& lhs, const char3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const char3& lhs, const char3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (char3& lhs, char3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const char3& lhs, char3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (char3& lhs, const char3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const char3& lhs, const char3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (char3& lhs, char3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const char3& lhs, char3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (char3& lhs, const char3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const char3& lhs, const char3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (char3& lhs, char3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const char3& lhs, char3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (char3& lhs, const char3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const char3& lhs, const char3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (char3& lhs, char3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const char3& lhs, char3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (char3& lhs, const char3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const char3& lhs, const char3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (char3& lhs, char3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const char3& lhs, char3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (char3& lhs, const char3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const char3& lhs, const char3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline char3 operator ~(char3 &rhs) { char3 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (char3 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (const char3& lhs, unsigned char rhs) { char3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (unsigned char lhs, const char3& rhs) { char3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (const char3& lhs, signed char rhs) { char3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (signed char lhs, const char3& rhs) { char3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (const char3& lhs, unsigned short rhs) { char3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (unsigned short lhs, const char3& rhs) { char3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (const char3& lhs, signed short rhs) { char3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (signed short lhs, const char3& rhs) { char3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (const char3& lhs, unsigned int rhs) { char3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (unsigned int lhs, const char3& rhs) { char3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (const char3& lhs, signed int rhs) { char3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (signed int lhs, const char3& rhs) { char3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (const char3& lhs, float rhs) { char3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (float lhs, const char3& rhs) { char3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (const char3& lhs, unsigned long rhs) { char3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (unsigned long lhs, const char3& rhs) { char3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (const char3& lhs, signed long rhs) { char3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (signed long lhs, const char3& rhs) { char3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (const char3& lhs, double rhs) { char3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (double lhs, const char3& rhs) { char3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (const char3& lhs, unsigned long long rhs) { char3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (unsigned long long lhs, const char3& rhs) { char3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (const char3& lhs, signed long long rhs) { char3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char3 operator * (signed long long lhs, const char3& rhs) { char3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline char4 operator + ( const char4& lhs, const char4& rhs) { char4 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; ret.w = lhs.w + rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator - ( const char4& lhs, const char4& rhs) { char4 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; ret.w = lhs.w - rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator * ( const char4& lhs, const char4& rhs) { char4 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; ret.w = lhs.w * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator / ( const char4& lhs, const char4& rhs) { char4 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; ret.w = lhs.w / rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator % ( const char4& lhs, const char4& rhs) { char4 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; ret.w = lhs.w % rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator & ( const char4& lhs, const char4& rhs) { char4 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; ret.w = lhs.w & rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator | ( const char4& lhs, const char4& rhs) { char4 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; ret.w = lhs.w | rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator ^ ( const char4& lhs, const char4& rhs) { char4 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; ret.w = lhs.w ^ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator << ( const char4& lhs, const char4& rhs) { char4 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; ret.w = lhs.w << rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator >> ( const char4& lhs, const char4& rhs) { char4 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; ret.w = lhs.w >> rhs.w; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline char4& operator += ( char4& lhs, const char4& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; lhs.w += rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char4& operator -= ( char4& lhs, const char4& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; lhs.w -= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char4& operator *= ( char4& lhs, const char4& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; lhs.w *= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char4& operator /= ( char4& lhs, const char4& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; lhs.w /= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char4& operator %= ( char4& lhs, const char4& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; lhs.w %= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char4& operator &= ( char4& lhs, const char4& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; lhs.w &= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char4& operator |= ( char4& lhs, const char4& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; lhs.w |= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char4& operator ^= ( char4& lhs, const char4& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; lhs.w ^= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char4& operator <<= ( char4& lhs, const char4& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; lhs.w <<= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline char4& operator >>= ( char4& lhs, const char4& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; lhs.w >>= rhs.w; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline char4& operator ++ (char4& val) { ++ val.x; ++ val.y; ++ val.z; ++ val.w; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline char4& operator -- (char4& val) { -- val.x; -- val.y; -- val.z; -- val.w; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline char4 operator ++ (char4& val, int) { char4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x ++; val.y ++; val.z ++; val.w ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator -- (char4& val, int) { char4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x --; val.y --; val.z --; val.w --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (char4& lhs, char4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const char4& lhs, char4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (char4& lhs, const char4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const char4& lhs, const char4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (char4& lhs, char4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const char4& lhs, char4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (char4& lhs, const char4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const char4& lhs, const char4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (char4& lhs, char4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const char4& lhs, char4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (char4& lhs, const char4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const char4& lhs, const char4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (char4& lhs, char4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const char4& lhs, char4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (char4& lhs, const char4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const char4& lhs, const char4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (char4& lhs, char4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const char4& lhs, char4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (char4& lhs, const char4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const char4& lhs, const char4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (char4& lhs, char4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const char4& lhs, char4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (char4& lhs, const char4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const char4& lhs, const char4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (char4& lhs, char4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const char4& lhs, char4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (char4& lhs, const char4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const char4& lhs, const char4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (char4& lhs, char4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const char4& lhs, char4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (char4& lhs, const char4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const char4& lhs, const char4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline char4 operator ~(char4 &rhs) { char4 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; ret.w = ~ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (char4 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z) && (! rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (const char4& lhs, unsigned char rhs) { char4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (unsigned char lhs, const char4& rhs) { char4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (const char4& lhs, signed char rhs) { char4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (signed char lhs, const char4& rhs) { char4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (const char4& lhs, unsigned short rhs) { char4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (unsigned short lhs, const char4& rhs) { char4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (const char4& lhs, signed short rhs) { char4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (signed short lhs, const char4& rhs) { char4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (const char4& lhs, unsigned int rhs) { char4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (unsigned int lhs, const char4& rhs) { char4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (const char4& lhs, signed int rhs) { char4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (signed int lhs, const char4& rhs) { char4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (const char4& lhs, float rhs) { char4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (float lhs, const char4& rhs) { char4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (const char4& lhs, unsigned long rhs) { char4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (unsigned long lhs, const char4& rhs) { char4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (const char4& lhs, signed long rhs) { char4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (signed long lhs, const char4& rhs) { char4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (const char4& lhs, double rhs) { char4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (double lhs, const char4& rhs) { char4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (const char4& lhs, unsigned long long rhs) { char4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (unsigned long long lhs, const char4& rhs) { char4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (const char4& lhs, signed long long rhs) { char4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline char4 operator * (signed long long lhs, const char4& rhs) { char4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator + (const ushort1& lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs.x + rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator - (const ushort1& lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs.x - rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (const ushort1& lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs.x * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator / (const ushort1& lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs.x / rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator % (const ushort1& lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs.x % rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator & (const ushort1& lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs.x & rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator | (const ushort1& lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs.x | rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator ^ (const ushort1& lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs.x ^ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator << (const ushort1& lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs.x << rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator >> (const ushort1& lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs.x >> rhs.x; return ret; }


__attribute__((hc)) __attribute__((cpu)) static inline ushort1& operator += ( ushort1& lhs, const ushort1& rhs) { lhs.x += rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1& operator -= ( ushort1& lhs, const ushort1& rhs) { lhs.x -= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1& operator *= ( ushort1& lhs, const ushort1& rhs) { lhs.x *= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1& operator /= ( ushort1& lhs, const ushort1& rhs) { lhs.x /= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1& operator %= ( ushort1& lhs, const ushort1& rhs) { lhs.x %= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1& operator &= ( ushort1& lhs, const ushort1& rhs) { lhs.x &= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1& operator |= ( ushort1& lhs, const ushort1& rhs) { lhs.x |= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1& operator ^= ( ushort1& lhs, const ushort1& rhs) { lhs.x ^= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1& operator <<= ( ushort1& lhs, const ushort1& rhs) { lhs.x <<= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1& operator >>= ( ushort1& lhs, const ushort1& rhs) { lhs.x >>= rhs.x; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline ushort1& operator ++ (ushort1& val) { ++ val.x; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1& operator -- (ushort1& val) { -- val.x; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator ++ (ushort1& val, int) { ushort1 ret; ret.x = val.x; val.x ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator -- (ushort1& val, int) { ushort1 ret; ret.x = val.x; val.x --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ushort1& lhs, ushort1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ushort1& lhs, ushort1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ushort1& lhs, const ushort1& rhs) { return lhs.x == rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ushort1& lhs, const ushort1& rhs) { return lhs.x == rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ushort1& lhs, ushort1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ushort1& lhs, ushort1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ushort1& lhs, const ushort1& rhs) { return lhs.x != rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ushort1& lhs, const ushort1& rhs) { return lhs.x != rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ushort1& lhs, ushort1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ushort1& lhs, ushort1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ushort1& lhs, const ushort1& rhs) { return lhs.x < rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ushort1& lhs, const ushort1& rhs) { return lhs.x < rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ushort1& lhs, ushort1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ushort1& lhs, ushort1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ushort1& lhs, const ushort1& rhs) { return lhs.x > rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ushort1& lhs, const ushort1& rhs) { return lhs.x > rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ushort1& lhs, ushort1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ushort1& lhs, ushort1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ushort1& lhs, const ushort1& rhs) { return lhs.x <= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ushort1& lhs, const ushort1& rhs) { return lhs.x <= rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ushort1& lhs, ushort1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ushort1& lhs, ushort1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ushort1& lhs, const ushort1& rhs) { return lhs.x >= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ushort1& lhs, const ushort1& rhs) { return lhs.x >= rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ushort1& lhs, ushort1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ushort1& lhs, ushort1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ushort1& lhs, const ushort1& rhs) { return lhs.x && rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ushort1& lhs, const ushort1& rhs) { return lhs.x && rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ushort1& lhs, ushort1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ushort1& lhs, ushort1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ushort1& lhs, const ushort1& rhs) { return lhs.x || rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ushort1& lhs, const ushort1& rhs) { return lhs.x || rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator ~(ushort1& rhs) { ushort1 ret; ret.x = ~ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (ushort1& rhs) { return ! rhs.x; }

__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (const ushort1& lhs, unsigned char rhs) { ushort1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (unsigned char lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (const ushort1& lhs, signed char rhs) { ushort1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (signed char lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (const ushort1& lhs, unsigned short rhs) { ushort1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (unsigned short lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (const ushort1& lhs, signed short rhs) { ushort1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (signed short lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (const ushort1& lhs, unsigned int rhs) { ushort1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (unsigned int lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (const ushort1& lhs, signed int rhs) { ushort1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (signed int lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (const ushort1& lhs, float rhs) { ushort1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (float lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (const ushort1& lhs, unsigned long rhs) { ushort1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (unsigned long lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (const ushort1& lhs, signed long rhs) { ushort1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (signed long lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (const ushort1& lhs, double rhs) { ushort1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (double lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (const ushort1& lhs, unsigned long long rhs) { ushort1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (unsigned long long lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (const ushort1& lhs, signed long long rhs) { ushort1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort1 operator * (signed long long lhs, const ushort1& rhs) { ushort1 ret; ret.x = lhs * rhs.x; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator + (const ushort2& lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator - (const ushort2& lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (const ushort2& lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator / (const ushort2& lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator % (const ushort2& lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator & (const ushort2& lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator | (const ushort2& lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator ^ (const ushort2& lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator << (const ushort2& lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator >> (const ushort2& lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline ushort2& operator += ( ushort2& lhs, const ushort2& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2& operator -= ( ushort2& lhs, const ushort2& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2& operator *= ( ushort2& lhs, const ushort2& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2& operator /= ( ushort2& lhs, const ushort2& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2& operator %= ( ushort2& lhs, const ushort2& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2& operator &= ( ushort2& lhs, const ushort2& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2& operator |= ( ushort2& lhs, const ushort2& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2& operator ^= ( ushort2& lhs, const ushort2& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2& operator <<= ( ushort2& lhs, const ushort2& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2& operator >>= ( ushort2& lhs, const ushort2& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline ushort2& operator ++ (ushort2& val) { ++ val.x; ++ val.y; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2& operator -- (ushort2& val) { -- val.x; -- val.y; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator ++ (ushort2& val, int) { ushort2 ret; ret.x = val.x; ret.y = val.y; val.x ++; val.y ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator -- (ushort2& val, int) { ushort2 ret; ret.x = val.x; ret.y = val.y; val.x --; val.y --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ushort2& lhs, ushort2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ushort2& lhs, ushort2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ushort2& lhs, const ushort2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ushort2& lhs, const ushort2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ushort2& lhs, ushort2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ushort2& lhs, ushort2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ushort2& lhs, const ushort2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ushort2& lhs, const ushort2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ushort2& lhs, ushort2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ushort2& lhs, ushort2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ushort2& lhs, const ushort2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ushort2& lhs, const ushort2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ushort2& lhs, ushort2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ushort2& lhs, ushort2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ushort2& lhs, const ushort2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ushort2& lhs, const ushort2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ushort2& lhs, ushort2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ushort2& lhs, ushort2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ushort2& lhs, const ushort2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ushort2& lhs, const ushort2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ushort2& lhs, ushort2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ushort2& lhs, ushort2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ushort2& lhs, const ushort2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ushort2& lhs, const ushort2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ushort2& lhs, ushort2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ushort2& lhs, ushort2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ushort2& lhs, const ushort2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ushort2& lhs, const ushort2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ushort2& lhs, ushort2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ushort2& lhs, ushort2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ushort2& lhs, const ushort2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ushort2& lhs, const ushort2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator ~(ushort2 &rhs) { ushort2 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (ushort2 &rhs) { return (! rhs.x) && (! rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (const ushort2& lhs, unsigned char rhs) { ushort2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (unsigned char lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (const ushort2& lhs, signed char rhs) { ushort2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (signed char lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (const ushort2& lhs, unsigned short rhs) { ushort2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (unsigned short lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (const ushort2& lhs, signed short rhs) { ushort2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (signed short lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (const ushort2& lhs, unsigned int rhs) { ushort2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (unsigned int lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (const ushort2& lhs, signed int rhs) { ushort2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (signed int lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (const ushort2& lhs, float rhs) { ushort2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (float lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (const ushort2& lhs, unsigned long rhs) { ushort2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (unsigned long lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (const ushort2& lhs, signed long rhs) { ushort2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (signed long lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (const ushort2& lhs, double rhs) { ushort2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (double lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (const ushort2& lhs, unsigned long long rhs) { ushort2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (unsigned long long lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (const ushort2& lhs, signed long long rhs) { ushort2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort2 operator * (signed long long lhs, const ushort2& rhs) { ushort2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator + (const ushort3& lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator - (const ushort3& lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (const ushort3& lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator / (const ushort3& lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator % (const ushort3& lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator & (const ushort3& lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator | (const ushort3& lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator ^ (const ushort3& lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator << (const ushort3& lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator >> (const ushort3& lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline ushort3& operator += ( ushort3& lhs, const ushort3& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3& operator -= ( ushort3& lhs, const ushort3& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3& operator *= ( ushort3& lhs, const ushort3& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3& operator /= ( ushort3& lhs, const ushort3& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3& operator %= ( ushort3& lhs, const ushort3& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3& operator &= ( ushort3& lhs, const ushort3& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3& operator |= ( ushort3& lhs, const ushort3& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3& operator ^= ( ushort3& lhs, const ushort3& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3& operator <<= ( ushort3& lhs, const ushort3& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3& operator >>= ( ushort3& lhs, const ushort3& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline ushort3& operator ++ (ushort3& val) { ++ val.x; ++ val.y; ++ val.z; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3& operator -- (ushort3& val) { -- val.x; -- val.y; -- val.z; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator ++ (ushort3& val, int) { ushort3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x ++; val.y ++; val.z ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator -- (ushort3& val, int) { ushort3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x --; val.y --; val.z --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ushort3& lhs, ushort3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ushort3& lhs, ushort3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ushort3& lhs, const ushort3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ushort3& lhs, const ushort3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ushort3& lhs, ushort3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ushort3& lhs, ushort3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ushort3& lhs, const ushort3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ushort3& lhs, const ushort3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ushort3& lhs, ushort3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ushort3& lhs, ushort3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ushort3& lhs, const ushort3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ushort3& lhs, const ushort3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ushort3& lhs, ushort3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ushort3& lhs, ushort3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ushort3& lhs, const ushort3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ushort3& lhs, const ushort3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ushort3& lhs, ushort3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ushort3& lhs, ushort3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ushort3& lhs, const ushort3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ushort3& lhs, const ushort3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ushort3& lhs, ushort3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ushort3& lhs, ushort3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ushort3& lhs, const ushort3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ushort3& lhs, const ushort3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ushort3& lhs, ushort3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ushort3& lhs, ushort3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ushort3& lhs, const ushort3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ushort3& lhs, const ushort3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ushort3& lhs, ushort3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ushort3& lhs, ushort3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ushort3& lhs, const ushort3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ushort3& lhs, const ushort3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator ~(ushort3 &rhs) { ushort3 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (ushort3 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (const ushort3& lhs, unsigned char rhs) { ushort3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (unsigned char lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (const ushort3& lhs, signed char rhs) { ushort3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (signed char lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (const ushort3& lhs, unsigned short rhs) { ushort3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (unsigned short lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (const ushort3& lhs, signed short rhs) { ushort3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (signed short lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (const ushort3& lhs, unsigned int rhs) { ushort3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (unsigned int lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (const ushort3& lhs, signed int rhs) { ushort3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (signed int lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (const ushort3& lhs, float rhs) { ushort3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (float lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (const ushort3& lhs, unsigned long rhs) { ushort3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (unsigned long lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (const ushort3& lhs, signed long rhs) { ushort3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (signed long lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (const ushort3& lhs, double rhs) { ushort3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (double lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (const ushort3& lhs, unsigned long long rhs) { ushort3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (unsigned long long lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (const ushort3& lhs, signed long long rhs) { ushort3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort3 operator * (signed long long lhs, const ushort3& rhs) { ushort3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator + ( const ushort4& lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; ret.w = lhs.w + rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator - ( const ushort4& lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; ret.w = lhs.w - rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * ( const ushort4& lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; ret.w = lhs.w * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator / ( const ushort4& lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; ret.w = lhs.w / rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator % ( const ushort4& lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; ret.w = lhs.w % rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator & ( const ushort4& lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; ret.w = lhs.w & rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator | ( const ushort4& lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; ret.w = lhs.w | rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator ^ ( const ushort4& lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; ret.w = lhs.w ^ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator << ( const ushort4& lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; ret.w = lhs.w << rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator >> ( const ushort4& lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; ret.w = lhs.w >> rhs.w; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline ushort4& operator += ( ushort4& lhs, const ushort4& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; lhs.w += rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4& operator -= ( ushort4& lhs, const ushort4& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; lhs.w -= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4& operator *= ( ushort4& lhs, const ushort4& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; lhs.w *= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4& operator /= ( ushort4& lhs, const ushort4& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; lhs.w /= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4& operator %= ( ushort4& lhs, const ushort4& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; lhs.w %= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4& operator &= ( ushort4& lhs, const ushort4& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; lhs.w &= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4& operator |= ( ushort4& lhs, const ushort4& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; lhs.w |= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4& operator ^= ( ushort4& lhs, const ushort4& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; lhs.w ^= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4& operator <<= ( ushort4& lhs, const ushort4& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; lhs.w <<= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4& operator >>= ( ushort4& lhs, const ushort4& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; lhs.w >>= rhs.w; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline ushort4& operator ++ (ushort4& val) { ++ val.x; ++ val.y; ++ val.z; ++ val.w; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4& operator -- (ushort4& val) { -- val.x; -- val.y; -- val.z; -- val.w; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator ++ (ushort4& val, int) { ushort4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x ++; val.y ++; val.z ++; val.w ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator -- (ushort4& val, int) { ushort4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x --; val.y --; val.z --; val.w --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ushort4& lhs, ushort4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ushort4& lhs, ushort4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ushort4& lhs, const ushort4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ushort4& lhs, const ushort4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ushort4& lhs, ushort4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ushort4& lhs, ushort4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ushort4& lhs, const ushort4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ushort4& lhs, const ushort4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ushort4& lhs, ushort4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ushort4& lhs, ushort4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ushort4& lhs, const ushort4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ushort4& lhs, const ushort4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ushort4& lhs, ushort4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ushort4& lhs, ushort4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ushort4& lhs, const ushort4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ushort4& lhs, const ushort4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ushort4& lhs, ushort4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ushort4& lhs, ushort4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ushort4& lhs, const ushort4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ushort4& lhs, const ushort4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ushort4& lhs, ushort4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ushort4& lhs, ushort4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ushort4& lhs, const ushort4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ushort4& lhs, const ushort4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ushort4& lhs, ushort4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ushort4& lhs, ushort4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ushort4& lhs, const ushort4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ushort4& lhs, const ushort4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ushort4& lhs, ushort4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ushort4& lhs, ushort4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ushort4& lhs, const ushort4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ushort4& lhs, const ushort4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator ~(ushort4 &rhs) { ushort4 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; ret.w = ~ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (ushort4 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z) && (! rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (const ushort4& lhs, unsigned char rhs) { ushort4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (unsigned char lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (const ushort4& lhs, signed char rhs) { ushort4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (signed char lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (const ushort4& lhs, unsigned short rhs) { ushort4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (unsigned short lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (const ushort4& lhs, signed short rhs) { ushort4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (signed short lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (const ushort4& lhs, unsigned int rhs) { ushort4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (unsigned int lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (const ushort4& lhs, signed int rhs) { ushort4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (signed int lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (const ushort4& lhs, float rhs) { ushort4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (float lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (const ushort4& lhs, unsigned long rhs) { ushort4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (unsigned long lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (const ushort4& lhs, signed long rhs) { ushort4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (signed long lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (const ushort4& lhs, double rhs) { ushort4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (double lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (const ushort4& lhs, unsigned long long rhs) { ushort4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (unsigned long long lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (const ushort4& lhs, signed long long rhs) { ushort4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ushort4 operator * (signed long long lhs, const ushort4& rhs) { ushort4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline short1 operator + (const short1& lhs, const short1& rhs) { short1 ret; ret.x = lhs.x + rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator - (const short1& lhs, const short1& rhs) { short1 ret; ret.x = lhs.x - rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (const short1& lhs, const short1& rhs) { short1 ret; ret.x = lhs.x * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator / (const short1& lhs, const short1& rhs) { short1 ret; ret.x = lhs.x / rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator % (const short1& lhs, const short1& rhs) { short1 ret; ret.x = lhs.x % rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator & (const short1& lhs, const short1& rhs) { short1 ret; ret.x = lhs.x & rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator | (const short1& lhs, const short1& rhs) { short1 ret; ret.x = lhs.x | rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator ^ (const short1& lhs, const short1& rhs) { short1 ret; ret.x = lhs.x ^ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator << (const short1& lhs, const short1& rhs) { short1 ret; ret.x = lhs.x << rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator >> (const short1& lhs, const short1& rhs) { short1 ret; ret.x = lhs.x >> rhs.x; return ret; }


__attribute__((hc)) __attribute__((cpu)) static inline short1& operator += ( short1& lhs, const short1& rhs) { lhs.x += rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short1& operator -= ( short1& lhs, const short1& rhs) { lhs.x -= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short1& operator *= ( short1& lhs, const short1& rhs) { lhs.x *= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short1& operator /= ( short1& lhs, const short1& rhs) { lhs.x /= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short1& operator %= ( short1& lhs, const short1& rhs) { lhs.x %= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short1& operator &= ( short1& lhs, const short1& rhs) { lhs.x &= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short1& operator |= ( short1& lhs, const short1& rhs) { lhs.x |= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short1& operator ^= ( short1& lhs, const short1& rhs) { lhs.x ^= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short1& operator <<= ( short1& lhs, const short1& rhs) { lhs.x <<= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short1& operator >>= ( short1& lhs, const short1& rhs) { lhs.x >>= rhs.x; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline short1& operator ++ (short1& val) { ++ val.x; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline short1& operator -- (short1& val) { -- val.x; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline short1 operator ++ (short1& val, int) { short1 ret; ret.x = val.x; val.x ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator -- (short1& val, int) { short1 ret; ret.x = val.x; val.x --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (short1& lhs, short1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const short1& lhs, short1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (short1& lhs, const short1& rhs) { return lhs.x == rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const short1& lhs, const short1& rhs) { return lhs.x == rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (short1& lhs, short1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const short1& lhs, short1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (short1& lhs, const short1& rhs) { return lhs.x != rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const short1& lhs, const short1& rhs) { return lhs.x != rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (short1& lhs, short1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const short1& lhs, short1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (short1& lhs, const short1& rhs) { return lhs.x < rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const short1& lhs, const short1& rhs) { return lhs.x < rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (short1& lhs, short1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const short1& lhs, short1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (short1& lhs, const short1& rhs) { return lhs.x > rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const short1& lhs, const short1& rhs) { return lhs.x > rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (short1& lhs, short1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const short1& lhs, short1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (short1& lhs, const short1& rhs) { return lhs.x <= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const short1& lhs, const short1& rhs) { return lhs.x <= rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (short1& lhs, short1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const short1& lhs, short1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (short1& lhs, const short1& rhs) { return lhs.x >= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const short1& lhs, const short1& rhs) { return lhs.x >= rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (short1& lhs, short1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const short1& lhs, short1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (short1& lhs, const short1& rhs) { return lhs.x && rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const short1& lhs, const short1& rhs) { return lhs.x && rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (short1& lhs, short1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const short1& lhs, short1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (short1& lhs, const short1& rhs) { return lhs.x || rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const short1& lhs, const short1& rhs) { return lhs.x || rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline short1 operator ~(short1& rhs) { short1 ret; ret.x = ~ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (short1& rhs) { return ! rhs.x; }

__attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (const short1& lhs, unsigned char rhs) { short1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (unsigned char lhs, const short1& rhs) { short1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (const short1& lhs, signed char rhs) { short1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (signed char lhs, const short1& rhs) { short1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (const short1& lhs, unsigned short rhs) { short1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (unsigned short lhs, const short1& rhs) { short1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (const short1& lhs, signed short rhs) { short1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (signed short lhs, const short1& rhs) { short1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (const short1& lhs, unsigned int rhs) { short1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (unsigned int lhs, const short1& rhs) { short1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (const short1& lhs, signed int rhs) { short1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (signed int lhs, const short1& rhs) { short1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (const short1& lhs, float rhs) { short1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (float lhs, const short1& rhs) { short1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (const short1& lhs, unsigned long rhs) { short1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (unsigned long lhs, const short1& rhs) { short1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (const short1& lhs, signed long rhs) { short1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (signed long lhs, const short1& rhs) { short1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (const short1& lhs, double rhs) { short1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (double lhs, const short1& rhs) { short1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (const short1& lhs, unsigned long long rhs) { short1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (unsigned long long lhs, const short1& rhs) { short1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (const short1& lhs, signed long long rhs) { short1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short1 operator * (signed long long lhs, const short1& rhs) { short1 ret; ret.x = lhs * rhs.x; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline short2 operator + (const short2& lhs, const short2& rhs) { short2 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator - (const short2& lhs, const short2& rhs) { short2 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (const short2& lhs, const short2& rhs) { short2 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator / (const short2& lhs, const short2& rhs) { short2 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator % (const short2& lhs, const short2& rhs) { short2 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator & (const short2& lhs, const short2& rhs) { short2 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator | (const short2& lhs, const short2& rhs) { short2 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator ^ (const short2& lhs, const short2& rhs) { short2 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator << (const short2& lhs, const short2& rhs) { short2 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator >> (const short2& lhs, const short2& rhs) { short2 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline short2& operator += ( short2& lhs, const short2& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short2& operator -= ( short2& lhs, const short2& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short2& operator *= ( short2& lhs, const short2& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short2& operator /= ( short2& lhs, const short2& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short2& operator %= ( short2& lhs, const short2& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short2& operator &= ( short2& lhs, const short2& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short2& operator |= ( short2& lhs, const short2& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short2& operator ^= ( short2& lhs, const short2& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short2& operator <<= ( short2& lhs, const short2& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short2& operator >>= ( short2& lhs, const short2& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline short2& operator ++ (short2& val) { ++ val.x; ++ val.y; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline short2& operator -- (short2& val) { -- val.x; -- val.y; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline short2 operator ++ (short2& val, int) { short2 ret; ret.x = val.x; ret.y = val.y; val.x ++; val.y ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator -- (short2& val, int) { short2 ret; ret.x = val.x; ret.y = val.y; val.x --; val.y --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (short2& lhs, short2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const short2& lhs, short2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (short2& lhs, const short2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const short2& lhs, const short2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (short2& lhs, short2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const short2& lhs, short2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (short2& lhs, const short2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const short2& lhs, const short2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (short2& lhs, short2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const short2& lhs, short2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (short2& lhs, const short2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const short2& lhs, const short2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (short2& lhs, short2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const short2& lhs, short2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (short2& lhs, const short2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const short2& lhs, const short2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (short2& lhs, short2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const short2& lhs, short2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (short2& lhs, const short2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const short2& lhs, const short2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (short2& lhs, short2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const short2& lhs, short2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (short2& lhs, const short2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const short2& lhs, const short2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (short2& lhs, short2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const short2& lhs, short2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (short2& lhs, const short2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const short2& lhs, const short2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (short2& lhs, short2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const short2& lhs, short2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (short2& lhs, const short2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const short2& lhs, const short2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline short2 operator ~(short2 &rhs) { short2 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (short2 &rhs) { return (! rhs.x) && (! rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (const short2& lhs, unsigned char rhs) { short2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (unsigned char lhs, const short2& rhs) { short2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (const short2& lhs, signed char rhs) { short2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (signed char lhs, const short2& rhs) { short2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (const short2& lhs, unsigned short rhs) { short2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (unsigned short lhs, const short2& rhs) { short2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (const short2& lhs, signed short rhs) { short2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (signed short lhs, const short2& rhs) { short2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (const short2& lhs, unsigned int rhs) { short2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (unsigned int lhs, const short2& rhs) { short2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (const short2& lhs, signed int rhs) { short2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (signed int lhs, const short2& rhs) { short2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (const short2& lhs, float rhs) { short2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (float lhs, const short2& rhs) { short2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (const short2& lhs, unsigned long rhs) { short2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (unsigned long lhs, const short2& rhs) { short2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (const short2& lhs, signed long rhs) { short2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (signed long lhs, const short2& rhs) { short2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (const short2& lhs, double rhs) { short2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (double lhs, const short2& rhs) { short2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (const short2& lhs, unsigned long long rhs) { short2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (unsigned long long lhs, const short2& rhs) { short2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (const short2& lhs, signed long long rhs) { short2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short2 operator * (signed long long lhs, const short2& rhs) { short2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline short3 operator + (const short3& lhs, const short3& rhs) { short3 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator - (const short3& lhs, const short3& rhs) { short3 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (const short3& lhs, const short3& rhs) { short3 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator / (const short3& lhs, const short3& rhs) { short3 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator % (const short3& lhs, const short3& rhs) { short3 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator & (const short3& lhs, const short3& rhs) { short3 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator | (const short3& lhs, const short3& rhs) { short3 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator ^ (const short3& lhs, const short3& rhs) { short3 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator << (const short3& lhs, const short3& rhs) { short3 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator >> (const short3& lhs, const short3& rhs) { short3 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline short3& operator += ( short3& lhs, const short3& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short3& operator -= ( short3& lhs, const short3& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short3& operator *= ( short3& lhs, const short3& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short3& operator /= ( short3& lhs, const short3& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short3& operator %= ( short3& lhs, const short3& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short3& operator &= ( short3& lhs, const short3& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short3& operator |= ( short3& lhs, const short3& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short3& operator ^= ( short3& lhs, const short3& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short3& operator <<= ( short3& lhs, const short3& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short3& operator >>= ( short3& lhs, const short3& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline short3& operator ++ (short3& val) { ++ val.x; ++ val.y; ++ val.z; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline short3& operator -- (short3& val) { -- val.x; -- val.y; -- val.z; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline short3 operator ++ (short3& val, int) { short3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x ++; val.y ++; val.z ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator -- (short3& val, int) { short3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x --; val.y --; val.z --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (short3& lhs, short3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const short3& lhs, short3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (short3& lhs, const short3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const short3& lhs, const short3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (short3& lhs, short3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const short3& lhs, short3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (short3& lhs, const short3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const short3& lhs, const short3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (short3& lhs, short3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const short3& lhs, short3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (short3& lhs, const short3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const short3& lhs, const short3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (short3& lhs, short3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const short3& lhs, short3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (short3& lhs, const short3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const short3& lhs, const short3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (short3& lhs, short3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const short3& lhs, short3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (short3& lhs, const short3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const short3& lhs, const short3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (short3& lhs, short3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const short3& lhs, short3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (short3& lhs, const short3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const short3& lhs, const short3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (short3& lhs, short3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const short3& lhs, short3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (short3& lhs, const short3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const short3& lhs, const short3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (short3& lhs, short3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const short3& lhs, short3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (short3& lhs, const short3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const short3& lhs, const short3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline short3 operator ~(short3 &rhs) { short3 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (short3 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (const short3& lhs, unsigned char rhs) { short3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (unsigned char lhs, const short3& rhs) { short3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (const short3& lhs, signed char rhs) { short3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (signed char lhs, const short3& rhs) { short3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (const short3& lhs, unsigned short rhs) { short3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (unsigned short lhs, const short3& rhs) { short3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (const short3& lhs, signed short rhs) { short3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (signed short lhs, const short3& rhs) { short3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (const short3& lhs, unsigned int rhs) { short3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (unsigned int lhs, const short3& rhs) { short3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (const short3& lhs, signed int rhs) { short3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (signed int lhs, const short3& rhs) { short3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (const short3& lhs, float rhs) { short3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (float lhs, const short3& rhs) { short3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (const short3& lhs, unsigned long rhs) { short3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (unsigned long lhs, const short3& rhs) { short3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (const short3& lhs, signed long rhs) { short3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (signed long lhs, const short3& rhs) { short3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (const short3& lhs, double rhs) { short3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (double lhs, const short3& rhs) { short3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (const short3& lhs, unsigned long long rhs) { short3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (unsigned long long lhs, const short3& rhs) { short3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (const short3& lhs, signed long long rhs) { short3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short3 operator * (signed long long lhs, const short3& rhs) { short3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline short4 operator + ( const short4& lhs, const short4& rhs) { short4 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; ret.w = lhs.w + rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator - ( const short4& lhs, const short4& rhs) { short4 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; ret.w = lhs.w - rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator * ( const short4& lhs, const short4& rhs) { short4 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; ret.w = lhs.w * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator / ( const short4& lhs, const short4& rhs) { short4 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; ret.w = lhs.w / rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator % ( const short4& lhs, const short4& rhs) { short4 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; ret.w = lhs.w % rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator & ( const short4& lhs, const short4& rhs) { short4 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; ret.w = lhs.w & rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator | ( const short4& lhs, const short4& rhs) { short4 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; ret.w = lhs.w | rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator ^ ( const short4& lhs, const short4& rhs) { short4 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; ret.w = lhs.w ^ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator << ( const short4& lhs, const short4& rhs) { short4 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; ret.w = lhs.w << rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator >> ( const short4& lhs, const short4& rhs) { short4 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; ret.w = lhs.w >> rhs.w; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline short4& operator += ( short4& lhs, const short4& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; lhs.w += rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short4& operator -= ( short4& lhs, const short4& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; lhs.w -= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short4& operator *= ( short4& lhs, const short4& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; lhs.w *= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short4& operator /= ( short4& lhs, const short4& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; lhs.w /= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short4& operator %= ( short4& lhs, const short4& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; lhs.w %= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short4& operator &= ( short4& lhs, const short4& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; lhs.w &= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short4& operator |= ( short4& lhs, const short4& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; lhs.w |= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short4& operator ^= ( short4& lhs, const short4& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; lhs.w ^= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short4& operator <<= ( short4& lhs, const short4& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; lhs.w <<= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline short4& operator >>= ( short4& lhs, const short4& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; lhs.w >>= rhs.w; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline short4& operator ++ (short4& val) { ++ val.x; ++ val.y; ++ val.z; ++ val.w; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline short4& operator -- (short4& val) { -- val.x; -- val.y; -- val.z; -- val.w; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline short4 operator ++ (short4& val, int) { short4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x ++; val.y ++; val.z ++; val.w ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator -- (short4& val, int) { short4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x --; val.y --; val.z --; val.w --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (short4& lhs, short4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const short4& lhs, short4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (short4& lhs, const short4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const short4& lhs, const short4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (short4& lhs, short4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const short4& lhs, short4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (short4& lhs, const short4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const short4& lhs, const short4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (short4& lhs, short4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const short4& lhs, short4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (short4& lhs, const short4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const short4& lhs, const short4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (short4& lhs, short4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const short4& lhs, short4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (short4& lhs, const short4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const short4& lhs, const short4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (short4& lhs, short4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const short4& lhs, short4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (short4& lhs, const short4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const short4& lhs, const short4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (short4& lhs, short4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const short4& lhs, short4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (short4& lhs, const short4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const short4& lhs, const short4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (short4& lhs, short4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const short4& lhs, short4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (short4& lhs, const short4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const short4& lhs, const short4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (short4& lhs, short4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const short4& lhs, short4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (short4& lhs, const short4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const short4& lhs, const short4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline short4 operator ~(short4 &rhs) { short4 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; ret.w = ~ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (short4 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z) && (! rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (const short4& lhs, unsigned char rhs) { short4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (unsigned char lhs, const short4& rhs) { short4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (const short4& lhs, signed char rhs) { short4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (signed char lhs, const short4& rhs) { short4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (const short4& lhs, unsigned short rhs) { short4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (unsigned short lhs, const short4& rhs) { short4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (const short4& lhs, signed short rhs) { short4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (signed short lhs, const short4& rhs) { short4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (const short4& lhs, unsigned int rhs) { short4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (unsigned int lhs, const short4& rhs) { short4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (const short4& lhs, signed int rhs) { short4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (signed int lhs, const short4& rhs) { short4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (const short4& lhs, float rhs) { short4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (float lhs, const short4& rhs) { short4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (const short4& lhs, unsigned long rhs) { short4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (unsigned long lhs, const short4& rhs) { short4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (const short4& lhs, signed long rhs) { short4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (signed long lhs, const short4& rhs) { short4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (const short4& lhs, double rhs) { short4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (double lhs, const short4& rhs) { short4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (const short4& lhs, unsigned long long rhs) { short4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (unsigned long long lhs, const short4& rhs) { short4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (const short4& lhs, signed long long rhs) { short4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline short4 operator * (signed long long lhs, const short4& rhs) { short4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator + (const uint1& lhs, const uint1& rhs) { uint1 ret; ret.x = lhs.x + rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator - (const uint1& lhs, const uint1& rhs) { uint1 ret; ret.x = lhs.x - rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (const uint1& lhs, const uint1& rhs) { uint1 ret; ret.x = lhs.x * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator / (const uint1& lhs, const uint1& rhs) { uint1 ret; ret.x = lhs.x / rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator % (const uint1& lhs, const uint1& rhs) { uint1 ret; ret.x = lhs.x % rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator & (const uint1& lhs, const uint1& rhs) { uint1 ret; ret.x = lhs.x & rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator | (const uint1& lhs, const uint1& rhs) { uint1 ret; ret.x = lhs.x | rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator ^ (const uint1& lhs, const uint1& rhs) { uint1 ret; ret.x = lhs.x ^ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator << (const uint1& lhs, const uint1& rhs) { uint1 ret; ret.x = lhs.x << rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator >> (const uint1& lhs, const uint1& rhs) { uint1 ret; ret.x = lhs.x >> rhs.x; return ret; }


__attribute__((hc)) __attribute__((cpu)) static inline uint1& operator += ( uint1& lhs, const uint1& rhs) { lhs.x += rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1& operator -= ( uint1& lhs, const uint1& rhs) { lhs.x -= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1& operator *= ( uint1& lhs, const uint1& rhs) { lhs.x *= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1& operator /= ( uint1& lhs, const uint1& rhs) { lhs.x /= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1& operator %= ( uint1& lhs, const uint1& rhs) { lhs.x %= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1& operator &= ( uint1& lhs, const uint1& rhs) { lhs.x &= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1& operator |= ( uint1& lhs, const uint1& rhs) { lhs.x |= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1& operator ^= ( uint1& lhs, const uint1& rhs) { lhs.x ^= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1& operator <<= ( uint1& lhs, const uint1& rhs) { lhs.x <<= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1& operator >>= ( uint1& lhs, const uint1& rhs) { lhs.x >>= rhs.x; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline uint1& operator ++ (uint1& val) { ++ val.x; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1& operator -- (uint1& val) { -- val.x; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator ++ (uint1& val, int) { uint1 ret; ret.x = val.x; val.x ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator -- (uint1& val, int) { uint1 ret; ret.x = val.x; val.x --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uint1& lhs, uint1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uint1& lhs, uint1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uint1& lhs, const uint1& rhs) { return lhs.x == rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uint1& lhs, const uint1& rhs) { return lhs.x == rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uint1& lhs, uint1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uint1& lhs, uint1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uint1& lhs, const uint1& rhs) { return lhs.x != rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uint1& lhs, const uint1& rhs) { return lhs.x != rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uint1& lhs, uint1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uint1& lhs, uint1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uint1& lhs, const uint1& rhs) { return lhs.x < rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uint1& lhs, const uint1& rhs) { return lhs.x < rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uint1& lhs, uint1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uint1& lhs, uint1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uint1& lhs, const uint1& rhs) { return lhs.x > rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uint1& lhs, const uint1& rhs) { return lhs.x > rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uint1& lhs, uint1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uint1& lhs, uint1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uint1& lhs, const uint1& rhs) { return lhs.x <= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uint1& lhs, const uint1& rhs) { return lhs.x <= rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uint1& lhs, uint1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uint1& lhs, uint1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uint1& lhs, const uint1& rhs) { return lhs.x >= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uint1& lhs, const uint1& rhs) { return lhs.x >= rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uint1& lhs, uint1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uint1& lhs, uint1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uint1& lhs, const uint1& rhs) { return lhs.x && rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uint1& lhs, const uint1& rhs) { return lhs.x && rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uint1& lhs, uint1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uint1& lhs, uint1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uint1& lhs, const uint1& rhs) { return lhs.x || rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uint1& lhs, const uint1& rhs) { return lhs.x || rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator ~(uint1& rhs) { uint1 ret; ret.x = ~ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (uint1& rhs) { return ! rhs.x; }

__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (const uint1& lhs, unsigned char rhs) { uint1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (unsigned char lhs, const uint1& rhs) { uint1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (const uint1& lhs, signed char rhs) { uint1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (signed char lhs, const uint1& rhs) { uint1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (const uint1& lhs, unsigned short rhs) { uint1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (unsigned short lhs, const uint1& rhs) { uint1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (const uint1& lhs, signed short rhs) { uint1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (signed short lhs, const uint1& rhs) { uint1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (const uint1& lhs, unsigned int rhs) { uint1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (unsigned int lhs, const uint1& rhs) { uint1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (const uint1& lhs, signed int rhs) { uint1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (signed int lhs, const uint1& rhs) { uint1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (const uint1& lhs, float rhs) { uint1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (float lhs, const uint1& rhs) { uint1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (const uint1& lhs, unsigned long rhs) { uint1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (unsigned long lhs, const uint1& rhs) { uint1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (const uint1& lhs, signed long rhs) { uint1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (signed long lhs, const uint1& rhs) { uint1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (const uint1& lhs, double rhs) { uint1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (double lhs, const uint1& rhs) { uint1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (const uint1& lhs, unsigned long long rhs) { uint1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (unsigned long long lhs, const uint1& rhs) { uint1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (const uint1& lhs, signed long long rhs) { uint1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint1 operator * (signed long long lhs, const uint1& rhs) { uint1 ret; ret.x = lhs * rhs.x; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator + (const uint2& lhs, const uint2& rhs) { uint2 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator - (const uint2& lhs, const uint2& rhs) { uint2 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (const uint2& lhs, const uint2& rhs) { uint2 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator / (const uint2& lhs, const uint2& rhs) { uint2 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator % (const uint2& lhs, const uint2& rhs) { uint2 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator & (const uint2& lhs, const uint2& rhs) { uint2 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator | (const uint2& lhs, const uint2& rhs) { uint2 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator ^ (const uint2& lhs, const uint2& rhs) { uint2 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator << (const uint2& lhs, const uint2& rhs) { uint2 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator >> (const uint2& lhs, const uint2& rhs) { uint2 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline uint2& operator += ( uint2& lhs, const uint2& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2& operator -= ( uint2& lhs, const uint2& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2& operator *= ( uint2& lhs, const uint2& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2& operator /= ( uint2& lhs, const uint2& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2& operator %= ( uint2& lhs, const uint2& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2& operator &= ( uint2& lhs, const uint2& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2& operator |= ( uint2& lhs, const uint2& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2& operator ^= ( uint2& lhs, const uint2& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2& operator <<= ( uint2& lhs, const uint2& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2& operator >>= ( uint2& lhs, const uint2& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline uint2& operator ++ (uint2& val) { ++ val.x; ++ val.y; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2& operator -- (uint2& val) { -- val.x; -- val.y; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator ++ (uint2& val, int) { uint2 ret; ret.x = val.x; ret.y = val.y; val.x ++; val.y ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator -- (uint2& val, int) { uint2 ret; ret.x = val.x; ret.y = val.y; val.x --; val.y --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uint2& lhs, uint2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uint2& lhs, uint2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uint2& lhs, const uint2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uint2& lhs, const uint2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uint2& lhs, uint2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uint2& lhs, uint2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uint2& lhs, const uint2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uint2& lhs, const uint2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uint2& lhs, uint2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uint2& lhs, uint2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uint2& lhs, const uint2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uint2& lhs, const uint2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uint2& lhs, uint2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uint2& lhs, uint2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uint2& lhs, const uint2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uint2& lhs, const uint2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uint2& lhs, uint2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uint2& lhs, uint2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uint2& lhs, const uint2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uint2& lhs, const uint2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uint2& lhs, uint2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uint2& lhs, uint2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uint2& lhs, const uint2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uint2& lhs, const uint2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uint2& lhs, uint2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uint2& lhs, uint2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uint2& lhs, const uint2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uint2& lhs, const uint2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uint2& lhs, uint2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uint2& lhs, uint2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uint2& lhs, const uint2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uint2& lhs, const uint2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator ~(uint2 &rhs) { uint2 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (uint2 &rhs) { return (! rhs.x) && (! rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (const uint2& lhs, unsigned char rhs) { uint2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (unsigned char lhs, const uint2& rhs) { uint2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (const uint2& lhs, signed char rhs) { uint2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (signed char lhs, const uint2& rhs) { uint2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (const uint2& lhs, unsigned short rhs) { uint2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (unsigned short lhs, const uint2& rhs) { uint2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (const uint2& lhs, signed short rhs) { uint2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (signed short lhs, const uint2& rhs) { uint2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (const uint2& lhs, unsigned int rhs) { uint2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (unsigned int lhs, const uint2& rhs) { uint2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (const uint2& lhs, signed int rhs) { uint2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (signed int lhs, const uint2& rhs) { uint2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (const uint2& lhs, float rhs) { uint2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (float lhs, const uint2& rhs) { uint2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (const uint2& lhs, unsigned long rhs) { uint2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (unsigned long lhs, const uint2& rhs) { uint2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (const uint2& lhs, signed long rhs) { uint2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (signed long lhs, const uint2& rhs) { uint2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (const uint2& lhs, double rhs) { uint2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (double lhs, const uint2& rhs) { uint2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (const uint2& lhs, unsigned long long rhs) { uint2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (unsigned long long lhs, const uint2& rhs) { uint2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (const uint2& lhs, signed long long rhs) { uint2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint2 operator * (signed long long lhs, const uint2& rhs) { uint2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator + (const uint3& lhs, const uint3& rhs) { uint3 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator - (const uint3& lhs, const uint3& rhs) { uint3 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (const uint3& lhs, const uint3& rhs) { uint3 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator / (const uint3& lhs, const uint3& rhs) { uint3 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator % (const uint3& lhs, const uint3& rhs) { uint3 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator & (const uint3& lhs, const uint3& rhs) { uint3 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator | (const uint3& lhs, const uint3& rhs) { uint3 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator ^ (const uint3& lhs, const uint3& rhs) { uint3 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator << (const uint3& lhs, const uint3& rhs) { uint3 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator >> (const uint3& lhs, const uint3& rhs) { uint3 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline uint3& operator += ( uint3& lhs, const uint3& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3& operator -= ( uint3& lhs, const uint3& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3& operator *= ( uint3& lhs, const uint3& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3& operator /= ( uint3& lhs, const uint3& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3& operator %= ( uint3& lhs, const uint3& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3& operator &= ( uint3& lhs, const uint3& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3& operator |= ( uint3& lhs, const uint3& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3& operator ^= ( uint3& lhs, const uint3& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3& operator <<= ( uint3& lhs, const uint3& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3& operator >>= ( uint3& lhs, const uint3& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline uint3& operator ++ (uint3& val) { ++ val.x; ++ val.y; ++ val.z; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3& operator -- (uint3& val) { -- val.x; -- val.y; -- val.z; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator ++ (uint3& val, int) { uint3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x ++; val.y ++; val.z ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator -- (uint3& val, int) { uint3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x --; val.y --; val.z --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uint3& lhs, uint3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uint3& lhs, uint3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uint3& lhs, const uint3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uint3& lhs, const uint3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uint3& lhs, uint3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uint3& lhs, uint3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uint3& lhs, const uint3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uint3& lhs, const uint3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uint3& lhs, uint3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uint3& lhs, uint3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uint3& lhs, const uint3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uint3& lhs, const uint3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uint3& lhs, uint3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uint3& lhs, uint3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uint3& lhs, const uint3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uint3& lhs, const uint3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uint3& lhs, uint3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uint3& lhs, uint3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uint3& lhs, const uint3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uint3& lhs, const uint3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uint3& lhs, uint3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uint3& lhs, uint3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uint3& lhs, const uint3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uint3& lhs, const uint3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uint3& lhs, uint3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uint3& lhs, uint3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uint3& lhs, const uint3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uint3& lhs, const uint3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uint3& lhs, uint3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uint3& lhs, uint3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uint3& lhs, const uint3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uint3& lhs, const uint3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator ~(uint3 &rhs) { uint3 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (uint3 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (const uint3& lhs, unsigned char rhs) { uint3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (unsigned char lhs, const uint3& rhs) { uint3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (const uint3& lhs, signed char rhs) { uint3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (signed char lhs, const uint3& rhs) { uint3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (const uint3& lhs, unsigned short rhs) { uint3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (unsigned short lhs, const uint3& rhs) { uint3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (const uint3& lhs, signed short rhs) { uint3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (signed short lhs, const uint3& rhs) { uint3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (const uint3& lhs, unsigned int rhs) { uint3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (unsigned int lhs, const uint3& rhs) { uint3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (const uint3& lhs, signed int rhs) { uint3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (signed int lhs, const uint3& rhs) { uint3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (const uint3& lhs, float rhs) { uint3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (float lhs, const uint3& rhs) { uint3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (const uint3& lhs, unsigned long rhs) { uint3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (unsigned long lhs, const uint3& rhs) { uint3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (const uint3& lhs, signed long rhs) { uint3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (signed long lhs, const uint3& rhs) { uint3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (const uint3& lhs, double rhs) { uint3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (double lhs, const uint3& rhs) { uint3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (const uint3& lhs, unsigned long long rhs) { uint3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (unsigned long long lhs, const uint3& rhs) { uint3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (const uint3& lhs, signed long long rhs) { uint3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint3 operator * (signed long long lhs, const uint3& rhs) { uint3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator + ( const uint4& lhs, const uint4& rhs) { uint4 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; ret.w = lhs.w + rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator - ( const uint4& lhs, const uint4& rhs) { uint4 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; ret.w = lhs.w - rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * ( const uint4& lhs, const uint4& rhs) { uint4 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; ret.w = lhs.w * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator / ( const uint4& lhs, const uint4& rhs) { uint4 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; ret.w = lhs.w / rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator % ( const uint4& lhs, const uint4& rhs) { uint4 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; ret.w = lhs.w % rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator & ( const uint4& lhs, const uint4& rhs) { uint4 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; ret.w = lhs.w & rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator | ( const uint4& lhs, const uint4& rhs) { uint4 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; ret.w = lhs.w | rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator ^ ( const uint4& lhs, const uint4& rhs) { uint4 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; ret.w = lhs.w ^ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator << ( const uint4& lhs, const uint4& rhs) { uint4 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; ret.w = lhs.w << rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator >> ( const uint4& lhs, const uint4& rhs) { uint4 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; ret.w = lhs.w >> rhs.w; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline uint4& operator += ( uint4& lhs, const uint4& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; lhs.w += rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4& operator -= ( uint4& lhs, const uint4& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; lhs.w -= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4& operator *= ( uint4& lhs, const uint4& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; lhs.w *= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4& operator /= ( uint4& lhs, const uint4& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; lhs.w /= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4& operator %= ( uint4& lhs, const uint4& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; lhs.w %= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4& operator &= ( uint4& lhs, const uint4& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; lhs.w &= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4& operator |= ( uint4& lhs, const uint4& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; lhs.w |= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4& operator ^= ( uint4& lhs, const uint4& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; lhs.w ^= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4& operator <<= ( uint4& lhs, const uint4& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; lhs.w <<= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4& operator >>= ( uint4& lhs, const uint4& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; lhs.w >>= rhs.w; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline uint4& operator ++ (uint4& val) { ++ val.x; ++ val.y; ++ val.z; ++ val.w; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4& operator -- (uint4& val) { -- val.x; -- val.y; -- val.z; -- val.w; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator ++ (uint4& val, int) { uint4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x ++; val.y ++; val.z ++; val.w ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator -- (uint4& val, int) { uint4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x --; val.y --; val.z --; val.w --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uint4& lhs, uint4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uint4& lhs, uint4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (uint4& lhs, const uint4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const uint4& lhs, const uint4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uint4& lhs, uint4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uint4& lhs, uint4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (uint4& lhs, const uint4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const uint4& lhs, const uint4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uint4& lhs, uint4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uint4& lhs, uint4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (uint4& lhs, const uint4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const uint4& lhs, const uint4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uint4& lhs, uint4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uint4& lhs, uint4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (uint4& lhs, const uint4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const uint4& lhs, const uint4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uint4& lhs, uint4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uint4& lhs, uint4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (uint4& lhs, const uint4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const uint4& lhs, const uint4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uint4& lhs, uint4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uint4& lhs, uint4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (uint4& lhs, const uint4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const uint4& lhs, const uint4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uint4& lhs, uint4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uint4& lhs, uint4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (uint4& lhs, const uint4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const uint4& lhs, const uint4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uint4& lhs, uint4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uint4& lhs, uint4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (uint4& lhs, const uint4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const uint4& lhs, const uint4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator ~(uint4 &rhs) { uint4 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; ret.w = ~ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (uint4 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z) && (! rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (const uint4& lhs, unsigned char rhs) { uint4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (unsigned char lhs, const uint4& rhs) { uint4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (const uint4& lhs, signed char rhs) { uint4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (signed char lhs, const uint4& rhs) { uint4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (const uint4& lhs, unsigned short rhs) { uint4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (unsigned short lhs, const uint4& rhs) { uint4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (const uint4& lhs, signed short rhs) { uint4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (signed short lhs, const uint4& rhs) { uint4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (const uint4& lhs, unsigned int rhs) { uint4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (unsigned int lhs, const uint4& rhs) { uint4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (const uint4& lhs, signed int rhs) { uint4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (signed int lhs, const uint4& rhs) { uint4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (const uint4& lhs, float rhs) { uint4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (float lhs, const uint4& rhs) { uint4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (const uint4& lhs, unsigned long rhs) { uint4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (unsigned long lhs, const uint4& rhs) { uint4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (const uint4& lhs, signed long rhs) { uint4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (signed long lhs, const uint4& rhs) { uint4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (const uint4& lhs, double rhs) { uint4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (double lhs, const uint4& rhs) { uint4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (const uint4& lhs, unsigned long long rhs) { uint4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (unsigned long long lhs, const uint4& rhs) { uint4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (const uint4& lhs, signed long long rhs) { uint4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline uint4 operator * (signed long long lhs, const uint4& rhs) { uint4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline int1 operator + (const int1& lhs, const int1& rhs) { int1 ret; ret.x = lhs.x + rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator - (const int1& lhs, const int1& rhs) { int1 ret; ret.x = lhs.x - rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (const int1& lhs, const int1& rhs) { int1 ret; ret.x = lhs.x * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator / (const int1& lhs, const int1& rhs) { int1 ret; ret.x = lhs.x / rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator % (const int1& lhs, const int1& rhs) { int1 ret; ret.x = lhs.x % rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator & (const int1& lhs, const int1& rhs) { int1 ret; ret.x = lhs.x & rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator | (const int1& lhs, const int1& rhs) { int1 ret; ret.x = lhs.x | rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator ^ (const int1& lhs, const int1& rhs) { int1 ret; ret.x = lhs.x ^ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator << (const int1& lhs, const int1& rhs) { int1 ret; ret.x = lhs.x << rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator >> (const int1& lhs, const int1& rhs) { int1 ret; ret.x = lhs.x >> rhs.x; return ret; }


__attribute__((hc)) __attribute__((cpu)) static inline int1& operator += ( int1& lhs, const int1& rhs) { lhs.x += rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int1& operator -= ( int1& lhs, const int1& rhs) { lhs.x -= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int1& operator *= ( int1& lhs, const int1& rhs) { lhs.x *= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int1& operator /= ( int1& lhs, const int1& rhs) { lhs.x /= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int1& operator %= ( int1& lhs, const int1& rhs) { lhs.x %= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int1& operator &= ( int1& lhs, const int1& rhs) { lhs.x &= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int1& operator |= ( int1& lhs, const int1& rhs) { lhs.x |= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int1& operator ^= ( int1& lhs, const int1& rhs) { lhs.x ^= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int1& operator <<= ( int1& lhs, const int1& rhs) { lhs.x <<= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int1& operator >>= ( int1& lhs, const int1& rhs) { lhs.x >>= rhs.x; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline int1& operator ++ (int1& val) { ++ val.x; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline int1& operator -- (int1& val) { -- val.x; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline int1 operator ++ (int1& val, int) { int1 ret; ret.x = val.x; val.x ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator -- (int1& val, int) { int1 ret; ret.x = val.x; val.x --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (int1& lhs, int1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const int1& lhs, int1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (int1& lhs, const int1& rhs) { return lhs.x == rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const int1& lhs, const int1& rhs) { return lhs.x == rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (int1& lhs, int1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const int1& lhs, int1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (int1& lhs, const int1& rhs) { return lhs.x != rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const int1& lhs, const int1& rhs) { return lhs.x != rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (int1& lhs, int1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const int1& lhs, int1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (int1& lhs, const int1& rhs) { return lhs.x < rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const int1& lhs, const int1& rhs) { return lhs.x < rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (int1& lhs, int1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const int1& lhs, int1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (int1& lhs, const int1& rhs) { return lhs.x > rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const int1& lhs, const int1& rhs) { return lhs.x > rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (int1& lhs, int1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const int1& lhs, int1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (int1& lhs, const int1& rhs) { return lhs.x <= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const int1& lhs, const int1& rhs) { return lhs.x <= rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (int1& lhs, int1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const int1& lhs, int1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (int1& lhs, const int1& rhs) { return lhs.x >= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const int1& lhs, const int1& rhs) { return lhs.x >= rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (int1& lhs, int1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const int1& lhs, int1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (int1& lhs, const int1& rhs) { return lhs.x && rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const int1& lhs, const int1& rhs) { return lhs.x && rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (int1& lhs, int1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const int1& lhs, int1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (int1& lhs, const int1& rhs) { return lhs.x || rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const int1& lhs, const int1& rhs) { return lhs.x || rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline int1 operator ~(int1& rhs) { int1 ret; ret.x = ~ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (int1& rhs) { return ! rhs.x; }

__attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (const int1& lhs, unsigned char rhs) { int1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (unsigned char lhs, const int1& rhs) { int1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (const int1& lhs, signed char rhs) { int1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (signed char lhs, const int1& rhs) { int1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (const int1& lhs, unsigned short rhs) { int1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (unsigned short lhs, const int1& rhs) { int1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (const int1& lhs, signed short rhs) { int1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (signed short lhs, const int1& rhs) { int1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (const int1& lhs, unsigned int rhs) { int1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (unsigned int lhs, const int1& rhs) { int1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (const int1& lhs, signed int rhs) { int1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (signed int lhs, const int1& rhs) { int1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (const int1& lhs, float rhs) { int1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (float lhs, const int1& rhs) { int1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (const int1& lhs, unsigned long rhs) { int1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (unsigned long lhs, const int1& rhs) { int1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (const int1& lhs, signed long rhs) { int1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (signed long lhs, const int1& rhs) { int1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (const int1& lhs, double rhs) { int1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (double lhs, const int1& rhs) { int1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (const int1& lhs, unsigned long long rhs) { int1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (unsigned long long lhs, const int1& rhs) { int1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (const int1& lhs, signed long long rhs) { int1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int1 operator * (signed long long lhs, const int1& rhs) { int1 ret; ret.x = lhs * rhs.x; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline int2 operator + (const int2& lhs, const int2& rhs) { int2 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator - (const int2& lhs, const int2& rhs) { int2 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (const int2& lhs, const int2& rhs) { int2 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator / (const int2& lhs, const int2& rhs) { int2 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator % (const int2& lhs, const int2& rhs) { int2 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator & (const int2& lhs, const int2& rhs) { int2 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator | (const int2& lhs, const int2& rhs) { int2 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator ^ (const int2& lhs, const int2& rhs) { int2 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator << (const int2& lhs, const int2& rhs) { int2 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator >> (const int2& lhs, const int2& rhs) { int2 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline int2& operator += ( int2& lhs, const int2& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int2& operator -= ( int2& lhs, const int2& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int2& operator *= ( int2& lhs, const int2& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int2& operator /= ( int2& lhs, const int2& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int2& operator %= ( int2& lhs, const int2& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int2& operator &= ( int2& lhs, const int2& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int2& operator |= ( int2& lhs, const int2& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int2& operator ^= ( int2& lhs, const int2& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int2& operator <<= ( int2& lhs, const int2& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int2& operator >>= ( int2& lhs, const int2& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline int2& operator ++ (int2& val) { ++ val.x; ++ val.y; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline int2& operator -- (int2& val) { -- val.x; -- val.y; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline int2 operator ++ (int2& val, int) { int2 ret; ret.x = val.x; ret.y = val.y; val.x ++; val.y ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator -- (int2& val, int) { int2 ret; ret.x = val.x; ret.y = val.y; val.x --; val.y --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (int2& lhs, int2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const int2& lhs, int2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (int2& lhs, const int2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const int2& lhs, const int2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (int2& lhs, int2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const int2& lhs, int2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (int2& lhs, const int2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const int2& lhs, const int2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (int2& lhs, int2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const int2& lhs, int2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (int2& lhs, const int2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const int2& lhs, const int2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (int2& lhs, int2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const int2& lhs, int2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (int2& lhs, const int2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const int2& lhs, const int2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (int2& lhs, int2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const int2& lhs, int2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (int2& lhs, const int2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const int2& lhs, const int2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (int2& lhs, int2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const int2& lhs, int2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (int2& lhs, const int2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const int2& lhs, const int2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (int2& lhs, int2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const int2& lhs, int2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (int2& lhs, const int2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const int2& lhs, const int2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (int2& lhs, int2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const int2& lhs, int2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (int2& lhs, const int2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const int2& lhs, const int2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline int2 operator ~(int2 &rhs) { int2 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (int2 &rhs) { return (! rhs.x) && (! rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (const int2& lhs, unsigned char rhs) { int2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (unsigned char lhs, const int2& rhs) { int2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (const int2& lhs, signed char rhs) { int2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (signed char lhs, const int2& rhs) { int2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (const int2& lhs, unsigned short rhs) { int2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (unsigned short lhs, const int2& rhs) { int2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (const int2& lhs, signed short rhs) { int2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (signed short lhs, const int2& rhs) { int2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (const int2& lhs, unsigned int rhs) { int2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (unsigned int lhs, const int2& rhs) { int2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (const int2& lhs, signed int rhs) { int2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (signed int lhs, const int2& rhs) { int2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (const int2& lhs, float rhs) { int2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (float lhs, const int2& rhs) { int2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (const int2& lhs, unsigned long rhs) { int2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (unsigned long lhs, const int2& rhs) { int2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (const int2& lhs, signed long rhs) { int2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (signed long lhs, const int2& rhs) { int2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (const int2& lhs, double rhs) { int2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (double lhs, const int2& rhs) { int2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (const int2& lhs, unsigned long long rhs) { int2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (unsigned long long lhs, const int2& rhs) { int2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (const int2& lhs, signed long long rhs) { int2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int2 operator * (signed long long lhs, const int2& rhs) { int2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline int3 operator + (const int3& lhs, const int3& rhs) { int3 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator - (const int3& lhs, const int3& rhs) { int3 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (const int3& lhs, const int3& rhs) { int3 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator / (const int3& lhs, const int3& rhs) { int3 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator % (const int3& lhs, const int3& rhs) { int3 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator & (const int3& lhs, const int3& rhs) { int3 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator | (const int3& lhs, const int3& rhs) { int3 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator ^ (const int3& lhs, const int3& rhs) { int3 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator << (const int3& lhs, const int3& rhs) { int3 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator >> (const int3& lhs, const int3& rhs) { int3 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline int3& operator += ( int3& lhs, const int3& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int3& operator -= ( int3& lhs, const int3& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int3& operator *= ( int3& lhs, const int3& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int3& operator /= ( int3& lhs, const int3& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int3& operator %= ( int3& lhs, const int3& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int3& operator &= ( int3& lhs, const int3& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int3& operator |= ( int3& lhs, const int3& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int3& operator ^= ( int3& lhs, const int3& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int3& operator <<= ( int3& lhs, const int3& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int3& operator >>= ( int3& lhs, const int3& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline int3& operator ++ (int3& val) { ++ val.x; ++ val.y; ++ val.z; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline int3& operator -- (int3& val) { -- val.x; -- val.y; -- val.z; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline int3 operator ++ (int3& val, int) { int3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x ++; val.y ++; val.z ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator -- (int3& val, int) { int3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x --; val.y --; val.z --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (int3& lhs, int3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const int3& lhs, int3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (int3& lhs, const int3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const int3& lhs, const int3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (int3& lhs, int3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const int3& lhs, int3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (int3& lhs, const int3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const int3& lhs, const int3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (int3& lhs, int3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const int3& lhs, int3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (int3& lhs, const int3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const int3& lhs, const int3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (int3& lhs, int3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const int3& lhs, int3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (int3& lhs, const int3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const int3& lhs, const int3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (int3& lhs, int3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const int3& lhs, int3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (int3& lhs, const int3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const int3& lhs, const int3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (int3& lhs, int3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const int3& lhs, int3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (int3& lhs, const int3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const int3& lhs, const int3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (int3& lhs, int3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const int3& lhs, int3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (int3& lhs, const int3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const int3& lhs, const int3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (int3& lhs, int3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const int3& lhs, int3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (int3& lhs, const int3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const int3& lhs, const int3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline int3 operator ~(int3 &rhs) { int3 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (int3 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (const int3& lhs, unsigned char rhs) { int3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (unsigned char lhs, const int3& rhs) { int3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (const int3& lhs, signed char rhs) { int3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (signed char lhs, const int3& rhs) { int3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (const int3& lhs, unsigned short rhs) { int3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (unsigned short lhs, const int3& rhs) { int3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (const int3& lhs, signed short rhs) { int3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (signed short lhs, const int3& rhs) { int3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (const int3& lhs, unsigned int rhs) { int3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (unsigned int lhs, const int3& rhs) { int3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (const int3& lhs, signed int rhs) { int3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (signed int lhs, const int3& rhs) { int3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (const int3& lhs, float rhs) { int3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (float lhs, const int3& rhs) { int3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (const int3& lhs, unsigned long rhs) { int3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (unsigned long lhs, const int3& rhs) { int3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (const int3& lhs, signed long rhs) { int3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (signed long lhs, const int3& rhs) { int3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (const int3& lhs, double rhs) { int3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (double lhs, const int3& rhs) { int3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (const int3& lhs, unsigned long long rhs) { int3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (unsigned long long lhs, const int3& rhs) { int3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (const int3& lhs, signed long long rhs) { int3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int3 operator * (signed long long lhs, const int3& rhs) { int3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline int4 operator + ( const int4& lhs, const int4& rhs) { int4 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; ret.w = lhs.w + rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator - ( const int4& lhs, const int4& rhs) { int4 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; ret.w = lhs.w - rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator * ( const int4& lhs, const int4& rhs) { int4 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; ret.w = lhs.w * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator / ( const int4& lhs, const int4& rhs) { int4 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; ret.w = lhs.w / rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator % ( const int4& lhs, const int4& rhs) { int4 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; ret.w = lhs.w % rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator & ( const int4& lhs, const int4& rhs) { int4 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; ret.w = lhs.w & rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator | ( const int4& lhs, const int4& rhs) { int4 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; ret.w = lhs.w | rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator ^ ( const int4& lhs, const int4& rhs) { int4 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; ret.w = lhs.w ^ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator << ( const int4& lhs, const int4& rhs) { int4 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; ret.w = lhs.w << rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator >> ( const int4& lhs, const int4& rhs) { int4 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; ret.w = lhs.w >> rhs.w; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline int4& operator += ( int4& lhs, const int4& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; lhs.w += rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int4& operator -= ( int4& lhs, const int4& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; lhs.w -= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int4& operator *= ( int4& lhs, const int4& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; lhs.w *= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int4& operator /= ( int4& lhs, const int4& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; lhs.w /= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int4& operator %= ( int4& lhs, const int4& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; lhs.w %= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int4& operator &= ( int4& lhs, const int4& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; lhs.w &= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int4& operator |= ( int4& lhs, const int4& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; lhs.w |= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int4& operator ^= ( int4& lhs, const int4& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; lhs.w ^= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int4& operator <<= ( int4& lhs, const int4& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; lhs.w <<= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline int4& operator >>= ( int4& lhs, const int4& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; lhs.w >>= rhs.w; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline int4& operator ++ (int4& val) { ++ val.x; ++ val.y; ++ val.z; ++ val.w; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline int4& operator -- (int4& val) { -- val.x; -- val.y; -- val.z; -- val.w; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline int4 operator ++ (int4& val, int) { int4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x ++; val.y ++; val.z ++; val.w ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator -- (int4& val, int) { int4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x --; val.y --; val.z --; val.w --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (int4& lhs, int4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const int4& lhs, int4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (int4& lhs, const int4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const int4& lhs, const int4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (int4& lhs, int4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const int4& lhs, int4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (int4& lhs, const int4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const int4& lhs, const int4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (int4& lhs, int4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const int4& lhs, int4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (int4& lhs, const int4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const int4& lhs, const int4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (int4& lhs, int4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const int4& lhs, int4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (int4& lhs, const int4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const int4& lhs, const int4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (int4& lhs, int4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const int4& lhs, int4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (int4& lhs, const int4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const int4& lhs, const int4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (int4& lhs, int4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const int4& lhs, int4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (int4& lhs, const int4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const int4& lhs, const int4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (int4& lhs, int4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const int4& lhs, int4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (int4& lhs, const int4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const int4& lhs, const int4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (int4& lhs, int4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const int4& lhs, int4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (int4& lhs, const int4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const int4& lhs, const int4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline int4 operator ~(int4 &rhs) { int4 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; ret.w = ~ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (int4 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z) && (! rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (const int4& lhs, unsigned char rhs) { int4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (unsigned char lhs, const int4& rhs) { int4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (const int4& lhs, signed char rhs) { int4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (signed char lhs, const int4& rhs) { int4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (const int4& lhs, unsigned short rhs) { int4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (unsigned short lhs, const int4& rhs) { int4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (const int4& lhs, signed short rhs) { int4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (signed short lhs, const int4& rhs) { int4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (const int4& lhs, unsigned int rhs) { int4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (unsigned int lhs, const int4& rhs) { int4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (const int4& lhs, signed int rhs) { int4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (signed int lhs, const int4& rhs) { int4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (const int4& lhs, float rhs) { int4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (float lhs, const int4& rhs) { int4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (const int4& lhs, unsigned long rhs) { int4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (unsigned long lhs, const int4& rhs) { int4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (const int4& lhs, signed long rhs) { int4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (signed long lhs, const int4& rhs) { int4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (const int4& lhs, double rhs) { int4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (double lhs, const int4& rhs) { int4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (const int4& lhs, unsigned long long rhs) { int4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (unsigned long long lhs, const int4& rhs) { int4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (const int4& lhs, signed long long rhs) { int4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline int4 operator * (signed long long lhs, const int4& rhs) { int4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline float1 operator + (const float1& lhs, const float1& rhs) { float1 ret; ret.x = lhs.x + rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator - (const float1& lhs, const float1& rhs) { float1 ret; ret.x = lhs.x - rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (const float1& lhs, const float1& rhs) { float1 ret; ret.x = lhs.x * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator / (const float1& lhs, const float1& rhs) { float1 ret; ret.x = lhs.x / rhs.x; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline float1& operator += ( float1& lhs, const float1& rhs) { lhs.x += rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline float1& operator -= ( float1& lhs, const float1& rhs) { lhs.x -= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline float1& operator *= ( float1& lhs, const float1& rhs) { lhs.x *= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline float1& operator /= ( float1& lhs, const float1& rhs) { lhs.x /= rhs.x; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline float1& operator ++ (float1& val) { ++ val.x; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline float1& operator -- (float1& val) { -- val.x; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline float1 operator ++ (float1& val, int) { float1 ret; ret.x = val.x; val.x ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator -- (float1& val, int) { float1 ret; ret.x = val.x; val.x --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (float1& lhs, float1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const float1& lhs, float1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (float1& lhs, const float1& rhs) { return lhs.x == rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const float1& lhs, const float1& rhs) { return lhs.x == rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (float1& lhs, float1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const float1& lhs, float1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (float1& lhs, const float1& rhs) { return lhs.x != rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const float1& lhs, const float1& rhs) { return lhs.x != rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (float1& lhs, float1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const float1& lhs, float1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (float1& lhs, const float1& rhs) { return lhs.x < rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const float1& lhs, const float1& rhs) { return lhs.x < rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (float1& lhs, float1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const float1& lhs, float1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (float1& lhs, const float1& rhs) { return lhs.x > rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const float1& lhs, const float1& rhs) { return lhs.x > rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (float1& lhs, float1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const float1& lhs, float1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (float1& lhs, const float1& rhs) { return lhs.x <= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const float1& lhs, const float1& rhs) { return lhs.x <= rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (float1& lhs, float1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const float1& lhs, float1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (float1& lhs, const float1& rhs) { return lhs.x >= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const float1& lhs, const float1& rhs) { return lhs.x >= rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (const float1& lhs, unsigned char rhs) { float1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (unsigned char lhs, const float1& rhs) { float1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (const float1& lhs, signed char rhs) { float1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (signed char lhs, const float1& rhs) { float1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (const float1& lhs, unsigned short rhs) { float1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (unsigned short lhs, const float1& rhs) { float1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (const float1& lhs, signed short rhs) { float1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (signed short lhs, const float1& rhs) { float1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (const float1& lhs, unsigned int rhs) { float1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (unsigned int lhs, const float1& rhs) { float1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (const float1& lhs, signed int rhs) { float1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (signed int lhs, const float1& rhs) { float1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (const float1& lhs, float rhs) { float1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (float lhs, const float1& rhs) { float1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (const float1& lhs, unsigned long rhs) { float1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (unsigned long lhs, const float1& rhs) { float1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (const float1& lhs, signed long rhs) { float1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (signed long lhs, const float1& rhs) { float1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (const float1& lhs, double rhs) { float1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (double lhs, const float1& rhs) { float1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (const float1& lhs, unsigned long long rhs) { float1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (unsigned long long lhs, const float1& rhs) { float1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (const float1& lhs, signed long long rhs) { float1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float1 operator * (signed long long lhs, const float1& rhs) { float1 ret; ret.x = lhs * rhs.x; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline float2 operator + (const float2& lhs, const float2& rhs) { float2 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator - (const float2& lhs, const float2& rhs) { float2 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (const float2& lhs, const float2& rhs) { float2 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator / (const float2& lhs, const float2& rhs) { float2 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline float2& operator += ( float2& lhs, const float2& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline float2& operator -= ( float2& lhs, const float2& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline float2& operator *= ( float2& lhs, const float2& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline float2& operator /= ( float2& lhs, const float2& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline float2& operator ++ (float2& val) { ++ val.x; ++ val.y; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline float2& operator -- (float2& val) { -- val.x; -- val.y; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline float2 operator ++ (float2& val, int) { float2 ret; ret.x = val.x; ret.y = val.y; val.x ++; val.y ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator -- (float2& val, int) { float2 ret; ret.x = val.x; ret.y = val.y; val.x --; val.y --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (float2& lhs, float2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const float2& lhs, float2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (float2& lhs, const float2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const float2& lhs, const float2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (float2& lhs, float2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const float2& lhs, float2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (float2& lhs, const float2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const float2& lhs, const float2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (float2& lhs, float2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const float2& lhs, float2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (float2& lhs, const float2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const float2& lhs, const float2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (float2& lhs, float2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const float2& lhs, float2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (float2& lhs, const float2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const float2& lhs, const float2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (float2& lhs, float2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const float2& lhs, float2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (float2& lhs, const float2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const float2& lhs, const float2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (float2& lhs, float2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const float2& lhs, float2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (float2& lhs, const float2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const float2& lhs, const float2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (const float2& lhs, unsigned char rhs) { float2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (unsigned char lhs, const float2& rhs) { float2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (const float2& lhs, signed char rhs) { float2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (signed char lhs, const float2& rhs) { float2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (const float2& lhs, unsigned short rhs) { float2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (unsigned short lhs, const float2& rhs) { float2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (const float2& lhs, signed short rhs) { float2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (signed short lhs, const float2& rhs) { float2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (const float2& lhs, unsigned int rhs) { float2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (unsigned int lhs, const float2& rhs) { float2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (const float2& lhs, signed int rhs) { float2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (signed int lhs, const float2& rhs) { float2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (const float2& lhs, float rhs) { float2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (float lhs, const float2& rhs) { float2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (const float2& lhs, unsigned long rhs) { float2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (unsigned long lhs, const float2& rhs) { float2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (const float2& lhs, signed long rhs) { float2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (signed long lhs, const float2& rhs) { float2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (const float2& lhs, double rhs) { float2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (double lhs, const float2& rhs) { float2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (const float2& lhs, unsigned long long rhs) { float2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (unsigned long long lhs, const float2& rhs) { float2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (const float2& lhs, signed long long rhs) { float2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float2 operator * (signed long long lhs, const float2& rhs) { float2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline float3 operator + (const float3& lhs, const float3& rhs) { float3 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator - (const float3& lhs, const float3& rhs) { float3 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (const float3& lhs, const float3& rhs) { float3 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator / (const float3& lhs, const float3& rhs) { float3 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline float3& operator += ( float3& lhs, const float3& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline float3& operator -= ( float3& lhs, const float3& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline float3& operator *= ( float3& lhs, const float3& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline float3& operator /= ( float3& lhs, const float3& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline float3& operator ++ (float3& val) { ++ val.x; ++ val.y; ++ val.z; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline float3& operator -- (float3& val) { -- val.x; -- val.y; -- val.z; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline float3 operator ++ (float3& val, int) { float3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x ++; val.y ++; val.z ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator -- (float3& val, int) { float3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x --; val.y --; val.z --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (float3& lhs, float3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const float3& lhs, float3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (float3& lhs, const float3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const float3& lhs, const float3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (float3& lhs, float3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const float3& lhs, float3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (float3& lhs, const float3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const float3& lhs, const float3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (float3& lhs, float3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const float3& lhs, float3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (float3& lhs, const float3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const float3& lhs, const float3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (float3& lhs, float3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const float3& lhs, float3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (float3& lhs, const float3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const float3& lhs, const float3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (float3& lhs, float3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const float3& lhs, float3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (float3& lhs, const float3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const float3& lhs, const float3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (float3& lhs, float3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const float3& lhs, float3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (float3& lhs, const float3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const float3& lhs, const float3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (const float3& lhs, unsigned char rhs) { float3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (unsigned char lhs, const float3& rhs) { float3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (const float3& lhs, signed char rhs) { float3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (signed char lhs, const float3& rhs) { float3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (const float3& lhs, unsigned short rhs) { float3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (unsigned short lhs, const float3& rhs) { float3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (const float3& lhs, signed short rhs) { float3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (signed short lhs, const float3& rhs) { float3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (const float3& lhs, unsigned int rhs) { float3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (unsigned int lhs, const float3& rhs) { float3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (const float3& lhs, signed int rhs) { float3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (signed int lhs, const float3& rhs) { float3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (const float3& lhs, float rhs) { float3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (float lhs, const float3& rhs) { float3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (const float3& lhs, unsigned long rhs) { float3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (unsigned long lhs, const float3& rhs) { float3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (const float3& lhs, signed long rhs) { float3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (signed long lhs, const float3& rhs) { float3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (const float3& lhs, double rhs) { float3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (double lhs, const float3& rhs) { float3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (const float3& lhs, unsigned long long rhs) { float3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (unsigned long long lhs, const float3& rhs) { float3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (const float3& lhs, signed long long rhs) { float3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float3 operator * (signed long long lhs, const float3& rhs) { float3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline float4 operator + ( const float4& lhs, const float4& rhs) { float4 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; ret.w = lhs.w + rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator - ( const float4& lhs, const float4& rhs) { float4 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; ret.w = lhs.w - rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator * ( const float4& lhs, const float4& rhs) { float4 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; ret.w = lhs.w * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator / ( const float4& lhs, const float4& rhs) { float4 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; ret.w = lhs.w / rhs.w; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline float4& operator += ( float4& lhs, const float4& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; lhs.w += rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline float4& operator -= ( float4& lhs, const float4& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; lhs.w -= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline float4& operator *= ( float4& lhs, const float4& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; lhs.w *= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline float4& operator /= ( float4& lhs, const float4& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; lhs.w /= rhs.w; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline float4& operator ++ (float4& val) { ++ val.x; ++ val.y; ++ val.z; ++ val.w; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline float4& operator -- (float4& val) { -- val.x; -- val.y; -- val.z; -- val.w; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline float4 operator ++ (float4& val, int) { float4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x ++; val.y ++; val.z ++; val.w ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator -- (float4& val, int) { float4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x --; val.y --; val.z --; val.w --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (float4& lhs, float4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const float4& lhs, float4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (float4& lhs, const float4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const float4& lhs, const float4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (float4& lhs, float4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const float4& lhs, float4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (float4& lhs, const float4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const float4& lhs, const float4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (float4& lhs, float4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const float4& lhs, float4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (float4& lhs, const float4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const float4& lhs, const float4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (float4& lhs, float4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const float4& lhs, float4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (float4& lhs, const float4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const float4& lhs, const float4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (float4& lhs, float4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const float4& lhs, float4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (float4& lhs, const float4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const float4& lhs, const float4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (float4& lhs, float4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const float4& lhs, float4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (float4& lhs, const float4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const float4& lhs, const float4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (const float4& lhs, unsigned char rhs) { float4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (unsigned char lhs, const float4& rhs) { float4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (const float4& lhs, signed char rhs) { float4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (signed char lhs, const float4& rhs) { float4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (const float4& lhs, unsigned short rhs) { float4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (unsigned short lhs, const float4& rhs) { float4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (const float4& lhs, signed short rhs) { float4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (signed short lhs, const float4& rhs) { float4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (const float4& lhs, unsigned int rhs) { float4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (unsigned int lhs, const float4& rhs) { float4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (const float4& lhs, signed int rhs) { float4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (signed int lhs, const float4& rhs) { float4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (const float4& lhs, float rhs) { float4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (float lhs, const float4& rhs) { float4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (const float4& lhs, unsigned long rhs) { float4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (unsigned long lhs, const float4& rhs) { float4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (const float4& lhs, signed long rhs) { float4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (signed long lhs, const float4& rhs) { float4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (const float4& lhs, double rhs) { float4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (double lhs, const float4& rhs) { float4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (const float4& lhs, unsigned long long rhs) { float4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (unsigned long long lhs, const float4& rhs) { float4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (const float4& lhs, signed long long rhs) { float4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline float4 operator * (signed long long lhs, const float4& rhs) { float4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline double1 operator + (const double1& lhs, const double1& rhs) { double1 ret; ret.x = lhs.x + rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator - (const double1& lhs, const double1& rhs) { double1 ret; ret.x = lhs.x - rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (const double1& lhs, const double1& rhs) { double1 ret; ret.x = lhs.x * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator / (const double1& lhs, const double1& rhs) { double1 ret; ret.x = lhs.x / rhs.x; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline double1& operator += ( double1& lhs, const double1& rhs) { lhs.x += rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline double1& operator -= ( double1& lhs, const double1& rhs) { lhs.x -= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline double1& operator *= ( double1& lhs, const double1& rhs) { lhs.x *= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline double1& operator /= ( double1& lhs, const double1& rhs) { lhs.x /= rhs.x; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline double1& operator ++ (double1& val) { ++ val.x; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline double1& operator -- (double1& val) { -- val.x; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline double1 operator ++ (double1& val, int) { double1 ret; ret.x = val.x; val.x ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator -- (double1& val, int) { double1 ret; ret.x = val.x; val.x --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (double1& lhs, double1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const double1& lhs, double1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (double1& lhs, const double1& rhs) { return lhs.x == rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const double1& lhs, const double1& rhs) { return lhs.x == rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (double1& lhs, double1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const double1& lhs, double1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (double1& lhs, const double1& rhs) { return lhs.x != rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const double1& lhs, const double1& rhs) { return lhs.x != rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (double1& lhs, double1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const double1& lhs, double1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (double1& lhs, const double1& rhs) { return lhs.x < rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const double1& lhs, const double1& rhs) { return lhs.x < rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (double1& lhs, double1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const double1& lhs, double1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (double1& lhs, const double1& rhs) { return lhs.x > rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const double1& lhs, const double1& rhs) { return lhs.x > rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (double1& lhs, double1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const double1& lhs, double1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (double1& lhs, const double1& rhs) { return lhs.x <= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const double1& lhs, const double1& rhs) { return lhs.x <= rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (double1& lhs, double1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const double1& lhs, double1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (double1& lhs, const double1& rhs) { return lhs.x >= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const double1& lhs, const double1& rhs) { return lhs.x >= rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (const double1& lhs, unsigned char rhs) { double1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (unsigned char lhs, const double1& rhs) { double1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (const double1& lhs, signed char rhs) { double1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (signed char lhs, const double1& rhs) { double1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (const double1& lhs, unsigned short rhs) { double1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (unsigned short lhs, const double1& rhs) { double1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (const double1& lhs, signed short rhs) { double1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (signed short lhs, const double1& rhs) { double1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (const double1& lhs, unsigned int rhs) { double1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (unsigned int lhs, const double1& rhs) { double1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (const double1& lhs, signed int rhs) { double1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (signed int lhs, const double1& rhs) { double1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (const double1& lhs, float rhs) { double1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (float lhs, const double1& rhs) { double1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (const double1& lhs, unsigned long rhs) { double1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (unsigned long lhs, const double1& rhs) { double1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (const double1& lhs, signed long rhs) { double1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (signed long lhs, const double1& rhs) { double1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (const double1& lhs, double rhs) { double1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (double lhs, const double1& rhs) { double1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (const double1& lhs, unsigned long long rhs) { double1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (unsigned long long lhs, const double1& rhs) { double1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (const double1& lhs, signed long long rhs) { double1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double1 operator * (signed long long lhs, const double1& rhs) { double1 ret; ret.x = lhs * rhs.x; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline double2 operator + (const double2& lhs, const double2& rhs) { double2 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator - (const double2& lhs, const double2& rhs) { double2 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (const double2& lhs, const double2& rhs) { double2 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator / (const double2& lhs, const double2& rhs) { double2 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline double2& operator += ( double2& lhs, const double2& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline double2& operator -= ( double2& lhs, const double2& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline double2& operator *= ( double2& lhs, const double2& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline double2& operator /= ( double2& lhs, const double2& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline double2& operator ++ (double2& val) { ++ val.x; ++ val.y; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline double2& operator -- (double2& val) { -- val.x; -- val.y; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline double2 operator ++ (double2& val, int) { double2 ret; ret.x = val.x; ret.y = val.y; val.x ++; val.y ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator -- (double2& val, int) { double2 ret; ret.x = val.x; ret.y = val.y; val.x --; val.y --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (double2& lhs, double2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const double2& lhs, double2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (double2& lhs, const double2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const double2& lhs, const double2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (double2& lhs, double2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const double2& lhs, double2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (double2& lhs, const double2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const double2& lhs, const double2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (double2& lhs, double2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const double2& lhs, double2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (double2& lhs, const double2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const double2& lhs, const double2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (double2& lhs, double2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const double2& lhs, double2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (double2& lhs, const double2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const double2& lhs, const double2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (double2& lhs, double2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const double2& lhs, double2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (double2& lhs, const double2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const double2& lhs, const double2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (double2& lhs, double2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const double2& lhs, double2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (double2& lhs, const double2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const double2& lhs, const double2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (const double2& lhs, unsigned char rhs) { double2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (unsigned char lhs, const double2& rhs) { double2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (const double2& lhs, signed char rhs) { double2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (signed char lhs, const double2& rhs) { double2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (const double2& lhs, unsigned short rhs) { double2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (unsigned short lhs, const double2& rhs) { double2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (const double2& lhs, signed short rhs) { double2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (signed short lhs, const double2& rhs) { double2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (const double2& lhs, unsigned int rhs) { double2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (unsigned int lhs, const double2& rhs) { double2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (const double2& lhs, signed int rhs) { double2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (signed int lhs, const double2& rhs) { double2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (const double2& lhs, float rhs) { double2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (float lhs, const double2& rhs) { double2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (const double2& lhs, unsigned long rhs) { double2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (unsigned long lhs, const double2& rhs) { double2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (const double2& lhs, signed long rhs) { double2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (signed long lhs, const double2& rhs) { double2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (const double2& lhs, double rhs) { double2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (double lhs, const double2& rhs) { double2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (const double2& lhs, unsigned long long rhs) { double2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (unsigned long long lhs, const double2& rhs) { double2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (const double2& lhs, signed long long rhs) { double2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double2 operator * (signed long long lhs, const double2& rhs) { double2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline double3 operator + (const double3& lhs, const double3& rhs) { double3 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator - (const double3& lhs, const double3& rhs) { double3 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (const double3& lhs, const double3& rhs) { double3 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator / (const double3& lhs, const double3& rhs) { double3 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline double3& operator += ( double3& lhs, const double3& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline double3& operator -= ( double3& lhs, const double3& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline double3& operator *= ( double3& lhs, const double3& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline double3& operator /= ( double3& lhs, const double3& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline double3& operator ++ (double3& val) { ++ val.x; ++ val.y; ++ val.z; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline double3& operator -- (double3& val) { -- val.x; -- val.y; -- val.z; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline double3 operator ++ (double3& val, int) { double3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x ++; val.y ++; val.z ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator -- (double3& val, int) { double3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x --; val.y --; val.z --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (double3& lhs, double3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const double3& lhs, double3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (double3& lhs, const double3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const double3& lhs, const double3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (double3& lhs, double3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const double3& lhs, double3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (double3& lhs, const double3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const double3& lhs, const double3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (double3& lhs, double3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const double3& lhs, double3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (double3& lhs, const double3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const double3& lhs, const double3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (double3& lhs, double3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const double3& lhs, double3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (double3& lhs, const double3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const double3& lhs, const double3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (double3& lhs, double3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const double3& lhs, double3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (double3& lhs, const double3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const double3& lhs, const double3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (double3& lhs, double3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const double3& lhs, double3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (double3& lhs, const double3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const double3& lhs, const double3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (const double3& lhs, unsigned char rhs) { double3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (unsigned char lhs, const double3& rhs) { double3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (const double3& lhs, signed char rhs) { double3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (signed char lhs, const double3& rhs) { double3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (const double3& lhs, unsigned short rhs) { double3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (unsigned short lhs, const double3& rhs) { double3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (const double3& lhs, signed short rhs) { double3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (signed short lhs, const double3& rhs) { double3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (const double3& lhs, unsigned int rhs) { double3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (unsigned int lhs, const double3& rhs) { double3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (const double3& lhs, signed int rhs) { double3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (signed int lhs, const double3& rhs) { double3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (const double3& lhs, float rhs) { double3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (float lhs, const double3& rhs) { double3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (const double3& lhs, unsigned long rhs) { double3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (unsigned long lhs, const double3& rhs) { double3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (const double3& lhs, signed long rhs) { double3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (signed long lhs, const double3& rhs) { double3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (const double3& lhs, double rhs) { double3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (double lhs, const double3& rhs) { double3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (const double3& lhs, unsigned long long rhs) { double3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (unsigned long long lhs, const double3& rhs) { double3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (const double3& lhs, signed long long rhs) { double3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double3 operator * (signed long long lhs, const double3& rhs) { double3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline double4 operator + ( const double4& lhs, const double4& rhs) { double4 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; ret.w = lhs.w + rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator - ( const double4& lhs, const double4& rhs) { double4 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; ret.w = lhs.w - rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator * ( const double4& lhs, const double4& rhs) { double4 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; ret.w = lhs.w * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator / ( const double4& lhs, const double4& rhs) { double4 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; ret.w = lhs.w / rhs.w; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline double4& operator += ( double4& lhs, const double4& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; lhs.w += rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline double4& operator -= ( double4& lhs, const double4& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; lhs.w -= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline double4& operator *= ( double4& lhs, const double4& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; lhs.w *= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline double4& operator /= ( double4& lhs, const double4& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; lhs.w /= rhs.w; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline double4& operator ++ (double4& val) { ++ val.x; ++ val.y; ++ val.z; ++ val.w; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline double4& operator -- (double4& val) { -- val.x; -- val.y; -- val.z; -- val.w; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline double4 operator ++ (double4& val, int) { double4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x ++; val.y ++; val.z ++; val.w ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator -- (double4& val, int) { double4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x --; val.y --; val.z --; val.w --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (double4& lhs, double4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const double4& lhs, double4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (double4& lhs, const double4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const double4& lhs, const double4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (double4& lhs, double4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const double4& lhs, double4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (double4& lhs, const double4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const double4& lhs, const double4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (double4& lhs, double4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const double4& lhs, double4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (double4& lhs, const double4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const double4& lhs, const double4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (double4& lhs, double4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const double4& lhs, double4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (double4& lhs, const double4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const double4& lhs, const double4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (double4& lhs, double4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const double4& lhs, double4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (double4& lhs, const double4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const double4& lhs, const double4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (double4& lhs, double4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const double4& lhs, double4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (double4& lhs, const double4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const double4& lhs, const double4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (const double4& lhs, unsigned char rhs) { double4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (unsigned char lhs, const double4& rhs) { double4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (const double4& lhs, signed char rhs) { double4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (signed char lhs, const double4& rhs) { double4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (const double4& lhs, unsigned short rhs) { double4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (unsigned short lhs, const double4& rhs) { double4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (const double4& lhs, signed short rhs) { double4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (signed short lhs, const double4& rhs) { double4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (const double4& lhs, unsigned int rhs) { double4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (unsigned int lhs, const double4& rhs) { double4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (const double4& lhs, signed int rhs) { double4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (signed int lhs, const double4& rhs) { double4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (const double4& lhs, float rhs) { double4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (float lhs, const double4& rhs) { double4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (const double4& lhs, unsigned long rhs) { double4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (unsigned long lhs, const double4& rhs) { double4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (const double4& lhs, signed long rhs) { double4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (signed long lhs, const double4& rhs) { double4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (const double4& lhs, double rhs) { double4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (double lhs, const double4& rhs) { double4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (const double4& lhs, unsigned long long rhs) { double4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (unsigned long long lhs, const double4& rhs) { double4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (const double4& lhs, signed long long rhs) { double4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline double4 operator * (signed long long lhs, const double4& rhs) { double4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator + (const ulong1& lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs.x + rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator - (const ulong1& lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs.x - rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (const ulong1& lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs.x * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator / (const ulong1& lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs.x / rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator % (const ulong1& lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs.x % rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator & (const ulong1& lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs.x & rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator | (const ulong1& lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs.x | rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator ^ (const ulong1& lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs.x ^ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator << (const ulong1& lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs.x << rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator >> (const ulong1& lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs.x >> rhs.x; return ret; }


__attribute__((hc)) __attribute__((cpu)) static inline ulong1& operator += ( ulong1& lhs, const ulong1& rhs) { lhs.x += rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1& operator -= ( ulong1& lhs, const ulong1& rhs) { lhs.x -= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1& operator *= ( ulong1& lhs, const ulong1& rhs) { lhs.x *= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1& operator /= ( ulong1& lhs, const ulong1& rhs) { lhs.x /= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1& operator %= ( ulong1& lhs, const ulong1& rhs) { lhs.x %= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1& operator &= ( ulong1& lhs, const ulong1& rhs) { lhs.x &= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1& operator |= ( ulong1& lhs, const ulong1& rhs) { lhs.x |= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1& operator ^= ( ulong1& lhs, const ulong1& rhs) { lhs.x ^= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1& operator <<= ( ulong1& lhs, const ulong1& rhs) { lhs.x <<= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1& operator >>= ( ulong1& lhs, const ulong1& rhs) { lhs.x >>= rhs.x; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline ulong1& operator ++ (ulong1& val) { ++ val.x; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1& operator -- (ulong1& val) { -- val.x; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator ++ (ulong1& val, int) { ulong1 ret; ret.x = val.x; val.x ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator -- (ulong1& val, int) { ulong1 ret; ret.x = val.x; val.x --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulong1& lhs, ulong1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulong1& lhs, ulong1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulong1& lhs, const ulong1& rhs) { return lhs.x == rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulong1& lhs, const ulong1& rhs) { return lhs.x == rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulong1& lhs, ulong1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulong1& lhs, ulong1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulong1& lhs, const ulong1& rhs) { return lhs.x != rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulong1& lhs, const ulong1& rhs) { return lhs.x != rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulong1& lhs, ulong1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulong1& lhs, ulong1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulong1& lhs, const ulong1& rhs) { return lhs.x < rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulong1& lhs, const ulong1& rhs) { return lhs.x < rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulong1& lhs, ulong1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulong1& lhs, ulong1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulong1& lhs, const ulong1& rhs) { return lhs.x > rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulong1& lhs, const ulong1& rhs) { return lhs.x > rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulong1& lhs, ulong1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulong1& lhs, ulong1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulong1& lhs, const ulong1& rhs) { return lhs.x <= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulong1& lhs, const ulong1& rhs) { return lhs.x <= rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulong1& lhs, ulong1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulong1& lhs, ulong1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulong1& lhs, const ulong1& rhs) { return lhs.x >= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulong1& lhs, const ulong1& rhs) { return lhs.x >= rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulong1& lhs, ulong1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulong1& lhs, ulong1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulong1& lhs, const ulong1& rhs) { return lhs.x && rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulong1& lhs, const ulong1& rhs) { return lhs.x && rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulong1& lhs, ulong1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulong1& lhs, ulong1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulong1& lhs, const ulong1& rhs) { return lhs.x || rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulong1& lhs, const ulong1& rhs) { return lhs.x || rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator ~(ulong1& rhs) { ulong1 ret; ret.x = ~ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (ulong1& rhs) { return ! rhs.x; }

__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (const ulong1& lhs, unsigned char rhs) { ulong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (unsigned char lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (const ulong1& lhs, signed char rhs) { ulong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (signed char lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (const ulong1& lhs, unsigned short rhs) { ulong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (unsigned short lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (const ulong1& lhs, signed short rhs) { ulong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (signed short lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (const ulong1& lhs, unsigned int rhs) { ulong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (unsigned int lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (const ulong1& lhs, signed int rhs) { ulong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (signed int lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (const ulong1& lhs, float rhs) { ulong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (float lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (const ulong1& lhs, unsigned long rhs) { ulong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (unsigned long lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (const ulong1& lhs, signed long rhs) { ulong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (signed long lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (const ulong1& lhs, double rhs) { ulong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (double lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (const ulong1& lhs, unsigned long long rhs) { ulong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (unsigned long long lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (const ulong1& lhs, signed long long rhs) { ulong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong1 operator * (signed long long lhs, const ulong1& rhs) { ulong1 ret; ret.x = lhs * rhs.x; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator + (const ulong2& lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator - (const ulong2& lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (const ulong2& lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator / (const ulong2& lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator % (const ulong2& lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator & (const ulong2& lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator | (const ulong2& lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator ^ (const ulong2& lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator << (const ulong2& lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator >> (const ulong2& lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline ulong2& operator += ( ulong2& lhs, const ulong2& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2& operator -= ( ulong2& lhs, const ulong2& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2& operator *= ( ulong2& lhs, const ulong2& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2& operator /= ( ulong2& lhs, const ulong2& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2& operator %= ( ulong2& lhs, const ulong2& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2& operator &= ( ulong2& lhs, const ulong2& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2& operator |= ( ulong2& lhs, const ulong2& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2& operator ^= ( ulong2& lhs, const ulong2& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2& operator <<= ( ulong2& lhs, const ulong2& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2& operator >>= ( ulong2& lhs, const ulong2& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline ulong2& operator ++ (ulong2& val) { ++ val.x; ++ val.y; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2& operator -- (ulong2& val) { -- val.x; -- val.y; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator ++ (ulong2& val, int) { ulong2 ret; ret.x = val.x; ret.y = val.y; val.x ++; val.y ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator -- (ulong2& val, int) { ulong2 ret; ret.x = val.x; ret.y = val.y; val.x --; val.y --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulong2& lhs, ulong2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulong2& lhs, ulong2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulong2& lhs, const ulong2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulong2& lhs, const ulong2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulong2& lhs, ulong2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulong2& lhs, ulong2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulong2& lhs, const ulong2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulong2& lhs, const ulong2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulong2& lhs, ulong2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulong2& lhs, ulong2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulong2& lhs, const ulong2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulong2& lhs, const ulong2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulong2& lhs, ulong2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulong2& lhs, ulong2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulong2& lhs, const ulong2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulong2& lhs, const ulong2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulong2& lhs, ulong2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulong2& lhs, ulong2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulong2& lhs, const ulong2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulong2& lhs, const ulong2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulong2& lhs, ulong2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulong2& lhs, ulong2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulong2& lhs, const ulong2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulong2& lhs, const ulong2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulong2& lhs, ulong2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulong2& lhs, ulong2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulong2& lhs, const ulong2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulong2& lhs, const ulong2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulong2& lhs, ulong2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulong2& lhs, ulong2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulong2& lhs, const ulong2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulong2& lhs, const ulong2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator ~(ulong2 &rhs) { ulong2 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (ulong2 &rhs) { return (! rhs.x) && (! rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (const ulong2& lhs, unsigned char rhs) { ulong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (unsigned char lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (const ulong2& lhs, signed char rhs) { ulong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (signed char lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (const ulong2& lhs, unsigned short rhs) { ulong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (unsigned short lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (const ulong2& lhs, signed short rhs) { ulong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (signed short lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (const ulong2& lhs, unsigned int rhs) { ulong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (unsigned int lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (const ulong2& lhs, signed int rhs) { ulong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (signed int lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (const ulong2& lhs, float rhs) { ulong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (float lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (const ulong2& lhs, unsigned long rhs) { ulong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (unsigned long lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (const ulong2& lhs, signed long rhs) { ulong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (signed long lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (const ulong2& lhs, double rhs) { ulong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (double lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (const ulong2& lhs, unsigned long long rhs) { ulong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (unsigned long long lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (const ulong2& lhs, signed long long rhs) { ulong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong2 operator * (signed long long lhs, const ulong2& rhs) { ulong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator + (const ulong3& lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator - (const ulong3& lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (const ulong3& lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator / (const ulong3& lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator % (const ulong3& lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator & (const ulong3& lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator | (const ulong3& lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator ^ (const ulong3& lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator << (const ulong3& lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator >> (const ulong3& lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline ulong3& operator += ( ulong3& lhs, const ulong3& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3& operator -= ( ulong3& lhs, const ulong3& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3& operator *= ( ulong3& lhs, const ulong3& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3& operator /= ( ulong3& lhs, const ulong3& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3& operator %= ( ulong3& lhs, const ulong3& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3& operator &= ( ulong3& lhs, const ulong3& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3& operator |= ( ulong3& lhs, const ulong3& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3& operator ^= ( ulong3& lhs, const ulong3& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3& operator <<= ( ulong3& lhs, const ulong3& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3& operator >>= ( ulong3& lhs, const ulong3& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline ulong3& operator ++ (ulong3& val) { ++ val.x; ++ val.y; ++ val.z; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3& operator -- (ulong3& val) { -- val.x; -- val.y; -- val.z; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator ++ (ulong3& val, int) { ulong3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x ++; val.y ++; val.z ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator -- (ulong3& val, int) { ulong3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x --; val.y --; val.z --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulong3& lhs, ulong3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulong3& lhs, ulong3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulong3& lhs, const ulong3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulong3& lhs, const ulong3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulong3& lhs, ulong3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulong3& lhs, ulong3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulong3& lhs, const ulong3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulong3& lhs, const ulong3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulong3& lhs, ulong3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulong3& lhs, ulong3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulong3& lhs, const ulong3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulong3& lhs, const ulong3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulong3& lhs, ulong3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulong3& lhs, ulong3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulong3& lhs, const ulong3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulong3& lhs, const ulong3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulong3& lhs, ulong3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulong3& lhs, ulong3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulong3& lhs, const ulong3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulong3& lhs, const ulong3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulong3& lhs, ulong3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulong3& lhs, ulong3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulong3& lhs, const ulong3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulong3& lhs, const ulong3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulong3& lhs, ulong3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulong3& lhs, ulong3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulong3& lhs, const ulong3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulong3& lhs, const ulong3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulong3& lhs, ulong3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulong3& lhs, ulong3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulong3& lhs, const ulong3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulong3& lhs, const ulong3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator ~(ulong3 &rhs) { ulong3 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (ulong3 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (const ulong3& lhs, unsigned char rhs) { ulong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (unsigned char lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (const ulong3& lhs, signed char rhs) { ulong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (signed char lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (const ulong3& lhs, unsigned short rhs) { ulong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (unsigned short lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (const ulong3& lhs, signed short rhs) { ulong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (signed short lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (const ulong3& lhs, unsigned int rhs) { ulong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (unsigned int lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (const ulong3& lhs, signed int rhs) { ulong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (signed int lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (const ulong3& lhs, float rhs) { ulong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (float lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (const ulong3& lhs, unsigned long rhs) { ulong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (unsigned long lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (const ulong3& lhs, signed long rhs) { ulong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (signed long lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (const ulong3& lhs, double rhs) { ulong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (double lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (const ulong3& lhs, unsigned long long rhs) { ulong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (unsigned long long lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (const ulong3& lhs, signed long long rhs) { ulong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong3 operator * (signed long long lhs, const ulong3& rhs) { ulong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator + ( const ulong4& lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; ret.w = lhs.w + rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator - ( const ulong4& lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; ret.w = lhs.w - rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * ( const ulong4& lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; ret.w = lhs.w * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator / ( const ulong4& lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; ret.w = lhs.w / rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator % ( const ulong4& lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; ret.w = lhs.w % rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator & ( const ulong4& lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; ret.w = lhs.w & rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator | ( const ulong4& lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; ret.w = lhs.w | rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator ^ ( const ulong4& lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; ret.w = lhs.w ^ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator << ( const ulong4& lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; ret.w = lhs.w << rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator >> ( const ulong4& lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; ret.w = lhs.w >> rhs.w; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline ulong4& operator += ( ulong4& lhs, const ulong4& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; lhs.w += rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4& operator -= ( ulong4& lhs, const ulong4& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; lhs.w -= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4& operator *= ( ulong4& lhs, const ulong4& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; lhs.w *= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4& operator /= ( ulong4& lhs, const ulong4& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; lhs.w /= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4& operator %= ( ulong4& lhs, const ulong4& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; lhs.w %= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4& operator &= ( ulong4& lhs, const ulong4& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; lhs.w &= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4& operator |= ( ulong4& lhs, const ulong4& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; lhs.w |= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4& operator ^= ( ulong4& lhs, const ulong4& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; lhs.w ^= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4& operator <<= ( ulong4& lhs, const ulong4& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; lhs.w <<= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4& operator >>= ( ulong4& lhs, const ulong4& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; lhs.w >>= rhs.w; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline ulong4& operator ++ (ulong4& val) { ++ val.x; ++ val.y; ++ val.z; ++ val.w; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4& operator -- (ulong4& val) { -- val.x; -- val.y; -- val.z; -- val.w; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator ++ (ulong4& val, int) { ulong4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x ++; val.y ++; val.z ++; val.w ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator -- (ulong4& val, int) { ulong4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x --; val.y --; val.z --; val.w --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulong4& lhs, ulong4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulong4& lhs, ulong4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulong4& lhs, const ulong4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulong4& lhs, const ulong4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulong4& lhs, ulong4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulong4& lhs, ulong4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulong4& lhs, const ulong4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulong4& lhs, const ulong4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulong4& lhs, ulong4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulong4& lhs, ulong4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulong4& lhs, const ulong4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulong4& lhs, const ulong4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulong4& lhs, ulong4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulong4& lhs, ulong4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulong4& lhs, const ulong4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulong4& lhs, const ulong4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulong4& lhs, ulong4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulong4& lhs, ulong4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulong4& lhs, const ulong4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulong4& lhs, const ulong4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulong4& lhs, ulong4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulong4& lhs, ulong4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulong4& lhs, const ulong4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulong4& lhs, const ulong4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulong4& lhs, ulong4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulong4& lhs, ulong4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulong4& lhs, const ulong4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulong4& lhs, const ulong4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulong4& lhs, ulong4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulong4& lhs, ulong4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulong4& lhs, const ulong4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulong4& lhs, const ulong4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator ~(ulong4 &rhs) { ulong4 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; ret.w = ~ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (ulong4 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z) && (! rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (const ulong4& lhs, unsigned char rhs) { ulong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (unsigned char lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (const ulong4& lhs, signed char rhs) { ulong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (signed char lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (const ulong4& lhs, unsigned short rhs) { ulong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (unsigned short lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (const ulong4& lhs, signed short rhs) { ulong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (signed short lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (const ulong4& lhs, unsigned int rhs) { ulong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (unsigned int lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (const ulong4& lhs, signed int rhs) { ulong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (signed int lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (const ulong4& lhs, float rhs) { ulong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (float lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (const ulong4& lhs, unsigned long rhs) { ulong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (unsigned long lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (const ulong4& lhs, signed long rhs) { ulong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (signed long lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (const ulong4& lhs, double rhs) { ulong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (double lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (const ulong4& lhs, unsigned long long rhs) { ulong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (unsigned long long lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (const ulong4& lhs, signed long long rhs) { ulong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulong4 operator * (signed long long lhs, const ulong4& rhs) { ulong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline long1 operator + (const long1& lhs, const long1& rhs) { long1 ret; ret.x = lhs.x + rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator - (const long1& lhs, const long1& rhs) { long1 ret; ret.x = lhs.x - rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (const long1& lhs, const long1& rhs) { long1 ret; ret.x = lhs.x * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator / (const long1& lhs, const long1& rhs) { long1 ret; ret.x = lhs.x / rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator % (const long1& lhs, const long1& rhs) { long1 ret; ret.x = lhs.x % rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator & (const long1& lhs, const long1& rhs) { long1 ret; ret.x = lhs.x & rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator | (const long1& lhs, const long1& rhs) { long1 ret; ret.x = lhs.x | rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator ^ (const long1& lhs, const long1& rhs) { long1 ret; ret.x = lhs.x ^ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator << (const long1& lhs, const long1& rhs) { long1 ret; ret.x = lhs.x << rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator >> (const long1& lhs, const long1& rhs) { long1 ret; ret.x = lhs.x >> rhs.x; return ret; }


__attribute__((hc)) __attribute__((cpu)) static inline long1& operator += ( long1& lhs, const long1& rhs) { lhs.x += rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long1& operator -= ( long1& lhs, const long1& rhs) { lhs.x -= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long1& operator *= ( long1& lhs, const long1& rhs) { lhs.x *= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long1& operator /= ( long1& lhs, const long1& rhs) { lhs.x /= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long1& operator %= ( long1& lhs, const long1& rhs) { lhs.x %= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long1& operator &= ( long1& lhs, const long1& rhs) { lhs.x &= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long1& operator |= ( long1& lhs, const long1& rhs) { lhs.x |= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long1& operator ^= ( long1& lhs, const long1& rhs) { lhs.x ^= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long1& operator <<= ( long1& lhs, const long1& rhs) { lhs.x <<= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long1& operator >>= ( long1& lhs, const long1& rhs) { lhs.x >>= rhs.x; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline long1& operator ++ (long1& val) { ++ val.x; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline long1& operator -- (long1& val) { -- val.x; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline long1 operator ++ (long1& val, int) { long1 ret; ret.x = val.x; val.x ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator -- (long1& val, int) { long1 ret; ret.x = val.x; val.x --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (long1& lhs, long1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const long1& lhs, long1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (long1& lhs, const long1& rhs) { return lhs.x == rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const long1& lhs, const long1& rhs) { return lhs.x == rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (long1& lhs, long1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const long1& lhs, long1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (long1& lhs, const long1& rhs) { return lhs.x != rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const long1& lhs, const long1& rhs) { return lhs.x != rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (long1& lhs, long1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const long1& lhs, long1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (long1& lhs, const long1& rhs) { return lhs.x < rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const long1& lhs, const long1& rhs) { return lhs.x < rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (long1& lhs, long1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const long1& lhs, long1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (long1& lhs, const long1& rhs) { return lhs.x > rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const long1& lhs, const long1& rhs) { return lhs.x > rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (long1& lhs, long1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const long1& lhs, long1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (long1& lhs, const long1& rhs) { return lhs.x <= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const long1& lhs, const long1& rhs) { return lhs.x <= rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (long1& lhs, long1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const long1& lhs, long1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (long1& lhs, const long1& rhs) { return lhs.x >= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const long1& lhs, const long1& rhs) { return lhs.x >= rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (long1& lhs, long1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const long1& lhs, long1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (long1& lhs, const long1& rhs) { return lhs.x && rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const long1& lhs, const long1& rhs) { return lhs.x && rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (long1& lhs, long1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const long1& lhs, long1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (long1& lhs, const long1& rhs) { return lhs.x || rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const long1& lhs, const long1& rhs) { return lhs.x || rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline long1 operator ~(long1& rhs) { long1 ret; ret.x = ~ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (long1& rhs) { return ! rhs.x; }

__attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (const long1& lhs, unsigned char rhs) { long1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (unsigned char lhs, const long1& rhs) { long1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (const long1& lhs, signed char rhs) { long1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (signed char lhs, const long1& rhs) { long1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (const long1& lhs, unsigned short rhs) { long1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (unsigned short lhs, const long1& rhs) { long1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (const long1& lhs, signed short rhs) { long1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (signed short lhs, const long1& rhs) { long1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (const long1& lhs, unsigned int rhs) { long1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (unsigned int lhs, const long1& rhs) { long1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (const long1& lhs, signed int rhs) { long1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (signed int lhs, const long1& rhs) { long1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (const long1& lhs, float rhs) { long1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (float lhs, const long1& rhs) { long1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (const long1& lhs, unsigned long rhs) { long1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (unsigned long lhs, const long1& rhs) { long1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (const long1& lhs, signed long rhs) { long1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (signed long lhs, const long1& rhs) { long1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (const long1& lhs, double rhs) { long1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (double lhs, const long1& rhs) { long1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (const long1& lhs, unsigned long long rhs) { long1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (unsigned long long lhs, const long1& rhs) { long1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (const long1& lhs, signed long long rhs) { long1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long1 operator * (signed long long lhs, const long1& rhs) { long1 ret; ret.x = lhs * rhs.x; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline long2 operator + (const long2& lhs, const long2& rhs) { long2 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator - (const long2& lhs, const long2& rhs) { long2 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (const long2& lhs, const long2& rhs) { long2 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator / (const long2& lhs, const long2& rhs) { long2 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator % (const long2& lhs, const long2& rhs) { long2 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator & (const long2& lhs, const long2& rhs) { long2 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator | (const long2& lhs, const long2& rhs) { long2 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator ^ (const long2& lhs, const long2& rhs) { long2 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator << (const long2& lhs, const long2& rhs) { long2 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator >> (const long2& lhs, const long2& rhs) { long2 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline long2& operator += ( long2& lhs, const long2& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long2& operator -= ( long2& lhs, const long2& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long2& operator *= ( long2& lhs, const long2& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long2& operator /= ( long2& lhs, const long2& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long2& operator %= ( long2& lhs, const long2& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long2& operator &= ( long2& lhs, const long2& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long2& operator |= ( long2& lhs, const long2& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long2& operator ^= ( long2& lhs, const long2& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long2& operator <<= ( long2& lhs, const long2& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long2& operator >>= ( long2& lhs, const long2& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline long2& operator ++ (long2& val) { ++ val.x; ++ val.y; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline long2& operator -- (long2& val) { -- val.x; -- val.y; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline long2 operator ++ (long2& val, int) { long2 ret; ret.x = val.x; ret.y = val.y; val.x ++; val.y ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator -- (long2& val, int) { long2 ret; ret.x = val.x; ret.y = val.y; val.x --; val.y --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (long2& lhs, long2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const long2& lhs, long2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (long2& lhs, const long2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const long2& lhs, const long2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (long2& lhs, long2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const long2& lhs, long2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (long2& lhs, const long2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const long2& lhs, const long2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (long2& lhs, long2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const long2& lhs, long2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (long2& lhs, const long2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const long2& lhs, const long2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (long2& lhs, long2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const long2& lhs, long2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (long2& lhs, const long2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const long2& lhs, const long2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (long2& lhs, long2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const long2& lhs, long2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (long2& lhs, const long2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const long2& lhs, const long2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (long2& lhs, long2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const long2& lhs, long2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (long2& lhs, const long2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const long2& lhs, const long2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (long2& lhs, long2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const long2& lhs, long2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (long2& lhs, const long2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const long2& lhs, const long2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (long2& lhs, long2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const long2& lhs, long2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (long2& lhs, const long2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const long2& lhs, const long2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline long2 operator ~(long2 &rhs) { long2 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (long2 &rhs) { return (! rhs.x) && (! rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (const long2& lhs, unsigned char rhs) { long2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (unsigned char lhs, const long2& rhs) { long2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (const long2& lhs, signed char rhs) { long2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (signed char lhs, const long2& rhs) { long2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (const long2& lhs, unsigned short rhs) { long2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (unsigned short lhs, const long2& rhs) { long2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (const long2& lhs, signed short rhs) { long2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (signed short lhs, const long2& rhs) { long2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (const long2& lhs, unsigned int rhs) { long2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (unsigned int lhs, const long2& rhs) { long2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (const long2& lhs, signed int rhs) { long2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (signed int lhs, const long2& rhs) { long2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (const long2& lhs, float rhs) { long2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (float lhs, const long2& rhs) { long2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (const long2& lhs, unsigned long rhs) { long2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (unsigned long lhs, const long2& rhs) { long2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (const long2& lhs, signed long rhs) { long2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (signed long lhs, const long2& rhs) { long2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (const long2& lhs, double rhs) { long2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (double lhs, const long2& rhs) { long2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (const long2& lhs, unsigned long long rhs) { long2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (unsigned long long lhs, const long2& rhs) { long2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (const long2& lhs, signed long long rhs) { long2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long2 operator * (signed long long lhs, const long2& rhs) { long2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline long3 operator + (const long3& lhs, const long3& rhs) { long3 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator - (const long3& lhs, const long3& rhs) { long3 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (const long3& lhs, const long3& rhs) { long3 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator / (const long3& lhs, const long3& rhs) { long3 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator % (const long3& lhs, const long3& rhs) { long3 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator & (const long3& lhs, const long3& rhs) { long3 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator | (const long3& lhs, const long3& rhs) { long3 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator ^ (const long3& lhs, const long3& rhs) { long3 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator << (const long3& lhs, const long3& rhs) { long3 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator >> (const long3& lhs, const long3& rhs) { long3 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline long3& operator += ( long3& lhs, const long3& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long3& operator -= ( long3& lhs, const long3& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long3& operator *= ( long3& lhs, const long3& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long3& operator /= ( long3& lhs, const long3& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long3& operator %= ( long3& lhs, const long3& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long3& operator &= ( long3& lhs, const long3& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long3& operator |= ( long3& lhs, const long3& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long3& operator ^= ( long3& lhs, const long3& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long3& operator <<= ( long3& lhs, const long3& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long3& operator >>= ( long3& lhs, const long3& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline long3& operator ++ (long3& val) { ++ val.x; ++ val.y; ++ val.z; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline long3& operator -- (long3& val) { -- val.x; -- val.y; -- val.z; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline long3 operator ++ (long3& val, int) { long3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x ++; val.y ++; val.z ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator -- (long3& val, int) { long3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x --; val.y --; val.z --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (long3& lhs, long3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const long3& lhs, long3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (long3& lhs, const long3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const long3& lhs, const long3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (long3& lhs, long3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const long3& lhs, long3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (long3& lhs, const long3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const long3& lhs, const long3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (long3& lhs, long3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const long3& lhs, long3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (long3& lhs, const long3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const long3& lhs, const long3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (long3& lhs, long3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const long3& lhs, long3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (long3& lhs, const long3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const long3& lhs, const long3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (long3& lhs, long3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const long3& lhs, long3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (long3& lhs, const long3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const long3& lhs, const long3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (long3& lhs, long3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const long3& lhs, long3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (long3& lhs, const long3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const long3& lhs, const long3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (long3& lhs, long3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const long3& lhs, long3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (long3& lhs, const long3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const long3& lhs, const long3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (long3& lhs, long3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const long3& lhs, long3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (long3& lhs, const long3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const long3& lhs, const long3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline long3 operator ~(long3 &rhs) { long3 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (long3 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (const long3& lhs, unsigned char rhs) { long3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (unsigned char lhs, const long3& rhs) { long3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (const long3& lhs, signed char rhs) { long3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (signed char lhs, const long3& rhs) { long3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (const long3& lhs, unsigned short rhs) { long3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (unsigned short lhs, const long3& rhs) { long3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (const long3& lhs, signed short rhs) { long3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (signed short lhs, const long3& rhs) { long3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (const long3& lhs, unsigned int rhs) { long3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (unsigned int lhs, const long3& rhs) { long3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (const long3& lhs, signed int rhs) { long3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (signed int lhs, const long3& rhs) { long3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (const long3& lhs, float rhs) { long3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (float lhs, const long3& rhs) { long3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (const long3& lhs, unsigned long rhs) { long3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (unsigned long lhs, const long3& rhs) { long3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (const long3& lhs, signed long rhs) { long3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (signed long lhs, const long3& rhs) { long3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (const long3& lhs, double rhs) { long3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (double lhs, const long3& rhs) { long3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (const long3& lhs, unsigned long long rhs) { long3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (unsigned long long lhs, const long3& rhs) { long3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (const long3& lhs, signed long long rhs) { long3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long3 operator * (signed long long lhs, const long3& rhs) { long3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline long4 operator + ( const long4& lhs, const long4& rhs) { long4 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; ret.w = lhs.w + rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator - ( const long4& lhs, const long4& rhs) { long4 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; ret.w = lhs.w - rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator * ( const long4& lhs, const long4& rhs) { long4 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; ret.w = lhs.w * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator / ( const long4& lhs, const long4& rhs) { long4 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; ret.w = lhs.w / rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator % ( const long4& lhs, const long4& rhs) { long4 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; ret.w = lhs.w % rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator & ( const long4& lhs, const long4& rhs) { long4 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; ret.w = lhs.w & rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator | ( const long4& lhs, const long4& rhs) { long4 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; ret.w = lhs.w | rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator ^ ( const long4& lhs, const long4& rhs) { long4 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; ret.w = lhs.w ^ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator << ( const long4& lhs, const long4& rhs) { long4 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; ret.w = lhs.w << rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator >> ( const long4& lhs, const long4& rhs) { long4 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; ret.w = lhs.w >> rhs.w; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline long4& operator += ( long4& lhs, const long4& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; lhs.w += rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long4& operator -= ( long4& lhs, const long4& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; lhs.w -= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long4& operator *= ( long4& lhs, const long4& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; lhs.w *= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long4& operator /= ( long4& lhs, const long4& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; lhs.w /= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long4& operator %= ( long4& lhs, const long4& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; lhs.w %= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long4& operator &= ( long4& lhs, const long4& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; lhs.w &= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long4& operator |= ( long4& lhs, const long4& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; lhs.w |= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long4& operator ^= ( long4& lhs, const long4& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; lhs.w ^= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long4& operator <<= ( long4& lhs, const long4& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; lhs.w <<= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline long4& operator >>= ( long4& lhs, const long4& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; lhs.w >>= rhs.w; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline long4& operator ++ (long4& val) { ++ val.x; ++ val.y; ++ val.z; ++ val.w; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline long4& operator -- (long4& val) { -- val.x; -- val.y; -- val.z; -- val.w; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline long4 operator ++ (long4& val, int) { long4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x ++; val.y ++; val.z ++; val.w ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator -- (long4& val, int) { long4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x --; val.y --; val.z --; val.w --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (long4& lhs, long4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const long4& lhs, long4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (long4& lhs, const long4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const long4& lhs, const long4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (long4& lhs, long4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const long4& lhs, long4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (long4& lhs, const long4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const long4& lhs, const long4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (long4& lhs, long4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const long4& lhs, long4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (long4& lhs, const long4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const long4& lhs, const long4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (long4& lhs, long4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const long4& lhs, long4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (long4& lhs, const long4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const long4& lhs, const long4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (long4& lhs, long4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const long4& lhs, long4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (long4& lhs, const long4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const long4& lhs, const long4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (long4& lhs, long4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const long4& lhs, long4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (long4& lhs, const long4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const long4& lhs, const long4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (long4& lhs, long4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const long4& lhs, long4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (long4& lhs, const long4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const long4& lhs, const long4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (long4& lhs, long4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const long4& lhs, long4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (long4& lhs, const long4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const long4& lhs, const long4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline long4 operator ~(long4 &rhs) { long4 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; ret.w = ~ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (long4 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z) && (! rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (const long4& lhs, unsigned char rhs) { long4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (unsigned char lhs, const long4& rhs) { long4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (const long4& lhs, signed char rhs) { long4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (signed char lhs, const long4& rhs) { long4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (const long4& lhs, unsigned short rhs) { long4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (unsigned short lhs, const long4& rhs) { long4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (const long4& lhs, signed short rhs) { long4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (signed short lhs, const long4& rhs) { long4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (const long4& lhs, unsigned int rhs) { long4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (unsigned int lhs, const long4& rhs) { long4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (const long4& lhs, signed int rhs) { long4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (signed int lhs, const long4& rhs) { long4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (const long4& lhs, float rhs) { long4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (float lhs, const long4& rhs) { long4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (const long4& lhs, unsigned long rhs) { long4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (unsigned long lhs, const long4& rhs) { long4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (const long4& lhs, signed long rhs) { long4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (signed long lhs, const long4& rhs) { long4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (const long4& lhs, double rhs) { long4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (double lhs, const long4& rhs) { long4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (const long4& lhs, unsigned long long rhs) { long4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (unsigned long long lhs, const long4& rhs) { long4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (const long4& lhs, signed long long rhs) { long4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline long4 operator * (signed long long lhs, const long4& rhs) { long4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator + (const ulonglong1& lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs.x + rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator - (const ulonglong1& lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs.x - rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (const ulonglong1& lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs.x * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator / (const ulonglong1& lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs.x / rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator % (const ulonglong1& lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs.x % rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator & (const ulonglong1& lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs.x & rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator | (const ulonglong1& lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs.x | rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator ^ (const ulonglong1& lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs.x ^ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator << (const ulonglong1& lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs.x << rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator >> (const ulonglong1& lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs.x >> rhs.x; return ret; }


__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1& operator += ( ulonglong1& lhs, const ulonglong1& rhs) { lhs.x += rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1& operator -= ( ulonglong1& lhs, const ulonglong1& rhs) { lhs.x -= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1& operator *= ( ulonglong1& lhs, const ulonglong1& rhs) { lhs.x *= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1& operator /= ( ulonglong1& lhs, const ulonglong1& rhs) { lhs.x /= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1& operator %= ( ulonglong1& lhs, const ulonglong1& rhs) { lhs.x %= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1& operator &= ( ulonglong1& lhs, const ulonglong1& rhs) { lhs.x &= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1& operator |= ( ulonglong1& lhs, const ulonglong1& rhs) { lhs.x |= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1& operator ^= ( ulonglong1& lhs, const ulonglong1& rhs) { lhs.x ^= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1& operator <<= ( ulonglong1& lhs, const ulonglong1& rhs) { lhs.x <<= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1& operator >>= ( ulonglong1& lhs, const ulonglong1& rhs) { lhs.x >>= rhs.x; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1& operator ++ (ulonglong1& val) { ++ val.x; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1& operator -- (ulonglong1& val) { -- val.x; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator ++ (ulonglong1& val, int) { ulonglong1 ret; ret.x = val.x; val.x ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator -- (ulonglong1& val, int) { ulonglong1 ret; ret.x = val.x; val.x --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulonglong1& lhs, ulonglong1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulonglong1& lhs, ulonglong1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x == rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x == rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulonglong1& lhs, ulonglong1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulonglong1& lhs, ulonglong1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x != rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x != rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulonglong1& lhs, ulonglong1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulonglong1& lhs, ulonglong1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x < rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x < rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulonglong1& lhs, ulonglong1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulonglong1& lhs, ulonglong1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x > rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x > rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulonglong1& lhs, ulonglong1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulonglong1& lhs, ulonglong1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x <= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x <= rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulonglong1& lhs, ulonglong1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulonglong1& lhs, ulonglong1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x >= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x >= rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulonglong1& lhs, ulonglong1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulonglong1& lhs, ulonglong1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x && rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x && rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulonglong1& lhs, ulonglong1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulonglong1& lhs, ulonglong1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x || rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulonglong1& lhs, const ulonglong1& rhs) { return lhs.x || rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator ~(ulonglong1& rhs) { ulonglong1 ret; ret.x = ~ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (ulonglong1& rhs) { return ! rhs.x; }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (const ulonglong1& lhs, unsigned char rhs) { ulonglong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (unsigned char lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (const ulonglong1& lhs, signed char rhs) { ulonglong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (signed char lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (const ulonglong1& lhs, unsigned short rhs) { ulonglong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (unsigned short lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (const ulonglong1& lhs, signed short rhs) { ulonglong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (signed short lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (const ulonglong1& lhs, unsigned int rhs) { ulonglong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (unsigned int lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (const ulonglong1& lhs, signed int rhs) { ulonglong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (signed int lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (const ulonglong1& lhs, float rhs) { ulonglong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (float lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (const ulonglong1& lhs, unsigned long rhs) { ulonglong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (unsigned long lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (const ulonglong1& lhs, signed long rhs) { ulonglong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (signed long lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (const ulonglong1& lhs, double rhs) { ulonglong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (double lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (const ulonglong1& lhs, unsigned long long rhs) { ulonglong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (unsigned long long lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (const ulonglong1& lhs, signed long long rhs) { ulonglong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong1 operator * (signed long long lhs, const ulonglong1& rhs) { ulonglong1 ret; ret.x = lhs * rhs.x; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator + (const ulonglong2& lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator - (const ulonglong2& lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (const ulonglong2& lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator / (const ulonglong2& lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator % (const ulonglong2& lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator & (const ulonglong2& lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator | (const ulonglong2& lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator ^ (const ulonglong2& lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator << (const ulonglong2& lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator >> (const ulonglong2& lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2& operator += ( ulonglong2& lhs, const ulonglong2& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2& operator -= ( ulonglong2& lhs, const ulonglong2& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2& operator *= ( ulonglong2& lhs, const ulonglong2& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2& operator /= ( ulonglong2& lhs, const ulonglong2& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2& operator %= ( ulonglong2& lhs, const ulonglong2& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2& operator &= ( ulonglong2& lhs, const ulonglong2& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2& operator |= ( ulonglong2& lhs, const ulonglong2& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2& operator ^= ( ulonglong2& lhs, const ulonglong2& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2& operator <<= ( ulonglong2& lhs, const ulonglong2& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2& operator >>= ( ulonglong2& lhs, const ulonglong2& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2& operator ++ (ulonglong2& val) { ++ val.x; ++ val.y; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2& operator -- (ulonglong2& val) { -- val.x; -- val.y; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator ++ (ulonglong2& val, int) { ulonglong2 ret; ret.x = val.x; ret.y = val.y; val.x ++; val.y ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator -- (ulonglong2& val, int) { ulonglong2 ret; ret.x = val.x; ret.y = val.y; val.x --; val.y --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulonglong2& lhs, ulonglong2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulonglong2& lhs, const ulonglong2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator ~(ulonglong2 &rhs) { ulonglong2 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (ulonglong2 &rhs) { return (! rhs.x) && (! rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (const ulonglong2& lhs, unsigned char rhs) { ulonglong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (unsigned char lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (const ulonglong2& lhs, signed char rhs) { ulonglong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (signed char lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (const ulonglong2& lhs, unsigned short rhs) { ulonglong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (unsigned short lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (const ulonglong2& lhs, signed short rhs) { ulonglong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (signed short lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (const ulonglong2& lhs, unsigned int rhs) { ulonglong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (unsigned int lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (const ulonglong2& lhs, signed int rhs) { ulonglong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (signed int lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (const ulonglong2& lhs, float rhs) { ulonglong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (float lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (const ulonglong2& lhs, unsigned long rhs) { ulonglong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (unsigned long lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (const ulonglong2& lhs, signed long rhs) { ulonglong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (signed long lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (const ulonglong2& lhs, double rhs) { ulonglong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (double lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (const ulonglong2& lhs, unsigned long long rhs) { ulonglong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (unsigned long long lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (const ulonglong2& lhs, signed long long rhs) { ulonglong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong2 operator * (signed long long lhs, const ulonglong2& rhs) { ulonglong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator + (const ulonglong3& lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator - (const ulonglong3& lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (const ulonglong3& lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator / (const ulonglong3& lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator % (const ulonglong3& lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator & (const ulonglong3& lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator | (const ulonglong3& lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator ^ (const ulonglong3& lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator << (const ulonglong3& lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator >> (const ulonglong3& lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3& operator += ( ulonglong3& lhs, const ulonglong3& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3& operator -= ( ulonglong3& lhs, const ulonglong3& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3& operator *= ( ulonglong3& lhs, const ulonglong3& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3& operator /= ( ulonglong3& lhs, const ulonglong3& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3& operator %= ( ulonglong3& lhs, const ulonglong3& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3& operator &= ( ulonglong3& lhs, const ulonglong3& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3& operator |= ( ulonglong3& lhs, const ulonglong3& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3& operator ^= ( ulonglong3& lhs, const ulonglong3& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3& operator <<= ( ulonglong3& lhs, const ulonglong3& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3& operator >>= ( ulonglong3& lhs, const ulonglong3& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3& operator ++ (ulonglong3& val) { ++ val.x; ++ val.y; ++ val.z; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3& operator -- (ulonglong3& val) { -- val.x; -- val.y; -- val.z; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator ++ (ulonglong3& val, int) { ulonglong3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x ++; val.y ++; val.z ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator -- (ulonglong3& val, int) { ulonglong3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x --; val.y --; val.z --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulonglong3& lhs, ulonglong3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulonglong3& lhs, const ulonglong3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator ~(ulonglong3 &rhs) { ulonglong3 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (ulonglong3 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (const ulonglong3& lhs, unsigned char rhs) { ulonglong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (unsigned char lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (const ulonglong3& lhs, signed char rhs) { ulonglong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (signed char lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (const ulonglong3& lhs, unsigned short rhs) { ulonglong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (unsigned short lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (const ulonglong3& lhs, signed short rhs) { ulonglong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (signed short lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (const ulonglong3& lhs, unsigned int rhs) { ulonglong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (unsigned int lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (const ulonglong3& lhs, signed int rhs) { ulonglong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (signed int lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (const ulonglong3& lhs, float rhs) { ulonglong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (float lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (const ulonglong3& lhs, unsigned long rhs) { ulonglong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (unsigned long lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (const ulonglong3& lhs, signed long rhs) { ulonglong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (signed long lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (const ulonglong3& lhs, double rhs) { ulonglong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (double lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (const ulonglong3& lhs, unsigned long long rhs) { ulonglong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (unsigned long long lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (const ulonglong3& lhs, signed long long rhs) { ulonglong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong3 operator * (signed long long lhs, const ulonglong3& rhs) { ulonglong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator + ( const ulonglong4& lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; ret.w = lhs.w + rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator - ( const ulonglong4& lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; ret.w = lhs.w - rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * ( const ulonglong4& lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; ret.w = lhs.w * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator / ( const ulonglong4& lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; ret.w = lhs.w / rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator % ( const ulonglong4& lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; ret.w = lhs.w % rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator & ( const ulonglong4& lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; ret.w = lhs.w & rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator | ( const ulonglong4& lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; ret.w = lhs.w | rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator ^ ( const ulonglong4& lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; ret.w = lhs.w ^ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator << ( const ulonglong4& lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; ret.w = lhs.w << rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator >> ( const ulonglong4& lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; ret.w = lhs.w >> rhs.w; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4& operator += ( ulonglong4& lhs, const ulonglong4& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; lhs.w += rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4& operator -= ( ulonglong4& lhs, const ulonglong4& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; lhs.w -= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4& operator *= ( ulonglong4& lhs, const ulonglong4& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; lhs.w *= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4& operator /= ( ulonglong4& lhs, const ulonglong4& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; lhs.w /= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4& operator %= ( ulonglong4& lhs, const ulonglong4& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; lhs.w %= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4& operator &= ( ulonglong4& lhs, const ulonglong4& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; lhs.w &= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4& operator |= ( ulonglong4& lhs, const ulonglong4& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; lhs.w |= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4& operator ^= ( ulonglong4& lhs, const ulonglong4& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; lhs.w ^= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4& operator <<= ( ulonglong4& lhs, const ulonglong4& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; lhs.w <<= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4& operator >>= ( ulonglong4& lhs, const ulonglong4& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; lhs.w >>= rhs.w; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4& operator ++ (ulonglong4& val) { ++ val.x; ++ val.y; ++ val.z; ++ val.w; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4& operator -- (ulonglong4& val) { -- val.x; -- val.y; -- val.z; -- val.w; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator ++ (ulonglong4& val, int) { ulonglong4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x ++; val.y ++; val.z ++; val.w ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator -- (ulonglong4& val, int) { ulonglong4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x --; val.y --; val.z --; val.w --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulonglong4& lhs, ulonglong4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const ulonglong4& lhs, const ulonglong4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator ~(ulonglong4 &rhs) { ulonglong4 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; ret.w = ~ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (ulonglong4 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z) && (! rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (const ulonglong4& lhs, unsigned char rhs) { ulonglong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (unsigned char lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (const ulonglong4& lhs, signed char rhs) { ulonglong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (signed char lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (const ulonglong4& lhs, unsigned short rhs) { ulonglong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (unsigned short lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (const ulonglong4& lhs, signed short rhs) { ulonglong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (signed short lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (const ulonglong4& lhs, unsigned int rhs) { ulonglong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (unsigned int lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (const ulonglong4& lhs, signed int rhs) { ulonglong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (signed int lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (const ulonglong4& lhs, float rhs) { ulonglong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (float lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (const ulonglong4& lhs, unsigned long rhs) { ulonglong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (unsigned long lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (const ulonglong4& lhs, signed long rhs) { ulonglong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (signed long lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (const ulonglong4& lhs, double rhs) { ulonglong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (double lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (const ulonglong4& lhs, unsigned long long rhs) { ulonglong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (unsigned long long lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (const ulonglong4& lhs, signed long long rhs) { ulonglong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline ulonglong4 operator * (signed long long lhs, const ulonglong4& rhs) { ulonglong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator + (const longlong1& lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs.x + rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator - (const longlong1& lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs.x - rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (const longlong1& lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs.x * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator / (const longlong1& lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs.x / rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator % (const longlong1& lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs.x % rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator & (const longlong1& lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs.x & rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator | (const longlong1& lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs.x | rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator ^ (const longlong1& lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs.x ^ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator << (const longlong1& lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs.x << rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator >> (const longlong1& lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs.x >> rhs.x; return ret; }


__attribute__((hc)) __attribute__((cpu)) static inline longlong1& operator += ( longlong1& lhs, const longlong1& rhs) { lhs.x += rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1& operator -= ( longlong1& lhs, const longlong1& rhs) { lhs.x -= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1& operator *= ( longlong1& lhs, const longlong1& rhs) { lhs.x *= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1& operator /= ( longlong1& lhs, const longlong1& rhs) { lhs.x /= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1& operator %= ( longlong1& lhs, const longlong1& rhs) { lhs.x %= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1& operator &= ( longlong1& lhs, const longlong1& rhs) { lhs.x &= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1& operator |= ( longlong1& lhs, const longlong1& rhs) { lhs.x |= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1& operator ^= ( longlong1& lhs, const longlong1& rhs) { lhs.x ^= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1& operator <<= ( longlong1& lhs, const longlong1& rhs) { lhs.x <<= rhs.x; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1& operator >>= ( longlong1& lhs, const longlong1& rhs) { lhs.x >>= rhs.x; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline longlong1& operator ++ (longlong1& val) { ++ val.x; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1& operator -- (longlong1& val) { -- val.x; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator ++ (longlong1& val, int) { longlong1 ret; ret.x = val.x; val.x ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator -- (longlong1& val, int) { longlong1 ret; ret.x = val.x; val.x --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (longlong1& lhs, longlong1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const longlong1& lhs, longlong1& rhs) { return lhs.x == rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (longlong1& lhs, const longlong1& rhs) { return lhs.x == rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const longlong1& lhs, const longlong1& rhs) { return lhs.x == rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (longlong1& lhs, longlong1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const longlong1& lhs, longlong1& rhs) { return lhs.x != rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (longlong1& lhs, const longlong1& rhs) { return lhs.x != rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const longlong1& lhs, const longlong1& rhs) { return lhs.x != rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (longlong1& lhs, longlong1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const longlong1& lhs, longlong1& rhs) { return lhs.x < rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (longlong1& lhs, const longlong1& rhs) { return lhs.x < rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const longlong1& lhs, const longlong1& rhs) { return lhs.x < rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (longlong1& lhs, longlong1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const longlong1& lhs, longlong1& rhs) { return lhs.x > rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (longlong1& lhs, const longlong1& rhs) { return lhs.x > rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const longlong1& lhs, const longlong1& rhs) { return lhs.x > rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (longlong1& lhs, longlong1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const longlong1& lhs, longlong1& rhs) { return lhs.x <= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (longlong1& lhs, const longlong1& rhs) { return lhs.x <= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const longlong1& lhs, const longlong1& rhs) { return lhs.x <= rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (longlong1& lhs, longlong1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const longlong1& lhs, longlong1& rhs) { return lhs.x >= rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (longlong1& lhs, const longlong1& rhs) { return lhs.x >= rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const longlong1& lhs, const longlong1& rhs) { return lhs.x >= rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (longlong1& lhs, longlong1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const longlong1& lhs, longlong1& rhs) { return lhs.x && rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (longlong1& lhs, const longlong1& rhs) { return lhs.x && rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const longlong1& lhs, const longlong1& rhs) { return lhs.x && rhs.x ; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (longlong1& lhs, longlong1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const longlong1& lhs, longlong1& rhs) { return lhs.x || rhs.x; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (longlong1& lhs, const longlong1& rhs) { return lhs.x || rhs.x ; } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const longlong1& lhs, const longlong1& rhs) { return lhs.x || rhs.x ; }

__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator ~(longlong1& rhs) { longlong1 ret; ret.x = ~ rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (longlong1& rhs) { return ! rhs.x; }

__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (const longlong1& lhs, unsigned char rhs) { longlong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (unsigned char lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (const longlong1& lhs, signed char rhs) { longlong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (signed char lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (const longlong1& lhs, unsigned short rhs) { longlong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (unsigned short lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (const longlong1& lhs, signed short rhs) { longlong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (signed short lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (const longlong1& lhs, unsigned int rhs) { longlong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (unsigned int lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (const longlong1& lhs, signed int rhs) { longlong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (signed int lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (const longlong1& lhs, float rhs) { longlong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (float lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (const longlong1& lhs, unsigned long rhs) { longlong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (unsigned long lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (const longlong1& lhs, signed long rhs) { longlong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (signed long lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (const longlong1& lhs, double rhs) { longlong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (double lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (const longlong1& lhs, unsigned long long rhs) { longlong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (unsigned long long lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs * rhs.x; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (const longlong1& lhs, signed long long rhs) { longlong1 ret; ret.x = lhs.x * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong1 operator * (signed long long lhs, const longlong1& rhs) { longlong1 ret; ret.x = lhs * rhs.x; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator + (const longlong2& lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator - (const longlong2& lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (const longlong2& lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator / (const longlong2& lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator % (const longlong2& lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator & (const longlong2& lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator | (const longlong2& lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator ^ (const longlong2& lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator << (const longlong2& lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator >> (const longlong2& lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline longlong2& operator += ( longlong2& lhs, const longlong2& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2& operator -= ( longlong2& lhs, const longlong2& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2& operator *= ( longlong2& lhs, const longlong2& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2& operator /= ( longlong2& lhs, const longlong2& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2& operator %= ( longlong2& lhs, const longlong2& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2& operator &= ( longlong2& lhs, const longlong2& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2& operator |= ( longlong2& lhs, const longlong2& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2& operator ^= ( longlong2& lhs, const longlong2& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2& operator <<= ( longlong2& lhs, const longlong2& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2& operator >>= ( longlong2& lhs, const longlong2& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline longlong2& operator ++ (longlong2& val) { ++ val.x; ++ val.y; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2& operator -- (longlong2& val) { -- val.x; -- val.y; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator ++ (longlong2& val, int) { longlong2 ret; ret.x = val.x; ret.y = val.y; val.x ++; val.y ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator -- (longlong2& val, int) { longlong2 ret; ret.x = val.x; ret.y = val.y; val.x --; val.y --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (longlong2& lhs, longlong2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const longlong2& lhs, longlong2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (longlong2& lhs, const longlong2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const longlong2& lhs, const longlong2& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (longlong2& lhs, longlong2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const longlong2& lhs, longlong2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (longlong2& lhs, const longlong2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const longlong2& lhs, const longlong2& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (longlong2& lhs, longlong2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const longlong2& lhs, longlong2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (longlong2& lhs, const longlong2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const longlong2& lhs, const longlong2& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (longlong2& lhs, longlong2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const longlong2& lhs, longlong2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (longlong2& lhs, const longlong2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const longlong2& lhs, const longlong2& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (longlong2& lhs, longlong2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const longlong2& lhs, longlong2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (longlong2& lhs, const longlong2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const longlong2& lhs, const longlong2& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (longlong2& lhs, longlong2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const longlong2& lhs, longlong2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (longlong2& lhs, const longlong2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const longlong2& lhs, const longlong2& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (longlong2& lhs, longlong2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const longlong2& lhs, longlong2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (longlong2& lhs, const longlong2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const longlong2& lhs, const longlong2& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (longlong2& lhs, longlong2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const longlong2& lhs, longlong2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (longlong2& lhs, const longlong2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const longlong2& lhs, const longlong2& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator ~(longlong2 &rhs) { longlong2 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (longlong2 &rhs) { return (! rhs.x) && (! rhs.y); }

__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (const longlong2& lhs, unsigned char rhs) { longlong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (unsigned char lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (const longlong2& lhs, signed char rhs) { longlong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (signed char lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (const longlong2& lhs, unsigned short rhs) { longlong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (unsigned short lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (const longlong2& lhs, signed short rhs) { longlong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (signed short lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (const longlong2& lhs, unsigned int rhs) { longlong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (unsigned int lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (const longlong2& lhs, signed int rhs) { longlong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (signed int lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (const longlong2& lhs, float rhs) { longlong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (float lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (const longlong2& lhs, unsigned long rhs) { longlong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (unsigned long lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (const longlong2& lhs, signed long rhs) { longlong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (signed long lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (const longlong2& lhs, double rhs) { longlong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (double lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (const longlong2& lhs, unsigned long long rhs) { longlong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (unsigned long long lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (const longlong2& lhs, signed long long rhs) { longlong2 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong2 operator * (signed long long lhs, const longlong2& rhs) { longlong2 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator + (const longlong3& lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator - (const longlong3& lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (const longlong3& lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator / (const longlong3& lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator % (const longlong3& lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator & (const longlong3& lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator | (const longlong3& lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator ^ (const longlong3& lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator << (const longlong3& lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator >> (const longlong3& lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline longlong3& operator += ( longlong3& lhs, const longlong3& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3& operator -= ( longlong3& lhs, const longlong3& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3& operator *= ( longlong3& lhs, const longlong3& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3& operator /= ( longlong3& lhs, const longlong3& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3& operator %= ( longlong3& lhs, const longlong3& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3& operator &= ( longlong3& lhs, const longlong3& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3& operator |= ( longlong3& lhs, const longlong3& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3& operator ^= ( longlong3& lhs, const longlong3& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3& operator <<= ( longlong3& lhs, const longlong3& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3& operator >>= ( longlong3& lhs, const longlong3& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline longlong3& operator ++ (longlong3& val) { ++ val.x; ++ val.y; ++ val.z; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3& operator -- (longlong3& val) { -- val.x; -- val.y; -- val.z; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator ++ (longlong3& val, int) { longlong3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x ++; val.y ++; val.z ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator -- (longlong3& val, int) { longlong3 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; val.x --; val.y --; val.z --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (longlong3& lhs, longlong3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const longlong3& lhs, longlong3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (longlong3& lhs, const longlong3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const longlong3& lhs, const longlong3& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (longlong3& lhs, longlong3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const longlong3& lhs, longlong3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (longlong3& lhs, const longlong3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const longlong3& lhs, const longlong3& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (longlong3& lhs, longlong3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const longlong3& lhs, longlong3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (longlong3& lhs, const longlong3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const longlong3& lhs, const longlong3& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (longlong3& lhs, longlong3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const longlong3& lhs, longlong3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (longlong3& lhs, const longlong3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const longlong3& lhs, const longlong3& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (longlong3& lhs, longlong3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const longlong3& lhs, longlong3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (longlong3& lhs, const longlong3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const longlong3& lhs, const longlong3& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (longlong3& lhs, longlong3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const longlong3& lhs, longlong3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (longlong3& lhs, const longlong3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const longlong3& lhs, const longlong3& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (longlong3& lhs, longlong3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const longlong3& lhs, longlong3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (longlong3& lhs, const longlong3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const longlong3& lhs, const longlong3& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (longlong3& lhs, longlong3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const longlong3& lhs, longlong3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (longlong3& lhs, const longlong3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const longlong3& lhs, const longlong3& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator ~(longlong3 &rhs) { longlong3 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (longlong3 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z); }

__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (const longlong3& lhs, unsigned char rhs) { longlong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (unsigned char lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (const longlong3& lhs, signed char rhs) { longlong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (signed char lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (const longlong3& lhs, unsigned short rhs) { longlong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (unsigned short lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (const longlong3& lhs, signed short rhs) { longlong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (signed short lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (const longlong3& lhs, unsigned int rhs) { longlong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (unsigned int lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (const longlong3& lhs, signed int rhs) { longlong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (signed int lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (const longlong3& lhs, float rhs) { longlong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (float lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (const longlong3& lhs, unsigned long rhs) { longlong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (unsigned long lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (const longlong3& lhs, signed long rhs) { longlong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (signed long lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (const longlong3& lhs, double rhs) { longlong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (double lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (const longlong3& lhs, unsigned long long rhs) { longlong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (unsigned long long lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (const longlong3& lhs, signed long long rhs) { longlong3 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong3 operator * (signed long long lhs, const longlong3& rhs) { longlong3 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; return ret; }



__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator + ( const longlong4& lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs.x + rhs.x; ret.y = lhs.y + rhs.y; ret.z = lhs.z + rhs.z; ret.w = lhs.w + rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator - ( const longlong4& lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs.x - rhs.x; ret.y = lhs.y - rhs.y; ret.z = lhs.z - rhs.z; ret.w = lhs.w - rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * ( const longlong4& lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs.x * rhs.x; ret.y = lhs.y * rhs.y; ret.z = lhs.z * rhs.z; ret.w = lhs.w * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator / ( const longlong4& lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs.x / rhs.x; ret.y = lhs.y / rhs.y; ret.z = lhs.z / rhs.z; ret.w = lhs.w / rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator % ( const longlong4& lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs.x % rhs.x; ret.y = lhs.y % rhs.y; ret.z = lhs.z % rhs.z; ret.w = lhs.w % rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator & ( const longlong4& lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs.x & rhs.x; ret.y = lhs.y & rhs.y; ret.z = lhs.z & rhs.z; ret.w = lhs.w & rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator | ( const longlong4& lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs.x | rhs.x; ret.y = lhs.y | rhs.y; ret.z = lhs.z | rhs.z; ret.w = lhs.w | rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator ^ ( const longlong4& lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs.x ^ rhs.x; ret.y = lhs.y ^ rhs.y; ret.z = lhs.z ^ rhs.z; ret.w = lhs.w ^ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator << ( const longlong4& lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs.x << rhs.x; ret.y = lhs.y << rhs.y; ret.z = lhs.z << rhs.z; ret.w = lhs.w << rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator >> ( const longlong4& lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs.x >> rhs.x; ret.y = lhs.y >> rhs.y; ret.z = lhs.z >> rhs.z; ret.w = lhs.w >> rhs.w; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline longlong4& operator += ( longlong4& lhs, const longlong4& rhs) { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; lhs.w += rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4& operator -= ( longlong4& lhs, const longlong4& rhs) { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; lhs.w -= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4& operator *= ( longlong4& lhs, const longlong4& rhs) { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; lhs.w *= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4& operator /= ( longlong4& lhs, const longlong4& rhs) { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; lhs.w /= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4& operator %= ( longlong4& lhs, const longlong4& rhs) { lhs.x %= rhs.x; lhs.y %= rhs.y; lhs.z %= rhs.z; lhs.w %= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4& operator &= ( longlong4& lhs, const longlong4& rhs) { lhs.x &= rhs.x; lhs.y &= rhs.y; lhs.z &= rhs.z; lhs.w &= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4& operator |= ( longlong4& lhs, const longlong4& rhs) { lhs.x |= rhs.x; lhs.y |= rhs.y; lhs.z |= rhs.z; lhs.w |= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4& operator ^= ( longlong4& lhs, const longlong4& rhs) { lhs.x ^= rhs.x; lhs.y ^= rhs.y; lhs.z ^= rhs.z; lhs.w ^= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4& operator <<= ( longlong4& lhs, const longlong4& rhs) { lhs.x <<= rhs.x; lhs.y <<= rhs.y; lhs.z <<= rhs.z; lhs.w <<= rhs.w; return lhs; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4& operator >>= ( longlong4& lhs, const longlong4& rhs) { lhs.x >>= rhs.x; lhs.y >>= rhs.y; lhs.z >>= rhs.z; lhs.w >>= rhs.w; return lhs; }

__attribute__((hc)) __attribute__((cpu)) static inline longlong4& operator ++ (longlong4& val) { ++ val.x; ++ val.y; ++ val.z; ++ val.w; return val; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4& operator -- (longlong4& val) { -- val.x; -- val.y; -- val.z; -- val.w; return val; }

__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator ++ (longlong4& val, int) { longlong4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x ++; val.y ++; val.z ++; val.w ++; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator -- (longlong4& val, int) { longlong4 ret; ret.x = val.x; ret.y = val.y; ret.z = val.z; ret.w = val.w; val.x --; val.y --; val.z --; val.w --; return ret; }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator == (longlong4& lhs, longlong4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const longlong4& lhs, longlong4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (longlong4& lhs, const longlong4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator == (const longlong4& lhs, const longlong4& rhs) { return (lhs.x == rhs.x) && (lhs.y == rhs.y) && (lhs.z == rhs.z) && (lhs.w == rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator != (longlong4& lhs, longlong4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const longlong4& lhs, longlong4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (longlong4& lhs, const longlong4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator != (const longlong4& lhs, const longlong4& rhs) { return (lhs.x != rhs.x) && (lhs.y != rhs.y) && (lhs.z != rhs.z) && (lhs.w != rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator < (longlong4& lhs, longlong4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const longlong4& lhs, longlong4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (longlong4& lhs, const longlong4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator < (const longlong4& lhs, const longlong4& rhs) { return (lhs.x < rhs.x) && (lhs.y < rhs.y) && (lhs.z < rhs.z) && (lhs.w < rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator > (longlong4& lhs, longlong4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const longlong4& lhs, longlong4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (longlong4& lhs, const longlong4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator > (const longlong4& lhs, const longlong4& rhs) { return (lhs.x > rhs.x) && (lhs.y > rhs.y) && (lhs.z > rhs.z) && (lhs.w > rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (longlong4& lhs, longlong4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const longlong4& lhs, longlong4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (longlong4& lhs, const longlong4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator <= (const longlong4& lhs, const longlong4& rhs) { return (lhs.x <= rhs.x) && (lhs.y <= rhs.y) && (lhs.z <= rhs.z) && (lhs.w <= rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (longlong4& lhs, longlong4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const longlong4& lhs, longlong4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (longlong4& lhs, const longlong4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator >= (const longlong4& lhs, const longlong4& rhs) { return (lhs.x >= rhs.x) && (lhs.y >= rhs.y) && (lhs.z >= rhs.z) && (lhs.w >= rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline bool operator && (longlong4& lhs, longlong4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const longlong4& lhs, longlong4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (longlong4& lhs, const longlong4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator && (const longlong4& lhs, const longlong4& rhs) { return (lhs.x && rhs.x) && (lhs.y && rhs.y) && (lhs.z && rhs.z) && (lhs.w && rhs.w); }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator || (longlong4& lhs, longlong4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const longlong4& lhs, longlong4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (longlong4& lhs, const longlong4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); } __attribute__((hc)) __attribute__((cpu)) static inline bool operator || (const longlong4& lhs, const longlong4& rhs) { return (lhs.x || rhs.x) && (lhs.y || rhs.y) && (lhs.z || rhs.z) && (lhs.w || rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator ~(longlong4 &rhs) { longlong4 ret; ret.x = ~ rhs.x; ret.y = ~ rhs.y; ret.z = ~ rhs.z; ret.w = ~ rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline bool operator ! (longlong4 &rhs) { return (! rhs.x) && (! rhs.y) && (! rhs.z) && (! rhs.w); }

__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (const longlong4& lhs, unsigned char rhs) { longlong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (unsigned char lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (const longlong4& lhs, signed char rhs) { longlong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (signed char lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (const longlong4& lhs, unsigned short rhs) { longlong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (unsigned short lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (const longlong4& lhs, signed short rhs) { longlong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (signed short lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (const longlong4& lhs, unsigned int rhs) { longlong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (unsigned int lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (const longlong4& lhs, signed int rhs) { longlong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (signed int lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (const longlong4& lhs, float rhs) { longlong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (float lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (const longlong4& lhs, unsigned long rhs) { longlong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (unsigned long lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (const longlong4& lhs, signed long rhs) { longlong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (signed long lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (const longlong4& lhs, double rhs) { longlong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (double lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (const longlong4& lhs, unsigned long long rhs) { longlong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (unsigned long long lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
__attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (const longlong4& lhs, signed long long rhs) { longlong4 ret; ret.x = lhs.x * rhs; ret.y = lhs.y * rhs; ret.z = lhs.z * rhs; ret.w = lhs.w * rhs; return ret; } __attribute__((hc)) __attribute__((cpu)) static inline longlong4 operator * (signed long long lhs, const longlong4& rhs) { longlong4 ret; ret.x = lhs * rhs.x; ret.y = lhs * rhs.y; ret.z = lhs * rhs.z; ret.w = lhs * rhs.w; return ret; }
# 28 "/opt/rocm/hip/include/hip/hcc_detail/channel_descriptor.h" 2



hipChannelFormatDesc hipCreateChannelDesc(int x, int y, int z, int w, hipChannelFormatKind f);

static inline hipChannelFormatDesc hipCreateChannelDescHalf() {
  int e = (int)sizeof(unsigned short) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindFloat);
}

static inline hipChannelFormatDesc hipCreateChannelDescHalf1() {
  int e = (int)sizeof(unsigned short) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindFloat);
}

static inline hipChannelFormatDesc hipCreateChannelDescHalf2()
{
  int e = (int)sizeof(unsigned short) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindFloat);
}

template<typename T>
static inline hipChannelFormatDesc hipCreateChannelDesc() {
  return hipCreateChannelDesc(0, 0, 0, 0, hipChannelFormatKindNone);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<char>()
{
  int e = (int)sizeof(char) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<signed char>()
{
  int e = (int)sizeof(signed char) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<unsigned char>()
{
  int e = (int)sizeof(unsigned char) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<uchar1>()
{
  int e = (int)sizeof(unsigned char) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<char1>()
{
  int e = (int)sizeof(signed char) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<uchar2>()
{
  int e = (int)sizeof(unsigned char) * 8;
  return hipCreateChannelDesc(e, e, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<char2>()
{
  int e = (int)sizeof(signed char) * 8;
  return hipCreateChannelDesc(e, e, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<uchar3>()
{
  int e = (int)sizeof(unsigned char) * 8;
  return hipCreateChannelDesc(e, e, e, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<char3>()
{
  int e = (int)sizeof(signed char) * 8;
  return hipCreateChannelDesc(e, e, e, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<uchar4>()
{
  int e = (int)sizeof(unsigned char) * 8;
  return hipCreateChannelDesc(e, e, e, e, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<char4>()
{
  int e = (int)sizeof(signed char) * 8;
  return hipCreateChannelDesc(e, e, e, e, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<unsigned short>()
{
  int e = (int)sizeof(unsigned short) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<signed short>()
{
  int e = (int)sizeof(signed short) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<ushort1>()
{
  int e = (int)sizeof(unsigned short) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<short1>()
{
  int e = (int)sizeof(signed short) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<ushort2>()
{
  int e = (int)sizeof(unsigned short) * 8;
  return hipCreateChannelDesc(e, e, 0, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<short2>()
{
  int e = (int)sizeof(signed short) * 8;
  return hipCreateChannelDesc(e, e, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<ushort3>()
{
  int e = (int)sizeof(unsigned short) * 8;
  return hipCreateChannelDesc(e, e, e, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<short3>()
{
  int e = (int)sizeof(signed short) * 8;
  return hipCreateChannelDesc(e, e, e, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<ushort4>()
{
  int e = (int)sizeof(unsigned short) * 8;
  return hipCreateChannelDesc(e, e, e, e, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<short4>()
{
  int e = (int)sizeof(signed short) * 8;
  return hipCreateChannelDesc(e, e, e, e, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<unsigned int>()
{
  int e = (int)sizeof(unsigned int) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<signed int>()
{
  int e = (int)sizeof(signed int) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<uint1>()
{
  int e = (int)sizeof(unsigned int) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<int1>()
{
  int e = (int)sizeof(signed int) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<uint2>()
{
  int e = (int)sizeof(unsigned int) * 8;
  return hipCreateChannelDesc(e, e, 0, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<int2>()
{
  int e = (int)sizeof(signed int) * 8;
  return hipCreateChannelDesc(e, e, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<uint3>()
{
  int e = (int)sizeof(unsigned int) * 8;
  return hipCreateChannelDesc(e, e, e, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<int3>()
{
  int e = (int)sizeof(signed int) * 8;
  return hipCreateChannelDesc(e, e, e, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<uint4>()
{
  int e = (int)sizeof(unsigned int) * 8;
  return hipCreateChannelDesc(e, e, e, e, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<int4>()
{
  int e = (int)sizeof(signed int) * 8;
  return hipCreateChannelDesc(e, e, e, e, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<float>()
{
  int e = (int)sizeof(float) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindFloat);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<float1>()
{
  int e = (int)sizeof(float) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindFloat);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<float2>()
{
  int e = (int)sizeof(float) * 8;
  return hipCreateChannelDesc(e, e, 0, 0, hipChannelFormatKindFloat);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<float3>()
{
  int e = (int)sizeof(float) * 8;
  return hipCreateChannelDesc(e, e, e, 0, hipChannelFormatKindFloat);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<float4>()
{
  int e = (int)sizeof(float) * 8;
  return hipCreateChannelDesc(e, e, e, e, hipChannelFormatKindFloat);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<unsigned long>()
{
  int e = (int)sizeof(unsigned long) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<signed long>()
{
  int e = (int)sizeof(signed long) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<ulong1>()
{
  int e = (int)sizeof(unsigned long) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<long1>()
{
  int e = (int)sizeof(signed long) * 8;
  return hipCreateChannelDesc(e, 0, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<ulong2>()
{
  int e = (int)sizeof(unsigned long) * 8;
  return hipCreateChannelDesc(e, e, 0, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<long2>()
{
  int e = (int)sizeof(signed long) * 8;
  return hipCreateChannelDesc(e, e, 0, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<ulong3>()
{
  int e = (int)sizeof(unsigned long) * 8;
  return hipCreateChannelDesc(e, e, e, 0, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<long3>()
{
  int e = (int)sizeof(signed long) * 8;
  return hipCreateChannelDesc(e, e, e, 0, hipChannelFormatKindSigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<ulong4>()
{
  int e = (int)sizeof(unsigned long) * 8;
  return hipCreateChannelDesc(e, e, e, e, hipChannelFormatKindUnsigned);
}

template<>
inline hipChannelFormatDesc hipCreateChannelDesc<long4>()
{
  int e = (int)sizeof(signed long) * 8;
  return hipCreateChannelDesc(e, e, e, e, hipChannelFormatKindSigned);
}
# 36 "/opt/rocm/hip/include/hip/hcc_detail/hip_texture.h" 2
# 1 "/opt/rocm/hip/include/hip/hcc_detail/texture_types.h" 1
# 29 "/opt/rocm/hip/include/hip/hcc_detail/texture_types.h"
enum hipTextureReadMode
{
  hipReadModeElementType = 0
};

enum hipTextureFilterMode
{
  hipFilterModePoint = 0
};

struct textureReference {
  enum hipTextureFilterMode filterMode;
  unsigned normalized;
  struct hipChannelFormatDesc channelDesc;
};
# 37 "/opt/rocm/hip/include/hip/hcc_detail/hip_texture.h" 2







template <class T, int texType=1, hipTextureReadMode readMode=hipReadModeElementType>
struct texture : public textureReference {

    const T * _dataPtr;


    unsigned int width;
    unsigned int height;

};
# 28 "/opt/rocm/hip/include/hip/hip_texture.h" 2
# 41 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h" 2
# 52 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
extern "C" {




typedef struct ihipCtx_t *hipCtx_t;


typedef int hipDevice_t;

typedef struct ihipStream_t *hipStream_t;







typedef struct hipIpcMemHandle_st
{
    char reserved[64];
}hipIpcMemHandle_t;


struct ihipIpcEventHandle_t;
typedef struct ihipIpcEventHandle_t *hipIpcEventHandle_t;




typedef struct ihipModule_t *hipModule_t;

typedef struct ihipModuleSymbol_t *hipFunction_t;

typedef void* hipDeviceptr_t;

typedef struct ihipEvent_t *hipEvent_t;

enum hipLimit_t
{
    hipLimitMallocHeapSize = 0x02,
};
# 145 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
typedef enum hipJitOption {
  hipJitOptionMaxRegisters = 0,
  hipJitOptionThreadsPerBlock,
  hipJitOptionWallTime,
  hipJitOptionInfoLogBuffer,
  hipJitOptionInfoLogBufferSizeBytes,
  hipJitOptionErrorLogBuffer,
  hipJitOptionErrorLogBufferSizeBytes,
  hipJitOptionOptimizationLevel,
  hipJitOptionTargetFromContext,
  hipJitOptionTarget,
  hipJitOptionFallbackStrategy,
  hipJitOptionGenerateDebugInfo,
  hipJitOptionLogVerbose,
  hipJitOptionGenerateLineInfo,
  hipJitOptionCacheMode,
  hipJitOptionSm3xOpt,
  hipJitOptionFastCompile,
  hipJitOptionNumOptions
} hipJitOption;





typedef enum hipFuncCache_t {
    hipFuncCachePreferNone,
    hipFuncCachePreferShared,
    hipFuncCachePreferL1,
    hipFuncCachePreferEqual,
} hipFuncCache_t;





typedef enum hipSharedMemConfig {
    hipSharedMemBankSizeDefault,
    hipSharedMemBankSizeFourByte,
    hipSharedMemBankSizeEightByte
} hipSharedMemConfig;







typedef struct dim3 {
  uint32_t x;
  uint32_t y;
  uint32_t z;

  dim3(uint32_t _x=1, uint32_t _y=1, uint32_t _z=1) : x(_x), y(_y), z(_z) {};

} dim3;






typedef enum hipMemcpyKind {
   hipMemcpyHostToHost = 0
  ,hipMemcpyHostToDevice = 1
  ,hipMemcpyDeviceToHost = 2
  ,hipMemcpyDeviceToDevice =3
  ,hipMemcpyDefault = 4,
} hipMemcpyKind;

typedef struct {
  unsigned int width;
  unsigned int height;
  enum hipChannelFormatKind f;
  void* data;
} hipArray;
# 274 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceSynchronize(void);
# 288 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceReset(void) ;
# 317 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipSetDevice(int deviceId);
# 333 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipGetDevice(int *deviceId);
# 347 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipGetDeviceCount(int *count);
# 358 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceGetAttribute(int* pi, hipDeviceAttribute_t attr, int deviceId);
# 373 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipGetDeviceProperties(hipDeviceProp_t* prop, int deviceId);
# 385 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceSetCacheConfig ( hipFuncCache_t cacheConfig );
# 397 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceGetCacheConfig ( hipFuncCache_t *cacheConfig );
# 409 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceGetLimit(size_t *pValue, enum hipLimit_t limit);
# 421 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipFuncSetCacheConfig (const void* func, hipFuncCache_t config );
# 433 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceGetSharedMemConfig ( hipSharedMemConfig * pConfig );
# 446 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceSetSharedMemConfig ( hipSharedMemConfig config );
# 467 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipSetDeviceFlags ( unsigned flags);
# 477 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipChooseDevice(int *device, const hipDeviceProp_t* prop);
# 501 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipGetLastError(void);
# 514 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipPeekAtLastError(void);
# 526 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
const char *hipGetErrorName(hipError_t hip_error);
# 539 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
const char *hipGetErrorString(hipError_t hipError);
# 575 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipStreamCreate(hipStream_t *stream);
# 594 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipStreamCreateWithFlags(hipStream_t *stream, unsigned int flags);
# 612 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipStreamDestroy(hipStream_t stream);
# 627 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipStreamQuery(hipStream_t stream);
# 647 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipStreamSynchronize(hipStream_t stream);
# 668 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipStreamWaitEvent(hipStream_t stream, hipEvent_t event, unsigned int flags);
# 685 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipStreamGetFlags(hipStream_t stream, unsigned int *flags);




typedef void(* hipStreamCallback_t)(hipStream_t stream, hipError_t status, void* userData);
# 706 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipStreamAddCallback(hipStream_t stream, hipStreamCallback_t callback, void *userData, unsigned int flags);
# 740 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipEventCreateWithFlags(hipEvent_t* event, unsigned flags);
# 752 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipEventCreate(hipEvent_t* event);
# 780 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipEventRecord(hipEvent_t event, hipStream_t stream = __null);
# 798 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipEventDestroy(hipEvent_t event);
# 815 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipEventSynchronize(hipEvent_t event);
# 844 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipEventElapsedTime(float *ms, hipEvent_t start, hipEvent_t stop);
# 859 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipEventQuery(hipEvent_t event) ;
# 894 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipPointerGetAttributes(hipPointerAttribute_t *attributes, const void* ptr);
# 908 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMalloc(void** ptr, size_t size) ;
# 922 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMallocHost(void** ptr, size_t size) __attribute__((deprecated("use hipHostMalloc instead"))) ;
# 937 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipHostMalloc(void** ptr, size_t size, unsigned int flags) ;
# 952 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipHostAlloc(void** ptr, size_t size, unsigned int flags) __attribute__((deprecated("use hipHostMalloc instead"))) ;
# 965 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipHostGetDevicePointer(void** devPtr, void* hstPtr, unsigned int flags) ;
# 976 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipHostGetFlags(unsigned int* flagsPtr, void* hostPtr) ;
# 1010 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipHostRegister(void* hostPtr, size_t sizeBytes, unsigned int flags) ;
# 1020 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipHostUnregister(void* hostPtr) ;
# 1040 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMallocPitch(void** ptr, size_t* pitch, size_t width, size_t height);
# 1053 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipFree(void* ptr);
# 1064 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipFreeHost(void* ptr) __attribute__((deprecated("use hipHostFree instead")));
# 1077 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipHostFree(void* ptr);
# 1100 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpy(void* dst, const void* src, size_t sizeBytes, hipMemcpyKind kind);
# 1113 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpyHtoD(hipDeviceptr_t dst, void* src, size_t sizeBytes);
# 1126 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpyDtoH(void* dst, hipDeviceptr_t src, size_t sizeBytes);
# 1139 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpyDtoD(hipDeviceptr_t dst, hipDeviceptr_t src, size_t sizeBytes);
# 1152 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpyHtoDAsync(hipDeviceptr_t dst, void* src, size_t sizeBytes, hipStream_t stream);
# 1165 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpyDtoHAsync(void* dst, hipDeviceptr_t src, size_t sizeBytes, hipStream_t stream);
# 1178 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpyDtoDAsync(hipDeviceptr_t dst, hipDeviceptr_t src, size_t sizeBytes, hipStream_t stream);
# 1197 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpyToSymbol(const void* symbolName, const void *src, size_t sizeBytes, size_t offset = 0, hipMemcpyKind kind = hipMemcpyHostToDevice);
# 1217 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpyToSymbolAsync(const void* symbolName, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream = 0);

hipError_t hipMemcpyFromSymbol(void *dst, const void* symbolName, size_t sizeBytes, size_t offset = 0, hipMemcpyKind kind = hipMemcpyDeviceToHost);

hipError_t hipMemcpyFromSymbolAsync(void *dst, const void* symbolName, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream = 0);
# 1246 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpyAsync(void* dst, const void* src, size_t sizeBytes, hipMemcpyKind kind, hipStream_t stream=0);
# 1259 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemset(void* dst, int value, size_t sizeBytes );
# 1269 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemsetD8(hipDeviceptr_t dest, unsigned char value, size_t sizeBytes );
# 1285 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemsetAsync(void* dst, int value, size_t sizeBytes, hipStream_t stream = 0 );
# 1298 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemGetInfo (size_t * free, size_t * total) ;


hipError_t hipMemPtrGetInfo(void *ptr, size_t *size);
# 1317 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMallocArray(hipArray** array, const hipChannelFormatDesc* desc,
                          size_t width, size_t height = 0, unsigned int flags = 0);
# 1331 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipFreeArray(hipArray* array);
# 1347 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpy2D(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind);
# 1365 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpy2DAsync(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind, hipStream_t stream = 0);
# 1384 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpy2DToArray(hipArray* dst, size_t wOffset, size_t hOffset, const void* src,
                              size_t spitch, size_t width, size_t height, hipMemcpyKind kind);
# 1401 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpyToArray(hipArray* dst, size_t wOffset, size_t hOffset,
                            const void* src, size_t count, hipMemcpyKind kind);
# 1439 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceCanAccessPeer (int* canAccessPeer, int deviceId, int peerDeviceId);
# 1457 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceEnablePeerAccess (int peerDeviceId, unsigned int flags);
# 1470 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceDisablePeerAccess (int peerDeviceId);
# 1483 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemGetAddressRange ( hipDeviceptr_t* pbase, size_t* psize, hipDeviceptr_t dptr );
# 1502 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpyPeer (void* dst, int dstDeviceId, const void* src, int srcDeviceId, size_t sizeBytes);
# 1517 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipMemcpyPeerAsync ( void* dst, int dstDeviceId, const void* src, int srcDevice, size_t sizeBytes, hipStream_t stream=0 );
# 1544 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipInit(unsigned int flags) ;
# 1565 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxCreate(hipCtx_t *ctx, unsigned int flags, hipDevice_t device);
# 1576 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxDestroy(hipCtx_t ctx);
# 1587 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxPopCurrent(hipCtx_t* ctx);
# 1598 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxPushCurrent(hipCtx_t ctx);
# 1609 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxSetCurrent(hipCtx_t ctx);
# 1620 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxGetCurrent(hipCtx_t* ctx);
# 1632 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxGetDevice(hipDevice_t *device);
# 1650 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxGetApiVersion (hipCtx_t ctx,int *apiVersion);
# 1663 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxGetCacheConfig ( hipFuncCache_t *cacheConfig );
# 1676 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxSetCacheConfig ( hipFuncCache_t cacheConfig );
# 1689 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxSetSharedMemConfig ( hipSharedMemConfig config );
# 1702 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxGetSharedMemConfig ( hipSharedMemConfig * pConfig );
# 1713 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxSynchronize ( void );
# 1724 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxGetFlags ( unsigned int* flags );
# 1742 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxEnablePeerAccess (hipCtx_t peerCtx, unsigned int flags);
# 1756 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipCtxDisablePeerAccess (hipCtx_t peerCtx);
# 1769 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDevicePrimaryCtxGetState ( hipDevice_t dev, unsigned int* flags, int* active );
# 1781 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDevicePrimaryCtxRelease ( hipDevice_t dev);
# 1793 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDevicePrimaryCtxRetain ( hipCtx_t* pctx, hipDevice_t dev );
# 1804 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDevicePrimaryCtxReset ( hipDevice_t dev );
# 1816 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDevicePrimaryCtxSetFlags ( hipDevice_t dev, unsigned int flags );
# 1830 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceGet(hipDevice_t *device, int ordinal);
# 1840 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceComputeCapability(int *major,int *minor,hipDevice_t device);
# 1850 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceGetName(char *name,int len,hipDevice_t device);
# 1860 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceGetPCIBusId (char *pciBusId,int len,int device);
# 1870 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceGetByPCIBusId ( int* device,const int* pciBusId );
# 1880 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDeviceTotalMem (size_t *bytes,hipDevice_t device);
# 1897 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipDriverGetVersion(int *driverVersion) ;
# 1911 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipRuntimeGetVersion(int *runtimeVersion) ;
# 1923 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipModuleLoad(hipModule_t *module, const char *fname);
# 1935 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipModuleUnload(hipModule_t module);
# 1946 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipModuleGetFunction(hipFunction_t *function, hipModule_t module, const char *kname);
# 1958 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipModuleGetGlobal(hipDeviceptr_t *dptr, size_t *bytes, hipModule_t hmod, const char *name);
# 1968 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipModuleLoadData(hipModule_t *module, const void *image);
# 1981 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipModuleLoadDataEx(hipModule_t *module, const void *image, unsigned int numOptions, hipJitOption *options, void **optionValues);
# 2002 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipModuleLaunchKernel(hipFunction_t f,
                              unsigned int gridDimX,
                              unsigned int gridDimY,
                              unsigned int gridDimZ,
                              unsigned int blockDimX,
                              unsigned int blockDimY,
                              unsigned int blockDimZ,
                              unsigned int sharedMemBytes,
                              hipStream_t stream,
                              void **kernelParams,
                              void **extra) ;
# 2038 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipProfilerStart();







hipError_t hipProfilerStop();
# 2080 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipIpcGetMemHandle(hipIpcMemHandle_t *handle, void *devPtr);
# 2118 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipIpcOpenMemHandle(void **devPtr,
        hipIpcMemHandle_t handle, unsigned int flags);
# 2139 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
hipError_t hipIpcCloseMemHandle(void *devPtr);
# 2149 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
}
# 2166 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
template <class T, int dim, enum hipTextureReadMode readMode>
hipError_t hipBindTexture(size_t *offset,
                                     struct texture<T, dim, readMode> &tex,
                                     const void *devPtr,
                                     const struct hipChannelFormatDesc *desc,
                                     size_t size=(2147483647 *2U +1U))
{
    tex._dataPtr = static_cast<const T*>(devPtr);

    return hipSuccess;
}
# 2190 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
template <class T, int dim, enum hipTextureReadMode readMode>
hipError_t hipBindTexture(size_t *offset,
                                     struct texture<T, dim, readMode> &tex,
                                     const void *devPtr,
                                     size_t size=(2147483647 *2U +1U))
{
    return hipBindTexture(offset, tex, devPtr, &tex.channelDesc, size);
}

template <class T, int dim, enum hipTextureReadMode readMode>
hipError_t hipBindTextureToArray(struct texture<T, dim, readMode> &tex, hipArray* array) {
  tex.width = array->width;
  tex.height = array->height;
  tex._dataPtr = static_cast<const T*>(array->data);
  return hipSuccess;
}
# 2214 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime_api.h"
template <class T, int dim, enum hipTextureReadMode readMode>
hipError_t hipUnbindTexture(struct texture<T, dim, readMode> &tex)
{
    tex._dataPtr = __null;

    return hipSuccess;
}
# 260 "/opt/rocm/hip/include/hip/hip_runtime_api.h" 2
# 275 "/opt/rocm/hip/include/hip/hip_runtime_api.h"
template<class T>
static inline hipError_t hipMalloc ( T** devPtr, size_t size)
{
    return hipMalloc((void**)devPtr, size);
}


template<class T>
static inline hipError_t hipHostMalloc( T** ptr, size_t size, unsigned int flags = 0x0)
{
    return hipHostMalloc((void**)ptr, size, flags);
}
# 51 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h" 2
# 64 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h"
# 1 "/opt/rocm/hcc/include/grid_launch.h" 1




# 1 "/opt/rocm/hcc/include/hc_defines.h" 1



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/algorithm" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/algorithm" 3



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
# 60 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/algorithmfwd.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/algorithmfwd.h" 3








namespace std __attribute__ ((__visibility__ ("default")))
{
# 194 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _Predicate>
    bool
    all_of(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Predicate>
    bool
    any_of(_IIter, _IIter, _Predicate);


  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);


  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    copy_if(_IIter, _IIter, _OIter, _Predicate);

  template<typename _IIter, typename _Size, typename _OIter>
    _OIter
    copy_n(_IIter, _Size, _OIter);





  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);





  template<typename _IIter, typename _Predicate>
    _IIter
    find_if_not(_IIter, _IIter, _Predicate);






  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);


  template<typename _RAIter>
    bool
    is_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    bool
    is_heap(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    _RAIter
    is_heap_until(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    _RAIter
    is_heap_until(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _Predicate>
    bool
    is_partitioned(_IIter, _IIter, _Predicate);

  template<typename _FIter1, typename _FIter2>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2);

  template<typename _FIter1, typename _FIter2,
    typename _BinaryPredicate>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);

  template<typename _FIter>
    bool
    is_sorted(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    bool
    is_sorted(_FIter, _FIter, _Compare);

  template<typename _FIter>
    _FIter
    is_sorted_until(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    is_sorted_until(_FIter, _FIter, _Compare);


  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>

    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>

    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>

    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>

    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>

    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>

    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&, _Compare);

  template<typename _FIter>

    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>

    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter, _Compare);

  template<typename _Tp>

    _Tp
    min(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>

    _Tp
    min(initializer_list<_Tp>, _Compare);

  template<typename _Tp>

    _Tp
    max(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>

    _Tp
    max(initializer_list<_Tp>, _Compare);

  template<typename _Tp>

    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>

    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>, _Compare);




  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);


  template<typename _IIter, typename _Predicate>
    bool
    none_of(_IIter, _IIter, _Predicate);





  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);




  template<typename _IIter, typename _OIter1,
    typename _OIter2, typename _Predicate>
    pair<_OIter1, _OIter2>
    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);

  template<typename _FIter, typename _Predicate>
    _FIter
    partition_point(_FIter, _FIter, _Predicate);


  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  inline namespace _V2
  {
    template<typename _FIter>
      _FIter
      rotate(_FIter, _FIter, _FIter);
  }

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 552 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/algorithmfwd.h" 3
  template<typename _RAIter, typename _UGenerator>
    void
    shuffle(_RAIter, _RAIter, _UGenerator&&);


  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);

  template<typename _Tp>
    void
    swap(_Tp&, _Tp&)

    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)

    ;

  template<typename _Tp, size_t _Nm>
    void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])

    noexcept(noexcept(swap(*__a, *__b)))

    ;

  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);





  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>

    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>

    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>

    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>

    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,

     _Generator&&);




  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);


}
# 61 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 1 3
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first + __parent, __first + __child))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    {
      return std::__is_heap_until(__first, __n,
   __gnu_cxx::__ops::__iter_less_iter()) == __n;
    }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    {
      return std::__is_heap_until(__first, __n,
 __gnu_cxx::__ops::__iter_comp_iter(__comp)) == __n;
    }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value,
  _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 148 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;
                                                  ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value),
         __gnu_cxx::__ops::__iter_less_val());
    }
# 182 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;
                                                               ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value),
         __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(__first + __secondChild,
       __first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value),
         __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value), __comp);
    }
# 261 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                         ;
                                                     ;
                                              ;

      if (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last,
     __gnu_cxx::__ops::__iter_less_iter());
 }
    }
# 295 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {



                                                     ;
                                                         ;
                                                           ;

      if (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
 }
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 349 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      std::__make_heap(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 374 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {



                                                     ;

      std::__make_heap(__first, __last,
         __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 408 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;
                                              ;

      std::__sort_heap(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 434 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {



                                                     ;
                                                           ;

      std::__sort_heap(__first, __last,
         __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 460 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      return __first +
 std::__is_heap_until(__first, std::distance(__first, __last),
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 487 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {



                                                     ;

      return __first
 + std::__is_heap_until(__first, std::distance(__first, __last),
          __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 509 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::is_heap_until(__first, __last) == __last; }
# 522 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
    { return std::is_heap_until(__first, __last, __comp) == __last; }



}
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 2 3




# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/random" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/random" 3





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 3
# 39 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/random" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/random" 2 3
# 49 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/random" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 3





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 1 3
# 66 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Vector_impl(_Tp_alloc_type const& __a) noexcept
 : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Vector_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a)),
   _M_start(), _M_finish(), _M_end_of_storage()
 { }


 void _M_swap_data(_Vector_impl& __x) noexcept
 {
   std::swap(_M_start, __x._M_start);
   std::swap(_M_finish, __x._M_finish);
   std::swap(_M_end_of_storage, __x._M_end_of_storage);
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a) noexcept
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }


      _Vector_base(_Tp_alloc_type&& __a) noexcept
      : _M_impl(std::move(__a)) { }

      _Vector_base(_Vector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_swap_data(__x._M_impl); }

      _Vector_base(_Vector_base&& __x, const allocator_type& __a)
      : _M_impl(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_impl._M_swap_data(__x._M_impl);
 else
   {
     size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
     _M_create_storage(__n);
   }
      }


      ~_Vector_base() noexcept
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
      }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 if (__p)
   _Tr::deallocate(_M_impl, __p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
    };
# 213 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;



      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:






      vector()

      noexcept(is_nothrow_default_constructible<_Alloc>::value)

      : _Base() { }





      explicit
      vector(const allocator_type& __a) noexcept
      : _Base(__a) { }
# 276 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_default_initialize(__n); }
# 289 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 318 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 335 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      vector(vector&& __x) noexcept
      : _Base(std::move(__x)) { }


      vector(const vector& __x, const allocator_type& __a)
      : _Base(__x.size(), __a)
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }


      vector(vector&& __rv, const allocator_type& __m)
      noexcept(_Alloc_traits::_S_always_equal())
      : _Base(std::move(__rv), __m)
      {
 if (__rv.get_allocator() != __m)
   {
     this->_M_impl._M_finish =
       std::__uninitialized_move_a(__rv.begin(), __rv.end(),
       this->_M_impl._M_start,
       _M_get_Tp_allocator());
     __rv.clear();
   }
      }
# 373 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 399 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        { _M_initialize_dispatch(__first, __last, __false_type()); }
# 423 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      ~vector() noexcept
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 435 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 447 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
        constexpr bool __move_storage =
          _Alloc_traits::_S_propagate_on_move_assign()
          || _Alloc_traits::_S_always_equal();
        _M_move_assign(std::move(__x),
                       integral_constant<bool, __move_storage>());
 return *this;
      }
# 469 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }
# 487 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 504 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        void
        assign(_InputIterator __first, _InputIterator __last)
        { _M_assign_dispatch(__first, __last, __false_type()); }
# 532 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      assign(initializer_list<value_type> __l)
      { this->assign(__l.begin(), __l.end()); }



      using _Base::get_allocator;







      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end() noexcept
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }




      size_type
      size() const noexcept
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
# 672 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 692 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 724 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }






      size_type
      capacity() const noexcept
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const noexcept
      { return begin() == end(); }
# 763 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 778 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      reference
      operator[](size_type __n) noexcept
      { return *(this->_M_impl._M_start + __n); }
# 793 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const noexcept
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
      }

    public:
# 821 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 839 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front() noexcept
      { return *begin(); }





      const_reference
      front() const noexcept
      { return *begin(); }





      reference
      back() noexcept
      { return *(end() - 1); }





      const_reference
      back() const noexcept
      { return *(end() - 1); }
# 886 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      _Tp*



      data() noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }


      const _Tp*



      data() const noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }
# 912 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
                              __x);
     ++this->_M_impl._M_finish;
   }
 else

   _M_emplace_back_aux(__x);



      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>
        void
        emplace_back(_Args&&... __args);
# 948 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      pop_back() noexcept
      {
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      }
# 968 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename... _Args>
        iterator
        emplace(const_iterator __position, _Args&&... __args);
# 983 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1013 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 1030 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, initializer_list<value_type> __l)
      { return this->insert(__position, __l.begin(), __l.end()); }
# 1050 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(begin() + __offset, __n, __x);
 return begin() + __offset;
      }
# 1092 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        iterator
        insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
        {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(begin() + __offset,
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1144 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      iterator

      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
# 1171 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last)
      {
 const auto __beg = begin();
 const auto __cbeg = cbegin();
 return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
      }
# 1193 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      void
      swap(vector& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      {
 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
                           __x._M_get_Tp_allocator());
      }







      void
      clear() noexcept
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }
# 1245 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)

     emplace_back(*__first);



 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
     _M_get_Tp_allocator());
      }



      void
      _M_default_initialize(size_type __n)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
        _M_get_Tp_allocator());
      }
# 1323 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1363 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_default_append(size_type __n);

      bool
      _M_shrink_to_fit();







      template<typename... _Args>
        void
        _M_insert_aux(iterator __position, _Args&&... __args);

      template<typename... _Args>
        void
        _M_emplace_back_aux(_Args&&... __args);



      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos) noexcept
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }

      iterator
      _M_erase(iterator __position);

      iterator
      _M_erase(iterator __first, iterator __last);


    private:



      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
      {
 vector __tmp(get_allocator());
 this->_M_impl._M_swap_data(__tmp._M_impl);
 this->_M_impl._M_swap_data(__x._M_impl);
 std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }



      void
      _M_move_assign(vector&& __x, std::false_type)
      {
 if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
   _M_move_assign(std::move(__x), std::true_type());
 else
   {


     this->assign(std::__make_move_if_noexcept_iterator(__x.begin()),
    std::__make_move_if_noexcept_iterator(__x.end()));
     __x.clear();
   }
      }



      template<typename _Up>
 _Up*
 _M_data_ptr(_Up* __ptr) const
 { return __ptr; }

      template<typename _Ptr>
 typename std::pointer_traits<_Ptr>::element_type*
 _M_data_ptr(_Ptr __ptr) const
 { return empty() ? nullptr : std::__addressof(*__ptr); }






    };
# 1509 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1526 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 65 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 1 3
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() noexcept : _M_p(0), _M_mask(0) { }

    operator bool() const noexcept
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x) noexcept
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x) noexcept
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip() noexcept
    { *_M_p ^= _M_mask; }
  };


  inline void
  swap(_Bit_reference __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(_Bit_reference __x, bool& __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(bool& __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }


  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    _Bit_iterator
    _M_const_cast() const
    { return _Bit_iterator(_M_p, _M_offset); }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Bit_type>::other _Bit_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Bit_alloc_type>
 _Bit_alloc_traits;
      typedef typename _Bit_alloc_traits::pointer _Bit_pointer;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_pointer _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Bvector_impl(_Bit_alloc_type&& __a)
 : _Bit_alloc_type(std::move(__a)), _M_start(), _M_finish(),
   _M_end_of_storage()
 { }


 _Bit_type*
 _M_end_addr() const noexcept
 {
   if (_M_end_of_storage)
     return std::__addressof(_M_end_of_storage[-1]) + 1;
   return 0;
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator() noexcept
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const noexcept
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }


      _Bvector_base(_Bvector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Bit_allocator()))
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = _Bit_iterator();
 __x._M_impl._M_finish = _Bit_iterator();
 __x._M_impl._M_end_of_storage = nullptr;
      }


      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_pointer
      _M_allocate(size_t __n)
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   {
     const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
     _Bit_alloc_traits::deallocate(_M_impl,
       _M_impl._M_end_of_storage - __n,
       __n);
   }
      }

      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };


}




namespace std __attribute__ ((__visibility__ ("default")))
{
# 540 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;
    typedef typename _Base::_Bit_pointer _Bit_pointer;
    typedef typename _Base::_Bit_alloc_traits _Bit_alloc_traits;


    template<typename> friend struct hash;


  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_S_nword;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()

      noexcept(is_nothrow_default_constructible<allocator_type>::value)

    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }


    explicit
    vector(size_type __n, const allocator_type& __a = allocator_type())
    : vector(__n, false, __a)
    { }

    vector(size_type __n, const bool& __value,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_addr(),
  __value ? ~0 : 0);
    }
# 611 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    vector(const vector& __x)
    : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }


    vector(vector&& __x) noexcept
    : _Base(std::move(__x)) { }

    vector(vector&& __x, const allocator_type& __a)
    noexcept(_Bit_alloc_traits::_S_always_equal())
    : _Base(__a)
    {
      if (__x.get_allocator() == __a)
 {
   this->_M_impl._M_start = __x._M_impl._M_start;
   this->_M_impl._M_finish = __x._M_impl._M_finish;
   this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
   __x._M_impl._M_start = _Bit_iterator();
   __x._M_impl._M_finish = _Bit_iterator();
   __x._M_impl._M_end_of_storage = nullptr;
 }
      else
 {
   _M_initialize(__x.size());
   _M_copy_aligned(__x.begin(), __x.end(), begin());
   __x.clear();
 }
    }

    vector(const vector& __x, const allocator_type& __a)
    : _Base(__a)
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }

    vector(initializer_list<bool> __l,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize_range(__l.begin(), __l.end(),
     random_access_iterator_tag());
    }



    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      { _M_initialize_dispatch(__first, __last, __false_type()); }
# 677 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    ~vector() noexcept { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;

      if (_Bit_alloc_traits::_S_propagate_on_copy_assign())
 {
   if (this->_M_get_Bit_allocator() != __x._M_get_Bit_allocator())
     {
       this->_M_deallocate();
       std::__alloc_on_copy(_M_get_Bit_allocator(),
       __x._M_get_Bit_allocator());
       _M_initialize(__x.size());
     }
   else
     std::__alloc_on_copy(_M_get_Bit_allocator(),
     __x._M_get_Bit_allocator());
 }

      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }


    vector&
    operator=(vector&& __x) noexcept(_Bit_alloc_traits::_S_nothrow_move())
    {
      if (_Bit_alloc_traits::_S_propagate_on_move_assign()
   || this->_M_get_Bit_allocator() == __x._M_get_Bit_allocator())
 {
   this->_M_deallocate();
   this->_M_impl._M_start = __x._M_impl._M_start;
   this->_M_impl._M_finish = __x._M_impl._M_finish;
   this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
   __x._M_impl._M_start = _Bit_iterator();
   __x._M_impl._M_finish = _Bit_iterator();
   __x._M_impl._M_end_of_storage = nullptr;
   std::__alloc_on_move(_M_get_Bit_allocator(),
          __x._M_get_Bit_allocator());
 }
      else
 {
   if (__x.size() > capacity())
     {
       this->_M_deallocate();
       _M_initialize(__x.size());
     }
   this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
          begin());
   __x.clear();
 }
      return *this;
    }

    vector&
    operator=(initializer_list<bool> __l)
    {
      this->assign (__l.begin(), __l.end());
      return *this;
    }






    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }


    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      void
      assign(_InputIterator __first, _InputIterator __last)
      { _M_assign_dispatch(__first, __last, __false_type()); }
# 773 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    void
    assign(initializer_list<bool> __l)
    { this->assign(__l.begin(), __l.end()); }


    iterator
    begin() noexcept
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const noexcept
    { return this->_M_impl._M_start; }

    iterator
    end() noexcept
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const noexcept
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin() noexcept
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const noexcept
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend() noexcept
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const noexcept
    { return const_reverse_iterator(begin()); }


    const_iterator
    cbegin() const noexcept
    { return this->_M_impl._M_start; }

    const_iterator
    cend() const noexcept
    { return this->_M_impl._M_finish; }

    const_reverse_iterator
    crbegin() const noexcept
    { return const_reverse_iterator(end()); }

    const_reverse_iterator
    crend() const noexcept
    { return const_reverse_iterator(begin()); }


    size_type
    size() const noexcept
    { return size_type(end() - begin()); }

    size_type
    max_size() const noexcept
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize
 = _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const noexcept
    { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)
         - begin()); }

    bool
    empty() const noexcept
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
 __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


     __n, this->size());
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n)
    {
      if (__n > max_size())
 __throw_length_error(("vector::reserve"));
      if (capacity() < __n)
 _M_reallocate(__n);
    }

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() noexcept { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x)

      noexcept(_Bit_alloc_traits::_S_nothrow_swap())

    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);
      _Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(),
        __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y) noexcept
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator

    insert(const_iterator __position, const bool& __x = bool())



    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr()
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position._M_const_cast(), __x);
      return begin() + __n;
    }


    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      iterator
      insert(const_iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 difference_type __offset = __position - cbegin();
 _M_insert_dispatch(__position._M_const_cast(),
      __first, __last, __false_type());
 return begin() + __offset;
      }
# 992 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_bvector.h" 3
    iterator
    insert(const_iterator __position, size_type __n, const bool& __x)
    {
      difference_type __offset = __position - cbegin();
      _M_fill_insert(__position._M_const_cast(), __n, __x);
      return begin() + __offset;
    }







    iterator
    insert(const_iterator __p, initializer_list<bool> __l)
    { return this->insert(__p, __l.begin(), __l.end()); }


    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator

    erase(const_iterator __position)



    { return _M_erase(__position._M_const_cast()); }

    iterator

    erase(const_iterator __first, const_iterator __last)



    { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }


    void
    shrink_to_fit()
    { _M_shrink_to_fit(); }


    void
    flip() noexcept
    {
      _Bit_type * const __end = this->_M_impl._M_end_addr();
      for (_Bit_type * __p = this->_M_impl._M_start._M_p; __p != __end; ++__p)
        *__p = ~*__p;
    }

    void
    clear() noexcept
    { _M_erase_at_end(begin()); }


    template<typename... _Args>
      void
      emplace_back(_Args&&... __args)
      { push_back(bool(__args...)); }

    template<typename... _Args>
      iterator
      emplace(const_iterator __pos, _Args&&... __args)
      { return insert(__pos, bool(__args...)); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
      this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }

    void
    _M_reallocate(size_type __n);


    bool
    _M_shrink_to_fit();






    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_addr(), __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_addr(), __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_addr(), __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }

    iterator
    _M_erase(iterator __pos);

    iterator
    _M_erase(iterator __first, iterator __last);
  };


}





namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>&) const noexcept;
    };


}
# 66 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 2 3



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/vector.tcc" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_start),
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_emplace_back_aux(std::forward<_Args>(__args)...);
      }


  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {

   const auto __pos = begin() + (__position - cbegin());
   if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     {
       _Tp __x_copy = __x;
       _M_insert_aux(__pos, std::move(__x_copy));
     }
   else
     _M_insert_aux(__pos, __x);



 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       if (!_Alloc_traits::_S_always_equal()
           && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
         {

    this->clear();
    _M_deallocate(this->_M_impl._M_start,
    this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start);
    this->_M_impl._M_start = nullptr;
    this->_M_impl._M_finish = nullptr;
    this->_M_impl._M_end_of_storage = nullptr;
  }
       std::__alloc_on_copy(_M_get_Tp_allocator(),
       __x._M_get_Tp_allocator());
     }

   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp._M_impl._M_swap_data(this->_M_impl);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   this->_M_impl._M_finish =
     std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
       __n - size(), __val,
       _M_get_Tp_allocator());
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename vector<_Tp, _Alloc>::iterator
      vector<_Tp, _Alloc>::
      emplace(const_iterator __position, _Args&&... __args)
      {
 const size_type __n = __position - begin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
     && __position == end())
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(begin() + (__position - cbegin()),
   std::forward<_Args>(__args)...);
 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Args&&... __args)






    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
              std::move(*(this->_M_impl._M_finish - 1)));

   ++this->_M_impl._M_finish;



   std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1);





   *__position = _Tp(std::forward<_Args>(__args)...);

 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   try
     {




       _Alloc_traits::construct(this->_M_impl,
                         __new_start + __elems_before,

           std::forward<_Args>(__args)...);



       __new_finish = pointer();

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (this->_M_impl._M_start, __position.base(),
   __new_start, _M_get_Tp_allocator());

       ++__new_finish;

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (__position.base(), this->_M_impl._M_finish,
   __new_finish, _M_get_Tp_allocator());
     }
          catch(...)
     {
       if (!__new_finish)
  _Alloc_traits::destroy(this->_M_impl,
                         __new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
       throw;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_emplace_back_aux(_Args&&... __args)
      {
 const size_type __len =
   _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
 pointer __new_start(this->_M_allocate(__len));
 pointer __new_finish(__new_start);
 try
   {
     _Alloc_traits::construct(this->_M_impl, __new_start + size(),
         std::forward<_Args>(__args)...);
     __new_finish = pointer();

     __new_finish
       = std::__uninitialized_move_if_noexcept_a
       (this->_M_impl._M_start, this->_M_impl._M_finish,
        __new_start, _M_get_Tp_allocator());

     ++__new_finish;
   }
 catch(...)
   {
     if (!__new_finish)
       _Alloc_traits::destroy(this->_M_impl, __new_start + size());
     else
       std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
     _M_deallocate(__new_start, __len);
     throw;
   }
 std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator());
 _M_deallocate(this->_M_impl._M_start,
        this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start);
 this->_M_impl._M_start = __new_start;
 this->_M_impl._M_finish = __new_finish;
 this->_M_impl._M_end_of_storage = __new_start + __len;
      }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish);

    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    this->_M_impl._M_finish =
      std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
        __n - __elems_after,
        __x_copy,
        _M_get_Tp_allocator());
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = pointer();

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, __position.base(),
       __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__position.base(), this->_M_impl._M_finish,
       __new_finish, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       this->_M_impl._M_finish =
  std::__uninitialized_default_n_a(this->_M_impl._M_finish,
       __n, _M_get_Tp_allocator());
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       const size_type __old_size = this->size();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {
    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, this->_M_impl._M_finish,
       __new_start, _M_get_Tp_allocator());
    __new_finish =
      std::__uninitialized_default_n_a(__new_finish, __n,
           _M_get_Tp_allocator());
  }
       catch(...)
  {
    std::_Destroy(__new_start, __new_finish,
    _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
    bool
    vector<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() == size())
 return false;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish);

      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (this->_M_impl._M_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), this->_M_impl._M_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }



  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      iterator __start(std::__addressof(*__q), 0);
      this->_M_impl._M_finish = _M_copy_aligned(begin(), end(), __start);
      this->_M_deallocate();
      this->_M_impl._M_start = __start;
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_pointer __q = this->_M_allocate(__len);
  iterator __start(std::__addressof(*__q), 0);
  iterator __i = _M_copy_aligned(begin(), __position, __start);
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = __start;
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
 }
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }


  template<typename _Alloc>
    bool
    vector<bool, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() - size() < int(_S_word_bit))
 return false;
      try
 {
   _M_reallocate(size());
   return true;
 }
      catch(...)
 { return false; }
    }



}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const noexcept
    {
      size_t __hash = 0;
      using std::_S_word_bit;
      using std::_Bit_type;

      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}
# 70 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/vector" 2 3
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/uniform_int_dist.h" 1 3
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/uniform_int_dist.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  namespace __detail
  {

    template<typename _Tp>
      inline bool
      _Power_of_2(_Tp __x)
      {
 return ((__x - 1) & __x) == 0;
      };
  }
# 60 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/uniform_int_dist.h" 3
  template<typename _IntType = int>
    class uniform_int_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef uniform_int_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __a = 0,
     _IntType __b = std::numeric_limits<_IntType>::max())
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _IntType _M_a;
 _IntType _M_b;
      };

    public:



      explicit
      uniform_int_distribution(_IntType __a = 0,
      _IntType __b = std::numeric_limits<_IntType>::max())
      : _M_param(__a, __b)
      { }

      explicit
      uniform_int_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const uniform_int_distribution& __d1,
   const uniform_int_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {

     const __uctype __uerange = __urange + 1;
     const __uctype __scaling = __urngrange / __uerange;
     const __uctype __past = __uerange * __scaling;
     do
       __ret = __uctype(__urng()) - __urngmin;
     while (__ret >= __past);
     __ret /= __scaling;
   }
 else if (__urngrange < __urange)
   {
# 263 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/uniform_int_dist.h" 3
     __uctype __tmp;
     do
       {
  const __uctype __uerngrange = __urngrange + 1;
  __tmp = (__uerngrange * operator()
    (__urng, param_type(0, __urange / __uerngrange)));
  __ret = __tmp + (__uctype(__urng()) - __urngmin);
       }
     while (__ret > __urange || __ret < __tmp);
   }
 else
   __ret = __uctype(__urng()) - __urngmin;

 return __ret + __param.a();
      }


  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      uniform_int_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {
     if (__detail::_Power_of_2(__urngrange + 1)
  && __detail::_Power_of_2(__urange + 1))
       {
  while (__f != __t)
    {
      __ret = __uctype(__urng()) - __urngmin;
      *__f++ = (__ret & __urange) + __param.a();
    }
       }
     else
       {

  const __uctype __uerange = __urange + 1;
  const __uctype __scaling = __urngrange / __uerange;
  const __uctype __past = __uerange * __scaling;
  while (__f != __t)
    {
      do
        __ret = __uctype(__urng()) - __urngmin;
      while (__ret >= __past);
      *__f++ = __ret / __scaling + __param.a();
    }
       }
   }
 else if (__urngrange < __urange)
   {
# 347 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/uniform_int_dist.h" 3
     __uctype __tmp;
     while (__f != __t)
       {
  do
    {
      const __uctype __uerngrange = __urngrange + 1;
      __tmp = (__uerngrange * operator()
        (__urng, param_type(0, __urange / __uerngrange)));
      __ret = __tmp + (__uctype(__urng()) - __urngmin);
    }
  while (__ret > __urange || __ret < __tmp);
  *__f++ = __ret;
       }
   }
 else
   while (__f != __t)
     *__f++ = __uctype(__urng()) - __urngmin + __param.a();
      }


}
# 36 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 56 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __g);






  namespace __detail
  {


    template<typename _UIntType, size_t __w,
      bool = __w < static_cast<size_t>
     (std::numeric_limits<_UIntType>::digits)>
      struct _Shift
      { static const _UIntType __value = 0; };

    template<typename _UIntType, size_t __w>
      struct _Shift<_UIntType, __w, true>
      { static const _UIntType __value = _UIntType(1) << __w; };

    template<int __s,
      int __which = ((__s <= 8 * sizeof (int))
       + (__s <= 8 * sizeof (long))
       + (__s <= 8 * sizeof (long long))

       + (__s <= 128))>
      struct _Select_uint_least_t
      {
 static_assert(__which < 0,
        "sorry, would be too much trouble for a slow result");
      };

    template<int __s>
      struct _Select_uint_least_t<__s, 4>
      { typedef unsigned int type; };

    template<int __s>
      struct _Select_uint_least_t<__s, 3>
      { typedef unsigned long type; };

    template<int __s>
      struct _Select_uint_least_t<__s, 2>
      { typedef unsigned long long type; };


    template<int __s>
      struct _Select_uint_least_t<__s, 1>
      { typedef unsigned __int128 type; };



    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c,
      bool __big_enough = (!(__m & (__m - 1))
      || (_Tp(-1) - __c) / __a >= __m - 1),
             bool __schrage_ok = __m % __a < __m / __a>
      struct _Mod
      {
 typedef typename _Select_uint_least_t<std::__lg(__a)
           + std::__lg(__m) + 2>::type _Tp2;
 static _Tp
 __calc(_Tp __x)
 { return static_cast<_Tp>((_Tp2(__a) * __x + __c) % __m); }
      };


    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>
      struct _Mod<_Tp, __m, __a, __c, false, true>
      {
 static _Tp
 __calc(_Tp __x);
      };




    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
 static _Tp
 __calc(_Tp __x)
 {
   _Tp __res = __a * __x + __c;
   if (__m)
     __res %= __m;
   return __res;
 }
      };

    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
      inline _Tp
      __mod(_Tp __x)
      { return _Mod<_Tp, __m, __a, __c>::__calc(__x); }





    template<typename _Engine, typename _DInputType>
      struct _Adaptor
      {
 static_assert(std::is_floating_point<_DInputType>::value,
        "template argument not a floating point type");

      public:
 _Adaptor(_Engine& __g)
 : _M_g(__g) { }

 _DInputType
 min() const
 { return _DInputType(0); }

 _DInputType
 max() const
 { return _DInputType(1); }






 _DInputType
 operator()()
 {
   return std::generate_canonical<_DInputType,
                             std::numeric_limits<_DInputType>::digits,
                             _Engine>(_M_g);
 }

      private:
 _Engine& _M_g;
      };


  }
# 235 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    class linear_congruential_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(__m == 0u || (__a < __m && __c < __m),
      "template argument substituting __m out of bounds");

    public:

      typedef _UIntType result_type;


      static constexpr result_type multiplier = __a;

      static constexpr result_type increment = __c;

      static constexpr result_type modulus = __m;
      static constexpr result_type default_seed = 1u;
# 262 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      explicit
      linear_congruential_engine(result_type __s = default_seed)
      { seed(__s); }







      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, linear_congruential_engine>::value>
        ::type>
        explicit
        linear_congruential_engine(_Sseq& __q)
        { seed(__q); }







      void
      seed(result_type __s = default_seed);
# 295 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _Sseq>
        typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);







      static constexpr result_type
      min()
      { return __c == 0u ? 1u : 0u; }




      static constexpr result_type
      max()
      { return __m - 1u; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()()
      {
 _M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
 return _M_x;
      }
# 347 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      friend bool
      operator==(const linear_congruential_engine& __lhs,
   const linear_congruential_engine& __rhs)
      { return __lhs._M_x == __rhs._M_x; }
# 360 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::linear_congruential_engine<_UIntType1,
     __a1, __c1, __m1>& __lcr);
# 380 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::linear_congruential_engine<_UIntType1, __a1,
     __c1, __m1>& __lcr);

    private:
      _UIntType _M_x;
    };
# 402 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    inline bool
    operator!=(const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __lhs,
        const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __rhs)
    { return !(__lhs == __rhs); }
# 439 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    class mersenne_twister_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(1u <= __m && __m <= __n,
      "template argument substituting __m out of bounds");
      static_assert(__r <= __w, "template argument substituting "
      "__r out of bound");
      static_assert(__u <= __w, "template argument substituting "
      "__u out of bound");
      static_assert(__s <= __w, "template argument substituting "
      "__s out of bound");
      static_assert(__t <= __w, "template argument substituting "
      "__t out of bound");
      static_assert(__l <= __w, "template argument substituting "
      "__l out of bound");
      static_assert(__w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bound");
      static_assert(__a <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __a out of bound");
      static_assert(__b <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __b out of bound");
      static_assert(__c <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __c out of bound");
      static_assert(__d <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __d out of bound");
      static_assert(__f <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __f out of bound");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t state_size = __n;
      static constexpr size_t shift_size = __m;
      static constexpr size_t mask_bits = __r;
      static constexpr result_type xor_mask = __a;
      static constexpr size_t tempering_u = __u;
      static constexpr result_type tempering_d = __d;
      static constexpr size_t tempering_s = __s;
      static constexpr result_type tempering_b = __b;
      static constexpr size_t tempering_t = __t;
      static constexpr result_type tempering_c = __c;
      static constexpr size_t tempering_l = __l;
      static constexpr result_type initialization_multiplier = __f;
      static constexpr result_type default_seed = 5489u;


      explicit
      mersenne_twister_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, mersenne_twister_engine>::value>
        ::type>
        explicit
        mersenne_twister_engine(_Sseq& __q)
        { seed(__q); }

      void
      seed(result_type __sd = default_seed);

      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);




      static constexpr result_type
      min()
      { return 0; };




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z);

      result_type
      operator()();
# 553 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      friend bool
      operator==(const mersenne_twister_engine& __lhs,
   const mersenne_twister_engine& __rhs)
      { return (std::equal(__lhs._M_x, __lhs._M_x + state_size, __rhs._M_x)
  && __lhs._M_p == __rhs._M_p); }
# 571 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::mersenne_twister_engine<_UIntType1, __w1, __n1,
     __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>& __x);
# 597 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::mersenne_twister_engine<_UIntType1, __w1, __n1, __m1,
     __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>& __x);

    private:
      void _M_gen_rand();

      _UIntType _M_x[state_size];
      size_t _M_p;
    };
# 630 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    inline bool
    operator!=(const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __lhs,
        const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __rhs)
    { return !(__lhs == __rhs); }
# 658 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    class subtract_with_carry_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __s && __s < __r,
      "template argument substituting __s out of bounds");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t short_lag = __s;
      static constexpr size_t long_lag = __r;
      static constexpr result_type default_seed = 19780503u;





      explicit
      subtract_with_carry_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, subtract_with_carry_engine>::value>
        ::type>
        explicit
        subtract_with_carry_engine(_Sseq& __q)
        { seed(__q); }
# 711 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      void
      seed(result_type __sd = default_seed);





      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);





      static constexpr result_type
      min()
      { return 0; }





      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 766 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      friend bool
      operator==(const subtract_with_carry_engine& __lhs,
   const subtract_with_carry_engine& __rhs)
      { return (std::equal(__lhs._M_x, __lhs._M_x + long_lag, __rhs._M_x)
  && __lhs._M_carry == __rhs._M_carry
  && __lhs._M_p == __rhs._M_p); }
# 785 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>& __x);
# 804 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>& __x);

    private:

      _UIntType _M_x[long_lag];
      _UIntType _M_carry;
      size_t _M_p;
    };
# 830 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    inline bool
    operator!=(const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __lhs,
        const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __rhs)
    { return !(__lhs == __rhs); }
# 845 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    class discard_block_engine
    {
      static_assert(1 <= __r && __r <= __p,
      "template argument substituting __r out of bounds");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;


      static constexpr size_t block_size = __p;
      static constexpr size_t used_block = __r;






      discard_block_engine()
      : _M_b(), _M_n(0) { }







      explicit
      discard_block_engine(const _RandomNumberEngine& __rng)
      : _M_b(__rng), _M_n(0) { }







      explicit
      discard_block_engine(_RandomNumberEngine&& __rng)
      : _M_b(std::move(__rng)), _M_n(0) { }







      explicit
      discard_block_engine(result_type __s)
      : _M_b(__s), _M_n(0) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, discard_block_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        discard_block_engine(_Sseq& __q)
 : _M_b(__q), _M_n(0)
        { }





      void
      seed()
      {
 _M_b.seed();
 _M_n = 0;
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_n = 0;
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_n = 0;
 }





      const _RandomNumberEngine&
      base() const noexcept
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 995 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      friend bool
      operator==(const discard_block_engine& __lhs,
   const discard_block_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b && __lhs._M_n == __rhs._M_n; }
# 1011 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>& __x);
# 1029 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>& __x);

    private:
      _RandomNumberEngine _M_b;
      size_t _M_n;
    };
# 1052 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    inline bool
    operator!=(const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __lhs,
        const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __rhs)
    { return !(__lhs == __rhs); }






  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    class independent_bits_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;






      independent_bits_engine()
      : _M_b() { }







      explicit
      independent_bits_engine(const _RandomNumberEngine& __rng)
      : _M_b(__rng) { }







      explicit
      independent_bits_engine(_RandomNumberEngine&& __rng)
      : _M_b(std::move(__rng)) { }







      explicit
      independent_bits_engine(result_type __s)
      : _M_b(__s) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, independent_bits_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
               ::type>
        explicit
        independent_bits_engine(_Sseq& __q)
        : _M_b(__q)
        { }





      void
      seed()
      { _M_b.seed(); }





      void
      seed(result_type __s)
      { _M_b.seed(__s); }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        { _M_b.seed(__q); }





      const _RandomNumberEngine&
      base() const noexcept
      { return _M_b; }




      static constexpr result_type
      min()
      { return 0U; }




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1205 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      friend bool
      operator==(const independent_bits_engine& __lhs,
   const independent_bits_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b; }
# 1222 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::independent_bits_engine<_RandomNumberEngine,
     __w, _UIntType>& __x)
 {
   __is >> __x._M_b;
   return __is;
 }

    private:
      _RandomNumberEngine _M_b;
    };
# 1248 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    inline bool
    operator!=(const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __lhs,
        const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __rhs)
    { return !(__lhs == __rhs); }
# 1266 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __w, typename _UIntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::independent_bits_engine<_RandomNumberEngine,
        __w, _UIntType>& __x)
    {
      __os << __x.base();
      return __os;
    }







  template<typename _RandomNumberEngine, size_t __k>
    class shuffle_order_engine
    {
      static_assert(1u <= __k, "template argument substituting "
      "__k out of bound");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;

      static constexpr size_t table_size = __k;






      shuffle_order_engine()
      : _M_b()
      { _M_initialize(); }







      explicit
      shuffle_order_engine(const _RandomNumberEngine& __rng)
      : _M_b(__rng)
      { _M_initialize(); }







      explicit
      shuffle_order_engine(_RandomNumberEngine&& __rng)
      : _M_b(std::move(__rng))
      { _M_initialize(); }







      explicit
      shuffle_order_engine(result_type __s)
      : _M_b(__s)
      { _M_initialize(); }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, shuffle_order_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        shuffle_order_engine(_Sseq& __q)
        : _M_b(__q)
        { _M_initialize(); }





      void
      seed()
      {
 _M_b.seed();
 _M_initialize();
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_initialize();
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_initialize();
 }




      const _RandomNumberEngine&
      base() const noexcept
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1434 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      friend bool
      operator==(const shuffle_order_engine& __lhs,
   const shuffle_order_engine& __rhs)
      { return (__lhs._M_b == __rhs._M_b
  && std::equal(__lhs._M_v, __lhs._M_v + __k, __rhs._M_v)
  && __lhs._M_y == __rhs._M_y); }
# 1452 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::shuffle_order_engine<_RandomNumberEngine1,
     __k1>& __x);
# 1470 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::shuffle_order_engine<_RandomNumberEngine1, __k1>& __x);

    private:
      void _M_initialize()
      {
 for (size_t __i = 0; __i < __k; ++__i)
   _M_v[__i] = _M_b();
 _M_y = _M_b();
      }

      _RandomNumberEngine _M_b;
      result_type _M_v[__k];
      result_type _M_y;
    };
# 1500 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __k>
    inline bool
    operator!=(const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __lhs,
        const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __rhs)
    { return !(__lhs == __rhs); }





  typedef linear_congruential_engine<uint_fast32_t, 16807UL, 0UL, 2147483647UL>
  minstd_rand0;




  typedef linear_congruential_engine<uint_fast32_t, 48271UL, 0UL, 2147483647UL>
  minstd_rand;
# 1529 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  typedef mersenne_twister_engine<
    uint_fast32_t,
    32, 624, 397, 31,
    0x9908b0dfUL, 11,
    0xffffffffUL, 7,
    0x9d2c5680UL, 15,
    0xefc60000UL, 18, 1812433253UL> mt19937;




  typedef mersenne_twister_engine<
    uint_fast64_t,
    64, 312, 156, 31,
    0xb5026f5aa96619e9ULL, 29,
    0x5555555555555555ULL, 17,
    0x71d67fffeda60000ULL, 37,
    0xfff7eee000000000ULL, 43,
    6364136223846793005ULL> mt19937_64;

  typedef subtract_with_carry_engine<uint_fast32_t, 24, 10, 24>
    ranlux24_base;

  typedef subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>
    ranlux48_base;

  typedef discard_block_engine<ranlux24_base, 223, 23> ranlux24;

  typedef discard_block_engine<ranlux48_base, 389, 11> ranlux48;

  typedef shuffle_order_engine<minstd_rand0, 256> knuth_b;

  typedef minstd_rand0 default_random_engine;





  class random_device
  {
  public:

    typedef unsigned int result_type;





    explicit
    random_device(const std::string& __token = "default")
    {
      _M_init(__token);
    }

    ~random_device()
    { _M_fini(); }
# 1596 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
    static constexpr result_type
    min()
    { return std::numeric_limits<result_type>::min(); }

    static constexpr result_type
    max()
    { return std::numeric_limits<result_type>::max(); }

    double
    entropy() const noexcept
    { return 0.0; }

    result_type
    operator()()
    {

      return this->_M_getval();



    }


    random_device(const random_device&) = delete;
    void operator=(const random_device&) = delete;

  private:

    void _M_init(const std::string& __token);
    void _M_init_pretr1(const std::string& __token);
    void _M_fini();

    result_type _M_getval();
    result_type _M_getval_pretr1();

    union
    {
      void* _M_file;
      mt19937 _M_mt;
    };
  };
# 1658 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_int_distribution<_IntType>& __d1,
        const std::uniform_int_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 1674 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_int_distribution<_IntType>&);
# 1688 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_int_distribution<_IntType>&);
# 1701 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType = double>
    class uniform_real_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef uniform_real_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

    public:






      explicit
      uniform_real_distribution(_RealType __a = _RealType(0),
    _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      uniform_real_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return (__aurng() * (__p.b() - __p.a())) + __p.a();
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const uniform_real_distribution& __d1,
   const uniform_real_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_real_distribution<_IntType>& __d1,
        const std::uniform_real_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 1883 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_real_distribution<_RealType>&);
# 1897 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_real_distribution<_RealType>&);
# 1919 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType = double>
    class normal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef normal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __mean = _RealType(0),
     _RealType __stddev = _RealType(1))
 : _M_mean(__mean), _M_stddev(__stddev)
 {
                                                  ;
 }

 _RealType
 mean() const
 { return _M_mean; }

 _RealType
 stddev() const
 { return _M_stddev; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_mean == __p2._M_mean
    && __p1._M_stddev == __p2._M_stddev); }

      private:
 _RealType _M_mean;
 _RealType _M_stddev;
      };

    public:




      explicit
      normal_distribution(result_type __mean = result_type(0),
     result_type __stddev = result_type(1))
      : _M_param(__mean, __stddev), _M_saved_available(false)
      { }

      explicit
      normal_distribution(const param_type& __p)
      : _M_param(__p), _M_saved_available(false)
      { }




      void
      reset()
      { _M_saved_available = false; }




      _RealType
      mean() const
      { return _M_param.mean(); }




      _RealType
      stddev() const
      { return _M_param.stddev(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      template<typename _RealType1>
 friend bool
        operator==(const std::normal_distribution<_RealType1>& __d1,
     const std::normal_distribution<_RealType1>& __d2);
# 2080 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::normal_distribution<_RealType1>& __x);
# 2095 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::normal_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
      result_type _M_saved;
      bool _M_saved_available;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2132 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType = double>
    class lognormal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef lognormal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(0),
     _RealType __s = _RealType(1))
 : _M_m(__m), _M_s(__s)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 s() const
 { return _M_s; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_s == __p2._M_s; }

      private:
 _RealType _M_m;
 _RealType _M_s;
      };

      explicit
      lognormal_distribution(_RealType __m = _RealType(0),
        _RealType __s = _RealType(1))
      : _M_param(__m, __s), _M_nd()
      { }

      explicit
      lognormal_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      s() const
      { return _M_param.s(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        { return std::exp(__p.s() * _M_nd(__urng) + __p.m()); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const lognormal_distribution& __d1,
   const lognormal_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_nd == __d2._M_nd); }
# 2284 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::lognormal_distribution<_RealType1>& __x);
# 2299 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::lognormal_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::lognormal_distribution<_RealType>& __d1,
        const std::lognormal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2336 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType = double>
    class gamma_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef gamma_distribution<_RealType> distribution_type;
 friend class gamma_distribution<_RealType>;

 explicit
 param_type(_RealType __alpha_val = _RealType(1),
     _RealType __beta_val = _RealType(1))
 : _M_alpha(__alpha_val), _M_beta(__beta_val)
 {
                                                 ;
   _M_initialize();
 }

 _RealType
 alpha() const
 { return _M_alpha; }

 _RealType
 beta() const
 { return _M_beta; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_alpha == __p2._M_alpha
    && __p1._M_beta == __p2._M_beta); }

      private:
 void
 _M_initialize();

 _RealType _M_alpha;
 _RealType _M_beta;

 _RealType _M_malpha, _M_a2;
      };

    public:




      explicit
      gamma_distribution(_RealType __alpha_val = _RealType(1),
    _RealType __beta_val = _RealType(1))
      : _M_param(__alpha_val, __beta_val), _M_nd()
      { }

      explicit
      gamma_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      alpha() const
      { return _M_param.alpha(); }




      _RealType
      beta() const
      { return _M_param.beta(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const gamma_distribution& __d1,
   const gamma_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_nd == __d2._M_nd); }
# 2505 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::gamma_distribution<_RealType1>& __x);
# 2519 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::gamma_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




   template<typename _RealType>
     inline bool
     operator!=(const std::gamma_distribution<_RealType>& __d1,
  const std::gamma_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2553 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType = double>
    class chi_squared_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef chi_squared_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      chi_squared_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_gd(__n / 2)
      { }

      explicit
      chi_squared_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.n() / 2)
      { }




      void
      reset()
      { _M_gd.reset(); }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return 2 * _M_gd(__urng); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return 2 * _M_gd(__urng, param_type(__p.n() / 2));
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
        { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { typename std::gamma_distribution<result_type>::param_type
     __p2(__p.n() / 2);
   this->__generate_impl(__f, __t, __urng, __p2); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
        { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { typename std::gamma_distribution<result_type>::param_type
     __p2(__p.n() / 2);
   this->__generate_impl(__f, __t, __urng, __p2); }






      friend bool
      operator==(const chi_squared_distribution& __d1,
   const chi_squared_distribution& __d2)
      { return __d1._M_param == __d2._M_param && __d1._M_gd == __d2._M_gd; }
# 2707 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::chi_squared_distribution<_RealType1>& __x);
# 2722 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::chi_squared_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const typename
   std::gamma_distribution<result_type>::param_type& __p);

      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::chi_squared_distribution<_RealType>& __d1,
        const std::chi_squared_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2763 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType = double>
    class cauchy_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef cauchy_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      cauchy_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      cauchy_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }

      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const cauchy_distribution& __d1,
   const cauchy_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::cauchy_distribution<_RealType>& __d1,
        const std::cauchy_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2933 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::cauchy_distribution<_RealType>& __x);
# 2948 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::cauchy_distribution<_RealType>& __x);
# 2964 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType = double>
    class fisher_f_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef fisher_f_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(1),
     _RealType __n = _RealType(1))
 : _M_m(__m), _M_n(__n)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_m;
 _RealType _M_n;
      };

      explicit
      fisher_f_distribution(_RealType __m = _RealType(1),
       _RealType __n = _RealType(1))
      : _M_param(__m, __n), _M_gd_x(__m / 2), _M_gd_y(__n / 2)
      { }

      explicit
      fisher_f_distribution(const param_type& __p)
      : _M_param(__p), _M_gd_x(__p.m() / 2), _M_gd_y(__p.n() / 2)
      { }




      void
      reset()
      {
 _M_gd_x.reset();
 _M_gd_y.reset();
      }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return (_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return ((_M_gd_x(__urng, param_type(__p.m() / 2)) * n())
    / (_M_gd_y(__urng, param_type(__p.n() / 2)) * m()));
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const fisher_f_distribution& __d1,
   const fisher_f_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_gd_x == __d2._M_gd_x
  && __d1._M_gd_y == __d2._M_gd_y); }
# 3131 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::fisher_f_distribution<_RealType1>& __x);
# 3146 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::fisher_f_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd_x, _M_gd_y;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::fisher_f_distribution<_RealType>& __d1,
        const std::fisher_f_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3188 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType = double>
    class student_t_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef student_t_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      student_t_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_nd(), _M_gd(__n / 2, 2)
      { }

      explicit
      student_t_distribution(const param_type& __p)
      : _M_param(__p), _M_nd(), _M_gd(__p.n() / 2, 2)
      { }




      void
      reset()
      {
 _M_nd.reset();
 _M_gd.reset();
      }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng)
        { return _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng)); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;

   const result_type __g = _M_gd(__urng, param_type(__p.n() / 2, 2));
   return _M_nd(__urng) * std::sqrt(__p.n() / __g);
        }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const student_t_distribution& __d1,
   const student_t_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_nd == __d2._M_nd && __d1._M_gd == __d2._M_gd); }
# 3344 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::student_t_distribution<_RealType1>& __x);
# 3359 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::student_t_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::student_t_distribution<_RealType>& __d1,
        const std::student_t_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3407 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  class bernoulli_distribution
  {
  public:

    typedef bool result_type;

    struct param_type
    {
      typedef bernoulli_distribution distribution_type;

      explicit
      param_type(double __p = 0.5)
      : _M_p(__p)
      {
                                                      ;
      }

      double
      p() const
      { return _M_p; }

      friend bool
      operator==(const param_type& __p1, const param_type& __p2)
      { return __p1._M_p == __p2._M_p; }

    private:
      double _M_p;
    };

  public:






    explicit
    bernoulli_distribution(double __p = 0.5)
    : _M_param(__p)
    { }

    explicit
    bernoulli_distribution(const param_type& __p)
    : _M_param(__p)
    { }






    void
    reset() { }




    double
    p() const
    { return _M_param.p(); }




    param_type
    param() const
    { return _M_param; }





    void
    param(const param_type& __param)
    { _M_param = __param; }




    result_type
    min() const
    { return std::numeric_limits<result_type>::min(); }




    result_type
    max() const
    { return std::numeric_limits<result_type>::max(); }




    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng)
      { return this->operator()(__urng, _M_param); }

    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);
 if ((__aurng() - __aurng.min())
      < __p.p() * (__aurng.max() - __aurng.min()))
   return true;
 return false;
      }

    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      __generate(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng)
      { this->__generate(__f, __t, __urng, _M_param); }

    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      __generate(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng, const param_type& __p)
      { this->__generate_impl(__f, __t, __urng, __p); }

    template<typename _UniformRandomNumberGenerator>
      void
      __generate(result_type* __f, result_type* __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      { this->__generate_impl(__f, __t, __urng, __p); }





    friend bool
    operator==(const bernoulli_distribution& __d1,
        const bernoulli_distribution& __d2)
    { return __d1._M_param == __d2._M_param; }

  private:
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p);

    param_type _M_param;
  };





  inline bool
  operator!=(const std::bernoulli_distribution& __d1,
      const std::bernoulli_distribution& __d2)
  { return !(__d1 == __d2); }
# 3578 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::bernoulli_distribution& __x);
# 3592 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::bernoulli_distribution& __x)
    {
      double __p;
      __is >> __p;
      __x.param(bernoulli_distribution::param_type(__p));
      return __is;
    }
# 3611 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _IntType = int>
    class binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef binomial_distribution<_IntType> distribution_type;
 friend class binomial_distribution<_IntType>;

 explicit
 param_type(_IntType __t = _IntType(1), double __p = 0.5)
 : _M_t(__t), _M_p(__p)
 {


                     ;
   _M_initialize();
 }

 _IntType
 t() const
 { return _M_t; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_t == __p2._M_t && __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize();

 _IntType _M_t;
 double _M_p;

 double _M_q;

 double _M_d1, _M_d2, _M_s1, _M_s2, _M_c,
        _M_a1, _M_a123, _M_s, _M_lf, _M_lp1p;

 bool _M_easy;
      };


      explicit
      binomial_distribution(_IntType __t = _IntType(1),
       double __p = 0.5)
      : _M_param(__t, __p), _M_nd()
      { }

      explicit
      binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _IntType
      t() const
      { return _M_param.t(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return _M_param.t(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






 friend bool
        operator==(const binomial_distribution& __d1,
     const binomial_distribution& __d2)

 { return __d1._M_param == __d2._M_param && __d1._M_nd == __d2._M_nd; }
# 3784 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::binomial_distribution<_IntType1>& __x);
# 3800 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::binomial_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      template<typename _UniformRandomNumberGenerator>
 result_type
 _M_waiting(_UniformRandomNumberGenerator& __urng,
     _IntType __t, double __q);

      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::binomial_distribution<_IntType>& __d1,
        const std::binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 3842 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _IntType = int>
    class geometric_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef geometric_distribution<_IntType> distribution_type;
 friend class geometric_distribution<_IntType>;

 explicit
 param_type(double __p = 0.5)
 : _M_p(__p)
 {
                                                      ;
   _M_initialize();
 }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize()
 { _M_log_1_p = std::log(1.0 - _M_p); }

 double _M_p;

 double _M_log_1_p;
      };


      explicit
      geometric_distribution(double __p = 0.5)
      : _M_param(__p)
      { }

      explicit
      geometric_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const geometric_distribution& __d1,
   const geometric_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator!=(const std::geometric_distribution<_IntType>& __d1,
        const std::geometric_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4013 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::geometric_distribution<_IntType>& __x);
# 4028 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::geometric_distribution<_IntType>& __x);
# 4042 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _IntType = int>
    class negative_binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef negative_binomial_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __k = 1, double __p = 0.5)
 : _M_k(__k), _M_p(__p)
 {
                                                                     ;
 }

 _IntType
 k() const
 { return _M_k; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_k == __p2._M_k && __p1._M_p == __p2._M_p; }

      private:
 _IntType _M_k;
 double _M_p;
      };

      explicit
      negative_binomial_distribution(_IntType __k = 1, double __p = 0.5)
      : _M_param(__k, __p), _M_gd(__k, (1.0 - __p) / __p)
      { }

      explicit
      negative_binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.k(), (1.0 - __p.p()) / __p.p())
      { }




      void
      reset()
      { _M_gd.reset(); }




      _IntType
      k() const
      { return _M_param.k(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng);

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const negative_binomial_distribution& __d1,
   const negative_binomial_distribution& __d2)
      { return __d1._M_param == __d2._M_param && __d1._M_gd == __d2._M_gd; }
# 4201 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::negative_binomial_distribution<_IntType1>& __x);
# 4216 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::negative_binomial_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::gamma_distribution<double> _M_gd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::negative_binomial_distribution<_IntType>& __d1,
        const std::negative_binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4264 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _IntType = int>
    class poisson_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef poisson_distribution<_IntType> distribution_type;
 friend class poisson_distribution<_IntType>;

 explicit
 param_type(double __mean = 1.0)
 : _M_mean(__mean)
 {
                                       ;
   _M_initialize();
 }

 double
 mean() const
 { return _M_mean; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_mean == __p2._M_mean; }

      private:

 void
 _M_initialize();

 double _M_mean;

 double _M_lm_thr;

 double _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb;

      };


      explicit
      poisson_distribution(double __mean = 1.0)
      : _M_param(__mean), _M_nd()
      { }

      explicit
      poisson_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      double
      mean() const
      { return _M_param.mean(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const poisson_distribution& __d1,
   const poisson_distribution& __d2)

      { return __d1._M_param == __d2._M_param && __d1._M_nd == __d2._M_nd; }
# 4421 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::poisson_distribution<_IntType1>& __x);
# 4436 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::poisson_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::poisson_distribution<_IntType>& __d1,
        const std::poisson_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4480 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType = double>
    class exponential_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef exponential_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __lambda = _RealType(1))
 : _M_lambda(__lambda)
 {
                                                  ;
 }

 _RealType
 lambda() const
 { return _M_lambda; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_lambda == __p2._M_lambda; }

      private:
 _RealType _M_lambda;
      };

    public:




      explicit
      exponential_distribution(const result_type& __lambda = result_type(1))
      : _M_param(__lambda)
      { }

      explicit
      exponential_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      _RealType
      lambda() const
      { return _M_param.lambda(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return -std::log(result_type(1) - __aurng()) / __p.lambda();
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const exponential_distribution& __d1,
   const exponential_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::exponential_distribution<_RealType>& __d1,
        const std::exponential_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4652 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::exponential_distribution<_RealType>& __x);
# 4667 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::exponential_distribution<_RealType>& __x);
# 4682 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType = double>
    class weibull_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef weibull_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(1),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      weibull_distribution(_RealType __a = _RealType(1),
      _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      weibull_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const weibull_distribution& __d1,
   const weibull_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::weibull_distribution<_RealType>& __d1,
        const std::weibull_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4855 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::weibull_distribution<_RealType>& __x);
# 4870 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::weibull_distribution<_RealType>& __x);
# 4885 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType = double>
    class extreme_value_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef extreme_value_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      extreme_value_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      extreme_value_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const extreme_value_distribution& __d1,
   const extreme_value_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::extreme_value_distribution<_RealType>& __d1,
        const std::extreme_value_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5058 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::extreme_value_distribution<_RealType>& __x);
# 5073 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::extreme_value_distribution<_RealType>& __x);
# 5085 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _IntType = int>
    class discrete_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef discrete_distribution<_IntType> distribution_type;
 friend class discrete_distribution<_IntType>;

 param_type()
 : _M_prob(), _M_cp()
 { }

 template<typename _InputIterator>
   param_type(_InputIterator __wbegin,
       _InputIterator __wend)
   : _M_prob(__wbegin, __wend), _M_cp()
   { _M_initialize(); }

 param_type(initializer_list<double> __wil)
 : _M_prob(__wil.begin(), __wil.end()), _M_cp()
 { _M_initialize(); }

 template<typename _Func>
   param_type(size_t __nw, double __xmin, double __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<double>
 probabilities() const
 { return _M_prob.empty() ? std::vector<double>(1, 1.0) : _M_prob; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_prob == __p2._M_prob; }

      private:
 void
 _M_initialize();

 std::vector<double> _M_prob;
 std::vector<double> _M_cp;
      };

      discrete_distribution()
      : _M_param()
      { }

      template<typename _InputIterator>
 discrete_distribution(_InputIterator __wbegin,
         _InputIterator __wend)
 : _M_param(__wbegin, __wend)
 { }

      discrete_distribution(initializer_list<double> __wl)
      : _M_param(__wl)
      { }

      template<typename _Func>
 discrete_distribution(size_t __nw, double __xmin, double __xmax,
         _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      discrete_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<double>
      probabilities() const
      {
 return _M_param._M_prob.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_prob;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      {
 return _M_param._M_prob.empty()
   ? result_type(0) : result_type(_M_param._M_prob.size() - 1);
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const discrete_distribution& __d1,
   const discrete_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }
# 5266 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::discrete_distribution<_IntType1>& __x);
# 5282 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::discrete_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator!=(const std::discrete_distribution<_IntType>& __d1,
        const std::discrete_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 5315 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType = double>
    class piecewise_constant_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_constant_distribution<_RealType> distribution_type;
 friend class piecewise_constant_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bi, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(1, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_int == __p2._M_int && __p1._M_den == __p2._M_den; }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
      };

      explicit
      piecewise_constant_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_constant_distribution(_InputIteratorB __bfirst,
     _InputIteratorB __bend,
     _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_constant_distribution(initializer_list<_RealType> __bl,
     _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_constant_distribution(size_t __nw,
     _RealType __xmin, _RealType __xmax,
     _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_constant_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }




      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const piecewise_constant_distribution& __d1,
   const piecewise_constant_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }
# 5533 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::piecewise_constant_distribution<_RealType1>& __x);
# 5549 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::piecewise_constant_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_constant_distribution<_RealType>& __d1,
        const std::piecewise_constant_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5582 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  template<typename _RealType = double>
    class piecewise_linear_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_linear_distribution<_RealType> distribution_type;
 friend class piecewise_linear_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp(), _M_m()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bl, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(2, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_int == __p2._M_int
    && __p1._M_den == __p2._M_den); }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
 std::vector<double> _M_m;
      };

      explicit
      piecewise_linear_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_linear_distribution(_InputIteratorB __bfirst,
          _InputIteratorB __bend,
          _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_linear_distribution(initializer_list<_RealType> __bl,
          _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_linear_distribution(size_t __nw,
          _RealType __xmin, _RealType __xmax,
          _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_linear_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }





      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(2, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const piecewise_linear_distribution& __d1,
   const piecewise_linear_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }
# 5803 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::piecewise_linear_distribution<_RealType1>& __x);
# 5819 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::piecewise_linear_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_linear_distribution<_RealType>& __d1,
        const std::piecewise_linear_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5860 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.h" 3
  class seed_seq
  {

  public:

    typedef uint_least32_t result_type;


    seed_seq()
    : _M_v()
    { }

    template<typename _IntType>
      seed_seq(std::initializer_list<_IntType> il);

    template<typename _InputIterator>
      seed_seq(_InputIterator __begin, _InputIterator __end);


    template<typename _RandomAccessIterator>
      void
      generate(_RandomAccessIterator __begin, _RandomAccessIterator __end);


    size_t size() const
    { return _M_v.size(); }

    template<typename OutputIterator>
      void
      param(OutputIterator __dest) const
      { std::copy(_M_v.begin(), _M_v.end(), __dest); }

  private:

    std::vector<result_type> _M_v;
  };






}
# 50 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/random" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/opt_random.h" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/opt_random.h" 3
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 1 3
# 27 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 3
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/ia32intrin.h" 1 3
# 32 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/ia32intrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__))
__readeflags(void)
{
  return __builtin_ia32_readeflags_u64();
}

static __inline__ void __attribute__((__always_inline__, __nodebug__))
__writeeflags(unsigned long long __f)
{
  __builtin_ia32_writeeflags_u64(__f);
}
# 58 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/ia32intrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__))
__rdpmc(int __A) {
  return __builtin_ia32_rdpmc(__A);
}


static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__))
__rdtscp(unsigned int *__A) {
  return __builtin_ia32_rdtscp(__A);
}
# 28 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3

# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 1 3
# 28 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 3
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 1 3
# 27 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
typedef long long __m64 __attribute__((__vector_size__(8)));

typedef long long __v1di __attribute__((__vector_size__(8)));
typedef int __v2si __attribute__((__vector_size__(8)));
typedef short __v4hi __attribute__((__vector_size__(8)));
typedef char __v8qi __attribute__((__vector_size__(8)));
# 44 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_empty(void)
{
    __builtin_ia32_emms();
}
# 61 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cvtsi32_si64(int __i)
{
    return (__m64)__builtin_ia32_vec_init_v2si(__i, 0);
}
# 78 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cvtsi64_si32(__m64 __m)
{
    return __builtin_ia32_vec_ext_v2si((__v2si)__m, 0);
}
# 94 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cvtsi64_m64(long long __i)
{
    return (__m64)__i;
}
# 110 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cvtm64_si64(__m64 __m)
{
    return (long long)__m;
}
# 140 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_packs_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_packsswb((__v4hi)__m1, (__v4hi)__m2);
}
# 170 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_packs_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_packssdw((__v2si)__m1, (__v2si)__m2);
}
# 200 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_packs_pu16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_packuswb((__v4hi)__m1, (__v4hi)__m2);
}
# 227 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_unpackhi_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_punpckhbw((__v8qi)__m1, (__v8qi)__m2);
}
# 250 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_unpackhi_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_punpckhwd((__v4hi)__m1, (__v4hi)__m2);
}
# 271 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_unpackhi_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_punpckhdq((__v2si)__m1, (__v2si)__m2);
}
# 298 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_unpacklo_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_punpcklbw((__v8qi)__m1, (__v8qi)__m2);
}
# 321 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_unpacklo_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_punpcklwd((__v4hi)__m1, (__v4hi)__m2);
}
# 342 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_unpacklo_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_punpckldq((__v2si)__m1, (__v2si)__m2);
}
# 363 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_add_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddb((__v8qi)__m1, (__v8qi)__m2);
}
# 384 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_add_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddw((__v4hi)__m1, (__v4hi)__m2);
}
# 405 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_add_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddd((__v2si)__m1, (__v2si)__m2);
}
# 427 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_adds_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddsb((__v8qi)__m1, (__v8qi)__m2);
}
# 450 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_adds_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddsw((__v4hi)__m1, (__v4hi)__m2);
}
# 472 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_adds_pu8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddusb((__v8qi)__m1, (__v8qi)__m2);
}
# 494 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_adds_pu16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_paddusw((__v4hi)__m1, (__v4hi)__m2);
}
# 515 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sub_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubb((__v8qi)__m1, (__v8qi)__m2);
}
# 536 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sub_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubw((__v4hi)__m1, (__v4hi)__m2);
}
# 557 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sub_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubd((__v2si)__m1, (__v2si)__m2);
}
# 580 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_subs_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubsb((__v8qi)__m1, (__v8qi)__m2);
}
# 603 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_subs_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubsw((__v4hi)__m1, (__v4hi)__m2);
}
# 627 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_subs_pu8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubusb((__v8qi)__m1, (__v8qi)__m2);
}
# 651 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_subs_pu16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_psubusw((__v4hi)__m1, (__v4hi)__m2);
}
# 678 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_madd_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pmaddwd((__v4hi)__m1, (__v4hi)__m2);
}
# 699 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_mulhi_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pmulhw((__v4hi)__m1, (__v4hi)__m2);
}
# 720 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_mullo_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pmullw((__v4hi)__m1, (__v4hi)__m2);
}
# 743 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sll_pi16(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psllw((__v4hi)__m, __count);
}
# 765 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_slli_pi16(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psllwi((__v4hi)__m, __count);
}
# 788 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sll_pi32(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_pslld((__v2si)__m, __count);
}
# 810 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_slli_pi32(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_pslldi((__v2si)__m, __count);
}
# 830 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sll_si64(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psllq((__v1di)__m, __count);
}
# 850 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_slli_si64(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psllqi((__v1di)__m, __count);
}
# 874 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sra_pi16(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psraw((__v4hi)__m, __count);
}
# 897 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srai_pi16(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psrawi((__v4hi)__m, __count);
}
# 921 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_sra_pi32(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psrad((__v2si)__m, __count);
}
# 944 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srai_pi32(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psradi((__v2si)__m, __count);
}
# 967 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srl_pi16(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psrlw((__v4hi)__m, __count);
}
# 989 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srli_pi16(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psrlwi((__v4hi)__m, __count);
}
# 1012 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srl_pi32(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psrld((__v2si)__m, __count);
}
# 1034 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srli_pi32(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psrldi((__v2si)__m, __count);
}
# 1054 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srl_si64(__m64 __m, __m64 __count)
{
    return (__m64)__builtin_ia32_psrlq((__v1di)__m, __count);
}
# 1075 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_srli_si64(__m64 __m, int __count)
{
    return (__m64)__builtin_ia32_psrlqi((__v1di)__m, __count);
}
# 1093 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_and_si64(__m64 __m1, __m64 __m2)
{
    return __builtin_ia32_pand((__v1di)__m1, (__v1di)__m2);
}
# 1114 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_andnot_si64(__m64 __m1, __m64 __m2)
{
    return __builtin_ia32_pandn((__v1di)__m1, (__v1di)__m2);
}
# 1132 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_or_si64(__m64 __m1, __m64 __m2)
{
    return __builtin_ia32_por((__v1di)__m1, (__v1di)__m2);
}
# 1150 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_xor_si64(__m64 __m1, __m64 __m2)
{
    return __builtin_ia32_pxor((__v1di)__m1, (__v1di)__m2);
}
# 1172 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cmpeq_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pcmpeqb((__v8qi)__m1, (__v8qi)__m2);
}
# 1194 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cmpeq_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pcmpeqw((__v4hi)__m1, (__v4hi)__m2);
}
# 1216 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cmpeq_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pcmpeqd((__v2si)__m1, (__v2si)__m2);
}
# 1238 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cmpgt_pi8(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pcmpgtb((__v8qi)__m1, (__v8qi)__m2);
}
# 1260 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cmpgt_pi16(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pcmpgtw((__v4hi)__m1, (__v4hi)__m2);
}
# 1282 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_cmpgt_pi32(__m64 __m1, __m64 __m2)
{
    return (__m64)__builtin_ia32_pcmpgtd((__v2si)__m1, (__v2si)__m2);
}
# 1295 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_setzero_si64(void)
{
    return (__m64){ 0LL };
}
# 1316 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_set_pi32(int __i1, int __i0)
{
    return (__m64)__builtin_ia32_vec_init_v2si(__i0, __i1);
}
# 1339 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_set_pi16(short __s3, short __s2, short __s1, short __s0)
{
    return (__m64)__builtin_ia32_vec_init_v4hi(__s0, __s1, __s2, __s3);
}
# 1370 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_set_pi8(char __b7, char __b6, char __b5, char __b4, char __b3, char __b2,
            char __b1, char __b0)
{
    return (__m64)__builtin_ia32_vec_init_v8qi(__b0, __b1, __b2, __b3,
                                               __b4, __b5, __b6, __b7);
}
# 1390 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_set1_pi32(int __i)
{
    return _mm_set_pi32(__i, __i);
}
# 1408 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_set1_pi16(short __w)
{
    return _mm_set_pi16(__w, __w, __w, __w);
}
# 1426 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_set1_pi8(char __b)
{
    return _mm_set_pi8(__b, __b, __b, __b, __b, __b, __b, __b);
}
# 1447 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_setr_pi32(int __i0, int __i1)
{
    return _mm_set_pi32(__i1, __i0);
}
# 1470 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_setr_pi16(short __w0, short __w1, short __w2, short __w3)
{
    return _mm_set_pi16(__w3, __w2, __w1, __w0);
}
# 1501 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("mmx")))
_mm_setr_pi8(char __b0, char __b1, char __b2, char __b3, char __b4, char __b5,
             char __b6, char __b7)
{
    return _mm_set_pi8(__b7, __b6, __b5, __b4, __b3, __b2, __b1, __b0);
}
# 29 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 1 3
# 29 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
typedef int __v4si __attribute__((__vector_size__(16)));
typedef float __v4sf __attribute__((__vector_size__(16)));
typedef float __m128 __attribute__((__vector_size__(16)));


typedef unsigned int __v4su __attribute__((__vector_size__(16)));





# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mm_malloc.h" 1 3
# 39 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mm_malloc.h" 3
extern "C" int posix_memalign(void **__memptr, size_t __alignment, size_t __size);




static __inline__ void *__attribute__((__always_inline__, __nodebug__,
                                       __malloc__))
_mm_malloc(size_t __size, size_t __align)
{
  if (__align == 1) {
    return malloc(__size);
  }

  if (!(__align & (__align - 1)) && __align < sizeof(void *))
    __align = sizeof(void *);

  void *__mallocedMemory;





  if (posix_memalign(&__mallocedMemory, __align, __size))
    return 0;


  return __mallocedMemory;
}

static __inline__ void __attribute__((__always_inline__, __nodebug__))
_mm_free(void *__p)
{
  free(__p);
}
# 40 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 2 3
# 60 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_add_ss(__m128 __a, __m128 __b)
{
  __a[0] += __b[0];
  return __a;
}
# 80 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_add_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4sf)__a + (__v4sf)__b);
}
# 102 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_sub_ss(__m128 __a, __m128 __b)
{
  __a[0] -= __b[0];
  return __a;
}
# 123 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_sub_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4sf)__a - (__v4sf)__b);
}
# 145 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_mul_ss(__m128 __a, __m128 __b)
{
  __a[0] *= __b[0];
  return __a;
}
# 165 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_mul_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4sf)__a * (__v4sf)__b);
}
# 187 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_div_ss(__m128 __a, __m128 __b)
{
  __a[0] /= __b[0];
  return __a;
}
# 206 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_div_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4sf)__a / (__v4sf)__b);
}
# 224 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_sqrt_ss(__m128 __a)
{
  __m128 __c = __builtin_ia32_sqrtss((__v4sf)__a);
  return (__m128) { __c[0], __a[1], __a[2], __a[3] };
}
# 242 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_sqrt_ps(__m128 __a)
{
  return __builtin_ia32_sqrtps((__v4sf)__a);
}
# 260 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_rcp_ss(__m128 __a)
{
  __m128 __c = __builtin_ia32_rcpss((__v4sf)__a);
  return (__m128) { __c[0], __a[1], __a[2], __a[3] };
}
# 278 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_rcp_ps(__m128 __a)
{
  return __builtin_ia32_rcpps((__v4sf)__a);
}
# 297 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_rsqrt_ss(__m128 __a)
{
  __m128 __c = __builtin_ia32_rsqrtss((__v4sf)__a);
  return (__m128) { __c[0], __a[1], __a[2], __a[3] };
}
# 315 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_rsqrt_ps(__m128 __a)
{
  return __builtin_ia32_rsqrtps((__v4sf)__a);
}
# 338 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_min_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_minss((__v4sf)__a, (__v4sf)__b);
}
# 357 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_min_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_minps((__v4sf)__a, (__v4sf)__b);
}
# 380 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_max_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_maxss((__v4sf)__a, (__v4sf)__b);
}
# 399 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_max_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_maxps((__v4sf)__a, (__v4sf)__b);
}
# 417 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_and_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4su)__a & (__v4su)__b);
}
# 439 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_andnot_ps(__m128 __a, __m128 __b)
{
  return (__m128)(~(__v4su)__a & (__v4su)__b);
}
# 457 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_or_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4su)__a | (__v4su)__b);
}
# 476 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_xor_ps(__m128 __a, __m128 __b)
{
  return (__m128)((__v4su)__a ^ (__v4su)__b);
}
# 498 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpeq_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpeqss((__v4sf)__a, (__v4sf)__b);
}
# 516 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpeq_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpeqps((__v4sf)__a, (__v4sf)__b);
}
# 539 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmplt_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpltss((__v4sf)__a, (__v4sf)__b);
}
# 558 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmplt_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpltps((__v4sf)__a, (__v4sf)__b);
}
# 582 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmple_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpless((__v4sf)__a, (__v4sf)__b);
}
# 601 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmple_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpleps((__v4sf)__a, (__v4sf)__b);
}
# 624 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpgt_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_shufflevector((__v4sf)__a,
                                         (__v4sf)__builtin_ia32_cmpltss((__v4sf)__b, (__v4sf)__a),
                                         4, 1, 2, 3);
}
# 645 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpgt_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpltps((__v4sf)__b, (__v4sf)__a);
}
# 669 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpge_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_shufflevector((__v4sf)__a,
                                         (__v4sf)__builtin_ia32_cmpless((__v4sf)__b, (__v4sf)__a),
                                         4, 1, 2, 3);
}
# 690 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpge_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpleps((__v4sf)__b, (__v4sf)__a);
}
# 713 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpneq_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpneqss((__v4sf)__a, (__v4sf)__b);
}
# 732 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpneq_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpneqps((__v4sf)__a, (__v4sf)__b);
}
# 756 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpnlt_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpnltss((__v4sf)__a, (__v4sf)__b);
}
# 776 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpnlt_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpnltps((__v4sf)__a, (__v4sf)__b);
}
# 801 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpnle_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpnless((__v4sf)__a, (__v4sf)__b);
}
# 821 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpnle_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpnleps((__v4sf)__a, (__v4sf)__b);
}
# 846 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpngt_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_shufflevector((__v4sf)__a,
                                         (__v4sf)__builtin_ia32_cmpnltss((__v4sf)__b, (__v4sf)__a),
                                         4, 1, 2, 3);
}
# 868 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpngt_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpnltps((__v4sf)__b, (__v4sf)__a);
}
# 893 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpnge_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_shufflevector((__v4sf)__a,
                                         (__v4sf)__builtin_ia32_cmpnless((__v4sf)__b, (__v4sf)__a),
                                         4, 1, 2, 3);
}
# 915 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpnge_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpnleps((__v4sf)__b, (__v4sf)__a);
}
# 940 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpord_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpordss((__v4sf)__a, (__v4sf)__b);
}
# 960 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpord_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpordps((__v4sf)__a, (__v4sf)__b);
}
# 985 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpunord_ss(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpunordss((__v4sf)__a, (__v4sf)__b);
}
# 1005 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cmpunord_ps(__m128 __a, __m128 __b)
{
  return (__m128)__builtin_ia32_cmpunordps((__v4sf)__a, (__v4sf)__b);
}
# 1026 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_comieq_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_comieq((__v4sf)__a, (__v4sf)__b);
}
# 1048 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_comilt_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_comilt((__v4sf)__a, (__v4sf)__b);
}
# 1069 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_comile_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_comile((__v4sf)__a, (__v4sf)__b);
}
# 1090 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_comigt_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_comigt((__v4sf)__a, (__v4sf)__b);
}
# 1111 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_comige_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_comige((__v4sf)__a, (__v4sf)__b);
}
# 1132 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_comineq_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_comineq((__v4sf)__a, (__v4sf)__b);
}
# 1153 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_ucomieq_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_ucomieq((__v4sf)__a, (__v4sf)__b);
}
# 1174 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_ucomilt_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_ucomilt((__v4sf)__a, (__v4sf)__b);
}
# 1196 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_ucomile_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_ucomile((__v4sf)__a, (__v4sf)__b);
}
# 1218 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_ucomigt_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_ucomigt((__v4sf)__a, (__v4sf)__b);
}
# 1240 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_ucomige_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_ucomige((__v4sf)__a, (__v4sf)__b);
}
# 1261 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_ucomineq_ss(__m128 __a, __m128 __b)
{
  return __builtin_ia32_ucomineq((__v4sf)__a, (__v4sf)__b);
}
# 1279 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtss_si32(__m128 __a)
{
  return __builtin_ia32_cvtss2si((__v4sf)__a);
}
# 1297 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvt_ss2si(__m128 __a)
{
  return _mm_cvtss_si32(__a);
}
# 1317 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtss_si64(__m128 __a)
{
  return __builtin_ia32_cvtss2si64((__v4sf)__a);
}
# 1335 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtps_pi32(__m128 __a)
{
  return (__m64)__builtin_ia32_cvtps2pi((__v4sf)__a);
}
# 1351 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvt_ps2pi(__m128 __a)
{
  return _mm_cvtps_pi32(__a);
}
# 1370 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvttss_si32(__m128 __a)
{
  return __builtin_ia32_cvttss2si((__v4sf)__a);
}
# 1389 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtt_ss2si(__m128 __a)
{
  return _mm_cvttss_si32(__a);
}
# 1409 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvttss_si64(__m128 __a)
{
  return __builtin_ia32_cvttss2si64((__v4sf)__a);
}
# 1428 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvttps_pi32(__m128 __a)
{
  return (__m64)__builtin_ia32_cvttps2pi((__v4sf)__a);
}
# 1445 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtt_ps2pi(__m128 __a)
{
  return _mm_cvttps_pi32(__a);
}
# 1467 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtsi32_ss(__m128 __a, int __b)
{
  __a[0] = __b;
  return __a;
}
# 1490 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvt_si2ss(__m128 __a, int __b)
{
  return _mm_cvtsi32_ss(__a, __b);
}
# 1514 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtsi64_ss(__m128 __a, long long __b)
{
  __a[0] = __b;
  return __a;
}
# 1540 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtpi32_ps(__m128 __a, __m64 __b)
{
  return __builtin_ia32_cvtpi2ps((__v4sf)__a, (__v2si)__b);
}
# 1563 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvt_pi2ps(__m128 __a, __m64 __b)
{
  return _mm_cvtpi32_ps(__a, __b);
}
# 1580 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ float __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtss_f32(__m128 __a)
{
  return __a[0];
}
# 1601 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_loadh_pi(__m128 __a, const __m64 *__p)
{
  typedef float __mm_loadh_pi_v2f32 __attribute__((__vector_size__(8)));
  struct __mm_loadh_pi_struct {
    __mm_loadh_pi_v2f32 __u;
  } __attribute__((__packed__, __may_alias__));
  __mm_loadh_pi_v2f32 __b = ((struct __mm_loadh_pi_struct*)__p)->__u;
  __m128 __bb = __builtin_shufflevector(__b, __b, 0, 1, 0, 1);
  return __builtin_shufflevector(__a, __bb, 0, 1, 4, 5);
}
# 1628 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_loadl_pi(__m128 __a, const __m64 *__p)
{
  typedef float __mm_loadl_pi_v2f32 __attribute__((__vector_size__(8)));
  struct __mm_loadl_pi_struct {
    __mm_loadl_pi_v2f32 __u;
  } __attribute__((__packed__, __may_alias__));
  __mm_loadl_pi_v2f32 __b = ((struct __mm_loadl_pi_struct*)__p)->__u;
  __m128 __bb = __builtin_shufflevector(__b, __b, 0, 1, 0, 1);
  return __builtin_shufflevector(__a, __bb, 4, 5, 2, 3);
}
# 1655 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_load_ss(const float *__p)
{
  struct __mm_load_ss_struct {
    float __u;
  } __attribute__((__packed__, __may_alias__));
  float __u = ((struct __mm_load_ss_struct*)__p)->__u;
  return (__m128){ __u, 0, 0, 0 };
}
# 1677 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_load1_ps(const float *__p)
{
  struct __mm_load1_ps_struct {
    float __u;
  } __attribute__((__packed__, __may_alias__));
  float __u = ((struct __mm_load1_ps_struct*)__p)->__u;
  return (__m128){ __u, __u, __u, __u };
}
# 1700 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_load_ps(const float *__p)
{
  return *(__m128*)__p;
}
# 1717 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_loadu_ps(const float *__p)
{
  struct __loadu_ps {
    __m128 __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_ps*)__p)->__v;
}
# 1739 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_loadr_ps(const float *__p)
{
  __m128 __a = _mm_load_ps(__p);
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 3, 2, 1, 0);
}
# 1753 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_undefined_ps(void)
{
  return (__m128)__builtin_ia32_undef128();
}
# 1773 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_set_ss(float __w)
{
  return (__m128){ __w, 0, 0, 0 };
}
# 1791 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_set1_ps(float __w)
{
  return (__m128){ __w, __w, __w, __w };
}
# 1810 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_set_ps1(float __w)
{
    return _mm_set1_ps(__w);
}
# 1837 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_set_ps(float __z, float __y, float __x, float __w)
{
  return (__m128){ __w, __x, __y, __z };
}
# 1865 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_setr_ps(float __z, float __y, float __x, float __w)
{
  return (__m128){ __z, __y, __x, __w };
}
# 1880 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_setzero_ps(void)
{
  return (__m128){ 0, 0, 0, 0 };
}
# 1897 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_storeh_pi(__m64 *__p, __m128 __a)
{
  __builtin_ia32_storehps((__v2si *)__p, (__v4sf)__a);
}
# 1914 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_storel_pi(__m64 *__p, __m128 __a)
{
  __builtin_ia32_storelps((__v2si *)__p, (__v4sf)__a);
}
# 1931 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_store_ss(float *__p, __m128 __a)
{
  struct __mm_store_ss_struct {
    float __u;
  } __attribute__((__packed__, __may_alias__));
  ((struct __mm_store_ss_struct*)__p)->__u = __a[0];
}
# 1952 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_storeu_ps(float *__p, __m128 __a)
{
  struct __storeu_ps {
    __m128 __v;
  } __attribute__((__packed__, __may_alias__));
  ((struct __storeu_ps*)__p)->__v = __a;
}
# 1973 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_store_ps(float *__p, __m128 __a)
{
  *(__m128*)__p = __a;
}
# 1992 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_store1_ps(float *__p, __m128 __a)
{
  __a = __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 0, 0, 0, 0);
  _mm_store_ps(__p, __a);
}
# 2012 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_store_ps1(float *__p, __m128 __a)
{
  return _mm_store1_ps(__p, __a);
}
# 2031 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_storer_ps(float *__p, __m128 __a)
{
  __a = __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 3, 2, 1, 0);
  _mm_store_ps(__p, __a);
}
# 2086 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_stream_pi(__m64 *__p, __m64 __a)
{
  __builtin_ia32_movntq(__p, __a);
}
# 2105 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_stream_ps(float *__p, __m128 __a)
{
  __builtin_nontemporal_store((__v4sf)__a, (__v4sf*)__p);
}


extern "C" {
# 2124 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
void _mm_sfence(void);


}
# 2197 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_max_pi16(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pmaxsw((__v4hi)__a, (__v4hi)__b);
}
# 2216 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_max_pu8(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pmaxub((__v8qi)__a, (__v8qi)__b);
}
# 2235 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_min_pi16(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pminsw((__v4hi)__a, (__v4hi)__b);
}
# 2254 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_min_pu8(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pminub((__v8qi)__a, (__v8qi)__b);
}
# 2272 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_movemask_pi8(__m64 __a)
{
  return __builtin_ia32_pmovmskb((__v8qi)__a);
}
# 2291 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_mulhi_pu16(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pmulhuw((__v4hi)__a, (__v4hi)__b);
}
# 2354 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_maskmove_si64(__m64 __d, __m64 __n, char *__p)
{
  __builtin_ia32_maskmovq((__v8qi)__d, (__v8qi)__n, __p);
}
# 2373 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_avg_pu8(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pavgb((__v8qi)__a, (__v8qi)__b);
}
# 2392 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_avg_pu16(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_pavgw((__v4hi)__a, (__v4hi)__b);
}
# 2414 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_sad_pu8(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_psadbw((__v8qi)__a, (__v8qi)__b);
}


extern "C" {
# 2470 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
unsigned int _mm_getcsr(void);
# 2522 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
void _mm_setcsr(unsigned int __i);


}
# 2587 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_unpackhi_ps(__m128 __a, __m128 __b)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__b, 2, 6, 3, 7);
}
# 2609 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_unpacklo_ps(__m128 __a, __m128 __b)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__b, 0, 4, 1, 5);
}
# 2630 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_move_ss(__m128 __a, __m128 __b)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__b, 4, 1, 2, 3);
}
# 2651 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_movehl_ps(__m128 __a, __m128 __b)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__b, 6, 7, 2, 3);
}
# 2672 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_movelh_ps(__m128 __a, __m128 __b)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__b, 0, 1, 4, 5);
}
# 2690 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtpi16_ps(__m64 __a)
{
  __m64 __b, __c;
  __m128 __r;

  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi16(__b, __a);
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_setzero_ps();
  __r = _mm_cvtpi32_ps(__r, __c);
  __r = _mm_movelh_ps(__r, __r);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);

  return __r;
}
# 2720 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtpu16_ps(__m64 __a)
{
  __m64 __b, __c;
  __m128 __r;

  __b = _mm_setzero_si64();
  __c = _mm_unpackhi_pi16(__a, __b);
  __r = _mm_setzero_ps();
  __r = _mm_cvtpi32_ps(__r, __c);
  __r = _mm_movelh_ps(__r, __r);
  __c = _mm_unpacklo_pi16(__a, __b);
  __r = _mm_cvtpi32_ps(__r, __c);

  return __r;
}
# 2749 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtpi8_ps(__m64 __a)
{
  __m64 __b;

  __b = _mm_setzero_si64();
  __b = _mm_cmpgt_pi8(__b, __a);
  __b = _mm_unpacklo_pi8(__a, __b);

  return _mm_cvtpi16_ps(__b);
}
# 2774 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtpu8_ps(__m64 __a)
{
  __m64 __b;

  __b = _mm_setzero_si64();
  __b = _mm_unpacklo_pi8(__a, __b);

  return _mm_cvtpi16_ps(__b);
}
# 2801 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtpi32x2_ps(__m64 __a, __m64 __b)
{
  __m128 __c;

  __c = _mm_setzero_ps();
  __c = _mm_cvtpi32_ps(__c, __b);
  __c = _mm_movelh_ps(__c, __c);

  return _mm_cvtpi32_ps(__c, __a);
}
# 2830 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtps_pi16(__m128 __a)
{
  __m64 __b, __c;

  __b = _mm_cvtps_pi32(__a);
  __a = _mm_movehl_ps(__a, __a);
  __c = _mm_cvtps_pi32(__a);

  return _mm_packs_pi32(__b, __c);
}
# 2860 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_cvtps_pi8(__m128 __a)
{
  __m64 __b, __c;

  __b = _mm_cvtps_pi16(__a);
  __c = _mm_setzero_si64();

  return _mm_packs_pi16(__b, __c);
}
# 2885 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse")))
_mm_movemask_ps(__m128 __a)
{
  return __builtin_ia32_movmskps((__v4sf)__a);
}
# 2966 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 3
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 1 3
# 27 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 1 3
# 28 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 2 3

typedef double __m128d __attribute__((__vector_size__(16)));
typedef long long __m128i __attribute__((__vector_size__(16)));


typedef double __v2df __attribute__ ((__vector_size__ (16)));
typedef long long __v2di __attribute__ ((__vector_size__ (16)));
typedef short __v8hi __attribute__((__vector_size__(16)));
typedef char __v16qi __attribute__((__vector_size__(16)));


typedef unsigned long long __v2du __attribute__ ((__vector_size__ (16)));
typedef unsigned short __v8hu __attribute__((__vector_size__(16)));
typedef unsigned char __v16qu __attribute__((__vector_size__(16)));



typedef signed char __v16qs __attribute__((__vector_size__(16)));


# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/f16cintrin.h" 1 3
# 45 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/f16cintrin.h" 3
static __inline float __attribute__((__always_inline__, __nodebug__, __target__("f16c")))
_cvtsh_ss(unsigned short __a)
{
  __v8hi v = {(short)__a, 0, 0, 0, 0, 0, 0, 0};
  __v4sf r = __builtin_ia32_vcvtph2ps(v);
  return r[0];
}
# 116 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/f16cintrin.h" 3
static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("f16c")))
_mm_cvtph_ps(__m128i __a)
{
  return (__m128)__builtin_ia32_vcvtph2ps((__v8hi)__a);
}
# 48 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 2 3
# 67 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_sd(__m128d __a, __m128d __b)
{
  __a[0] += __b[0];
  return __a;
}
# 86 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v2df)__a + (__v2df)__b);
}
# 109 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_sd(__m128d __a, __m128d __b)
{
  __a[0] -= __b[0];
  return __a;
}
# 128 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v2df)__a - (__v2df)__b);
}
# 150 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mul_sd(__m128d __a, __m128d __b)
{
  __a[0] *= __b[0];
  return __a;
}
# 169 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mul_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v2df)__a * (__v2df)__b);
}
# 192 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_div_sd(__m128d __a, __m128d __b)
{
  __a[0] /= __b[0];
  return __a;
}
# 212 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_div_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v2df)__a / (__v2df)__b);
}
# 237 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sqrt_sd(__m128d __a, __m128d __b)
{
  __m128d __c = __builtin_ia32_sqrtsd((__v2df)__b);
  return (__m128d) { __c[0], __a[1] };
}
# 255 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sqrt_pd(__m128d __a)
{
  return __builtin_ia32_sqrtpd((__v2df)__a);
}
# 279 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_min_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_minsd((__v2df)__a, (__v2df)__b);
}
# 299 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_min_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_minpd((__v2df)__a, (__v2df)__b);
}
# 323 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_max_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_maxsd((__v2df)__a, (__v2df)__b);
}
# 343 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_max_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_maxpd((__v2df)__a, (__v2df)__b);
}
# 361 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_and_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v2du)__a & (__v2du)__b);
}
# 382 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_andnot_pd(__m128d __a, __m128d __b)
{
  return (__m128d)(~(__v2du)__a & (__v2du)__b);
}
# 400 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_or_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v2du)__a | (__v2du)__b);
}
# 418 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_xor_pd(__m128d __a, __m128d __b)
{
  return (__m128d)((__v2du)__a ^ (__v2du)__b);
}
# 437 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpeq_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpeqpd((__v2df)__a, (__v2df)__b);
}
# 457 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmplt_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpltpd((__v2df)__a, (__v2df)__b);
}
# 478 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmple_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmplepd((__v2df)__a, (__v2df)__b);
}
# 499 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpgt_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpltpd((__v2df)__b, (__v2df)__a);
}
# 520 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpge_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmplepd((__v2df)__b, (__v2df)__a);
}
# 543 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpord_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpordpd((__v2df)__a, (__v2df)__b);
}
# 567 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpunord_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpunordpd((__v2df)__a, (__v2df)__b);
}
# 588 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpneq_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpneqpd((__v2df)__a, (__v2df)__b);
}
# 609 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpnlt_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpnltpd((__v2df)__a, (__v2df)__b);
}
# 630 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpnle_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpnlepd((__v2df)__a, (__v2df)__b);
}
# 651 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpngt_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpnltpd((__v2df)__b, (__v2df)__a);
}
# 672 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpnge_pd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpnlepd((__v2df)__b, (__v2df)__a);
}
# 695 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpeq_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpeqsd((__v2df)__a, (__v2df)__b);
}
# 720 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmplt_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpltsd((__v2df)__a, (__v2df)__b);
}
# 745 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmple_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmplesd((__v2df)__a, (__v2df)__b);
}
# 770 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpgt_sd(__m128d __a, __m128d __b)
{
  __m128d __c = __builtin_ia32_cmpltsd((__v2df)__b, (__v2df)__a);
  return (__m128d) { __c[0], __a[1] };
}
# 796 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpge_sd(__m128d __a, __m128d __b)
{
  __m128d __c = __builtin_ia32_cmplesd((__v2df)__b, (__v2df)__a);
  return (__m128d) { __c[0], __a[1] };
}
# 824 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpord_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpordsd((__v2df)__a, (__v2df)__b);
}
# 852 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpunord_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpunordsd((__v2df)__a, (__v2df)__b);
}
# 877 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpneq_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpneqsd((__v2df)__a, (__v2df)__b);
}
# 902 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpnlt_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpnltsd((__v2df)__a, (__v2df)__b);
}
# 927 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpnle_sd(__m128d __a, __m128d __b)
{
  return (__m128d)__builtin_ia32_cmpnlesd((__v2df)__a, (__v2df)__b);
}
# 952 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpngt_sd(__m128d __a, __m128d __b)
{
  __m128d __c = __builtin_ia32_cmpnltsd((__v2df)__b, (__v2df)__a);
  return (__m128d) { __c[0], __a[1] };
}
# 978 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpnge_sd(__m128d __a, __m128d __b)
{
  __m128d __c = __builtin_ia32_cmpnlesd((__v2df)__b, (__v2df)__a);
  return (__m128d) { __c[0], __a[1] };
}
# 1000 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_comieq_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_comisdeq((__v2df)__a, (__v2df)__b);
}
# 1024 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_comilt_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_comisdlt((__v2df)__a, (__v2df)__b);
}
# 1048 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_comile_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_comisdle((__v2df)__a, (__v2df)__b);
}
# 1072 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_comigt_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_comisdgt((__v2df)__a, (__v2df)__b);
}
# 1096 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_comige_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_comisdge((__v2df)__a, (__v2df)__b);
}
# 1120 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_comineq_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_comisdneq((__v2df)__a, (__v2df)__b);
}
# 1144 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_ucomieq_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_ucomisdeq((__v2df)__a, (__v2df)__b);
}
# 1170 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_ucomilt_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_ucomisdlt((__v2df)__a, (__v2df)__b);
}
# 1196 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_ucomile_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_ucomisdle((__v2df)__a, (__v2df)__b);
}
# 1222 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_ucomigt_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_ucomisdgt((__v2df)__a, (__v2df)__b);
}
# 1248 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_ucomige_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_ucomisdge((__v2df)__a, (__v2df)__b);
}
# 1274 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_ucomineq_sd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_ucomisdneq((__v2df)__a, (__v2df)__b);
}
# 1293 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtpd_ps(__m128d __a)
{
  return __builtin_ia32_cvtpd2ps((__v2df)__a);
}
# 1313 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtps_pd(__m128 __a)
{
  return (__m128d) __builtin_convertvector(
      __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 0, 1), __v2df);
}
# 1336 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtepi32_pd(__m128i __a)
{
  return (__m128d) __builtin_convertvector(
      __builtin_shufflevector((__v4si)__a, (__v4si)__a, 0, 1), __v2df);
}
# 1356 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtpd_epi32(__m128d __a)
{
  return __builtin_ia32_cvtpd2dq((__v2df)__a);
}
# 1373 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsd_si32(__m128d __a)
{
  return __builtin_ia32_cvtsd2si((__v2df)__a);
}
# 1398 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsd_ss(__m128 __a, __m128d __b)
{
  return (__m128)__builtin_ia32_cvtsd2ss((__v4sf)__a, (__v2df)__b);
}
# 1421 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsi32_sd(__m128d __a, int __b)
{
  __a[0] = __b;
  return __a;
}
# 1447 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtss_sd(__m128d __a, __m128 __b)
{
  __a[0] = __b[0];
  return __a;
}
# 1471 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvttpd_epi32(__m128d __a)
{
  return (__m128i)__builtin_ia32_cvttpd2dq((__v2df)__a);
}
# 1489 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvttsd_si32(__m128d __a)
{
  return __builtin_ia32_cvttsd2si((__v2df)__a);
}
# 1506 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtpd_pi32(__m128d __a)
{
  return (__m64)__builtin_ia32_cvtpd2pi((__v2df)__a);
}
# 1526 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvttpd_pi32(__m128d __a)
{
  return (__m64)__builtin_ia32_cvttpd2pi((__v2df)__a);
}
# 1543 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtpi32_pd(__m64 __a)
{
  return __builtin_ia32_cvtpi2pd((__v2si)__a);
}
# 1560 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ double __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsd_f64(__m128d __a)
{
  return __a[0];
}
# 1577 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_load_pd(double const *__dp)
{
  return *(__m128d*)__dp;
}
# 1595 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_load1_pd(double const *__dp)
{
  struct __mm_load1_pd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  double __u = ((struct __mm_load1_pd_struct*)__dp)->__u;
  return (__m128d){ __u, __u };
}
# 1621 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadr_pd(double const *__dp)
{
  __m128d __u = *(__m128d*)__dp;
  return __builtin_shufflevector((__v2df)__u, (__v2df)__u, 1, 0);
}
# 1639 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadu_pd(double const *__dp)
{
  struct __loadu_pd {
    __m128d __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_pd*)__dp)->__v;
}
# 1659 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadu_si64(void const *__a)
{
  struct __loadu_si64 {
    long long __v;
  } __attribute__((__packed__, __may_alias__));
  long long __u = ((struct __loadu_si64*)__a)->__v;
  return (__m128i){__u, 0L};
}
# 1680 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_load_sd(double const *__dp)
{
  struct __mm_load_sd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  double __u = ((struct __mm_load_sd_struct*)__dp)->__u;
  return (__m128d){ __u, 0 };
}
# 1707 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadh_pd(__m128d __a, double const *__dp)
{
  struct __mm_loadh_pd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  double __u = ((struct __mm_loadh_pd_struct*)__dp)->__u;
  return (__m128d){ __a[0], __u };
}
# 1734 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadl_pd(__m128d __a, double const *__dp)
{
  struct __mm_loadl_pd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  double __u = ((struct __mm_loadl_pd_struct*)__dp)->__u;
  return (__m128d){ __u, __a[1] };
}
# 1755 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_undefined_pd(void)
{
  return (__m128d)__builtin_ia32_undef128();
}
# 1775 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_sd(double __w)
{
  return (__m128d){ __w, 0 };
}
# 1793 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set1_pd(double __w)
{
  return (__m128d){ __w, __w };
}
# 1811 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_pd1(double __w)
{
  return _mm_set1_pd(__w);
}
# 1831 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_pd(double __w, double __x)
{
  return (__m128d){ __x, __w };
}
# 1852 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setr_pd(double __w, double __x)
{
  return (__m128d){ __w, __x };
}
# 1867 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setzero_pd(void)
{
  return (__m128d){ 0, 0 };
}
# 1888 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_move_sd(__m128d __a, __m128d __b)
{
  return (__m128d){ __b[0], __a[1] };
}
# 1905 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_store_sd(double *__dp, __m128d __a)
{
  struct __mm_store_sd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  ((struct __mm_store_sd_struct*)__dp)->__u = __a[0];
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_store_pd(double *__dp, __m128d __a)
{
  *(__m128d*)__dp = __a;
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_store1_pd(double *__dp, __m128d __a)
{
  __a = __builtin_shufflevector((__v2df)__a, (__v2df)__a, 0, 0);
  _mm_store_pd(__dp, __a);
}
# 1939 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_store_pd1(double *__dp, __m128d __a)
{
  return _mm_store1_pd(__dp, __a);
}
# 1957 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_storeu_pd(double *__dp, __m128d __a)
{
  struct __storeu_pd {
    __m128d __v;
  } __attribute__((__packed__, __may_alias__));
  ((struct __storeu_pd*)__dp)->__v = __a;
}
# 1980 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_storer_pd(double *__dp, __m128d __a)
{
  __a = __builtin_shufflevector((__v2df)__a, (__v2df)__a, 1, 0);
  *(__m128d *)__dp = __a;
}
# 1998 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_storeh_pd(double *__dp, __m128d __a)
{
  struct __mm_storeh_pd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  ((struct __mm_storeh_pd_struct*)__dp)->__u = __a[1];
}
# 2018 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_storel_pd(double *__dp, __m128d __a)
{
  struct __mm_storeh_pd_struct {
    double __u;
  } __attribute__((__packed__, __may_alias__));
  ((struct __mm_storeh_pd_struct*)__dp)->__u = __a[0];
}
# 2043 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)((__v16qu)__a + (__v16qu)__b);
}
# 2065 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)((__v8hu)__a + (__v8hu)__b);
}
# 2087 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)((__v4su)__a + (__v4su)__b);
}
# 2105 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_si64(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_paddq((__v1di)__a, (__v1di)__b);
}
# 2127 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_add_epi64(__m128i __a, __m128i __b)
{
  return (__m128i)((__v2du)__a + (__v2du)__b);
}
# 2148 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_adds_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_paddsb128((__v16qi)__a, (__v16qi)__b);
}
# 2170 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_adds_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_paddsw128((__v8hi)__a, (__v8hi)__b);
}
# 2191 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_adds_epu8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_paddusb128((__v16qi)__a, (__v16qi)__b);
}
# 2212 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_adds_epu16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_paddusw128((__v8hi)__a, (__v8hi)__b);
}
# 2232 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_avg_epu8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pavgb128((__v16qi)__a, (__v16qi)__b);
}
# 2252 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_avg_epu16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pavgw128((__v8hi)__a, (__v8hi)__b);
}
# 2278 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_madd_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pmaddwd128((__v8hi)__a, (__v8hi)__b);
}
# 2298 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_max_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pmaxsw128((__v8hi)__a, (__v8hi)__b);
}
# 2318 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_max_epu8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pmaxub128((__v16qi)__a, (__v16qi)__b);
}
# 2338 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_min_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pminsw128((__v8hi)__a, (__v8hi)__b);
}
# 2358 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_min_epu8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pminub128((__v16qi)__a, (__v16qi)__b);
}
# 2378 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mulhi_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pmulhw128((__v8hi)__a, (__v8hi)__b);
}
# 2398 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mulhi_epu16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_pmulhuw128((__v8hi)__a, (__v8hi)__b);
}
# 2418 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mullo_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)((__v8hu)__a * (__v8hu)__b);
}
# 2437 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mul_su32(__m64 __a, __m64 __b)
{
  return __builtin_ia32_pmuludq((__v2si)__a, (__v2si)__b);
}
# 2456 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_mul_epu32(__m128i __a, __m128i __b)
{
  return __builtin_ia32_pmuludq128((__v4si)__a, (__v4si)__b);
}
# 2478 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sad_epu8(__m128i __a, __m128i __b)
{
  return __builtin_ia32_psadbw128((__v16qi)__a, (__v16qi)__b);
}
# 2496 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)((__v16qu)__a - (__v16qu)__b);
}
# 2514 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)((__v8hu)__a - (__v8hu)__b);
}
# 2532 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)((__v4su)__a - (__v4su)__b);
}
# 2551 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_si64(__m64 __a, __m64 __b)
{
  return (__m64)__builtin_ia32_psubq((__v1di)__a, (__v1di)__b);
}
# 2569 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sub_epi64(__m128i __a, __m128i __b)
{
  return (__m128i)((__v2du)__a - (__v2du)__b);
}
# 2590 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_subs_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_psubsb128((__v16qi)__a, (__v16qi)__b);
}
# 2611 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_subs_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_psubsw128((__v8hi)__a, (__v8hi)__b);
}
# 2631 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_subs_epu8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_psubusb128((__v16qi)__a, (__v16qi)__b);
}
# 2651 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_subs_epu16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_psubusw128((__v8hi)__a, (__v8hi)__b);
}
# 2669 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_and_si128(__m128i __a, __m128i __b)
{
  return (__m128i)((__v2du)__a & (__v2du)__b);
}
# 2689 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_andnot_si128(__m128i __a, __m128i __b)
{
  return (__m128i)(~(__v2du)__a & (__v2du)__b);
}
# 2706 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_or_si128(__m128i __a, __m128i __b)
{
  return (__m128i)((__v2du)__a | (__v2du)__b);
}
# 2724 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_xor_si128(__m128i __a, __m128i __b)
{
  return (__m128i)((__v2du)__a ^ (__v2du)__b);
}
# 2784 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_slli_epi16(__m128i __a, int __count)
{
  return (__m128i)__builtin_ia32_psllwi128((__v8hi)__a, __count);
}
# 2803 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sll_epi16(__m128i __a, __m128i __count)
{
  return (__m128i)__builtin_ia32_psllw128((__v8hi)__a, (__v8hi)__count);
}
# 2822 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_slli_epi32(__m128i __a, int __count)
{
  return (__m128i)__builtin_ia32_pslldi128((__v4si)__a, __count);
}
# 2841 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sll_epi32(__m128i __a, __m128i __count)
{
  return (__m128i)__builtin_ia32_pslld128((__v4si)__a, (__v4si)__count);
}
# 2860 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_slli_epi64(__m128i __a, int __count)
{
  return __builtin_ia32_psllqi128((__v2di)__a, __count);
}
# 2879 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sll_epi64(__m128i __a, __m128i __count)
{
  return __builtin_ia32_psllq128((__v2di)__a, (__v2di)__count);
}
# 2899 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srai_epi16(__m128i __a, int __count)
{
  return (__m128i)__builtin_ia32_psrawi128((__v8hi)__a, __count);
}
# 2919 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sra_epi16(__m128i __a, __m128i __count)
{
  return (__m128i)__builtin_ia32_psraw128((__v8hi)__a, (__v8hi)__count);
}
# 2939 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srai_epi32(__m128i __a, int __count)
{
  return (__m128i)__builtin_ia32_psradi128((__v4si)__a, __count);
}
# 2959 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_sra_epi32(__m128i __a, __m128i __count)
{
  return (__m128i)__builtin_ia32_psrad128((__v4si)__a, (__v4si)__count);
}
# 3019 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srli_epi16(__m128i __a, int __count)
{
  return (__m128i)__builtin_ia32_psrlwi128((__v8hi)__a, __count);
}
# 3038 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srl_epi16(__m128i __a, __m128i __count)
{
  return (__m128i)__builtin_ia32_psrlw128((__v8hi)__a, (__v8hi)__count);
}
# 3057 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srli_epi32(__m128i __a, int __count)
{
  return (__m128i)__builtin_ia32_psrldi128((__v4si)__a, __count);
}
# 3076 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srl_epi32(__m128i __a, __m128i __count)
{
  return (__m128i)__builtin_ia32_psrld128((__v4si)__a, (__v4si)__count);
}
# 3095 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srli_epi64(__m128i __a, int __count)
{
  return __builtin_ia32_psrlqi128((__v2di)__a, __count);
}
# 3114 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_srl_epi64(__m128i __a, __m128i __count)
{
  return __builtin_ia32_psrlq128((__v2di)__a, (__v2di)__count);
}
# 3133 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpeq_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)((__v16qi)__a == (__v16qi)__b);
}
# 3152 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpeq_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)((__v8hi)__a == (__v8hi)__b);
}
# 3171 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpeq_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)((__v4si)__a == (__v4si)__b);
}
# 3191 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpgt_epi8(__m128i __a, __m128i __b)
{


  return (__m128i)((__v16qs)__a > (__v16qs)__b);
}
# 3214 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpgt_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)((__v8hi)__a > (__v8hi)__b);
}
# 3235 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmpgt_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)((__v4si)__a > (__v4si)__b);
}
# 3256 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmplt_epi8(__m128i __a, __m128i __b)
{
  return _mm_cmpgt_epi8(__b, __a);
}
# 3277 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmplt_epi16(__m128i __a, __m128i __b)
{
  return _mm_cmpgt_epi16(__b, __a);
}
# 3298 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cmplt_epi32(__m128i __a, __m128i __b)
{
  return _mm_cmpgt_epi32(__b, __a);
}
# 3322 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsi64_sd(__m128d __a, long long __b)
{
  __a[0] = __b;
  return __a;
}
# 3340 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsd_si64(__m128d __a)
{
  return __builtin_ia32_cvtsd2si64((__v2df)__a);
}
# 3358 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvttsd_si64(__m128d __a)
{
  return __builtin_ia32_cvttsd2si64((__v2df)__a);
}
# 3374 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtepi32_ps(__m128i __a)
{
  return __builtin_ia32_cvtdq2ps((__v4si)__a);
}
# 3390 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtps_epi32(__m128 __a)
{
  return (__m128i)__builtin_ia32_cvtps2dq((__v4sf)__a);
}
# 3407 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvttps_epi32(__m128 __a)
{
  return (__m128i)__builtin_ia32_cvttps2dq((__v4sf)__a);
}
# 3423 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsi32_si128(int __a)
{
  return (__m128i)(__v4si){ __a, 0, 0, 0 };
}
# 3440 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsi64_si128(long long __a)
{
  return (__m128i){ __a, 0 };
}
# 3458 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsi128_si32(__m128i __a)
{
  __v4si __b = (__v4si)__a;
  return __b[0];
}
# 3477 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_cvtsi128_si64(__m128i __a)
{
  return __a[0];
}
# 3494 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_load_si128(__m128i const *__p)
{
  return *__p;
}
# 3510 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadu_si128(__m128i const *__p)
{
  struct __loadu_si128 {
    __m128i __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_si128*)__p)->__v;
}
# 3531 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_loadl_epi64(__m128i const *__p)
{
  struct __mm_loadl_epi64_struct {
    long long __u;
  } __attribute__((__packed__, __may_alias__));
  return (__m128i) { ((struct __mm_loadl_epi64_struct*)__p)->__u, 0};
}
# 3549 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_undefined_si128(void)
{
  return (__m128i)__builtin_ia32_undef128();
}
# 3571 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_epi64x(long long __q1, long long __q0)
{
  return (__m128i){ __q0, __q1 };
}
# 3593 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_epi64(__m64 __q1, __m64 __q0)
{
  return (__m128i){ (long long)__q0, (long long)__q1 };
}
# 3621 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_epi32(int __i3, int __i2, int __i1, int __i0)
{
  return (__m128i)(__v4si){ __i0, __i1, __i2, __i3};
}
# 3661 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_epi16(short __w7, short __w6, short __w5, short __w4, short __w3, short __w2, short __w1, short __w0)
{
  return (__m128i)(__v8hi){ __w0, __w1, __w2, __w3, __w4, __w5, __w6, __w7 };
}
# 3709 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set_epi8(char __b15, char __b14, char __b13, char __b12, char __b11, char __b10, char __b9, char __b8, char __b7, char __b6, char __b5, char __b4, char __b3, char __b2, char __b1, char __b0)
{
  return (__m128i)(__v16qi){ __b0, __b1, __b2, __b3, __b4, __b5, __b6, __b7, __b8, __b9, __b10, __b11, __b12, __b13, __b14, __b15 };
}
# 3728 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set1_epi64x(long long __q)
{
  return (__m128i){ __q, __q };
}
# 3747 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set1_epi64(__m64 __q)
{
  return (__m128i){ (long long)__q, (long long)__q };
}
# 3766 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set1_epi32(int __i)
{
  return (__m128i)(__v4si){ __i, __i, __i, __i };
}
# 3785 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set1_epi16(short __w)
{
  return (__m128i)(__v8hi){ __w, __w, __w, __w, __w, __w, __w, __w };
}
# 3804 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_set1_epi8(char __b)
{
  return (__m128i)(__v16qi){ __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b };
}
# 3825 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setr_epi64(__m64 __q0, __m64 __q1)
{
  return (__m128i){ (long long)__q0, (long long)__q1 };
}
# 3848 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setr_epi32(int __i0, int __i1, int __i2, int __i3)
{
  return (__m128i)(__v4si){ __i0, __i1, __i2, __i3};
}
# 3879 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setr_epi16(short __w0, short __w1, short __w2, short __w3, short __w4, short __w5, short __w6, short __w7)
{
  return (__m128i)(__v8hi){ __w0, __w1, __w2, __w3, __w4, __w5, __w6, __w7 };
}
# 3926 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setr_epi8(char __b0, char __b1, char __b2, char __b3, char __b4, char __b5, char __b6, char __b7, char __b8, char __b9, char __b10, char __b11, char __b12, char __b13, char __b14, char __b15)
{
  return (__m128i)(__v16qi){ __b0, __b1, __b2, __b3, __b4, __b5, __b6, __b7, __b8, __b9, __b10, __b11, __b12, __b13, __b14, __b15 };
}
# 3940 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_setzero_si128(void)
{
  return (__m128i){ 0LL, 0LL };
}
# 3958 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_store_si128(__m128i *__p, __m128i __b)
{
  *__p = __b;
}
# 3974 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_storeu_si128(__m128i *__p, __m128i __b)
{
  struct __storeu_si128 {
    __m128i __v;
  } __attribute__((__packed__, __may_alias__));
  ((struct __storeu_si128*)__p)->__v = __b;
}
# 4004 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_maskmoveu_si128(__m128i __d, __m128i __n, char *__p)
{
  __builtin_ia32_maskmovdqu((__v16qi)__d, (__v16qi)__n, __p);
}
# 4023 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_storel_epi64(__m128i *__p, __m128i __a)
{
  struct __mm_storel_epi64_struct {
    long long __u;
  } __attribute__((__packed__, __may_alias__));
  ((struct __mm_storel_epi64_struct*)__p)->__u = __a[0];
}
# 4046 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_stream_pd(double *__p, __m128d __a)
{
  __builtin_nontemporal_store((__v2df)__a, (__v2df*)__p);
}
# 4065 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_stream_si128(__m128i *__p, __m128i __a)
{
  __builtin_nontemporal_store((__v2di)__a, (__v2di*)__p);
}
# 4084 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_stream_si32(int *__p, int __a)
{
  __builtin_ia32_movnti(__p, __a);
}
# 4104 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_stream_si64(long long *__p, long long __a)
{
  __builtin_ia32_movnti64(__p, __a);
}



extern "C" {
# 4125 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
void _mm_clflush(void const * __p);
# 4136 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
void _mm_lfence(void);
# 4147 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
void _mm_mfence(void);


}
# 4175 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_packs_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_packsswb128((__v8hi)__a, (__v8hi)__b);
}
# 4203 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_packs_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_packssdw128((__v4si)__a, (__v4si)__b);
}
# 4231 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_packus_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_ia32_packuswb128((__v8hi)__a, (__v8hi)__b);
}
# 4259 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_extract_epi16(__m128i __a, int __imm)
{
  __v8hi __b = (__v8hi)__a;
  return (unsigned short)__b[__imm & 7];
}
# 4286 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_insert_epi16(__m128i __a, int __b, int __imm)
{
  __v8hi __c = (__v8hi)__a;
  __c[__imm & 7] = __b;
  return (__m128i)__c;
}
# 4306 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_movemask_epi8(__m128i __a)
{
  return __builtin_ia32_pmovmskb128((__v16qi)__a);
}
# 4445 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpackhi_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v16qi)__a, (__v16qi)__b, 8, 16+8, 9, 16+9, 10, 16+10, 11, 16+11, 12, 16+12, 13, 16+13, 14, 16+14, 15, 16+15);
}
# 4472 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpackhi_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v8hi)__a, (__v8hi)__b, 4, 8+4, 5, 8+5, 6, 8+6, 7, 8+7);
}
# 4495 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpackhi_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v4si)__a, (__v4si)__b, 2, 4+2, 3, 4+3);
}
# 4516 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpackhi_epi64(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v2di)__a, (__v2di)__b, 1, 2+1);
}
# 4551 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpacklo_epi8(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v16qi)__a, (__v16qi)__b, 0, 16+0, 1, 16+1, 2, 16+2, 3, 16+3, 4, 16+4, 5, 16+5, 6, 16+6, 7, 16+7);
}
# 4579 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpacklo_epi16(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v8hi)__a, (__v8hi)__b, 0, 8+0, 1, 8+1, 2, 8+2, 3, 8+3);
}
# 4602 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpacklo_epi32(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v4si)__a, (__v4si)__b, 0, 4+0, 1, 4+1);
}
# 4623 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpacklo_epi64(__m128i __a, __m128i __b)
{
  return (__m128i)__builtin_shufflevector((__v2di)__a, (__v2di)__b, 0, 2+0);
}
# 4640 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_movepi64_pi64(__m128i __a)
{
  return (__m64)__a[0];
}
# 4657 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_movpi64_epi64(__m64 __a)
{
  return (__m128i){ (long long)__a, 0 };
}
# 4675 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_move_epi64(__m128i __a)
{
  return __builtin_shufflevector((__v2di)__a, (__m128i){ 0 }, 0, 2);
}
# 4696 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpackhi_pd(__m128d __a, __m128d __b)
{
  return __builtin_shufflevector((__v2df)__a, (__v2df)__b, 1, 2+1);
}
# 4717 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_unpacklo_pd(__m128d __a, __m128d __b)
{
  return __builtin_shufflevector((__v2df)__a, (__v2df)__b, 0, 2+0);
}
# 4736 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_movemask_pd(__m128d __a)
{
  return __builtin_ia32_movmskpd((__v2df)__a);
}
# 4783 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_castpd_ps(__m128d __a)
{
  return (__m128)__a;
}
# 4800 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_castpd_si128(__m128d __a)
{
  return (__m128i)__a;
}
# 4817 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_castps_pd(__m128 __a)
{
  return (__m128d)__a;
}
# 4834 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_castps_si128(__m128 __a)
{
  return (__m128i)__a;
}
# 4851 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_castsi128_ps(__m128i __a)
{
  return (__m128)__a;
}
# 4868 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse2")))
_mm_castsi128_pd(__m128i __a)
{
  return (__m128d)__a;
}


extern "C" {
# 4885 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/emmintrin.h" 3
void _mm_pause(void);


}
# 2967 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xmmintrin.h" 2 3
# 33 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3







# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pmmintrin.h" 1 3
# 47 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_lddqu_si128(__m128i const *__p)
{
  return (__m128i)__builtin_ia32_lddqu((char const *)__p);
}
# 66 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_addsub_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_addsubps((__v4sf)__a, (__v4sf)__b);
}
# 89 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_hadd_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_haddps((__v4sf)__a, (__v4sf)__b);
}
# 112 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_hsub_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_hsubps((__v4sf)__a, (__v4sf)__b);
}
# 134 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_movehdup_ps(__m128 __a)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 1, 1, 3, 3);
}
# 155 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pmmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_moveldup_ps(__m128 __a)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 0, 0, 2, 2);
}
# 174 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pmmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_addsub_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_addsubpd((__v2df)__a, (__v2df)__b);
}
# 197 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pmmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_hadd_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_haddpd((__v2df)__a, (__v2df)__b);
}
# 220 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pmmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_hsub_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_hsubpd((__v2df)__a, (__v2df)__b);
}
# 256 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pmmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_movedup_pd(__m128d __a)
{
  return __builtin_shufflevector((__v2df)__a, (__v2df)__a, 0, 0);
}
# 277 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_monitor(void const *__p, unsigned __extensions, unsigned __hints)
{
  __builtin_ia32_monitor((void *)__p, __extensions, __hints);
}
# 296 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pmmintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse3")))
_mm_mwait(unsigned __extensions, unsigned __hints)
{
  __builtin_ia32_mwait(__extensions, __hints);
}
# 41 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 1 3
# 44 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_abs_pi8(__m64 __a)
{
    return (__m64)__builtin_ia32_pabsb((__v8qi)__a);
}
# 62 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_abs_epi8(__m128i __a)
{
    return (__m128i)__builtin_ia32_pabsb128((__v16qi)__a);
}
# 80 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_abs_pi16(__m64 __a)
{
    return (__m64)__builtin_ia32_pabsw((__v4hi)__a);
}
# 98 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_abs_epi16(__m128i __a)
{
    return (__m128i)__builtin_ia32_pabsw128((__v8hi)__a);
}
# 116 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_abs_pi32(__m64 __a)
{
    return (__m64)__builtin_ia32_pabsd((__v2si)__a);
}
# 134 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_abs_epi32(__m128i __a)
{
    return (__m128i)__builtin_ia32_pabsd128((__v4si)__a);
}
# 203 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hadd_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_phaddw128((__v8hi)__a, (__v8hi)__b);
}
# 226 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hadd_epi32(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_phaddd128((__v4si)__a, (__v4si)__b);
}
# 249 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hadd_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_phaddw((__v4hi)__a, (__v4hi)__b);
}
# 272 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hadd_pi32(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_phaddd((__v2si)__a, (__v2si)__b);
}
# 296 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hadds_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_phaddsw128((__v8hi)__a, (__v8hi)__b);
}
# 320 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hadds_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_phaddsw((__v4hi)__a, (__v4hi)__b);
}
# 343 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hsub_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_phsubw128((__v8hi)__a, (__v8hi)__b);
}
# 366 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hsub_epi32(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_phsubd128((__v4si)__a, (__v4si)__b);
}
# 389 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hsub_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_phsubw((__v4hi)__a, (__v4hi)__b);
}
# 412 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hsub_pi32(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_phsubd((__v2si)__a, (__v2si)__b);
}
# 437 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hsubs_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_phsubsw128((__v8hi)__a, (__v8hi)__b);
}
# 462 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_hsubs_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_phsubsw((__v4hi)__a, (__v4hi)__b);
}
# 496 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_maddubs_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_pmaddubsw128((__v16qi)__a, (__v16qi)__b);
}
# 526 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_maddubs_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_pmaddubsw((__v8qi)__a, (__v8qi)__b);
}
# 546 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_mulhrs_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_pmulhrsw128((__v8hi)__a, (__v8hi)__b);
}
# 566 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_mulhrs_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_pmulhrsw((__v4hi)__a, (__v4hi)__b);
}
# 592 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_shuffle_epi8(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_pshufb128((__v16qi)__a, (__v16qi)__b);
}
# 617 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_shuffle_pi8(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_pshufb((__v8qi)__a, (__v8qi)__b);
}
# 643 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_sign_epi8(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_psignb128((__v16qi)__a, (__v16qi)__b);
}
# 669 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_sign_epi16(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_psignw128((__v8hi)__a, (__v8hi)__b);
}
# 695 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_sign_epi32(__m128i __a, __m128i __b)
{
    return (__m128i)__builtin_ia32_psignd128((__v4si)__a, (__v4si)__b);
}
# 721 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_sign_pi8(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_psignb((__v8qi)__a, (__v8qi)__b);
}
# 747 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_sign_pi16(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_psignw((__v4hi)__a, (__v4hi)__b);
}
# 773 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tmmintrin.h" 3
static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("ssse3")))
_mm_sign_pi32(__m64 __a, __m64 __b)
{
    return (__m64)__builtin_ia32_psignd((__v2si)__a, (__v2si)__b);
}
# 45 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3




# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 1 3
# 449 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_blendv_pd (__m128d __V1, __m128d __V2, __m128d __M)
{
  return (__m128d) __builtin_ia32_blendvpd ((__v2df)__V1, (__v2df)__V2,
                                            (__v2df)__M);
}
# 476 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_blendv_ps (__m128 __V1, __m128 __V2, __m128 __M)
{
  return (__m128) __builtin_ia32_blendvps ((__v4sf)__V1, (__v4sf)__V2,
                                           (__v4sf)__M);
}
# 503 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_blendv_epi8 (__m128i __V1, __m128i __V2, __m128i __M)
{
  return (__m128i) __builtin_ia32_pblendvb128 ((__v16qi)__V1, (__v16qi)__V2,
                                               (__v16qi)__M);
}
# 560 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_mullo_epi32 (__m128i __V1, __m128i __V2)
{
  return (__m128i) ((__v4su)__V1 * (__v4su)__V2);
}
# 580 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_mul_epi32 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pmuldq128 ((__v4si)__V1, (__v4si)__V2);
}
# 671 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_stream_load_si128 (__m128i const *__V)
{
  return (__m128i) __builtin_nontemporal_load ((const __v2di *) __V);
}
# 691 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_min_epi8 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pminsb128 ((__v16qi) __V1, (__v16qi) __V2);
}
# 710 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_max_epi8 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pmaxsb128 ((__v16qi) __V1, (__v16qi) __V2);
}
# 729 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_min_epu16 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pminuw128 ((__v8hi) __V1, (__v8hi) __V2);
}
# 748 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_max_epu16 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pmaxuw128 ((__v8hi) __V1, (__v8hi) __V2);
}
# 767 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_min_epi32 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pminsd128 ((__v4si) __V1, (__v4si) __V2);
}
# 786 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_max_epi32 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pmaxsd128 ((__v4si) __V1, (__v4si) __V2);
}
# 805 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_min_epu32 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pminud128((__v4si) __V1, (__v4si) __V2);
}
# 824 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_max_epu32 (__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_pmaxud128((__v4si) __V1, (__v4si) __V2);
}
# 1132 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_testz_si128(__m128i __M, __m128i __V)
{
  return __builtin_ia32_ptestz128((__v2di)__M, (__v2di)__V);
}
# 1150 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_testc_si128(__m128i __M, __m128i __V)
{
  return __builtin_ia32_ptestc128((__v2di)__M, (__v2di)__V);
}
# 1169 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_testnzc_si128(__m128i __M, __m128i __V)
{
  return __builtin_ia32_ptestnzc128((__v2di)__M, (__v2di)__V);
}
# 1242 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cmpeq_epi64(__m128i __V1, __m128i __V2)
{
  return (__m128i)((__v2di)__V1 == (__v2di)__V2);
}
# 1262 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepi8_epi16(__m128i __V)
{


  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v16qs)__V, (__v16qs)__V, 0, 1, 2, 3, 4, 5, 6, 7), __v8hi);
}
# 1283 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepi8_epi32(__m128i __V)
{


  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v16qs)__V, (__v16qs)__V, 0, 1, 2, 3), __v4si);
}
# 1304 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepi8_epi64(__m128i __V)
{


  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v16qs)__V, (__v16qs)__V, 0, 1), __v2di);
}
# 1325 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepi16_epi32(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v8hi)__V, (__v8hi)__V, 0, 1, 2, 3), __v4si);
}
# 1344 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepi16_epi64(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v8hi)__V, (__v8hi)__V, 0, 1), __v2di);
}
# 1363 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepi32_epi64(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v4si)__V, (__v4si)__V, 0, 1), __v2di);
}
# 1383 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepu8_epi16(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v16qu)__V, (__v16qu)__V, 0, 1, 2, 3, 4, 5, 6, 7), __v8hi);
}
# 1402 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepu8_epi32(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v16qu)__V, (__v16qu)__V, 0, 1, 2, 3), __v4si);
}
# 1421 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepu8_epi64(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v16qu)__V, (__v16qu)__V, 0, 1), __v2di);
}
# 1440 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepu16_epi32(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v8hu)__V, (__v8hu)__V, 0, 1, 2, 3), __v4si);
}
# 1459 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepu16_epi64(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v8hu)__V, (__v8hu)__V, 0, 1), __v2di);
}
# 1478 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_cvtepu32_epi64(__m128i __V)
{
  return (__m128i)__builtin_convertvector(__builtin_shufflevector((__v4su)__V, (__v4su)__V, 0, 1), __v2di);
}
# 1507 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_packus_epi32(__m128i __V1, __m128i __V2)
{
  return (__m128i) __builtin_ia32_packusdw128((__v4si)__V1, (__v4si)__V2);
}
# 1566 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.1")))
_mm_minpos_epu16(__m128i __V)
{
  return (__m128i) __builtin_ia32_phminposuw128((__v8hi)__V);
}
# 2370 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4.2")))
_mm_cmpgt_epi64(__m128i __V1, __m128i __V2)
{
  return (__m128i)((__v2di)__V1 > (__v2di)__V2);
}
# 2391 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("sse4.2")))
_mm_crc32_u8(unsigned int __C, unsigned char __D)
{
  return __builtin_ia32_crc32qi(__C, __D);
}
# 2411 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("sse4.2")))
_mm_crc32_u16(unsigned int __C, unsigned short __D)
{
  return __builtin_ia32_crc32hi(__C, __D);
}
# 2431 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("sse4.2")))
_mm_crc32_u32(unsigned int __C, unsigned int __D)
{
  return __builtin_ia32_crc32si(__C, __D);
}
# 2452 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/smmintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("sse4.2")))
_mm_crc32_u64(unsigned long long __C, unsigned long long __D)
{
  return __builtin_ia32_crc32di(__C, __D);
}
# 50 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3




# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/wmmintrin.h" 1 3
# 29 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/wmmintrin.h" 3
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/__wmmintrin_aes.h" 1 3
# 45 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/__wmmintrin_aes.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("aes")))
_mm_aesenc_si128(__m128i __V, __m128i __R)
{
  return (__m128i)__builtin_ia32_aesenc128((__v2di)__V, (__v2di)__R);
}
# 65 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/__wmmintrin_aes.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("aes")))
_mm_aesenclast_si128(__m128i __V, __m128i __R)
{
  return (__m128i)__builtin_ia32_aesenclast128((__v2di)__V, (__v2di)__R);
}
# 85 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/__wmmintrin_aes.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("aes")))
_mm_aesdec_si128(__m128i __V, __m128i __R)
{
  return (__m128i)__builtin_ia32_aesdec128((__v2di)__V, (__v2di)__R);
}
# 105 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/__wmmintrin_aes.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("aes")))
_mm_aesdeclast_si128(__m128i __V, __m128i __R)
{
  return (__m128i)__builtin_ia32_aesdeclast128((__v2di)__V, (__v2di)__R);
}
# 122 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/__wmmintrin_aes.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("aes")))
_mm_aesimc_si128(__m128i __V)
{
  return (__m128i)__builtin_ia32_aesimc128((__v2di)__V);
}
# 30 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/wmmintrin.h" 2 3

# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/__wmmintrin_pclmul.h" 1 3
# 32 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/wmmintrin.h" 2 3
# 55 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/clflushoptintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/clflushoptintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("clflushopt")))
_mm_clflushopt(char * __m) {
  __builtin_ia32_clflushopt(__m);
}
# 59 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 1 3
# 31 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
typedef double __v4df __attribute__ ((__vector_size__ (32)));
typedef float __v8sf __attribute__ ((__vector_size__ (32)));
typedef long long __v4di __attribute__ ((__vector_size__ (32)));
typedef int __v8si __attribute__ ((__vector_size__ (32)));
typedef short __v16hi __attribute__ ((__vector_size__ (32)));
typedef char __v32qi __attribute__ ((__vector_size__ (32)));


typedef unsigned long long __v4du __attribute__ ((__vector_size__ (32)));
typedef unsigned int __v8su __attribute__ ((__vector_size__ (32)));
typedef unsigned short __v16hu __attribute__ ((__vector_size__ (32)));
typedef unsigned char __v32qu __attribute__ ((__vector_size__ (32)));



typedef signed char __v32qs __attribute__((__vector_size__(32)));

typedef float __m256 __attribute__ ((__vector_size__ (32)));
typedef double __m256d __attribute__((__vector_size__(32)));
typedef long long __m256i __attribute__((__vector_size__(32)));
# 68 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_add_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4df)__a+(__v4df)__b);
}
# 86 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_add_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8sf)__a+(__v8sf)__b);
}
# 104 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_sub_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4df)__a-(__v4df)__b);
}
# 122 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_sub_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8sf)__a-(__v8sf)__b);
}
# 141 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_addsub_pd(__m256d __a, __m256d __b)
{
  return (__m256d)__builtin_ia32_addsubpd256((__v4df)__a, (__v4df)__b);
}
# 160 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_addsub_ps(__m256 __a, __m256 __b)
{
  return (__m256)__builtin_ia32_addsubps256((__v8sf)__a, (__v8sf)__b);
}
# 178 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_div_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4df)__a/(__v4df)__b);
}
# 196 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_div_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8sf)__a/(__v8sf)__b);
}
# 215 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_max_pd(__m256d __a, __m256d __b)
{
  return (__m256d)__builtin_ia32_maxpd256((__v4df)__a, (__v4df)__b);
}
# 234 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_max_ps(__m256 __a, __m256 __b)
{
  return (__m256)__builtin_ia32_maxps256((__v8sf)__a, (__v8sf)__b);
}
# 253 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_min_pd(__m256d __a, __m256d __b)
{
  return (__m256d)__builtin_ia32_minpd256((__v4df)__a, (__v4df)__b);
}
# 272 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_min_ps(__m256 __a, __m256 __b)
{
  return (__m256)__builtin_ia32_minps256((__v8sf)__a, (__v8sf)__b);
}
# 290 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_mul_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4df)__a * (__v4df)__b);
}
# 308 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_mul_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8sf)__a * (__v8sf)__b);
}
# 325 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_sqrt_pd(__m256d __a)
{
  return (__m256d)__builtin_ia32_sqrtpd256((__v4df)__a);
}
# 342 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_sqrt_ps(__m256 __a)
{
  return (__m256)__builtin_ia32_sqrtps256((__v8sf)__a);
}
# 359 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_rsqrt_ps(__m256 __a)
{
  return (__m256)__builtin_ia32_rsqrtps256((__v8sf)__a);
}
# 376 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_rcp_ps(__m256 __a)
{
  return (__m256)__builtin_ia32_rcpps256((__v8sf)__a);
}
# 528 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_and_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4du)__a & (__v4du)__b);
}
# 546 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_and_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8su)__a & (__v8su)__b);
}
# 567 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_andnot_pd(__m256d __a, __m256d __b)
{
  return (__m256d)(~(__v4du)__a & (__v4du)__b);
}
# 588 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_andnot_ps(__m256 __a, __m256 __b)
{
  return (__m256)(~(__v8su)__a & (__v8su)__b);
}
# 606 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_or_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4du)__a | (__v4du)__b);
}
# 624 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_or_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8su)__a | (__v8su)__b);
}
# 642 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_xor_pd(__m256d __a, __m256d __b)
{
  return (__m256d)((__v4du)__a ^ (__v4du)__b);
}
# 660 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_xor_ps(__m256 __a, __m256 __b)
{
  return (__m256)((__v8su)__a ^ (__v8su)__b);
}
# 684 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_hadd_pd(__m256d __a, __m256d __b)
{
  return (__m256d)__builtin_ia32_haddpd256((__v4df)__a, (__v4df)__b);
}
# 707 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_hadd_ps(__m256 __a, __m256 __b)
{
  return (__m256)__builtin_ia32_haddps256((__v8sf)__a, (__v8sf)__b);
}
# 730 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_hsub_pd(__m256d __a, __m256d __b)
{
  return (__m256d)__builtin_ia32_hsubpd256((__v4df)__a, (__v4df)__b);
}
# 753 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_hsub_ps(__m256 __a, __m256 __b)
{
  return (__m256)__builtin_ia32_hsubps256((__v8sf)__a, (__v8sf)__b);
}
# 783 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_permutevar_pd(__m128d __a, __m128i __c)
{
  return (__m128d)__builtin_ia32_vpermilvarpd((__v2df)__a, (__v2di)__c);
}
# 822 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_permutevar_pd(__m256d __a, __m256i __c)
{
  return (__m256d)__builtin_ia32_vpermilvarpd256((__v4df)__a, (__v4di)__c);
}
# 876 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_permutevar_ps(__m128 __a, __m128i __c)
{
  return (__m128)__builtin_ia32_vpermilvarps((__v4sf)__a, (__v4si)__c);
}
# 967 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_permutevar_ps(__m256 __a, __m256i __c)
{
  return (__m256)__builtin_ia32_vpermilvarps256((__v8sf)__a, (__v8si)__c);
}
# 1422 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_blendv_pd(__m256d __a, __m256d __b, __m256d __c)
{
  return (__m256d)__builtin_ia32_blendvpd256(
    (__v4df)__a, (__v4df)__b, (__v4df)__c);
}
# 1450 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_blendv_ps(__m256 __a, __m256 __b, __m256 __c)
{
  return (__m256)__builtin_ia32_blendvps256(
    (__v8sf)__a, (__v8sf)__b, (__v8sf)__c);
}
# 2018 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_extract_epi32(__m256i __a, const int __imm)
{
  __v8si __b = (__v8si)__a;
  return __b[__imm & 7];
}
# 2040 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_extract_epi16(__m256i __a, const int __imm)
{
  __v16hi __b = (__v16hi)__a;
  return (unsigned short)__b[__imm & 15];
}
# 2062 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_extract_epi8(__m256i __a, const int __imm)
{
  __v32qi __b = (__v32qi)__a;
  return (unsigned char)__b[__imm & 31];
}
# 2085 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline long long __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_extract_epi64(__m256i __a, const int __imm)
{
  __v4di __b = (__v4di)__a;
  return __b[__imm & 3];
}
# 2111 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_insert_epi32(__m256i __a, int __b, int const __imm)
{
  __v8si __c = (__v8si)__a;
  __c[__imm & 7] = __b;
  return (__m256i)__c;
}
# 2138 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_insert_epi16(__m256i __a, int __b, int const __imm)
{
  __v16hi __c = (__v16hi)__a;
  __c[__imm & 15] = __b;
  return (__m256i)__c;
}
# 2164 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_insert_epi8(__m256i __a, int __b, int const __imm)
{
  __v32qi __c = (__v32qi)__a;
  __c[__imm & 31] = __b;
  return (__m256i)__c;
}
# 2191 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_insert_epi64(__m256i __a, long long __b, int const __imm)
{
  __v4di __c = (__v4di)__a;
  __c[__imm & 3] = __b;
  return (__m256i)__c;
}
# 2210 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtepi32_pd(__m128i __a)
{
  return (__m256d)__builtin_convertvector((__v4si)__a, __v4df);
}
# 2225 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtepi32_ps(__m256i __a)
{
  return (__m256)__builtin_ia32_cvtdq2ps256((__v8si) __a);
}
# 2241 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtpd_ps(__m256d __a)
{
  return (__m128)__builtin_ia32_cvtpd2ps256((__v4df) __a);
}
# 2256 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtps_epi32(__m256 __a)
{
  return (__m256i)__builtin_ia32_cvtps2dq256((__v8sf) __a);
}
# 2272 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtps_pd(__m128 __a)
{
  return (__m256d)__builtin_convertvector((__v4sf)__a, __v4df);
}
# 2289 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvttpd_epi32(__m256d __a)
{
  return (__m128i)__builtin_ia32_cvttpd2dq256((__v4df) __a);
}
# 2306 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtpd_epi32(__m256d __a)
{
  return (__m128i)__builtin_ia32_cvtpd2dq256((__v4df) __a);
}
# 2322 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvttps_epi32(__m256 __a)
{
  return (__m256i)__builtin_ia32_cvttps2dq256((__v8sf) __a);
}
# 2338 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline double __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtsd_f64(__m256d __a)
{
 return __a[0];
}
# 2354 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtsi256_si32(__m256i __a)
{
 __v8si __b = (__v8si)__a;
 return __b[0];
}
# 2371 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline float __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_cvtss_f32(__m256 __a)
{
 return __a[0];
}
# 2398 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_movehdup_ps(__m256 __a)
{
  return __builtin_shufflevector((__v8sf)__a, (__v8sf)__a, 1, 1, 3, 3, 5, 5, 7, 7);
}
# 2423 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_moveldup_ps(__m256 __a)
{
  return __builtin_shufflevector((__v8sf)__a, (__v8sf)__a, 0, 0, 2, 2, 4, 4, 6, 6);
}
# 2445 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_movedup_pd(__m256d __a)
{
  return __builtin_shufflevector((__v4df)__a, (__v4df)__a, 0, 0, 2, 2);
}
# 2468 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_unpackhi_pd(__m256d __a, __m256d __b)
{
  return __builtin_shufflevector((__v4df)__a, (__v4df)__b, 1, 5, 1+2, 5+2);
}
# 2490 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_unpacklo_pd(__m256d __a, __m256d __b)
{
  return __builtin_shufflevector((__v4df)__a, (__v4df)__b, 0, 4, 0+2, 4+2);
}
# 2517 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_unpackhi_ps(__m256 __a, __m256 __b)
{
  return __builtin_shufflevector((__v8sf)__a, (__v8sf)__b, 2, 10, 2+1, 10+1, 6, 14, 6+1, 14+1);
}
# 2544 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_unpacklo_ps(__m256 __a, __m256 __b)
{
  return __builtin_shufflevector((__v8sf)__a, (__v8sf)__b, 0, 8, 0+1, 8+1, 4, 12, 4+1, 12+1);
}
# 2574 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_testz_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_vtestzpd((__v2df)__a, (__v2df)__b);
}
# 2603 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_testc_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_vtestcpd((__v2df)__a, (__v2df)__b);
}
# 2633 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_testnzc_pd(__m128d __a, __m128d __b)
{
  return __builtin_ia32_vtestnzcpd((__v2df)__a, (__v2df)__b);
}
# 2662 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_testz_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_vtestzps((__v4sf)__a, (__v4sf)__b);
}
# 2691 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_testc_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_vtestcps((__v4sf)__a, (__v4sf)__b);
}
# 2721 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_testnzc_ps(__m128 __a, __m128 __b)
{
  return __builtin_ia32_vtestnzcps((__v4sf)__a, (__v4sf)__b);
}
# 2750 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testz_pd(__m256d __a, __m256d __b)
{
  return __builtin_ia32_vtestzpd256((__v4df)__a, (__v4df)__b);
}
# 2779 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testc_pd(__m256d __a, __m256d __b)
{
  return __builtin_ia32_vtestcpd256((__v4df)__a, (__v4df)__b);
}
# 2809 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testnzc_pd(__m256d __a, __m256d __b)
{
  return __builtin_ia32_vtestnzcpd256((__v4df)__a, (__v4df)__b);
}
# 2838 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testz_ps(__m256 __a, __m256 __b)
{
  return __builtin_ia32_vtestzps256((__v8sf)__a, (__v8sf)__b);
}
# 2867 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testc_ps(__m256 __a, __m256 __b)
{
  return __builtin_ia32_vtestcps256((__v8sf)__a, (__v8sf)__b);
}
# 2897 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testnzc_ps(__m256 __a, __m256 __b)
{
  return __builtin_ia32_vtestnzcps256((__v8sf)__a, (__v8sf)__b);
}
# 2923 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testz_si256(__m256i __a, __m256i __b)
{
  return __builtin_ia32_ptestz256((__v4di)__a, (__v4di)__b);
}
# 2949 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testc_si256(__m256i __a, __m256i __b)
{
  return __builtin_ia32_ptestc256((__v4di)__a, (__v4di)__b);
}
# 2976 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_testnzc_si256(__m256i __a, __m256i __b)
{
  return __builtin_ia32_ptestnzc256((__v4di)__a, (__v4di)__b);
}
# 2995 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_movemask_pd(__m256d __a)
{
  return __builtin_ia32_movmskpd256((__v4df)__a);
}
# 3013 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline int __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_movemask_ps(__m256 __a)
{
  return __builtin_ia32_movmskps256((__v8sf)__a);
}







static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_zeroall(void)
{
  __builtin_ia32_vzeroall();
}






static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_zeroupper(void)
{
  __builtin_ia32_vzeroupper();
}
# 3055 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_broadcast_ss(float const *__a)
{
  float __f = *__a;
  return (__m128)(__v4sf){ __f, __f, __f, __f };
}
# 3074 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_broadcast_sd(double const *__a)
{
  double __d = *__a;
  return (__m256d)(__v4df){ __d, __d, __d, __d };
}
# 3093 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_broadcast_ss(float const *__a)
{
  float __f = *__a;
  return (__m256)(__v8sf){ __f, __f, __f, __f, __f, __f, __f, __f };
}
# 3112 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_broadcast_pd(__m128d const *__a)
{
  return (__m256d)__builtin_ia32_vbroadcastf128_pd256((__v2df const *)__a);
}
# 3130 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_broadcast_ps(__m128 const *__a)
{
  return (__m256)__builtin_ia32_vbroadcastf128_ps256((__v4sf const *)__a);
}
# 3148 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_load_pd(double const *__p)
{
  return *(__m256d *)__p;
}
# 3164 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_load_ps(float const *__p)
{
  return *(__m256 *)__p;
}
# 3181 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_loadu_pd(double const *__p)
{
  struct __loadu_pd {
    __m256d __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_pd*)__p)->__v;
}
# 3201 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_loadu_ps(float const *__p)
{
  struct __loadu_ps {
    __m256 __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_ps*)__p)->__v;
}
# 3221 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_load_si256(__m256i const *__p)
{
  return *__p;
}
# 3237 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_loadu_si256(__m256i const *__p)
{
  struct __loadu_si256 {
    __m256i __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_si256*)__p)->__v;
}
# 3258 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_lddqu_si256(__m256i const *__p)
{
  return (__m256i)__builtin_ia32_lddqu256((char const *)__p);
}
# 3278 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_store_pd(double *__p, __m256d __a)
{
  *(__m256d *)__p = __a;
}
# 3296 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_store_ps(float *__p, __m256 __a)
{
  *(__m256 *)__p = __a;
}
# 3314 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_storeu_pd(double *__p, __m256d __a)
{
  struct __storeu_pd {
    __m256d __v;
  } __attribute__((__packed__, __may_alias__));
  ((struct __storeu_pd*)__p)->__v = __a;
}
# 3334 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_storeu_ps(float *__p, __m256 __a)
{
  struct __storeu_ps {
    __m256 __v;
  } __attribute__((__packed__, __may_alias__));
  ((struct __storeu_ps*)__p)->__v = __a;
}
# 3355 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_store_si256(__m256i *__p, __m256i __a)
{
  *__p = __a;
}
# 3372 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_storeu_si256(__m256i *__p, __m256i __a)
{
  struct __storeu_si256 {
    __m256i __v;
  } __attribute__((__packed__, __may_alias__));
  ((struct __storeu_si256*)__p)->__v = __a;
}
# 3400 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_maskload_pd(double const *__p, __m128i __m)
{
  return (__m128d)__builtin_ia32_maskloadpd((const __v2df *)__p, (__v2di)__m);
}
# 3424 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_maskload_pd(double const *__p, __m256i __m)
{
  return (__m256d)__builtin_ia32_maskloadpd256((const __v4df *)__p,
                                               (__v4di)__m);
}
# 3449 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_maskload_ps(float const *__p, __m128i __m)
{
  return (__m128)__builtin_ia32_maskloadps((const __v4sf *)__p, (__v4si)__m);
}
# 3473 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_maskload_ps(float const *__p, __m256i __m)
{
  return (__m256)__builtin_ia32_maskloadps256((const __v8sf *)__p, (__v8si)__m);
}
# 3498 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_maskstore_ps(float *__p, __m256i __m, __m256 __a)
{
  __builtin_ia32_maskstoreps256((__v8sf *)__p, (__v8si)__m, (__v8sf)__a);
}
# 3522 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_maskstore_pd(double *__p, __m128i __m, __m128d __a)
{
  __builtin_ia32_maskstorepd((__v2df *)__p, (__v2di)__m, (__v2df)__a);
}
# 3546 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_maskstore_pd(double *__p, __m256i __m, __m256d __a)
{
  __builtin_ia32_maskstorepd256((__v4df *)__p, (__v4di)__m, (__v4df)__a);
}
# 3570 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm_maskstore_ps(float *__p, __m128i __m, __m128 __a)
{
  __builtin_ia32_maskstoreps((__v4sf *)__p, (__v4si)__m, (__v4sf)__a);
}
# 3590 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_stream_si256(__m256i *__a, __m256i __b)
{
  __builtin_nontemporal_store((__v4di)__b, (__v4di*)__a);
}
# 3609 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_stream_pd(double *__a, __m256d __b)
{
  __builtin_nontemporal_store((__v4df)__b, (__v4df*)__a);
}
# 3629 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_stream_ps(float *__p, __m256 __a)
{
  __builtin_nontemporal_store((__v8sf)__a, (__v8sf*)__p);
}
# 3643 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_undefined_pd(void)
{
  return (__m256d)__builtin_ia32_undef256();
}
# 3656 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_undefined_ps(void)
{
  return (__m256)__builtin_ia32_undef256();
}
# 3669 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_undefined_si256(void)
{
  return (__m256i)__builtin_ia32_undef256();
}
# 3696 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_pd(double __a, double __b, double __c, double __d)
{
  return (__m256d){ __d, __c, __b, __a };
}
# 3735 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_ps(float __a, float __b, float __c, float __d,
              float __e, float __f, float __g, float __h)
{
  return (__m256){ __h, __g, __f, __e, __d, __c, __b, __a };
}
# 3767 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_epi32(int __i0, int __i1, int __i2, int __i3,
                 int __i4, int __i5, int __i6, int __i7)
{
  return (__m256i)(__v8si){ __i7, __i6, __i5, __i4, __i3, __i2, __i1, __i0 };
}
# 3815 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_epi16(short __w15, short __w14, short __w13, short __w12,
                 short __w11, short __w10, short __w09, short __w08,
                 short __w07, short __w06, short __w05, short __w04,
                 short __w03, short __w02, short __w01, short __w00)
{
  return (__m256i)(__v16hi){ __w00, __w01, __w02, __w03, __w04, __w05, __w06,
    __w07, __w08, __w09, __w10, __w11, __w12, __w13, __w14, __w15 };
}
# 3898 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_epi8(char __b31, char __b30, char __b29, char __b28,
                char __b27, char __b26, char __b25, char __b24,
                char __b23, char __b22, char __b21, char __b20,
                char __b19, char __b18, char __b17, char __b16,
                char __b15, char __b14, char __b13, char __b12,
                char __b11, char __b10, char __b09, char __b08,
                char __b07, char __b06, char __b05, char __b04,
                char __b03, char __b02, char __b01, char __b00)
{
  return (__m256i)(__v32qi){
    __b00, __b01, __b02, __b03, __b04, __b05, __b06, __b07,
    __b08, __b09, __b10, __b11, __b12, __b13, __b14, __b15,
    __b16, __b17, __b18, __b19, __b20, __b21, __b22, __b23,
    __b24, __b25, __b26, __b27, __b28, __b29, __b30, __b31
  };
}
# 3933 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_epi64x(long long __a, long long __b, long long __c, long long __d)
{
  return (__m256i)(__v4di){ __d, __c, __b, __a };
}
# 3962 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_pd(double __a, double __b, double __c, double __d)
{
  return (__m256d){ __a, __b, __c, __d };
}
# 4002 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_ps(float __a, float __b, float __c, float __d,
               float __e, float __f, float __g, float __h)
{
  return (__m256){ __a, __b, __c, __d, __e, __f, __g, __h };
}
# 4034 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_epi32(int __i0, int __i1, int __i2, int __i3,
                  int __i4, int __i5, int __i6, int __i7)
{
  return (__m256i)(__v8si){ __i0, __i1, __i2, __i3, __i4, __i5, __i6, __i7 };
}
# 4082 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_epi16(short __w15, short __w14, short __w13, short __w12,
       short __w11, short __w10, short __w09, short __w08,
       short __w07, short __w06, short __w05, short __w04,
       short __w03, short __w02, short __w01, short __w00)
{
  return (__m256i)(__v16hi){ __w15, __w14, __w13, __w12, __w11, __w10, __w09,
    __w08, __w07, __w06, __w05, __w04, __w03, __w02, __w01, __w00 };
}
# 4165 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_epi8(char __b31, char __b30, char __b29, char __b28,
                 char __b27, char __b26, char __b25, char __b24,
                 char __b23, char __b22, char __b21, char __b20,
                 char __b19, char __b18, char __b17, char __b16,
                 char __b15, char __b14, char __b13, char __b12,
                 char __b11, char __b10, char __b09, char __b08,
                 char __b07, char __b06, char __b05, char __b04,
                 char __b03, char __b02, char __b01, char __b00)
{
  return (__m256i)(__v32qi){
    __b31, __b30, __b29, __b28, __b27, __b26, __b25, __b24,
    __b23, __b22, __b21, __b20, __b19, __b18, __b17, __b16,
    __b15, __b14, __b13, __b12, __b11, __b10, __b09, __b08,
    __b07, __b06, __b05, __b04, __b03, __b02, __b01, __b00 };
}
# 4199 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_epi64x(long long __a, long long __b, long long __c, long long __d)
{
  return (__m256i)(__v4di){ __a, __b, __c, __d };
}
# 4218 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set1_pd(double __w)
{
  return (__m256d){ __w, __w, __w, __w };
}
# 4237 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set1_ps(float __w)
{
  return (__m256){ __w, __w, __w, __w, __w, __w, __w, __w };
}
# 4256 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set1_epi32(int __i)
{
  return (__m256i)(__v8si){ __i, __i, __i, __i, __i, __i, __i, __i };
}
# 4274 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set1_epi16(short __w)
{
  return (__m256i)(__v16hi){ __w, __w, __w, __w, __w, __w, __w, __w, __w, __w,
    __w, __w, __w, __w, __w, __w };
}
# 4292 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set1_epi8(char __b)
{
  return (__m256i)(__v32qi){ __b, __b, __b, __b, __b, __b, __b, __b, __b, __b,
    __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b, __b,
    __b, __b, __b, __b, __b, __b, __b };
}
# 4312 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set1_epi64x(long long __q)
{
  return (__m256i)(__v4di){ __q, __q, __q, __q };
}
# 4327 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setzero_pd(void)
{
  return (__m256d){ 0, 0, 0, 0 };
}
# 4341 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setzero_ps(void)
{
  return (__m256){ 0, 0, 0, 0, 0, 0, 0, 0 };
}
# 4354 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setzero_si256(void)
{
  return (__m256i){ 0LL, 0LL, 0LL, 0LL };
}
# 4372 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castpd_ps(__m256d __a)
{
  return (__m256)__a;
}
# 4389 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castpd_si256(__m256d __a)
{
  return (__m256i)__a;
}
# 4406 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castps_pd(__m256 __a)
{
  return (__m256d)__a;
}
# 4423 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castps_si256(__m256 __a)
{
  return (__m256i)__a;
}
# 4440 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castsi256_ps(__m256i __a)
{
  return (__m256)__a;
}
# 4457 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castsi256_pd(__m256i __a)
{
  return (__m256d)__a;
}
# 4474 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castpd256_pd128(__m256d __a)
{
  return __builtin_shufflevector((__v4df)__a, (__v4df)__a, 0, 1);
}
# 4491 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castps256_ps128(__m256 __a)
{
  return __builtin_shufflevector((__v8sf)__a, (__v8sf)__a, 0, 1, 2, 3);
}
# 4507 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castsi256_si128(__m256i __a)
{
  return __builtin_shufflevector((__v4di)__a, (__v4di)__a, 0, 1);
}
# 4528 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castpd128_pd256(__m128d __a)
{
  return __builtin_shufflevector((__v2df)__a, (__v2df)__a, 0, 1, -1, -1);
}
# 4549 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castps128_ps256(__m128 __a)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)__a, 0, 1, 2, 3, -1, -1, -1, -1);
}
# 4568 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_castsi128_si256(__m128i __a)
{
  return __builtin_shufflevector((__v2di)__a, (__v2di)__a, 0, 1, -1, -1);
}
# 4587 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_zextpd128_pd256(__m128d __a)
{
  return __builtin_shufflevector((__v2df)__a, (__v2df)_mm_setzero_pd(), 0, 1, 2, 3);
}
# 4605 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_zextps128_ps256(__m128 __a)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)_mm_setzero_ps(), 0, 1, 2, 3, 4, 5, 6, 7);
}
# 4623 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_zextsi128_si256(__m128i __a)
{
  return __builtin_shufflevector((__v2di)__a, (__v2di)_mm_setzero_si128(), 0, 1, 2, 3);
}
# 4880 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_loadu2_m128(float const *__addr_hi, float const *__addr_lo)
{
  __m256 __v256 = _mm256_castps128_ps256(_mm_loadu_ps(__addr_lo));
  return __extension__ ({ (__m256)__builtin_shufflevector( (__v8sf)(__m256)(__v256), (__v8sf)_mm256_castps128_ps256((__m128)(_mm_loadu_ps(__addr_hi))), (((1) & 1) ? 0 : 8), (((1) & 1) ? 1 : 9), (((1) & 1) ? 2 : 10), (((1) & 1) ? 3 : 11), (((1) & 1) ? 8 : 4), (((1) & 1) ? 9 : 5), (((1) & 1) ? 10 : 6), (((1) & 1) ? 11 : 7) );});
}
# 4908 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_loadu2_m128d(double const *__addr_hi, double const *__addr_lo)
{
  __m256d __v256 = _mm256_castpd128_pd256(_mm_loadu_pd(__addr_lo));
  return __extension__ ({ (__m256d)__builtin_shufflevector( (__v4df)(__m256d)(__v256), (__v4df)_mm256_castpd128_pd256((__m128d)(_mm_loadu_pd(__addr_hi))), (((1) & 1) ? 0 : 4), (((1) & 1) ? 1 : 5), (((1) & 1) ? 4 : 2), (((1) & 1) ? 5 : 3) );});
}
# 4933 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_loadu2_m128i(__m128i const *__addr_hi, __m128i const *__addr_lo)
{
  __m256i __v256 = _mm256_castsi128_si256(_mm_loadu_si128(__addr_lo));
  return __extension__ ({ (__m256i)__builtin_shufflevector( (__v4di)(__m256i)(__v256), (__v4di)_mm256_castsi128_si256((__m128i)(_mm_loadu_si128(__addr_hi))), (((1) & 1) ? 0 : 4), (((1) & 1) ? 1 : 5), (((1) & 1) ? 4 : 2), (((1) & 1) ? 5 : 3) );});
}
# 4959 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_storeu2_m128(float *__addr_hi, float *__addr_lo, __m256 __a)
{
  __m128 __v128;

  __v128 = _mm256_castps256_ps128(__a);
  _mm_storeu_ps(__addr_lo, __v128);
  __v128 = __extension__ ({ (__m128)__builtin_shufflevector( (__v8sf)(__m256)(__a), (__v8sf)(_mm256_undefined_ps()), (((1) & 1) ? 4 : 0), (((1) & 1) ? 5 : 1), (((1) & 1) ? 6 : 2), (((1) & 1) ? 7 : 3) );});
  _mm_storeu_ps(__addr_hi, __v128);
}
# 4988 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_storeu2_m128d(double *__addr_hi, double *__addr_lo, __m256d __a)
{
  __m128d __v128;

  __v128 = _mm256_castpd256_pd128(__a);
  _mm_storeu_pd(__addr_lo, __v128);
  __v128 = __extension__ ({ (__m128d)__builtin_shufflevector( (__v4df)(__m256d)(__a), (__v4df)(_mm256_undefined_pd()), (((1) & 1) ? 2 : 0), (((1) & 1) ? 3 : 1) );});
  _mm_storeu_pd(__addr_hi, __v128);
}
# 5017 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_storeu2_m128i(__m128i *__addr_hi, __m128i *__addr_lo, __m256i __a)
{
  __m128i __v128;

  __v128 = _mm256_castsi256_si128(__a);
  _mm_storeu_si128(__addr_lo, __v128);
  __v128 = __extension__ ({ (__m128i)__builtin_shufflevector( (__v4di)(__m256i)(__a), (__v4di)(_mm256_undefined_si256()), (((1) & 1) ? 2 : 0), (((1) & 1) ? 3 : 1) );});
  _mm_storeu_si128(__addr_hi, __v128);
}
# 5043 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_m128 (__m128 __hi, __m128 __lo)
{
  return (__m256) __builtin_shufflevector((__v4sf)__lo, (__v4sf)__hi, 0, 1, 2, 3, 4, 5, 6, 7);
}
# 5064 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_m128d (__m128d __hi, __m128d __lo)
{
  return (__m256d)_mm256_set_m128((__m128)__hi, (__m128)__lo);
}
# 5084 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_set_m128i (__m128i __hi, __m128i __lo)
{
  return (__m256i)_mm256_set_m128((__m128)__hi, (__m128)__lo);
}
# 5107 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_m128 (__m128 __lo, __m128 __hi)
{
  return _mm256_set_m128(__hi, __lo);
}
# 5130 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_m128d (__m128d __lo, __m128d __hi)
{
  return (__m256d)_mm256_set_m128((__m128)__hi, (__m128)__lo);
}
# 5151 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avxintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx")))
_mm256_setr_m128i (__m128i __lo, __m128i __hi)
{
  return (__m256i)_mm256_set_m128((__m128)__hi, (__m128)__lo);
}
# 63 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx2intrin.h" 1 3
# 39 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_abs_epi8(__m256i __a)
{
    return (__m256i)__builtin_ia32_pabsb256((__v32qi)__a);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_abs_epi16(__m256i __a)
{
    return (__m256i)__builtin_ia32_pabsw256((__v16hi)__a);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_abs_epi32(__m256i __a)
{
    return (__m256i)__builtin_ia32_pabsd256((__v8si)__a);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_packs_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_packsswb256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_packs_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_packssdw256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_packus_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_packuswb256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_packus_epi32(__m256i __V1, __m256i __V2)
{
  return (__m256i) __builtin_ia32_packusdw256((__v8si)__V1, (__v8si)__V2);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_add_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)((__v32qu)__a + (__v32qu)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_add_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)((__v16hu)__a + (__v16hu)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_add_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)((__v8su)__a + (__v8su)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_add_epi64(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4du)__a + (__v4du)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_adds_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_paddsb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_adds_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_paddsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_adds_epu8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_paddusb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_adds_epu16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_paddusw256((__v16hi)__a, (__v16hi)__b);
}





static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_and_si256(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4du)__a & (__v4du)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_andnot_si256(__m256i __a, __m256i __b)
{
  return (__m256i)(~(__v4du)__a & (__v4du)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_avg_epu8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pavgb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_avg_epu16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pavgw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_blendv_epi8(__m256i __V1, __m256i __V2, __m256i __M)
{
  return (__m256i)__builtin_ia32_pblendvb256((__v32qi)__V1, (__v32qi)__V2,
                                              (__v32qi)__M);
}
# 184 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpeq_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)((__v32qi)__a == (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpeq_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)((__v16hi)__a == (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpeq_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)((__v8si)__a == (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpeq_epi64(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4di)__a == (__v4di)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpgt_epi8(__m256i __a, __m256i __b)
{


  return (__m256i)((__v32qs)__a > (__v32qs)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpgt_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)((__v16hi)__a > (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpgt_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)((__v8si)__a > (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cmpgt_epi64(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4di)__a > (__v4di)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_hadd_epi16(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_phaddw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_hadd_epi32(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_phaddd256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_hadds_epi16(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_phaddsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_hsub_epi16(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_phsubw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_hsub_epi32(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_phsubd256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_hsubs_epi16(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_phsubsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_maddubs_epi16(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_pmaddubsw256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_madd_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaddwd256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_max_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaxsb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_max_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaxsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_max_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaxsd256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_max_epu8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaxub256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_max_epu16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaxuw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_max_epu32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmaxud256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_min_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pminsb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_min_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pminsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_min_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pminsd256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_min_epu8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pminub256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_min_epu16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pminuw256 ((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_min_epu32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pminud256((__v8si)__a, (__v8si)__b);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_movemask_epi8(__m256i __a)
{
  return __builtin_ia32_pmovmskb256((__v32qi)__a);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepi8_epi16(__m128i __V)
{


  return (__m256i)__builtin_convertvector((__v16qs)__V, __v16hi);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepi8_epi32(__m128i __V)
{


  return (__m256i)__builtin_convertvector(__builtin_shufflevector((__v16qs)__V, (__v16qs)__V, 0, 1, 2, 3, 4, 5, 6, 7), __v8si);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepi8_epi64(__m128i __V)
{


  return (__m256i)__builtin_convertvector(__builtin_shufflevector((__v16qs)__V, (__v16qs)__V, 0, 1, 2, 3), __v4di);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepi16_epi32(__m128i __V)
{
  return (__m256i)__builtin_convertvector((__v8hi)__V, __v8si);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepi16_epi64(__m128i __V)
{
  return (__m256i)__builtin_convertvector(__builtin_shufflevector((__v8hi)__V, (__v8hi)__V, 0, 1, 2, 3), __v4di);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepi32_epi64(__m128i __V)
{
  return (__m256i)__builtin_convertvector((__v4si)__V, __v4di);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepu8_epi16(__m128i __V)
{
  return (__m256i)__builtin_convertvector((__v16qu)__V, __v16hi);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepu8_epi32(__m128i __V)
{
  return (__m256i)__builtin_convertvector(__builtin_shufflevector((__v16qu)__V, (__v16qu)__V, 0, 1, 2, 3, 4, 5, 6, 7), __v8si);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepu8_epi64(__m128i __V)
{
  return (__m256i)__builtin_convertvector(__builtin_shufflevector((__v16qu)__V, (__v16qu)__V, 0, 1, 2, 3), __v4di);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepu16_epi32(__m128i __V)
{
  return (__m256i)__builtin_convertvector((__v8hu)__V, __v8si);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepu16_epi64(__m128i __V)
{
  return (__m256i)__builtin_convertvector(__builtin_shufflevector((__v8hu)__V, (__v8hu)__V, 0, 1, 2, 3), __v4di);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_cvtepu32_epi64(__m128i __V)
{
  return (__m256i)__builtin_convertvector((__v4su)__V, __v4di);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mul_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmuldq256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mulhrs_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmulhrsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mulhi_epu16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmulhuw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mulhi_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pmulhw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mullo_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)((__v16hu)__a * (__v16hu)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mullo_epi32 (__m256i __a, __m256i __b)
{
  return (__m256i)((__v8su)__a * (__v8su)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_mul_epu32(__m256i __a, __m256i __b)
{
  return __builtin_ia32_pmuludq256((__v8si)__a, (__v8si)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_or_si256(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4du)__a | (__v4du)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sad_epu8(__m256i __a, __m256i __b)
{
  return __builtin_ia32_psadbw256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_shuffle_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_pshufb256((__v32qi)__a, (__v32qi)__b);
}
# 538 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sign_epi8(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_psignb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sign_epi16(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_psignw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sign_epi32(__m256i __a, __m256i __b)
{
    return (__m256i)__builtin_ia32_psignd256((__v8si)__a, (__v8si)__b);
}
# 595 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_slli_epi16(__m256i __a, int __count)
{
  return (__m256i)__builtin_ia32_psllwi256((__v16hi)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sll_epi16(__m256i __a, __m128i __count)
{
  return (__m256i)__builtin_ia32_psllw256((__v16hi)__a, (__v8hi)__count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_slli_epi32(__m256i __a, int __count)
{
  return (__m256i)__builtin_ia32_pslldi256((__v8si)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sll_epi32(__m256i __a, __m128i __count)
{
  return (__m256i)__builtin_ia32_pslld256((__v8si)__a, (__v4si)__count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_slli_epi64(__m256i __a, int __count)
{
  return __builtin_ia32_psllqi256((__v4di)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sll_epi64(__m256i __a, __m128i __count)
{
  return __builtin_ia32_psllq256((__v4di)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srai_epi16(__m256i __a, int __count)
{
  return (__m256i)__builtin_ia32_psrawi256((__v16hi)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sra_epi16(__m256i __a, __m128i __count)
{
  return (__m256i)__builtin_ia32_psraw256((__v16hi)__a, (__v8hi)__count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srai_epi32(__m256i __a, int __count)
{
  return (__m256i)__builtin_ia32_psradi256((__v8si)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sra_epi32(__m256i __a, __m128i __count)
{
  return (__m256i)__builtin_ia32_psrad256((__v8si)__a, (__v4si)__count);
}
# 694 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srli_epi16(__m256i __a, int __count)
{
  return (__m256i)__builtin_ia32_psrlwi256((__v16hi)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srl_epi16(__m256i __a, __m128i __count)
{
  return (__m256i)__builtin_ia32_psrlw256((__v16hi)__a, (__v8hi)__count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srli_epi32(__m256i __a, int __count)
{
  return (__m256i)__builtin_ia32_psrldi256((__v8si)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srl_epi32(__m256i __a, __m128i __count)
{
  return (__m256i)__builtin_ia32_psrld256((__v8si)__a, (__v4si)__count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srli_epi64(__m256i __a, int __count)
{
  return __builtin_ia32_psrlqi256((__v4di)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srl_epi64(__m256i __a, __m128i __count)
{
  return __builtin_ia32_psrlq256((__v4di)__a, __count);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sub_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)((__v32qu)__a - (__v32qu)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sub_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)((__v16hu)__a - (__v16hu)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sub_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)((__v8su)__a - (__v8su)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sub_epi64(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4du)__a - (__v4du)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_subs_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_psubsb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_subs_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_psubsw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_subs_epu8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_psubusb256((__v32qi)__a, (__v32qi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_subs_epu16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_psubusw256((__v16hi)__a, (__v16hi)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpackhi_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v32qi)__a, (__v32qi)__b, 8, 32+8, 9, 32+9, 10, 32+10, 11, 32+11, 12, 32+12, 13, 32+13, 14, 32+14, 15, 32+15, 24, 32+24, 25, 32+25, 26, 32+26, 27, 32+27, 28, 32+28, 29, 32+29, 30, 32+30, 31, 32+31);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpackhi_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v16hi)__a, (__v16hi)__b, 4, 16+4, 5, 16+5, 6, 16+6, 7, 16+7, 12, 16+12, 13, 16+13, 14, 16+14, 15, 16+15);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpackhi_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v8si)__a, (__v8si)__b, 2, 8+2, 3, 8+3, 6, 8+6, 7, 8+7);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpackhi_epi64(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v4di)__a, (__v4di)__b, 1, 4+1, 3, 4+3);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpacklo_epi8(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v32qi)__a, (__v32qi)__b, 0, 32+0, 1, 32+1, 2, 32+2, 3, 32+3, 4, 32+4, 5, 32+5, 6, 32+6, 7, 32+7, 16, 32+16, 17, 32+17, 18, 32+18, 19, 32+19, 20, 32+20, 21, 32+21, 22, 32+22, 23, 32+23);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpacklo_epi16(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v16hi)__a, (__v16hi)__b, 0, 16+0, 1, 16+1, 2, 16+2, 3, 16+3, 8, 16+8, 9, 16+9, 10, 16+10, 11, 16+11);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpacklo_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v8si)__a, (__v8si)__b, 0, 8+0, 1, 8+1, 4, 8+4, 5, 8+5);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_unpacklo_epi64(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_shufflevector((__v4di)__a, (__v4di)__b, 0, 4+0, 2, 4+2);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_xor_si256(__m256i __a, __m256i __b)
{
  return (__m256i)((__v4du)__a ^ (__v4du)__b);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_stream_load_si256(__m256i const *__V)
{
  return (__m256i)__builtin_nontemporal_load((const __v4di *)__V);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_broadcastss_ps(__m128 __X)
{
  return (__m128)__builtin_shufflevector((__v4sf)__X, (__v4sf)__X, 0, 0, 0, 0);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_broadcastsd_pd(__m128d __a)
{
  return __builtin_shufflevector((__v2df)__a, (__v2df)__a, 0, 0);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastss_ps(__m128 __X)
{
  return (__m256)__builtin_shufflevector((__v4sf)__X, (__v4sf)__X, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastsd_pd(__m128d __X)
{
  return (__m256d)__builtin_shufflevector((__v2df)__X, (__v2df)__X, 0, 0, 0, 0);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastsi128_si256(__m128i __X)
{
  return (__m256i)__builtin_shufflevector((__v2di)__X, (__v2di)__X, 0, 1, 0, 1);
}
# 888 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastb_epi8(__m128i __X)
{
  return (__m256i)__builtin_shufflevector((__v16qi)__X, (__v16qi)__X, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastw_epi16(__m128i __X)
{
  return (__m256i)__builtin_shufflevector((__v8hi)__X, (__v8hi)__X, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastd_epi32(__m128i __X)
{
  return (__m256i)__builtin_shufflevector((__v4si)__X, (__v4si)__X, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_broadcastq_epi64(__m128i __X)
{
  return (__m256i)__builtin_shufflevector((__v2di)__X, (__v2di)__X, 0, 0, 0, 0);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_broadcastb_epi8(__m128i __X)
{
  return (__m128i)__builtin_shufflevector((__v16qi)__X, (__v16qi)__X, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_broadcastw_epi16(__m128i __X)
{
  return (__m128i)__builtin_shufflevector((__v8hi)__X, (__v8hi)__X, 0, 0, 0, 0, 0, 0, 0, 0);
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_broadcastd_epi32(__m128i __X)
{
  return (__m128i)__builtin_shufflevector((__v4si)__X, (__v4si)__X, 0, 0, 0, 0);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_broadcastq_epi64(__m128i __X)
{
  return (__m128i)__builtin_shufflevector((__v2di)__X, (__v2di)__X, 0, 0);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_permutevar8x32_epi32(__m256i __a, __m256i __b)
{
  return (__m256i)__builtin_ia32_permvarsi256((__v8si)__a, (__v8si)__b);
}
# 951 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx2intrin.h" 3
static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_permutevar8x32_ps(__m256 __a, __m256i __b)
{
  return (__m256)__builtin_ia32_permvarsf256((__v8sf)__a, (__v8si)__b);
}
# 982 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx2intrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_maskload_epi32(int const *__X, __m256i __M)
{
  return (__m256i)__builtin_ia32_maskloadd256((const __v8si *)__X, (__v8si)__M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_maskload_epi64(long long const *__X, __m256i __M)
{
  return (__m256i)__builtin_ia32_maskloadq256((const __v4di *)__X, (__v4di)__M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_maskload_epi32(int const *__X, __m128i __M)
{
  return (__m128i)__builtin_ia32_maskloadd((const __v4si *)__X, (__v4si)__M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_maskload_epi64(long long const *__X, __m128i __M)
{
  return (__m128i)__builtin_ia32_maskloadq((const __v2di *)__X, (__v2di)__M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_maskstore_epi32(int *__X, __m256i __M, __m256i __Y)
{
  __builtin_ia32_maskstored256((__v8si *)__X, (__v8si)__M, (__v8si)__Y);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_maskstore_epi64(long long *__X, __m256i __M, __m256i __Y)
{
  __builtin_ia32_maskstoreq256((__v4di *)__X, (__v4di)__M, (__v4di)__Y);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_maskstore_epi32(int *__X, __m128i __M, __m128i __Y)
{
  __builtin_ia32_maskstored((__v4si *)__X, (__v4si)__M, (__v4si)__Y);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_maskstore_epi64(long long *__X, __m128i __M, __m128i __Y)
{
  __builtin_ia32_maskstoreq(( __v2di *)__X, (__v2di)__M, (__v2di)__Y);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sllv_epi32(__m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_psllv8si((__v8si)__X, (__v8si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_sllv_epi32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_psllv4si((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_sllv_epi64(__m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_psllv4di((__v4di)__X, (__v4di)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_sllv_epi64(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_psllv2di((__v2di)__X, (__v2di)__Y);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srav_epi32(__m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_psrav8si((__v8si)__X, (__v8si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_srav_epi32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_psrav4si((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srlv_epi32(__m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_psrlv8si((__v8si)__X, (__v8si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_srlv_epi32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_psrlv4si((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm256_srlv_epi64(__m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_psrlv4di((__v4di)__X, (__v4di)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx2")))
_mm_srlv_epi64(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_psrlv2di((__v2di)__X, (__v2di)__Y);
}
# 67 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3
# 110 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 3
static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("f16c")))
_mm256_cvtph_ps(__m128i __a)
{
  return (__m256)__builtin_ia32_vcvtph2ps256((__v8hi)__a);
}




# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 1 3
# 62 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned short __attribute__((__always_inline__, __nodebug__))
__tzcnt_u16(unsigned short __X)
{
  return __X ? __builtin_ctzs(__X) : 16;
}
# 81 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__andn_u32(unsigned int __X, unsigned int __Y)
{
  return ~__X & __Y;
}
# 103 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__bextr_u32(unsigned int __X, unsigned int __Y)
{
  return __builtin_ia32_bextr_u32(__X, __Y);
}
# 127 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
_bextr_u32(unsigned int __X, unsigned int __Y, unsigned int __Z)
{
  return __builtin_ia32_bextr_u32 (__X, ((__Y & 0xff) | ((__Z & 0xff) << 8)));
}
# 144 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__blsi_u32(unsigned int __X)
{
  return __X & -__X;
}
# 161 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__blsmsk_u32(unsigned int __X)
{
  return __X ^ (__X - 1);
}
# 178 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__blsr_u32(unsigned int __X)
{
  return __X & (__X - 1);
}
# 194 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__))
__tzcnt_u32(unsigned int __X)
{
  return __X ? __builtin_ctz(__X) : 32;
}
# 210 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__))
_mm_tzcnt_32(unsigned int __X)
{
  return __X ? __builtin_ctz(__X) : 32;
}
# 242 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__andn_u64 (unsigned long long __X, unsigned long long __Y)
{
  return ~__X & __Y;
}
# 264 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__bextr_u64(unsigned long long __X, unsigned long long __Y)
{
  return __builtin_ia32_bextr_u64(__X, __Y);
}
# 288 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
_bextr_u64(unsigned long long __X, unsigned int __Y, unsigned int __Z)
{
  return __builtin_ia32_bextr_u64 (__X, ((__Y & 0xff) | ((__Z & 0xff) << 8)));
}
# 305 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__blsi_u64(unsigned long long __X)
{
  return __X & -__X;
}
# 322 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__blsmsk_u64(unsigned long long __X)
{
  return __X ^ (__X - 1);
}
# 339 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi")))
__blsr_u64(unsigned long long __X)
{
  return __X & (__X - 1);
}
# 355 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__))
__tzcnt_u64(unsigned long long __X)
{
  return __X ? __builtin_ctzll(__X) : 64;
}
# 371 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__))
_mm_tzcnt_64(unsigned long long __X)
{
  return __X ? __builtin_ctzll(__X) : 64;
}
# 119 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmi2intrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmi2intrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_bzhi_u32(unsigned int __X, unsigned int __Y)
{
  return __builtin_ia32_bzhi_si(__X, __Y);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_pdep_u32(unsigned int __X, unsigned int __Y)
{
  return __builtin_ia32_pdep_si(__X, __Y);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_pext_u32(unsigned int __X, unsigned int __Y)
{
  return __builtin_ia32_pext_si(__X, __Y);
}



static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_bzhi_u64(unsigned long long __X, unsigned long long __Y)
{
  return __builtin_ia32_bzhi_di(__X, __Y);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_pdep_u64(unsigned long long __X, unsigned long long __Y)
{
  return __builtin_ia32_pdep_di(__X, __Y);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_pext_u64(unsigned long long __X, unsigned long long __Y)
{
  return __builtin_ia32_pext_di(__X, __Y);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("bmi2")))
_mulx_u64 (unsigned long long __X, unsigned long long __Y,
    unsigned long long *__P)
{
  unsigned __int128 __res = (unsigned __int128) __X * __Y;
  *__P = (unsigned long long) (__res >> 64);
  return (unsigned long long) __res;
}
# 123 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/lzcntintrin.h" 1 3
# 44 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/lzcntintrin.h" 3
static __inline__ unsigned short __attribute__((__always_inline__, __nodebug__, __target__("lzcnt")))
__lzcnt16(unsigned short __X)
{
  return __X ? __builtin_clzs(__X) : 16;
}
# 60 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/lzcntintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("lzcnt")))
__lzcnt32(unsigned int __X)
{
  return __X ? __builtin_clz(__X) : 32;
}
# 76 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/lzcntintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("lzcnt")))
_lzcnt_u32(unsigned int __X)
{
  return __X ? __builtin_clz(__X) : 32;
}
# 93 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/lzcntintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("lzcnt")))
__lzcnt64(unsigned long long __X)
{
  return __X ? __builtin_clzll(__X) : 64;
}
# 109 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/lzcntintrin.h" 3
static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("lzcnt")))
_lzcnt_u64(unsigned long long __X)
{
  return __X ? __builtin_clzll(__X) : 64;
}
# 127 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/fmaintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/fmaintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmadd_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmadd_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmadd_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmadd_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmsub_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmsub_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmsub_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmsubss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmsub_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmsubsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmadd_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmadd_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmadd_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmaddss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmadd_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmaddsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmsub_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmsub_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmsub_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmsubss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fnmsub_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmsubsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmaddsub_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmaddsub_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmsubadd_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmsubaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm_fmsubadd_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmsubaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmadd_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmadd_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmsub_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmsub_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fnmadd_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfnmaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fnmadd_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfnmaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fnmsub_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfnmsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fnmsub_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfnmsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmaddsub_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmaddsub_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmsubadd_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmsubaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma")))
_mm256_fmsubadd_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmsubaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}
# 131 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 1 3
# 30 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
typedef char __v64qi __attribute__((__vector_size__(64)));
typedef short __v32hi __attribute__((__vector_size__(64)));
typedef double __v8df __attribute__((__vector_size__(64)));
typedef float __v16sf __attribute__((__vector_size__(64)));
typedef long long __v8di __attribute__((__vector_size__(64)));
typedef int __v16si __attribute__((__vector_size__(64)));


typedef unsigned char __v64qu __attribute__((__vector_size__(64)));
typedef unsigned short __v32hu __attribute__((__vector_size__(64)));
typedef unsigned long long __v8du __attribute__((__vector_size__(64)));
typedef unsigned int __v16su __attribute__((__vector_size__(64)));

typedef float __m512 __attribute__((__vector_size__(64)));
typedef double __m512d __attribute__((__vector_size__(64)));
typedef long long __m512i __attribute__((__vector_size__(64)));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;
# 58 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
typedef enum {
    _MM_CMPINT_EQ,
    _MM_CMPINT_LT,
    _MM_CMPINT_LE,
    _MM_CMPINT_UNUSED,
    _MM_CMPINT_NE,
    _MM_CMPINT_NLT,

    _MM_CMPINT_NLE

} _MM_CMPINT_ENUM;

typedef enum
{
  _MM_PERM_AAAA = 0x00, _MM_PERM_AAAB = 0x01, _MM_PERM_AAAC = 0x02,
  _MM_PERM_AAAD = 0x03, _MM_PERM_AABA = 0x04, _MM_PERM_AABB = 0x05,
  _MM_PERM_AABC = 0x06, _MM_PERM_AABD = 0x07, _MM_PERM_AACA = 0x08,
  _MM_PERM_AACB = 0x09, _MM_PERM_AACC = 0x0A, _MM_PERM_AACD = 0x0B,
  _MM_PERM_AADA = 0x0C, _MM_PERM_AADB = 0x0D, _MM_PERM_AADC = 0x0E,
  _MM_PERM_AADD = 0x0F, _MM_PERM_ABAA = 0x10, _MM_PERM_ABAB = 0x11,
  _MM_PERM_ABAC = 0x12, _MM_PERM_ABAD = 0x13, _MM_PERM_ABBA = 0x14,
  _MM_PERM_ABBB = 0x15, _MM_PERM_ABBC = 0x16, _MM_PERM_ABBD = 0x17,
  _MM_PERM_ABCA = 0x18, _MM_PERM_ABCB = 0x19, _MM_PERM_ABCC = 0x1A,
  _MM_PERM_ABCD = 0x1B, _MM_PERM_ABDA = 0x1C, _MM_PERM_ABDB = 0x1D,
  _MM_PERM_ABDC = 0x1E, _MM_PERM_ABDD = 0x1F, _MM_PERM_ACAA = 0x20,
  _MM_PERM_ACAB = 0x21, _MM_PERM_ACAC = 0x22, _MM_PERM_ACAD = 0x23,
  _MM_PERM_ACBA = 0x24, _MM_PERM_ACBB = 0x25, _MM_PERM_ACBC = 0x26,
  _MM_PERM_ACBD = 0x27, _MM_PERM_ACCA = 0x28, _MM_PERM_ACCB = 0x29,
  _MM_PERM_ACCC = 0x2A, _MM_PERM_ACCD = 0x2B, _MM_PERM_ACDA = 0x2C,
  _MM_PERM_ACDB = 0x2D, _MM_PERM_ACDC = 0x2E, _MM_PERM_ACDD = 0x2F,
  _MM_PERM_ADAA = 0x30, _MM_PERM_ADAB = 0x31, _MM_PERM_ADAC = 0x32,
  _MM_PERM_ADAD = 0x33, _MM_PERM_ADBA = 0x34, _MM_PERM_ADBB = 0x35,
  _MM_PERM_ADBC = 0x36, _MM_PERM_ADBD = 0x37, _MM_PERM_ADCA = 0x38,
  _MM_PERM_ADCB = 0x39, _MM_PERM_ADCC = 0x3A, _MM_PERM_ADCD = 0x3B,
  _MM_PERM_ADDA = 0x3C, _MM_PERM_ADDB = 0x3D, _MM_PERM_ADDC = 0x3E,
  _MM_PERM_ADDD = 0x3F, _MM_PERM_BAAA = 0x40, _MM_PERM_BAAB = 0x41,
  _MM_PERM_BAAC = 0x42, _MM_PERM_BAAD = 0x43, _MM_PERM_BABA = 0x44,
  _MM_PERM_BABB = 0x45, _MM_PERM_BABC = 0x46, _MM_PERM_BABD = 0x47,
  _MM_PERM_BACA = 0x48, _MM_PERM_BACB = 0x49, _MM_PERM_BACC = 0x4A,
  _MM_PERM_BACD = 0x4B, _MM_PERM_BADA = 0x4C, _MM_PERM_BADB = 0x4D,
  _MM_PERM_BADC = 0x4E, _MM_PERM_BADD = 0x4F, _MM_PERM_BBAA = 0x50,
  _MM_PERM_BBAB = 0x51, _MM_PERM_BBAC = 0x52, _MM_PERM_BBAD = 0x53,
  _MM_PERM_BBBA = 0x54, _MM_PERM_BBBB = 0x55, _MM_PERM_BBBC = 0x56,
  _MM_PERM_BBBD = 0x57, _MM_PERM_BBCA = 0x58, _MM_PERM_BBCB = 0x59,
  _MM_PERM_BBCC = 0x5A, _MM_PERM_BBCD = 0x5B, _MM_PERM_BBDA = 0x5C,
  _MM_PERM_BBDB = 0x5D, _MM_PERM_BBDC = 0x5E, _MM_PERM_BBDD = 0x5F,
  _MM_PERM_BCAA = 0x60, _MM_PERM_BCAB = 0x61, _MM_PERM_BCAC = 0x62,
  _MM_PERM_BCAD = 0x63, _MM_PERM_BCBA = 0x64, _MM_PERM_BCBB = 0x65,
  _MM_PERM_BCBC = 0x66, _MM_PERM_BCBD = 0x67, _MM_PERM_BCCA = 0x68,
  _MM_PERM_BCCB = 0x69, _MM_PERM_BCCC = 0x6A, _MM_PERM_BCCD = 0x6B,
  _MM_PERM_BCDA = 0x6C, _MM_PERM_BCDB = 0x6D, _MM_PERM_BCDC = 0x6E,
  _MM_PERM_BCDD = 0x6F, _MM_PERM_BDAA = 0x70, _MM_PERM_BDAB = 0x71,
  _MM_PERM_BDAC = 0x72, _MM_PERM_BDAD = 0x73, _MM_PERM_BDBA = 0x74,
  _MM_PERM_BDBB = 0x75, _MM_PERM_BDBC = 0x76, _MM_PERM_BDBD = 0x77,
  _MM_PERM_BDCA = 0x78, _MM_PERM_BDCB = 0x79, _MM_PERM_BDCC = 0x7A,
  _MM_PERM_BDCD = 0x7B, _MM_PERM_BDDA = 0x7C, _MM_PERM_BDDB = 0x7D,
  _MM_PERM_BDDC = 0x7E, _MM_PERM_BDDD = 0x7F, _MM_PERM_CAAA = 0x80,
  _MM_PERM_CAAB = 0x81, _MM_PERM_CAAC = 0x82, _MM_PERM_CAAD = 0x83,
  _MM_PERM_CABA = 0x84, _MM_PERM_CABB = 0x85, _MM_PERM_CABC = 0x86,
  _MM_PERM_CABD = 0x87, _MM_PERM_CACA = 0x88, _MM_PERM_CACB = 0x89,
  _MM_PERM_CACC = 0x8A, _MM_PERM_CACD = 0x8B, _MM_PERM_CADA = 0x8C,
  _MM_PERM_CADB = 0x8D, _MM_PERM_CADC = 0x8E, _MM_PERM_CADD = 0x8F,
  _MM_PERM_CBAA = 0x90, _MM_PERM_CBAB = 0x91, _MM_PERM_CBAC = 0x92,
  _MM_PERM_CBAD = 0x93, _MM_PERM_CBBA = 0x94, _MM_PERM_CBBB = 0x95,
  _MM_PERM_CBBC = 0x96, _MM_PERM_CBBD = 0x97, _MM_PERM_CBCA = 0x98,
  _MM_PERM_CBCB = 0x99, _MM_PERM_CBCC = 0x9A, _MM_PERM_CBCD = 0x9B,
  _MM_PERM_CBDA = 0x9C, _MM_PERM_CBDB = 0x9D, _MM_PERM_CBDC = 0x9E,
  _MM_PERM_CBDD = 0x9F, _MM_PERM_CCAA = 0xA0, _MM_PERM_CCAB = 0xA1,
  _MM_PERM_CCAC = 0xA2, _MM_PERM_CCAD = 0xA3, _MM_PERM_CCBA = 0xA4,
  _MM_PERM_CCBB = 0xA5, _MM_PERM_CCBC = 0xA6, _MM_PERM_CCBD = 0xA7,
  _MM_PERM_CCCA = 0xA8, _MM_PERM_CCCB = 0xA9, _MM_PERM_CCCC = 0xAA,
  _MM_PERM_CCCD = 0xAB, _MM_PERM_CCDA = 0xAC, _MM_PERM_CCDB = 0xAD,
  _MM_PERM_CCDC = 0xAE, _MM_PERM_CCDD = 0xAF, _MM_PERM_CDAA = 0xB0,
  _MM_PERM_CDAB = 0xB1, _MM_PERM_CDAC = 0xB2, _MM_PERM_CDAD = 0xB3,
  _MM_PERM_CDBA = 0xB4, _MM_PERM_CDBB = 0xB5, _MM_PERM_CDBC = 0xB6,
  _MM_PERM_CDBD = 0xB7, _MM_PERM_CDCA = 0xB8, _MM_PERM_CDCB = 0xB9,
  _MM_PERM_CDCC = 0xBA, _MM_PERM_CDCD = 0xBB, _MM_PERM_CDDA = 0xBC,
  _MM_PERM_CDDB = 0xBD, _MM_PERM_CDDC = 0xBE, _MM_PERM_CDDD = 0xBF,
  _MM_PERM_DAAA = 0xC0, _MM_PERM_DAAB = 0xC1, _MM_PERM_DAAC = 0xC2,
  _MM_PERM_DAAD = 0xC3, _MM_PERM_DABA = 0xC4, _MM_PERM_DABB = 0xC5,
  _MM_PERM_DABC = 0xC6, _MM_PERM_DABD = 0xC7, _MM_PERM_DACA = 0xC8,
  _MM_PERM_DACB = 0xC9, _MM_PERM_DACC = 0xCA, _MM_PERM_DACD = 0xCB,
  _MM_PERM_DADA = 0xCC, _MM_PERM_DADB = 0xCD, _MM_PERM_DADC = 0xCE,
  _MM_PERM_DADD = 0xCF, _MM_PERM_DBAA = 0xD0, _MM_PERM_DBAB = 0xD1,
  _MM_PERM_DBAC = 0xD2, _MM_PERM_DBAD = 0xD3, _MM_PERM_DBBA = 0xD4,
  _MM_PERM_DBBB = 0xD5, _MM_PERM_DBBC = 0xD6, _MM_PERM_DBBD = 0xD7,
  _MM_PERM_DBCA = 0xD8, _MM_PERM_DBCB = 0xD9, _MM_PERM_DBCC = 0xDA,
  _MM_PERM_DBCD = 0xDB, _MM_PERM_DBDA = 0xDC, _MM_PERM_DBDB = 0xDD,
  _MM_PERM_DBDC = 0xDE, _MM_PERM_DBDD = 0xDF, _MM_PERM_DCAA = 0xE0,
  _MM_PERM_DCAB = 0xE1, _MM_PERM_DCAC = 0xE2, _MM_PERM_DCAD = 0xE3,
  _MM_PERM_DCBA = 0xE4, _MM_PERM_DCBB = 0xE5, _MM_PERM_DCBC = 0xE6,
  _MM_PERM_DCBD = 0xE7, _MM_PERM_DCCA = 0xE8, _MM_PERM_DCCB = 0xE9,
  _MM_PERM_DCCC = 0xEA, _MM_PERM_DCCD = 0xEB, _MM_PERM_DCDA = 0xEC,
  _MM_PERM_DCDB = 0xED, _MM_PERM_DCDC = 0xEE, _MM_PERM_DCDD = 0xEF,
  _MM_PERM_DDAA = 0xF0, _MM_PERM_DDAB = 0xF1, _MM_PERM_DDAC = 0xF2,
  _MM_PERM_DDAD = 0xF3, _MM_PERM_DDBA = 0xF4, _MM_PERM_DDBB = 0xF5,
  _MM_PERM_DDBC = 0xF6, _MM_PERM_DDBD = 0xF7, _MM_PERM_DDCA = 0xF8,
  _MM_PERM_DDCB = 0xF9, _MM_PERM_DDCC = 0xFA, _MM_PERM_DDCD = 0xFB,
  _MM_PERM_DDDA = 0xFC, _MM_PERM_DDDB = 0xFD, _MM_PERM_DDDC = 0xFE,
  _MM_PERM_DDDD = 0xFF
} _MM_PERM_ENUM;

typedef enum
{
  _MM_MANT_NORM_1_2,
  _MM_MANT_NORM_p5_2,
  _MM_MANT_NORM_p5_1,
  _MM_MANT_NORM_p75_1p5
} _MM_MANTISSA_NORM_ENUM;

typedef enum
{
  _MM_MANT_SIGN_src,
  _MM_MANT_SIGN_zero,
  _MM_MANT_SIGN_nan
} _MM_MANTISSA_SIGN_ENUM;






static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_setzero_si512(void)
{
  return (__m512i)(__v8di){ 0, 0, 0, 0, 0, 0, 0, 0 };
}



static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_undefined_pd(void)
{
  return (__m512d)__builtin_ia32_undef512();
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_undefined(void)
{
  return (__m512)__builtin_ia32_undef512();
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_undefined_ps(void)
{
  return (__m512)__builtin_ia32_undef512();
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_undefined_epi32(void)
{
  return (__m512i)__builtin_ia32_undef512();
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcastd_epi32 (__m128i __A)
{
  return (__m512i)__builtin_shufflevector((__v4si) __A,
                                          (__v4si)_mm_undefined_si128(),
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcastd_epi32 (__m512i __O, __mmask16 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectd_512(__M,
                                             (__v16si) _mm512_broadcastd_epi32(__A),
                                             (__v16si) __O);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcastd_epi32 (__mmask16 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectd_512(__M,
                                             (__v16si) _mm512_broadcastd_epi32(__A),
                                             (__v16si) _mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcastq_epi64 (__m128i __A)
{
  return (__m512i)__builtin_shufflevector((__v2di) __A,
                                          (__v2di) _mm_undefined_si128(),
                                          0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcastq_epi64 (__m512i __O, __mmask8 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512(__M,
                                             (__v8di) _mm512_broadcastq_epi64(__A),
                                             (__v8di) __O);

}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcastq_epi64 (__mmask8 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512(__M,
                                             (__v8di) _mm512_broadcastq_epi64(__A),
                                             (__v8di) _mm512_setzero_si512());
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_set1_epi32(__mmask16 __M, int __A)
{
  return (__m512i) __builtin_ia32_pbroadcastd512_gpr_mask (__A,
                 (__v16si)
                 _mm512_setzero_si512 (),
                 __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_set1_epi64(__mmask8 __M, long long __A)
{

  return (__m512i) __builtin_ia32_pbroadcastq512_gpr_mask (__A,
                 (__v8di)
                 _mm512_setzero_si512 (),
                 __M);






}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_setzero_ps(void)
{
  return (__m512){ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
}



static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_setzero_pd(void)
{
  return (__m512d){ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set1_ps(float __w)
{
  return (__m512){ __w, __w, __w, __w, __w, __w, __w, __w,
                   __w, __w, __w, __w, __w, __w, __w, __w };
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set1_pd(double __w)
{
  return (__m512d){ __w, __w, __w, __w, __w, __w, __w, __w };
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set1_epi8(char __w)
{
  return (__m512i)(__v64qi){ __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w };
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set1_epi16(short __w)
{
  return (__m512i)(__v32hi){ __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w,
                             __w, __w, __w, __w, __w, __w, __w, __w };
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set1_epi32(int __s)
{
  return (__m512i)(__v16si){ __s, __s, __s, __s, __s, __s, __s, __s,
                             __s, __s, __s, __s, __s, __s, __s, __s };
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set1_epi64(long long __d)
{
  return (__m512i)(__v8di){ __d, __d, __d, __d, __d, __d, __d, __d };
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcastss_ps(__m128 __A)
{
  return (__m512)__builtin_shufflevector((__v4sf) __A,
                                         (__v4sf)_mm_undefined_ps(),
                                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set4_epi32 (int __A, int __B, int __C, int __D)
{
  return (__m512i)(__v16si)
   { __D, __C, __B, __A, __D, __C, __B, __A,
     __D, __C, __B, __A, __D, __C, __B, __A };
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set4_epi64 (long long __A, long long __B, long long __C,
       long long __D)
{
  return (__m512i) (__v8di)
   { __D, __C, __B, __A, __D, __C, __B, __A };
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set4_pd (double __A, double __B, double __C, double __D)
{
  return (__m512d)
   { __D, __C, __B, __A, __D, __C, __B, __A };
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set4_ps (float __A, float __B, float __C, float __D)
{
  return (__m512)
   { __D, __C, __B, __A, __D, __C, __B, __A,
     __D, __C, __B, __A, __D, __C, __B, __A };
}
# 400 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcastsd_pd(__m128d __A)
{
  return (__m512d)__builtin_shufflevector((__v2df) __A,
                                          (__v2df) _mm_undefined_pd(),
                                          0, 0, 0, 0, 0, 0, 0, 0);
}



static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castpd256_pd512(__m256d __a)
{
  return __builtin_shufflevector(__a, __a, 0, 1, 2, 3, -1, -1, -1, -1);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castps256_ps512(__m256 __a)
{
  return __builtin_shufflevector(__a, __a, 0, 1, 2, 3, 4, 5, 6, 7,
                                          -1, -1, -1, -1, -1, -1, -1, -1);
}

static __inline __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castpd512_pd128(__m512d __a)
{
  return __builtin_shufflevector(__a, __a, 0, 1);
}

static __inline __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castpd512_pd256 (__m512d __A)
{
  return __builtin_shufflevector(__A, __A, 0, 1, 2, 3);
}

static __inline __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castps512_ps128(__m512 __a)
{
  return __builtin_shufflevector(__a, __a, 0, 1, 2, 3);
}

static __inline __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castps512_ps256 (__m512 __A)
{
  return __builtin_shufflevector(__A, __A, 0, 1, 2, 3, 4, 5, 6, 7);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castpd_ps (__m512d __A)
{
  return (__m512) (__A);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castpd_si512 (__m512d __A)
{
  return (__m512i) (__A);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castpd128_pd512 (__m128d __A)
{
  return __builtin_shufflevector( __A, __A, 0, 1, -1, -1, -1, -1, -1, -1);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castps_pd (__m512 __A)
{
  return (__m512d) (__A);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castps_si512 (__m512 __A)
{
  return (__m512i) (__A);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castps128_ps512 (__m128 __A)
{
    return __builtin_shufflevector( __A, __A, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castsi128_si512 (__m128i __A)
{
   return __builtin_shufflevector( __A, __A, 0, 1, -1, -1, -1, -1, -1, -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castsi256_si512 (__m256i __A)
{
   return __builtin_shufflevector( __A, __A, 0, 1, 2, 3, -1, -1, -1, -1);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castsi512_ps (__m512i __A)
{
  return (__m512) (__A);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castsi512_pd (__m512i __A)
{
  return (__m512d) (__A);
}

static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castsi512_si128 (__m512i __A)
{
  return (__m128i)__builtin_shufflevector(__A, __A , 0, 1);
}

static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_castsi512_si256 (__m512i __A)
{
  return (__m256i)__builtin_shufflevector(__A, __A , 0, 1, 2, 3);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_int2mask(int __a)
{
  return (__mmask16)__a;
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask2int(__mmask16 __a)
{
  return (int)__a;
}
# 544 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_zextpd128_pd512(__m128d __a)
{
  return __builtin_shufflevector((__v2df)__a, (__v2df)_mm_setzero_pd(), 0, 1, 2, 3, 2, 3, 2, 3);
}
# 563 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_zextpd256_pd512(__m256d __a)
{
  return __builtin_shufflevector((__v4df)__a, (__v4df)_mm256_setzero_pd(), 0, 1, 2, 3, 4, 5, 6, 7);
}
# 581 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_zextps128_ps512(__m128 __a)
{
  return __builtin_shufflevector((__v4sf)__a, (__v4sf)_mm_setzero_ps(), 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7);
}
# 599 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_zextps256_ps512(__m256 __a)
{
  return __builtin_shufflevector((__v8sf)__a, (__v8sf)_mm256_setzero_ps(), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
}
# 617 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_zextsi128_si512(__m128i __a)
{
  return __builtin_shufflevector((__v2di)__a, (__v2di)_mm_setzero_si128(), 0, 1, 2, 3, 2, 3, 2, 3);
}
# 635 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_zextsi256_si512(__m256i __a)
{
  return __builtin_shufflevector((__v4di)__a, (__v4di)_mm256_setzero_si256(), 0, 1, 2, 3, 4, 5, 6, 7);
}


static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_and_epi32(__m512i __a, __m512i __b)
{
  return (__m512i)((__v16su)__a & (__v16su)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_and_epi32(__m512i __src, __mmask16 __k, __m512i __a, __m512i __b)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__k,
                (__v16si) _mm512_and_epi32(__a, __b),
                (__v16si) __src);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_and_epi32(__mmask16 __k, __m512i __a, __m512i __b)
{
  return (__m512i) _mm512_mask_and_epi32(_mm512_setzero_si512 (),
                                         __k, __a, __b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_and_epi64(__m512i __a, __m512i __b)
{
  return (__m512i)((__v8du)__a & (__v8du)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_and_epi64(__m512i __src, __mmask8 __k, __m512i __a, __m512i __b)
{
    return (__m512i) __builtin_ia32_selectq_512 ((__mmask8) __k,
                (__v8di) _mm512_and_epi64(__a, __b),
                (__v8di) __src);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_and_epi64(__mmask8 __k, __m512i __a, __m512i __b)
{
  return (__m512i) _mm512_mask_and_epi64(_mm512_setzero_si512 (),
                                         __k, __a, __b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_andnot_si512 (__m512i __A, __m512i __B)
{
  return (__m512i)(~(__v8du)(__A) & (__v8du)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_andnot_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i)(~(__v16su)(__A) & (__v16su)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_andnot_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                         (__v16si)_mm512_andnot_epi32(__A, __B),
                                         (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_andnot_epi32(__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)_mm512_mask_andnot_epi32(_mm512_setzero_si512(),
                                           __U, __A, __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_andnot_epi64(__m512i __A, __m512i __B)
{
  return (__m512i)(~(__v8du)(__A) & (__v8du)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_andnot_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                          (__v8di)_mm512_andnot_epi64(__A, __B),
                                          (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_andnot_epi64(__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)_mm512_mask_andnot_epi64(_mm512_setzero_si512(),
                                           __U, __A, __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_or_epi32(__m512i __a, __m512i __b)
{
  return (__m512i)((__v16su)__a | (__v16su)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_or_epi32(__m512i __src, __mmask16 __k, __m512i __a, __m512i __b)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__k,
                                             (__v16si)_mm512_or_epi32(__a, __b),
                                             (__v16si)__src);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_or_epi32(__mmask16 __k, __m512i __a, __m512i __b)
{
  return (__m512i)_mm512_mask_or_epi32(_mm512_setzero_si512(), __k, __a, __b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_or_epi64(__m512i __a, __m512i __b)
{
  return (__m512i)((__v8du)__a | (__v8du)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_or_epi64(__m512i __src, __mmask8 __k, __m512i __a, __m512i __b)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__k,
                                             (__v8di)_mm512_or_epi64(__a, __b),
                                             (__v8di)__src);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_or_epi64(__mmask8 __k, __m512i __a, __m512i __b)
{
  return (__m512i)_mm512_mask_or_epi64(_mm512_setzero_si512(), __k, __a, __b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_xor_epi32(__m512i __a, __m512i __b)
{
  return (__m512i)((__v16su)__a ^ (__v16su)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_xor_epi32(__m512i __src, __mmask16 __k, __m512i __a, __m512i __b)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__k,
                                            (__v16si)_mm512_xor_epi32(__a, __b),
                                            (__v16si)__src);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_xor_epi32(__mmask16 __k, __m512i __a, __m512i __b)
{
  return (__m512i)_mm512_mask_xor_epi32(_mm512_setzero_si512(), __k, __a, __b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_xor_epi64(__m512i __a, __m512i __b)
{
  return (__m512i)((__v8du)__a ^ (__v8du)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_xor_epi64(__m512i __src, __mmask8 __k, __m512i __a, __m512i __b)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__k,
                                             (__v8di)_mm512_xor_epi64(__a, __b),
                                             (__v8di)__src);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_xor_epi64(__mmask8 __k, __m512i __a, __m512i __b)
{
  return (__m512i)_mm512_mask_xor_epi64(_mm512_setzero_si512(), __k, __a, __b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_and_si512(__m512i __a, __m512i __b)
{
  return (__m512i)((__v8du)__a & (__v8du)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_or_si512(__m512i __a, __m512i __b)
{
  return (__m512i)((__v8du)__a | (__v8du)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_xor_si512(__m512i __a, __m512i __b)
{
  return (__m512i)((__v8du)__a ^ (__v8du)__b);
}



static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_add_pd(__m512d __a, __m512d __b)
{
  return (__m512d)((__v8df)__a + (__v8df)__b);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_add_ps(__m512 __a, __m512 __b)
{
  return (__m512)((__v16sf)__a + (__v16sf)__b);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mul_pd(__m512d __a, __m512d __b)
{
  return (__m512d)((__v8df)__a * (__v8df)__b);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mul_ps(__m512 __a, __m512 __b)
{
  return (__m512)((__v16sf)__a * (__v16sf)__b);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sub_pd(__m512d __a, __m512d __b)
{
  return (__m512d)((__v8df)__a - (__v8df)__b);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sub_ps(__m512 __a, __m512 __b)
{
  return (__m512)((__v16sf)__a - (__v16sf)__b);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_add_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) ((__v8du) __A + (__v8du) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_add_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_add_epi64(__A, __B),
                                             (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_add_epi64(__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_add_epi64(__A, __B),
                                             (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sub_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) ((__v8du) __A - (__v8du) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sub_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_sub_epi64(__A, __B),
                                             (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sub_epi64(__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_sub_epi64(__A, __B),
                                             (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_add_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) ((__v16su) __A + (__v16su) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_add_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                             (__v16si)_mm512_add_epi32(__A, __B),
                                             (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_add_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                             (__v16si)_mm512_add_epi32(__A, __B),
                                             (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sub_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) ((__v16su) __A - (__v16su) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sub_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                             (__v16si)_mm512_sub_epi32(__A, __B),
                                             (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sub_epi32(__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                             (__v16si)_mm512_sub_epi32(__A, __B),
                                             (__v16si)_mm512_setzero_si512());
}
# 974 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_max_pd(__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_maxpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df)
             _mm512_setzero_pd (),
             (__mmask8) -1,
             0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_max_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_maxpd512_mask ((__v8df) __A,
                  (__v8df) __B,
                  (__v8df) __W,
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_max_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_maxpd512_mask ((__v8df) __A,
                  (__v8df) __B,
                  (__v8df)
                  _mm512_setzero_pd (),
                  (__mmask8) __U,
                  0x04);
}
# 1024 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_max_ps(__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_maxps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf)
            _mm512_setzero_ps (),
            (__mmask16) -1,
            0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_max_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_maxps512_mask ((__v16sf) __A,
                 (__v16sf) __B,
                 (__v16sf) __W,
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_max_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_maxps512_mask ((__v16sf) __A,
                 (__v16sf) __B,
                 (__v16sf)
                 _mm512_setzero_ps (),
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_max_ss(__m128 __W, __mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_maxss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_max_ss(__mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_maxss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 1092 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_max_sd(__m128d __W, __mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_maxsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_max_sd(__mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_maxsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 1128 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m512i
__attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_max_epi32(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_max_epi32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsd512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_max_epi32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsd512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_max_epu32(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxud512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_max_epu32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxud512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_max_epu32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxud512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_max_epi64(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_max_epi64 (__m512i __W, __mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_max_epi64 (__mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_max_epu64(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_max_epu64 (__m512i __W, __mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_max_epu64 (__mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di)
                   _mm512_setzero_si512 (),
                   __M);
}
# 1259 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_min_pd(__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_minpd512_mask ((__v8df) __A,
             (__v8df) __B,
             (__v8df)
             _mm512_setzero_pd (),
             (__mmask8) -1,
             0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_min_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_minpd512_mask ((__v8df) __A,
                  (__v8df) __B,
                  (__v8df) __W,
                  (__mmask8) __U,
                  0x04);
}
# 1298 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_min_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_minpd512_mask ((__v8df) __A,
                  (__v8df) __B,
                  (__v8df)
                  _mm512_setzero_pd (),
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_min_ps(__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_minps512_mask ((__v16sf) __A,
            (__v16sf) __B,
            (__v16sf)
            _mm512_setzero_ps (),
            (__mmask16) -1,
            0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_min_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_minps512_mask ((__v16sf) __A,
                 (__v16sf) __B,
                 (__v16sf) __W,
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_min_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_minps512_mask ((__v16sf) __A,
                 (__v16sf) __B,
                 (__v16sf)
                 _mm512_setzero_ps (),
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_min_ss(__m128 __W, __mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_minss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_min_ss(__mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_minss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 1377 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_min_sd(__m128d __W, __mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_minsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_min_sd(__mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_minsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 1413 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m512i
__attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_min_epi32(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_min_epi32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsd512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_min_epi32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsd512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_min_epu32(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminud512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_min_epu32 (__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminud512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_min_epu32 (__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminud512_mask ((__v16si) __A,
                   (__v16si) __B,
                   (__v16si)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_min_epi64(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_min_epi64 (__m512i __W, __mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_min_epi64 (__mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_min_epu64(__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_min_epu64 (__m512i __W, __mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di) __W, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_min_epu64 (__mmask8 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuq512_mask ((__v8di) __A,
                   (__v8di) __B,
                   (__v8di)
                   _mm512_setzero_si512 (),
                   __M);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mul_epi32(__m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_pmuldq512((__v16si)__X, (__v16si) __Y);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mul_epi32(__m512i __W, __mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__M,
                                             (__v8di)_mm512_mul_epi32(__X, __Y),
                                             (__v8di)__W);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mul_epi32(__mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__M,
                                             (__v8di)_mm512_mul_epi32(__X, __Y),
                                             (__v8di)_mm512_setzero_si512 ());
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mul_epu32(__m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_pmuludq512((__v16si)__X, (__v16si)__Y);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mul_epu32(__m512i __W, __mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__M,
                                             (__v8di)_mm512_mul_epu32(__X, __Y),
                                             (__v8di)__W);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mul_epu32(__mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__M,
                                             (__v8di)_mm512_mul_epu32(__X, __Y),
                                             (__v8di)_mm512_setzero_si512 ());
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mullo_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) ((__v16su) __A * (__v16su) __B);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mullo_epi32(__mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__M,
                                             (__v16si)_mm512_mullo_epi32(__A, __B),
                                             (__v16si)_mm512_setzero_si512());
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mullo_epi32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__M,
                                             (__v16si)_mm512_mullo_epi32(__A, __B),
                                             (__v16si)__W);
}
# 1607 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sqrt_pd(__m512d __a)
{
  return (__m512d)__builtin_ia32_sqrtpd512_mask((__v8df)__a,
                                                (__v8df) _mm512_setzero_pd (),
                                                (__mmask8) -1,
                                                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sqrt_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_sqrtpd512_mask ((__v8df) __A,
                   (__v8df) __W,
                   (__mmask8) __U,
                   0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sqrt_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_sqrtpd512_mask ((__v8df) __A,
                   (__v8df)
                   _mm512_setzero_pd (),
                   (__mmask8) __U,
                   0x04);
}
# 1650 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sqrt_ps(__m512 __a)
{
  return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__a,
                                               (__v16sf) _mm512_setzero_ps (),
                                               (__mmask16) -1,
                                               0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sqrt_ps(__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__A,
                                               (__v16sf) __W,
                                               (__mmask16) __U,
                                               0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sqrt_ps( __mmask16 __U, __m512 __A)
{
  return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__A,
                                               (__v16sf) _mm512_setzero_ps (),
                                               (__mmask16) __U,
                                               0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rsqrt14_pd(__m512d __A)
{
  return (__m512d) __builtin_ia32_rsqrt14pd512_mask ((__v8df) __A,
                 (__v8df)
                 _mm512_setzero_pd (),
                 (__mmask8) -1);}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rsqrt14_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rsqrt14pd512_mask ((__v8df) __A,
                  (__v8df) __W,
                  (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rsqrt14_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rsqrt14pd512_mask ((__v8df) __A,
                  (__v8df)
                  _mm512_setzero_pd (),
                  (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rsqrt14_ps(__m512 __A)
{
  return (__m512) __builtin_ia32_rsqrt14ps512_mask ((__v16sf) __A,
                (__v16sf)
                _mm512_setzero_ps (),
                (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rsqrt14_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rsqrt14ps512_mask ((__v16sf) __A,
                 (__v16sf) __W,
                 (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rsqrt14_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rsqrt14ps512_mask ((__v16sf) __A,
                 (__v16sf)
                 _mm512_setzero_ps (),
                 (__mmask16) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_rsqrt14_ss(__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_rsqrt14ss_mask ((__v4sf) __A,
             (__v4sf) __B,
             (__v4sf)
             _mm_setzero_ps (),
             (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_rsqrt14_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_rsqrt14ss_mask ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) __W,
          (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_rsqrt14_ss (__mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_rsqrt14ss_mask ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) _mm_setzero_ps (),
          (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_rsqrt14_sd(__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_rsqrt14sd_mask ((__v2df) __A,
              (__v2df) __B,
              (__v2df)
              _mm_setzero_pd (),
              (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_rsqrt14_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_rsqrt14sd_mask ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) __W,
          (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_rsqrt14_sd (__mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_rsqrt14sd_mask ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) _mm_setzero_pd (),
          (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rcp14_pd(__m512d __A)
{
  return (__m512d) __builtin_ia32_rcp14pd512_mask ((__v8df) __A,
               (__v8df)
               _mm512_setzero_pd (),
               (__mmask8) -1);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rcp14_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rcp14pd512_mask ((__v8df) __A,
                (__v8df) __W,
                (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rcp14_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rcp14pd512_mask ((__v8df) __A,
                (__v8df)
                _mm512_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rcp14_ps(__m512 __A)
{
  return (__m512) __builtin_ia32_rcp14ps512_mask ((__v16sf) __A,
              (__v16sf)
              _mm512_setzero_ps (),
              (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rcp14_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rcp14ps512_mask ((__v16sf) __A,
                   (__v16sf) __W,
                   (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rcp14_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rcp14ps512_mask ((__v16sf) __A,
                   (__v16sf)
                   _mm512_setzero_ps (),
                   (__mmask16) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_rcp14_ss(__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_rcp14ss_mask ((__v4sf) __A,
                 (__v4sf) __B,
                 (__v4sf)
                 _mm_setzero_ps (),
                 (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_rcp14_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_rcp14ss_mask ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) __W,
          (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_rcp14_ss (__mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_rcp14ss_mask ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) _mm_setzero_ps (),
          (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_rcp14_sd(__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_rcp14sd_mask ((__v2df) __A,
            (__v2df) __B,
            (__v2df)
            _mm_setzero_pd (),
            (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_rcp14_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_rcp14sd_mask ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) __W,
          (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_rcp14_sd (__mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_rcp14sd_mask ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) _mm_setzero_pd (),
          (__mmask8) __U);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_floor_ps(__m512 __A)
{
  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,
                                                  (0x00 | 0x01),
                                                  (__v16sf) __A, -1,
                                                  0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_floor_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,
                   (0x00 | 0x01),
                   (__v16sf) __W, __U,
                   0x04);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_floor_pd(__m512d __A)
{
  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,
                                                   (0x00 | 0x01),
                                                   (__v8df) __A, -1,
                                                   0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_floor_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,
                (0x00 | 0x01),
                (__v8df) __W, __U,
                0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_ceil_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,
                   (0x00 | 0x02),
                   (__v16sf) __W, __U,
                   0x04);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_ceil_ps(__m512 __A)
{
  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,
                                                  (0x00 | 0x02),
                                                  (__v16sf) __A, -1,
                                                  0x04);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_ceil_pd(__m512d __A)
{
  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,
                                                   (0x00 | 0x02),
                                                   (__v8df) __A, -1,
                                                   0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_ceil_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,
                (0x00 | 0x02),
                (__v8df) __W, __U,
                0x04);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_abs_epi64(__m512i __A)
{
  return (__m512i) __builtin_ia32_pabsq512_mask ((__v8di) __A,
             (__v8di)
             _mm512_setzero_si512 (),
             (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_abs_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsq512_mask ((__v8di) __A,
                  (__v8di) __W,
                  (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_abs_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsq512_mask ((__v8di) __A,
                  (__v8di)
                  _mm512_setzero_si512 (),
                  (__mmask8) __U);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_abs_epi32(__m512i __A)
{
  return (__m512i) __builtin_ia32_pabsd512_mask ((__v16si) __A,
             (__v16si)
             _mm512_setzero_si512 (),
             (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_abs_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsd512_mask ((__v16si) __A,
                  (__v16si) __W,
                  (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_abs_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsd512_mask ((__v16si) __A,
                  (__v16si)
                  _mm512_setzero_si512 (),
                  (__mmask16) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_add_ss(__m128 __W, __mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_addss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_add_ss(__mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_addss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 2052 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_add_sd(__m128d __W, __mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_addsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_add_sd(__mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_addsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 2087 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_add_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_add_pd(__A, __B),
                                              (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_add_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_add_pd(__A, __B),
                                              (__v8df)_mm512_setzero_pd());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_add_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_add_ps(__A, __B),
                                             (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_add_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_add_ps(__A, __B),
                                             (__v16sf)_mm512_setzero_ps());
}
# 2151 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_sub_ss(__m128 __W, __mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_subss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_sub_ss(__mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_subss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 2186 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_sub_sd(__m128d __W, __mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_subsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_sub_sd(__mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_subsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 2222 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sub_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_sub_pd(__A, __B),
                                              (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sub_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_sub_pd(__A, __B),
                                              (__v8df)_mm512_setzero_pd());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sub_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_sub_ps(__A, __B),
                                             (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sub_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_sub_ps(__A, __B),
                                             (__v16sf)_mm512_setzero_ps());
}
# 2286 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_mul_ss(__m128 __W, __mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_mulss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_mul_ss(__mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_mulss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 2321 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_mul_sd(__m128d __W, __mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_mulsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_mul_sd(__mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_mulsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 2357 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mul_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_mul_pd(__A, __B),
                                              (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mul_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_mul_pd(__A, __B),
                                              (__v8df)_mm512_setzero_pd());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mul_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_mul_ps(__A, __B),
                                             (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mul_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_mul_ps(__A, __B),
                                             (__v16sf)_mm512_setzero_ps());
}
# 2421 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_div_ss(__m128 __W, __mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_divss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_div_ss(__mmask8 __U,__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_divss_round_mask ((__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 2457 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_div_sd(__m128d __W, __mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_divsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_div_sd(__mmask8 __U,__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_divsd_round_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 2493 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_div_pd(__m512d __a, __m512d __b)
{
  return (__m512d)((__v8df)__a/(__v8df)__b);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_div_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_div_pd(__A, __B),
                                              (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_div_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_div_pd(__A, __B),
                                              (__v8df)_mm512_setzero_pd());
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_div_ps(__m512 __a, __m512 __b)
{
  return (__m512)((__v16sf)__a/(__v16sf)__b);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_div_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_div_ps(__A, __B),
                                             (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_div_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_div_ps(__A, __B),
                                             (__v16sf)_mm512_setzero_ps());
}
# 2715 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmadd_pd(__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,
                                                    (__v8df) __B,
                                                    (__v8df) __C,
                                                    (__mmask8) -1,
                                                    0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,
                                                    (__v8df) __B,
                                                    (__v8df) __C,
                                                    (__mmask8) __U,
                                                    0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask3 ((__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_maskz ((__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmsub_pd(__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,
                                                    (__v8df) __B,
                                                    -(__v8df) __C,
                                                    (__mmask8) -1,
                                                    0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,
                                                    (__v8df) __B,
                                                    -(__v8df) __C,
                                                    (__mmask8) __U,
                                                    0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_maskz ((__v8df) __A,
                                                     (__v8df) __B,
                                                     -(__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fnmadd_pd(__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask (-(__v8df) __A,
                                                    (__v8df) __B,
                                                    (__v8df) __C,
                                                    (__mmask8) -1,
                                                    0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fnmadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask3 (-(__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fnmadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_maskz (-(__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fnmsub_pd(__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_mask (-(__v8df) __A,
                                                    (__v8df) __B,
                                                    -(__v8df) __C,
                                                    (__mmask8) -1,
                                                    0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fnmsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddpd512_maskz (-(__v8df) __A,
                                                     (__v8df) __B,
                                                     -(__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}
# 2919 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmadd_ps(__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,
                                                   (__v16sf) __B,
                                                   (__v16sf) __C,
                                                   (__mmask16) -1,
                                                   0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,
                                                   (__v16sf) __B,
                                                   (__v16sf) __C,
                                                   (__mmask16) __U,
                                                   0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask3 ((__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_maskz ((__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmsub_ps(__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,
                                                   (__v16sf) __B,
                                                   -(__v16sf) __C,
                                                   (__mmask16) -1,
                                                   0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,
                                                   (__v16sf) __B,
                                                   -(__v16sf) __C,
                                                   (__mmask16) __U,
                                                   0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_maskz ((__v16sf) __A,
                                                    (__v16sf) __B,
                                                    -(__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fnmadd_ps(__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask (-(__v16sf) __A,
                                                   (__v16sf) __B,
                                                   (__v16sf) __C,
                                                   (__mmask16) -1,
                                                   0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fnmadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask3 (-(__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fnmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_maskz (-(__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fnmsub_ps(__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_mask (-(__v16sf) __A,
                                                   (__v16sf) __B,
                                                   -(__v16sf) __C,
                                                   (__mmask16) -1,
                                                   0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fnmsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddps512_maskz (-(__v16sf) __A,
                                                    (__v16sf) __B,
                                                    -(__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}
# 3088 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmaddsub_pd(__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask ((__v8df) __A,
                                                       (__v8df) __B,
                                                       (__v8df) __C,
                                                       (__mmask8) -1,
                                                       0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmaddsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask ((__v8df) __A,
                                                       (__v8df) __B,
                                                       (__v8df) __C,
                                                       (__mmask8) __U,
                                                       0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmaddsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask3 ((__v8df) __A,
                                                        (__v8df) __B,
                                                        (__v8df) __C,
                                                        (__mmask8) __U,
                                                        0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmaddsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_maskz ((__v8df) __A,
                                                        (__v8df) __B,
                                                        (__v8df) __C,
                                                        (__mmask8) __U,
                                                        0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmsubadd_pd(__m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask ((__v8df) __A,
                                                       (__v8df) __B,
                                                       -(__v8df) __C,
                                                       (__mmask8) -1,
                                                       0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmsubadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_mask ((__v8df) __A,
                                                       (__v8df) __B,
                                                       -(__v8df) __C,
                                                       (__mmask8) __U,
                                                       0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmsubadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfmaddsubpd512_maskz ((__v8df) __A,
                                                        (__v8df) __B,
                                                        -(__v8df) __C,
                                                        (__mmask8) __U,
                                                        0x04);
}
# 3207 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmaddsub_ps(__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask ((__v16sf) __A,
                                                      (__v16sf) __B,
                                                      (__v16sf) __C,
                                                      (__mmask16) -1,
                                                      0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmaddsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask ((__v16sf) __A,
                                                      (__v16sf) __B,
                                                      (__v16sf) __C,
                                                      (__mmask16) __U,
                                                      0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmaddsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask3 ((__v16sf) __A,
                                                       (__v16sf) __B,
                                                       (__v16sf) __C,
                                                       (__mmask16) __U,
                                                       0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmaddsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_maskz ((__v16sf) __A,
                                                       (__v16sf) __B,
                                                       (__v16sf) __C,
                                                       (__mmask16) __U,
                                                       0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_fmsubadd_ps(__m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask ((__v16sf) __A,
                                                      (__v16sf) __B,
                                                      -(__v16sf) __C,
                                                      (__mmask16) -1,
                                                      0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fmsubadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_mask ((__v16sf) __A,
                                                      (__v16sf) __B,
                                                      -(__v16sf) __C,
                                                      (__mmask16) __U,
                                                      0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_fmsubadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfmaddsubps512_maskz ((__v16sf) __A,
                                                       (__v16sf) __B,
                                                       -(__v16sf) __C,
                                                       (__mmask16) __U,
                                                       0x04);
}
# 3284 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmsubpd512_mask3 ((__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}
# 3301 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmsubps512_mask3 ((__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}
# 3318 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmsubadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfmsubaddpd512_mask3 ((__v8df) __A,
                                                        (__v8df) __B,
                                                        (__v8df) __C,
                                                        (__mmask8) __U,
                                                        0x04);
}
# 3335 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fmsubadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfmsubaddps512_mask3 ((__v16sf) __A,
                                                       (__v16sf) __B,
                                                       (__v16sf) __C,
                                                       (__mmask16) __U,
                                                       0x04);
}
# 3352 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fnmadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfnmaddpd512_mask ((__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}
# 3369 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fnmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfnmaddps512_mask ((__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}
# 3393 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fnmsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)
{
  return (__m512d) __builtin_ia32_vfnmsubpd512_mask ((__v8df) __A,
                                                     (__v8df) __B,
                                                     (__v8df) __C,
                                                     (__mmask8) __U,
                                                     0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fnmsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)
{
  return (__m512d) __builtin_ia32_vfnmsubpd512_mask3 ((__v8df) __A,
                                                      (__v8df) __B,
                                                      (__v8df) __C,
                                                      (__mmask8) __U,
                                                      0x04);
}
# 3427 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_fnmsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)
{
  return (__m512) __builtin_ia32_vfnmsubps512_mask ((__v16sf) __A,
                                                    (__v16sf) __B,
                                                    (__v16sf) __C,
                                                    (__mmask16) __U,
                                                    0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask3_fnmsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)
{
  return (__m512) __builtin_ia32_vfnmsubps512_mask3 ((__v16sf) __A,
                                                     (__v16sf) __B,
                                                     (__v16sf) __C,
                                                     (__mmask16) __U,
                                                     0x04);
}





static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutex2var_epi32(__m512i __A, __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2vard512_mask ((__v16si) __I
                                                                 ,
                                                       (__v16si) __A,
                                                       (__v16si) __B,
                                                       (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutex2var_epi32 (__m512i __A, __mmask16 __U,
                                __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2vard512_mask ((__v16si) __I
                                                                  ,
                                                        (__v16si) __A,
                                                        (__v16si) __B,
                                                        (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutex2var_epi32 (__mmask16 __U, __m512i __A,
                                 __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2vard512_maskz ((__v16si) __I
                                                                  ,
                                                        (__v16si) __A,
                                                        (__v16si) __B,
                                                        (__mmask16) __U);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutex2var_epi64(__m512i __A, __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varq512_mask ((__v8di) __I
                                                                 ,
                                                       (__v8di) __A,
                                                       (__v8di) __B,
                                                       (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutex2var_epi64 (__m512i __A, __mmask8 __U, __m512i __I,
                                __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varq512_mask ((__v8di) __I
                                                                 ,
                                                       (__v8di) __A,
                                                       (__v8di) __B,
                                                       (__mmask8) __U);
}


static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutex2var_epi64 (__mmask8 __U, __m512i __A,
         __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varq512_maskz ((__v8di) __I
                                                                  ,
                                                        (__v8di) __A,
                                                        (__v8di) __B,
                                                        (__mmask8) __U);
}
# 3607 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_blend_pd(__mmask8 __U, __m512d __A, __m512d __W)
{
  return (__m512d) __builtin_ia32_selectpd_512 ((__mmask8) __U,
                 (__v8df) __W,
                 (__v8df) __A);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_blend_ps(__mmask16 __U, __m512 __A, __m512 __W)
{
  return (__m512) __builtin_ia32_selectps_512 ((__mmask16) __U,
                (__v16sf) __W,
                (__v16sf) __A);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_blend_epi64(__mmask8 __U, __m512i __A, __m512i __W)
{
  return (__m512i) __builtin_ia32_selectq_512 ((__mmask8) __U,
                (__v8di) __W,
                (__v8di) __A);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_blend_epi32(__mmask16 __U, __m512i __A, __m512i __W)
{
  return (__m512i) __builtin_ia32_selectd_512 ((__mmask16) __U,
                (__v16si) __W,
                (__v16si) __A);
}
# 3769 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvttps_epu32(__m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2udq512_mask ((__v16sf) __A,
                  (__v16si)
                  _mm512_setzero_si512 (),
                  (__mmask16) -1,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvttps_epu32 (__m512i __W, __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2udq512_mask ((__v16sf) __A,
                   (__v16si) __W,
                   (__mmask16) __U,
                   0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvttps_epu32 (__mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2udq512_mask ((__v16sf) __A,
                   (__v16si) _mm512_setzero_si512 (),
                   (__mmask16) __U,
                   0x04);
}
# 3827 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu32_ps (__m512i __A)
{
  return (__m512) __builtin_ia32_cvtudq2ps512_mask ((__v16si) __A,
                 (__v16sf) _mm512_undefined_ps (),
                 (__mmask16) -1,
                 0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu32_ps (__m512 __W, __mmask16 __U, __m512i __A)
{
  return (__m512) __builtin_ia32_cvtudq2ps512_mask ((__v16si) __A,
                 (__v16sf) __W,
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu32_ps (__mmask16 __U, __m512i __A)
{
  return (__m512) __builtin_ia32_cvtudq2ps512_mask ((__v16si) __A,
                 (__v16sf) _mm512_setzero_ps (),
                 (__mmask16) __U,
                 0x04);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi32_pd(__m256i __A)
{
  return (__m512d)__builtin_convertvector((__v8si)__A, __v8df);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_pd (__m512d __W, __mmask8 __U, __m256i __A)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8) __U,
                                              (__v8df)_mm512_cvtepi32_pd(__A),
                                              (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi32_pd (__mmask8 __U, __m256i __A)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8) __U,
                                              (__v8df)_mm512_cvtepi32_pd(__A),
                                              (__v8df)_mm512_setzero_pd());
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi32lo_pd(__m512i __A)
{
  return (__m512d) _mm512_cvtepi32_pd(_mm512_castsi512_si256(__A));
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32lo_pd(__m512d __W, __mmask8 __U,__m512i __A)
{
  return (__m512d) _mm512_mask_cvtepi32_pd(__W, __U, _mm512_castsi512_si256(__A));
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi32_ps (__m512i __A)
{
  return (__m512) __builtin_ia32_cvtdq2ps512_mask ((__v16si) __A,
                (__v16sf) _mm512_undefined_ps (),
                (__mmask16) -1,
                0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_ps (__m512 __W, __mmask16 __U, __m512i __A)
{
  return (__m512) __builtin_ia32_cvtdq2ps512_mask ((__v16si) __A,
                (__v16sf) __W,
                (__mmask16) __U,
                0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi32_ps (__mmask16 __U, __m512i __A)
{
  return (__m512) __builtin_ia32_cvtdq2ps512_mask ((__v16si) __A,
                (__v16sf) _mm512_setzero_ps (),
                (__mmask16) __U,
                0x04);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu32_pd(__m256i __A)
{
  return (__m512d)__builtin_convertvector((__v8su)__A, __v8df);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu32_pd (__m512d __W, __mmask8 __U, __m256i __A)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8) __U,
                                              (__v8df)_mm512_cvtepu32_pd(__A),
                                              (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu32_pd (__mmask8 __U, __m256i __A)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8) __U,
                                              (__v8df)_mm512_cvtepu32_pd(__A),
                                              (__v8df)_mm512_setzero_pd());
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu32lo_pd(__m512i __A)
{
  return (__m512d) _mm512_cvtepu32_pd(_mm512_castsi512_si256(__A));
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu32lo_pd(__m512d __W, __mmask8 __U,__m512i __A)
{
  return (__m512d) _mm512_mask_cvtepu32_pd(__W, __U, _mm512_castsi512_si256(__A));
}
# 3964 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtpd_ps (__m512d __A)
{
  return (__m256) __builtin_ia32_cvtpd2ps512_mask ((__v8df) __A,
                (__v8sf) _mm256_undefined_ps (),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtpd_ps (__m256 __W, __mmask8 __U, __m512d __A)
{
  return (__m256) __builtin_ia32_cvtpd2ps512_mask ((__v8df) __A,
                (__v8sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtpd_ps (__mmask8 __U, __m512d __A)
{
  return (__m256) __builtin_ia32_cvtpd2ps512_mask ((__v8df) __A,
                (__v8sf) _mm256_setzero_ps (),
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtpd_pslo (__m512d __A)
{
  return (__m512) __builtin_shufflevector((__v8sf) _mm512_cvtpd_ps(__A),
                (__v8sf) _mm256_setzero_ps (),
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtpd_pslo (__m512 __W, __mmask8 __U,__m512d __A)
{
  return (__m512) __builtin_shufflevector (
                (__v8sf) _mm512_mask_cvtpd_ps (_mm512_castps512_ps256(__W),
                                               __U, __A),
                (__v8sf) _mm256_setzero_ps (),
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
}
# 4055 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtph_ps(__m256i __A)
{
  return (__m512) __builtin_ia32_vcvtph2ps512_mask ((__v16hi) __A,
                (__v16sf)
                _mm512_setzero_ps (),
                (__mmask16) -1,
                0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtph_ps (__m512 __W, __mmask16 __U, __m256i __A)
{
  return (__m512) __builtin_ia32_vcvtph2ps512_mask ((__v16hi) __A,
                 (__v16sf) __W,
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtph_ps (__mmask16 __U, __m256i __A)
{
  return (__m512) __builtin_ia32_vcvtph2ps512_mask ((__v16hi) __A,
                 (__v16sf) _mm512_setzero_ps (),
                 (__mmask16) __U,
                 0x04);
}
# 4098 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvttpd_epi32(__m512d __a)
{
  return (__m256i)__builtin_ia32_cvttpd2dq512_mask((__v8df) __a,
                                                   (__v8si)_mm256_setzero_si256(),
                                                   (__mmask8) -1,
                                                    0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvttpd_epi32 (__m256i __W, __mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2dq512_mask ((__v8df) __A,
                  (__v8si) __W,
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvttpd_epi32 (__mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2dq512_mask ((__v8df) __A,
                  (__v8si) _mm256_setzero_si256 (),
                  (__mmask8) __U,
                  0x04);
}
# 4140 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvttps_epi32(__m512 __a)
{
  return (__m512i)
    __builtin_ia32_cvttps2dq512_mask((__v16sf) __a,
                                     (__v16si) _mm512_setzero_si512 (),
                                     (__mmask16) -1, 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvttps_epi32 (__m512i __W, __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2dq512_mask ((__v16sf) __A,
                  (__v16si) __W,
                  (__mmask16) __U,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvttps_epi32 (__mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvttps2dq512_mask ((__v16sf) __A,
                  (__v16si) _mm512_setzero_si512 (),
                  (__mmask16) __U,
                  0x04);
}
# 4182 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtps_epi32 (__m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2dq512_mask ((__v16sf) __A,
                 (__v16si) _mm512_undefined_epi32 (),
                 (__mmask16) -1,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtps_epi32 (__m512i __W, __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2dq512_mask ((__v16sf) __A,
                 (__v16si) __W,
                 (__mmask16) __U,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtps_epi32 (__mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2dq512_mask ((__v16sf) __A,
                 (__v16si)
                 _mm512_setzero_si512 (),
                 (__mmask16) __U,
                 0x04);
}
# 4225 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtpd_epi32 (__m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2dq512_mask ((__v8df) __A,
                 (__v8si)
                 _mm256_undefined_si256 (),
                 (__mmask8) -1,
                 0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtpd_epi32 (__m256i __W, __mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2dq512_mask ((__v8df) __A,
                 (__v8si) __W,
                 (__mmask8) __U,
                 0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtpd_epi32 (__mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2dq512_mask ((__v8df) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U,
                 0x04);
}
# 4269 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtps_epu32 ( __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2udq512_mask ((__v16sf) __A, (__v16si) _mm512_undefined_epi32 (), (__mmask16) -1, 0x04);}






static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtps_epu32 (__m512i __W, __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2udq512_mask ((__v16sf) __A,
                  (__v16si) __W,
                  (__mmask16) __U,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtps_epu32 ( __mmask16 __U, __m512 __A)
{
  return (__m512i) __builtin_ia32_cvtps2udq512_mask ((__v16sf) __A,
                  (__v16si)
                  _mm512_setzero_si512 (),
                  (__mmask16) __U ,
                  0x04);
}
# 4313 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtpd_epu32 (__m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2udq512_mask ((__v8df) __A,
                  (__v8si)
                  _mm256_undefined_si256 (),
                  (__mmask8) -1,
                  0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtpd_epu32 (__m256i __W, __mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2udq512_mask ((__v8df) __A,
                  (__v8si) __W,
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtpd_epu32 (__mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvtpd2udq512_mask ((__v8df) __A,
                  (__v8si)
                  _mm256_setzero_si256 (),
                  (__mmask8) __U,
                  0x04);
}

static __inline__ double __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtsd_f64(__m512d __a)
{
  return __a[0];
}

static __inline__ float __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtss_f32(__m512 __a)
{
  return __a[0];
}



static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpackhi_pd(__m512d __a, __m512d __b)
{
  return (__m512d)__builtin_shufflevector((__v8df)__a, (__v8df)__b,
                                          1, 9, 1+2, 9+2, 1+4, 9+4, 1+6, 9+6);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpackhi_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8) __U,
                                           (__v8df)_mm512_unpackhi_pd(__A, __B),
                                           (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpackhi_pd(__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8) __U,
                                           (__v8df)_mm512_unpackhi_pd(__A, __B),
                                           (__v8df)_mm512_setzero_pd());
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpacklo_pd(__m512d __a, __m512d __b)
{
  return (__m512d)__builtin_shufflevector((__v8df)__a, (__v8df)__b,
                                          0, 8, 0+2, 8+2, 0+4, 8+4, 0+6, 8+6);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpacklo_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8) __U,
                                           (__v8df)_mm512_unpacklo_pd(__A, __B),
                                           (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpacklo_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8) __U,
                                           (__v8df)_mm512_unpacklo_pd(__A, __B),
                                           (__v8df)_mm512_setzero_pd());
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpackhi_ps(__m512 __a, __m512 __b)
{
  return (__m512)__builtin_shufflevector((__v16sf)__a, (__v16sf)__b,
                                         2, 18, 3, 19,
                                         2+4, 18+4, 3+4, 19+4,
                                         2+8, 18+8, 3+8, 19+8,
                                         2+12, 18+12, 3+12, 19+12);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpackhi_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16) __U,
                                          (__v16sf)_mm512_unpackhi_ps(__A, __B),
                                          (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpackhi_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16) __U,
                                          (__v16sf)_mm512_unpackhi_ps(__A, __B),
                                          (__v16sf)_mm512_setzero_ps());
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpacklo_ps(__m512 __a, __m512 __b)
{
  return (__m512)__builtin_shufflevector((__v16sf)__a, (__v16sf)__b,
                                         0, 16, 1, 17,
                                         0+4, 16+4, 1+4, 17+4,
                                         0+8, 16+8, 1+8, 17+8,
                                         0+12, 16+12, 1+12, 17+12);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpacklo_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16) __U,
                                          (__v16sf)_mm512_unpacklo_ps(__A, __B),
                                          (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpacklo_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16) __U,
                                          (__v16sf)_mm512_unpacklo_ps(__A, __B),
                                          (__v16sf)_mm512_setzero_ps());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpackhi_epi32(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_shufflevector((__v16si)__A, (__v16si)__B,
                                          2, 18, 3, 19,
                                          2+4, 18+4, 3+4, 19+4,
                                          2+8, 18+8, 3+8, 19+8,
                                          2+12, 18+12, 3+12, 19+12);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpackhi_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16) __U,
                                       (__v16si)_mm512_unpackhi_epi32(__A, __B),
                                       (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpackhi_epi32(__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16) __U,
                                       (__v16si)_mm512_unpackhi_epi32(__A, __B),
                                       (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpacklo_epi32(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_shufflevector((__v16si)__A, (__v16si)__B,
                                          0, 16, 1, 17,
                                          0+4, 16+4, 1+4, 17+4,
                                          0+8, 16+8, 1+8, 17+8,
                                          0+12, 16+12, 1+12, 17+12);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpacklo_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16) __U,
                                       (__v16si)_mm512_unpacklo_epi32(__A, __B),
                                       (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpacklo_epi32(__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16) __U,
                                       (__v16si)_mm512_unpacklo_epi32(__A, __B),
                                       (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpackhi_epi64(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_shufflevector((__v8di)__A, (__v8di)__B,
                                          1, 9, 1+2, 9+2, 1+4, 9+4, 1+6, 9+6);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpackhi_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8) __U,
                                        (__v8di)_mm512_unpackhi_epi64(__A, __B),
                                        (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpackhi_epi64(__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8) __U,
                                        (__v8di)_mm512_unpackhi_epi64(__A, __B),
                                        (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_unpacklo_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_shufflevector((__v8di)__A, (__v8di)__B,
                                          0, 8, 0+2, 8+2, 0+4, 8+4, 0+6, 8+6);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_unpacklo_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8) __U,
                                        (__v8di)_mm512_unpacklo_epi64(__A, __B),
                                        (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_unpacklo_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8) __U,
                                        (__v8di)_mm512_unpacklo_epi64(__A, __B),
                                        (__v8di)_mm512_setzero_si512());
}



static __inline __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_test_epi32_mask(__m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_ptestmd512 ((__v16si) __A,
            (__v16si) __B,
            (__mmask16) -1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_test_epi32_mask (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_ptestmd512 ((__v16si) __A,
                 (__v16si) __B, __U);
}

static __inline __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_test_epi64_mask(__m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq512 ((__v8di) __A,
                 (__v8di) __B,
                 (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_test_epi64_mask (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq512 ((__v8di) __A, (__v8di) __B, __U);
}




static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_loadu_si512 (void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqusi512_mask ((const int *) __P,
                  (__v16si)
                  _mm512_setzero_si512 (),
                  (__mmask16) -1);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_loadu_epi32 (__m512i __W, __mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqusi512_mask ((const int *) __P,
                  (__v16si) __W,
                  (__mmask16) __U);
}


static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_loadu_epi32(__mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqusi512_mask ((const int *)__P,
                                                     (__v16si)
                                                     _mm512_setzero_si512 (),
                                                     (__mmask16) __U);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_loadu_epi64 (__m512i __W, __mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqudi512_mask ((const long long *) __P,
                  (__v8di) __W,
                  (__mmask8) __U);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_loadu_epi64(__mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddqudi512_mask ((const long long *)__P,
                                                     (__v8di)
                                                     _mm512_setzero_si512 (),
                                                     (__mmask8) __U);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_loadu_ps (__m512 __W, __mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_loadups512_mask ((const float *) __P,
                   (__v16sf) __W,
                   (__mmask16) __U);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_loadu_ps(__mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_loadups512_mask ((const float *)__P,
                                                  (__v16sf)
                                                  _mm512_setzero_ps (),
                                                  (__mmask16) __U);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_loadu_pd (__m512d __W, __mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_loadupd512_mask ((const double *) __P,
                (__v8df) __W,
                (__mmask8) __U);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_loadu_pd(__mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_loadupd512_mask ((const double *)__P,
                                                   (__v8df)
                                                   _mm512_setzero_pd (),
                                                   (__mmask8) __U);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_loadu_pd(void const *__p)
{
  struct __loadu_pd {
    __m512d __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_pd*)__p)->__v;
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_loadu_ps(void const *__p)
{
  struct __loadu_ps {
    __m512 __v;
  } __attribute__((__packed__, __may_alias__));
  return ((struct __loadu_ps*)__p)->__v;
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_load_ps(void const *__p)
{
  return (__m512) __builtin_ia32_loadaps512_mask ((const __v16sf *)__p,
                                                  (__v16sf)
                                                  _mm512_setzero_ps (),
                                                  (__mmask16) -1);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_load_ps (__m512 __W, __mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_loadaps512_mask ((const __v16sf *) __P,
                   (__v16sf) __W,
                   (__mmask16) __U);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_load_ps(__mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_loadaps512_mask ((const __v16sf *)__P,
                                                  (__v16sf)
                                                  _mm512_setzero_ps (),
                                                  (__mmask16) __U);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_load_pd(void const *__p)
{
  return (__m512d) __builtin_ia32_loadapd512_mask ((const __v8df *)__p,
                                                   (__v8df)
                                                   _mm512_setzero_pd (),
                                                   (__mmask8) -1);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_load_pd (__m512d __W, __mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_loadapd512_mask ((const __v8df *) __P,
                          (__v8df) __W,
                          (__mmask8) __U);
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_load_pd(__mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_loadapd512_mask ((const __v8df *)__P,
                                                   (__v8df)
                                                   _mm512_setzero_pd (),
                                                   (__mmask8) __U);
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_load_si512 (void const *__P)
{
  return *(__m512i *) __P;
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_load_epi32 (void const *__P)
{
  return *(__m512i *) __P;
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_load_epi64 (void const *__P)
{
  return *(__m512i *) __P;
}



static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_storeu_epi64(void *__P, __mmask8 __U, __m512i __A)
{
  __builtin_ia32_storedqudi512_mask ((long long *)__P, (__v8di) __A,
                                     (__mmask8) __U);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_storeu_si512 (void *__P, __m512i __A)
{
  __builtin_ia32_storedqusi512_mask ((int *) __P, (__v16si) __A,
            (__mmask16) -1);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_storeu_epi32(void *__P, __mmask16 __U, __m512i __A)
{
  __builtin_ia32_storedqusi512_mask ((int *)__P, (__v16si) __A,
                                     (__mmask16) __U);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_storeu_pd(void *__P, __mmask8 __U, __m512d __A)
{
  __builtin_ia32_storeupd512_mask ((double *)__P, (__v8df) __A, (__mmask8) __U);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_storeu_pd(void *__P, __m512d __A)
{
  __builtin_ia32_storeupd512_mask((double *)__P, (__v8df)__A, (__mmask8)-1);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_storeu_ps(void *__P, __mmask16 __U, __m512 __A)
{
  __builtin_ia32_storeups512_mask ((float *)__P, (__v16sf) __A,
                                   (__mmask16) __U);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_storeu_ps(void *__P, __m512 __A)
{
  __builtin_ia32_storeups512_mask((float *)__P, (__v16sf)__A, (__mmask16)-1);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_store_pd(void *__P, __mmask8 __U, __m512d __A)
{
  __builtin_ia32_storeapd512_mask ((__v8df *)__P, (__v8df) __A, (__mmask8) __U);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_store_pd(void *__P, __m512d __A)
{
  *(__m512d*)__P = __A;
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_store_ps(void *__P, __mmask16 __U, __m512 __A)
{
  __builtin_ia32_storeaps512_mask ((__v16sf *)__P, (__v16sf) __A,
                                   (__mmask16) __U);
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_store_ps(void *__P, __m512 __A)
{
  *(__m512*)__P = __A;
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_store_si512 (void *__P, __m512i __A)
{
  *(__m512i *) __P = __A;
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_store_epi32 (void *__P, __m512i __A)
{
  *(__m512i *) __P = __A;
}

static __inline void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_store_epi64 (void *__P, __m512i __A)
{
  *(__m512i *) __P = __A;
}



static __inline __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_knot(__mmask16 __M)
{
  return __builtin_ia32_knothi(__M);
}



static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpeq_epi32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_pcmpeqd512_mask((__v16si)__a, (__v16si)__b,
                                                   (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpeq_epi32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_pcmpeqd512_mask((__v16si)__a, (__v16si)__b,
                                                   __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpeq_epu32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 0,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpeq_epu32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 0,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpeq_epi64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqq512_mask((__v8di)__a, (__v8di)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpeq_epi64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqq512_mask((__v8di)__a, (__v8di)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpeq_epu64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 0,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpeq_epu64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 0,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpge_epi32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 5,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpge_epi32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 5,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpge_epu32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 5,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpge_epu32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 5,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpge_epi64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 5,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpge_epi64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 5,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpge_epu64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 5,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpge_epu64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 5,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpgt_epi32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_pcmpgtd512_mask((__v16si)__a, (__v16si)__b,
                                                   (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpgt_epi32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_pcmpgtd512_mask((__v16si)__a, (__v16si)__b,
                                                   __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpgt_epu32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 6,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpgt_epu32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 6,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpgt_epi64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtq512_mask((__v8di)__a, (__v8di)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpgt_epi64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtq512_mask((__v8di)__a, (__v8di)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpgt_epu64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 6,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpgt_epu64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 6,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmple_epi32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 2,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmple_epi32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 2,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmple_epu32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 2,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmple_epu32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 2,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmple_epi64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 2,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmple_epi64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 2,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmple_epu64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 2,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmple_epu64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 2,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmplt_epi32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 1,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmplt_epi32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 1,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmplt_epu32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 1,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmplt_epu32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 1,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmplt_epi64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 1,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmplt_epi64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 1,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmplt_epu64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 1,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmplt_epu64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 1,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpneq_epi32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 4,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpneq_epi32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__a, (__v16si)__b, 4,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpneq_epu32_mask(__m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 4,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpneq_epu32_mask(__mmask16 __u, __m512i __a, __m512i __b) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__a, (__v16si)__b, 4,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpneq_epi64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 4,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpneq_epi64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__a, (__v8di)__b, 4,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cmpneq_epu64_mask(__m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 4,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cmpneq_epu64_mask(__mmask8 __u, __m512i __a, __m512i __b) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__a, (__v8di)__b, 4,
                                                __u);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi8_epi32(__m128i __A)
{


  return (__m512i)__builtin_convertvector((__v16qs)__A, __v16si);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi8_epi32(__m512i __W, __mmask16 __U, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                             (__v16si)_mm512_cvtepi8_epi32(__A),
                                             (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi8_epi32(__mmask16 __U, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                             (__v16si)_mm512_cvtepi8_epi32(__A),
                                             (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi8_epi64(__m128i __A)
{


  return (__m512i)__builtin_convertvector(__builtin_shufflevector((__v16qs)__A, (__v16qs)__A, 0, 1, 2, 3, 4, 5, 6, 7), __v8di);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi8_epi64(__m512i __W, __mmask8 __U, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_cvtepi8_epi64(__A),
                                             (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi8_epi64(__mmask8 __U, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_cvtepi8_epi64(__A),
                                             (__v8di)_mm512_setzero_si512 ());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi32_epi64(__m256i __X)
{
  return (__m512i)__builtin_convertvector((__v8si)__X, __v8di);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_epi64(__m512i __W, __mmask8 __U, __m256i __X)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_cvtepi32_epi64(__X),
                                             (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi32_epi64(__mmask8 __U, __m256i __X)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_cvtepi32_epi64(__X),
                                             (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi16_epi32(__m256i __A)
{
  return (__m512i)__builtin_convertvector((__v16hi)__A, __v16si);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi16_epi32(__m512i __W, __mmask16 __U, __m256i __A)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                            (__v16si)_mm512_cvtepi16_epi32(__A),
                                            (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi16_epi32(__mmask16 __U, __m256i __A)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                            (__v16si)_mm512_cvtepi16_epi32(__A),
                                            (__v16si)_mm512_setzero_si512 ());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi16_epi64(__m128i __A)
{
  return (__m512i)__builtin_convertvector((__v8hi)__A, __v8di);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi16_epi64(__m512i __W, __mmask8 __U, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_cvtepi16_epi64(__A),
                                             (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi16_epi64(__mmask8 __U, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_cvtepi16_epi64(__A),
                                             (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu8_epi32(__m128i __A)
{
  return (__m512i)__builtin_convertvector((__v16qu)__A, __v16si);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu8_epi32(__m512i __W, __mmask16 __U, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                             (__v16si)_mm512_cvtepu8_epi32(__A),
                                             (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu8_epi32(__mmask16 __U, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                             (__v16si)_mm512_cvtepu8_epi32(__A),
                                             (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu8_epi64(__m128i __A)
{
  return (__m512i)__builtin_convertvector(__builtin_shufflevector((__v16qu)__A, (__v16qu)__A, 0, 1, 2, 3, 4, 5, 6, 7), __v8di);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu8_epi64(__m512i __W, __mmask8 __U, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_cvtepu8_epi64(__A),
                                             (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu8_epi64(__mmask8 __U, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_cvtepu8_epi64(__A),
                                             (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu32_epi64(__m256i __X)
{
  return (__m512i)__builtin_convertvector((__v8su)__X, __v8di);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu32_epi64(__m512i __W, __mmask8 __U, __m256i __X)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_cvtepu32_epi64(__X),
                                             (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu32_epi64(__mmask8 __U, __m256i __X)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_cvtepu32_epi64(__X),
                                             (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu16_epi32(__m256i __A)
{
  return (__m512i)__builtin_convertvector((__v16hu)__A, __v16si);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu16_epi32(__m512i __W, __mmask16 __U, __m256i __A)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                            (__v16si)_mm512_cvtepu16_epi32(__A),
                                            (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu16_epi32(__mmask16 __U, __m256i __A)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                            (__v16si)_mm512_cvtepu16_epi32(__A),
                                            (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepu16_epi64(__m128i __A)
{
  return (__m512i)__builtin_convertvector((__v8hu)__A, __v8di);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepu16_epi64(__m512i __W, __mmask8 __U, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_cvtepu16_epi64(__A),
                                             (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepu16_epi64(__mmask8 __U, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_cvtepu16_epi64(__A),
                                             (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rorv_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rorv_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si) __W,
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rorv_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rorv_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rorv_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di) __W,
              (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rorv_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prorvq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) __U);
}
# 5493 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rolv_epi32 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rolv_epi32 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si) __W,
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rolv_epi32 (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvd512_mask ((__v16si) __A,
              (__v16si) __B,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_rolv_epi64 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_rolv_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di) __W,
              (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_rolv_epi64 (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_prolvq512_mask ((__v8di) __A,
              (__v8di) __B,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) __U);
}
# 5580 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_slli_epi32(__m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_pslldi512((__v16si)__A, __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_slli_epi32(__m512i __W, __mmask16 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                         (__v16si)_mm512_slli_epi32(__A, __B),
                                         (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_slli_epi32(__mmask16 __U, __m512i __A, int __B) {
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                         (__v16si)_mm512_slli_epi32(__A, __B),
                                         (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_slli_epi64(__m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_psllqi512((__v8di)__A, __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_slli_epi64(__m512i __W, __mmask8 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                          (__v8di)_mm512_slli_epi64(__A, __B),
                                          (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_slli_epi64(__mmask8 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                          (__v8di)_mm512_slli_epi64(__A, __B),
                                          (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srli_epi32(__m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_psrldi512((__v16si)__A, __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srli_epi32(__m512i __W, __mmask16 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                         (__v16si)_mm512_srli_epi32(__A, __B),
                                         (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srli_epi32(__mmask16 __U, __m512i __A, int __B) {
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                         (__v16si)_mm512_srli_epi32(__A, __B),
                                         (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srli_epi64(__m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_psrlqi512((__v8di)__A, __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srli_epi64(__m512i __W, __mmask8 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                          (__v8di)_mm512_srli_epi64(__A, __B),
                                          (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srli_epi64(__mmask8 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                          (__v8di)_mm512_srli_epi64(__A, __B),
                                          (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_load_epi32 (__m512i __W, __mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_movdqa32load512_mask ((const __v16si *) __P,
              (__v16si) __W,
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_load_epi32 (__mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_movdqa32load512_mask ((const __v16si *) __P,
              (__v16si)
              _mm512_setzero_si512 (),
              (__mmask16) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_store_epi32 (void *__P, __mmask16 __U, __m512i __A)
{
  __builtin_ia32_movdqa32store512_mask ((__v16si *) __P, (__v16si) __A,
          (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mov_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectd_512 ((__mmask16) __U,
                 (__v16si) __A,
                 (__v16si) __W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mov_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectd_512 ((__mmask16) __U,
                 (__v16si) __A,
                 (__v16si) _mm512_setzero_si512 ());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mov_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectq_512 ((__mmask8) __U,
                 (__v8di) __A,
                 (__v8di) __W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mov_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectq_512 ((__mmask8) __U,
                 (__v8di) __A,
                 (__v8di) _mm512_setzero_si512 ());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_load_epi64 (__m512i __W, __mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_movdqa64load512_mask ((const __v8di *) __P,
              (__v8di) __W,
              (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_load_epi64 (__mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_movdqa64load512_mask ((const __v8di *) __P,
              (__v8di)
              _mm512_setzero_si512 (),
              (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_store_epi64 (void *__P, __mmask8 __U, __m512i __A)
{
  __builtin_ia32_movdqa64store512_mask ((__v8di *) __P, (__v8di) __A,
          (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_movedup_pd (__m512d __A)
{
  return (__m512d)__builtin_shufflevector((__v8df)__A, (__v8df)__A,
                                          0, 0, 2, 2, 4, 4, 6, 6);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_movedup_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_movedup_pd(__A),
                                              (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_movedup_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_movedup_pd(__A),
                                              (__v8df)_mm512_setzero_pd());
}
# 5934 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_getexp_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_getexpsd128_round_mask ((__v2df) __A,
                 (__v2df) __B, (__v2df) _mm_setzero_pd(), (__mmask8) -1, 0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_getexp_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_getexpsd128_round_mask ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) __W,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_getexp_sd (__mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_getexpsd128_round_mask ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) _mm_setzero_pd (),
          (__mmask8) __U,
          0x04);
}
# 5979 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_getexp_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_getexpss128_round_mask ((__v4sf) __A,
                (__v4sf) __B, (__v4sf) _mm_setzero_ps(), (__mmask8) -1, 0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_getexp_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_getexpss128_round_mask ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) __W,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_getexp_ss (__mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_getexpss128_round_mask ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) _mm_setzero_pd (),
          (__mmask8) __U,
          0x04);
}
# 6108 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kmov (__mmask16 __A)
{
  return __A;
}
# 6127 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask2_permutex2var_epi32 (__m512i __A, __m512i __I,
         __mmask16 __U, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermi2vard512_mask ((__v16si) __A,
                   (__v16si) __I
                             ,
                   (__v16si) __B,
                   (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sll_epi32(__m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_pslld512((__v16si) __A, (__v4si)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sll_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                          (__v16si)_mm512_sll_epi32(__A, __B),
                                          (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sll_epi32(__mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                          (__v16si)_mm512_sll_epi32(__A, __B),
                                          (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sll_epi64(__m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_psllq512((__v8di)__A, (__v2di)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sll_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_sll_epi64(__A, __B),
                                             (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sll_epi64(__mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                           (__v8di)_mm512_sll_epi64(__A, __B),
                                           (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sllv_epi32(__m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_psllv16si((__v16si)__X, (__v16si)__Y);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sllv_epi32(__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                           (__v16si)_mm512_sllv_epi32(__X, __Y),
                                           (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sllv_epi32(__mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                           (__v16si)_mm512_sllv_epi32(__X, __Y),
                                           (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sllv_epi64(__m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_psllv8di((__v8di)__X, (__v8di)__Y);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sllv_epi64(__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                            (__v8di)_mm512_sllv_epi64(__X, __Y),
                                            (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sllv_epi64(__mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                            (__v8di)_mm512_sllv_epi64(__X, __Y),
                                            (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sra_epi32(__m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_psrad512((__v16si) __A, (__v4si)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sra_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                          (__v16si)_mm512_sra_epi32(__A, __B),
                                          (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sra_epi32(__mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                          (__v16si)_mm512_sra_epi32(__A, __B),
                                          (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_sra_epi64(__m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_psraq512((__v8di)__A, (__v2di)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_sra_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                           (__v8di)_mm512_sra_epi64(__A, __B),
                                           (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_sra_epi64(__mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                           (__v8di)_mm512_sra_epi64(__A, __B),
                                           (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srav_epi32(__m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_psrav16si((__v16si)__X, (__v16si)__Y);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srav_epi32(__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                           (__v16si)_mm512_srav_epi32(__X, __Y),
                                           (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srav_epi32(__mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                           (__v16si)_mm512_srav_epi32(__X, __Y),
                                           (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srav_epi64(__m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_psrav8di((__v8di)__X, (__v8di)__Y);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srav_epi64(__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                            (__v8di)_mm512_srav_epi64(__X, __Y),
                                            (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srav_epi64(__mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                            (__v8di)_mm512_srav_epi64(__X, __Y),
                                            (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srl_epi32(__m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_psrld512((__v16si) __A, (__v4si)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srl_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                          (__v16si)_mm512_srl_epi32(__A, __B),
                                          (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srl_epi32(__mmask16 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                          (__v16si)_mm512_srl_epi32(__A, __B),
                                          (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srl_epi64(__m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_psrlq512((__v8di)__A, (__v2di)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srl_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                           (__v8di)_mm512_srl_epi64(__A, __B),
                                           (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srl_epi64(__mmask8 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                           (__v8di)_mm512_srl_epi64(__A, __B),
                                           (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srlv_epi32(__m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_psrlv16si((__v16si)__X, (__v16si)__Y);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srlv_epi32(__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                           (__v16si)_mm512_srlv_epi32(__X, __Y),
                                           (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srlv_epi32(__mmask16 __U, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U,
                                           (__v16si)_mm512_srlv_epi32(__X, __Y),
                                           (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srlv_epi64 (__m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_psrlv8di((__v8di)__X, (__v8di)__Y);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srlv_epi64(__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                            (__v8di)_mm512_srlv_epi64(__X, __Y),
                                            (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srlv_epi64(__mmask8 __U, __m512i __X, __m512i __Y)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                            (__v8di)_mm512_srlv_epi64(__X, __Y),
                                            (__v8di)_mm512_setzero_si512());
}
# 6452 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ unsigned __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtsd_u32 (__m128d __A)
{
  return (unsigned) __builtin_ia32_vcvtsd2usi32 ((__v2df) __A,
             0x04);
}






static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtsd_u64 (__m128d __A)
{
  return (unsigned long long) __builtin_ia32_vcvtsd2usi64 ((__v2df)
                 __A,
                 0x04);
}
# 6490 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ unsigned __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtss_u32 (__m128 __A)
{
  return (unsigned) __builtin_ia32_vcvtss2usi32 ((__v4sf) __A,
             0x04);
}






static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtss_u64 (__m128 __A)
{
  return (unsigned long long) __builtin_ia32_vcvtss2usi64 ((__v4sf)
                 __A,
                 0x04);
}
# 6517 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttsd_i32 (__m128d __A)
{
  return (int) __builtin_ia32_vcvttsd2si32 ((__v2df) __A,
              0x04);
}
# 6531 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttsd_i64 (__m128d __A)
{
  return (long long) __builtin_ia32_vcvttsd2si64 ((__v2df) __A,
              0x04);
}





static __inline__ unsigned __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttsd_u32 (__m128d __A)
{
  return (unsigned) __builtin_ia32_vcvttsd2usi32 ((__v2df) __A,
              0x04);
}






static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttsd_u64 (__m128d __A)
{
  return (unsigned long long) __builtin_ia32_vcvttsd2usi64 ((__v2df)
                  __A,
                  0x04);
}
# 6569 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttss_i32 (__m128 __A)
{
  return (int) __builtin_ia32_vcvttss2si32 ((__v4sf) __A,
              0x04);
}
# 6583 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttss_i64 (__m128 __A)
{
  return (long long) __builtin_ia32_vcvttss2si64 ((__v4sf) __A,
              0x04);
}





static __inline__ unsigned __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttss_u32 (__m128 __A)
{
  return (unsigned) __builtin_ia32_vcvttss2usi32 ((__v4sf) __A,
              0x04);
}






static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvttss_u64 (__m128 __A)
{
  return (unsigned long long) __builtin_ia32_vcvttss2usi64 ((__v4sf)
                  __A,
                  0x04);
}


static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask2_permutex2var_pd (__m512d __A, __m512i __I, __mmask8 __U,
            __m512d __B)
{
  return (__m512d) __builtin_ia32_vpermi2varpd512_mask ((__v8df) __A,
              (__v8di) __I
                        ,
              (__v8df) __B,
              (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask2_permutex2var_ps (__m512 __A, __m512i __I, __mmask16 __U,
            __m512 __B)
{
  return (__m512) __builtin_ia32_vpermi2varps512_mask ((__v16sf) __A,
                   (__v16si) __I
                             ,
                   (__v16sf) __B,
                   (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask2_permutex2var_epi64 (__m512i __A, __m512i __I,
         __mmask8 __U, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermi2varq512_mask ((__v8di) __A,
                   (__v8di) __I
                             ,
                   (__v8di) __B,
                   (__mmask8) __U);
}
# 6700 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutevar_pd(__m512d __A, __m512i __C)
{
  return (__m512d)__builtin_ia32_vpermilvarpd512((__v8df)__A, (__v8di)__C);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutevar_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512i __C)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                         (__v8df)_mm512_permutevar_pd(__A, __C),
                                         (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutevar_pd(__mmask8 __U, __m512d __A, __m512i __C)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                         (__v8df)_mm512_permutevar_pd(__A, __C),
                                         (__v8df)_mm512_setzero_pd());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutevar_ps(__m512 __A, __m512i __C)
{
  return (__m512)__builtin_ia32_vpermilvarps512((__v16sf)__A, (__v16si)__C);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutevar_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512i __C)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                        (__v16sf)_mm512_permutevar_ps(__A, __C),
                                        (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutevar_ps(__mmask16 __U, __m512 __A, __m512i __C)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                        (__v16sf)_mm512_permutevar_ps(__A, __C),
                                        (__v16sf)_mm512_setzero_ps());
}

static __inline __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutex2var_pd(__m512d __A, __m512i __I, __m512d __B)
{
  return (__m512d) __builtin_ia32_vpermt2varpd512_mask ((__v8di) __I
                              ,
                    (__v8df) __A,
                    (__v8df) __B,
                    (__mmask8) -1);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutex2var_pd (__m512d __A, __mmask8 __U, __m512i __I, __m512d __B)
{
  return (__m512d) __builtin_ia32_vpermt2varpd512_mask ((__v8di) __I
                              ,
                    (__v8df) __A,
                    (__v8df) __B,
                    (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutex2var_pd (__mmask8 __U, __m512d __A, __m512i __I,
            __m512d __B)
{
  return (__m512d) __builtin_ia32_vpermt2varpd512_maskz ((__v8di) __I
                                                                   ,
                                                         (__v8df) __A,
                                                         (__v8df) __B,
                                                         (__mmask8) __U);
}

static __inline __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutex2var_ps(__m512 __A, __m512i __I, __m512 __B)
{
  return (__m512) __builtin_ia32_vpermt2varps512_mask ((__v16si) __I
                                                                   ,
                                                         (__v16sf) __A,
                                                         (__v16sf) __B,
                                                         (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutex2var_ps (__m512 __A, __mmask16 __U, __m512i __I, __m512 __B)
{
  return (__m512) __builtin_ia32_vpermt2varps512_mask ((__v16si) __I
                                                                   ,
                                                         (__v16sf) __A,
                                                         (__v16sf) __B,
                                                         (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutex2var_ps (__mmask16 __U, __m512 __A, __m512i __I,
            __m512 __B)
{
  return (__m512) __builtin_ia32_vpermt2varps512_maskz ((__v16si) __I
                                                                  ,
                                                        (__v16sf) __A,
                                                        (__v16sf) __B,
                                                        (__mmask16) __U);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_testn_epi32_mask (__m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmd512 ((__v16si) __A,
             (__v16si) __B,
             (__mmask16) -1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_testn_epi32_mask (__mmask16 __U, __m512i __A, __m512i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmd512 ((__v16si) __A,
             (__v16si) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_testn_epi64_mask (__m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq512 ((__v8di) __A,
            (__v8di) __B,
            (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_testn_epi64_mask (__mmask8 __U, __m512i __A, __m512i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq512 ((__v8di) __A,
            (__v8di) __B, __U);
}
# 6851 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvttpd_epu32 (__m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2udq512_mask ((__v8df) __A,
                  (__v8si)
                  _mm256_undefined_si256 (),
                  (__mmask8) -1,
                  0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvttpd_epu32 (__m256i __W, __mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2udq512_mask ((__v8df) __A,
                  (__v8si) __W,
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvttpd_epu32 (__mmask8 __U, __m512d __A)
{
  return (__m256i) __builtin_ia32_cvttpd2udq512_mask ((__v8df) __A,
                  (__v8si)
                  _mm256_setzero_si256 (),
                  (__mmask8) __U,
                  0x04);
}
# 6982 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_scalef_pd (__m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_scalefpd512_mask ((__v8df) __A,
                (__v8df) __B,
                (__v8df)
                _mm512_undefined_pd (),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_scalef_pd (__m512d __W, __mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_scalefpd512_mask ((__v8df) __A,
                (__v8df) __B,
                (__v8df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_scalef_pd (__mmask8 __U, __m512d __A, __m512d __B)
{
  return (__m512d) __builtin_ia32_scalefpd512_mask ((__v8df) __A,
                (__v8df) __B,
                (__v8df)
                _mm512_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 7032 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_scalef_ps (__m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_scalefps512_mask ((__v16sf) __A,
               (__v16sf) __B,
               (__v16sf)
               _mm512_undefined_ps (),
               (__mmask16) -1,
               0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_scalef_ps (__m512 __W, __mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_scalefps512_mask ((__v16sf) __A,
               (__v16sf) __B,
               (__v16sf) __W,
               (__mmask16) __U,
               0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_scalef_ps (__mmask16 __U, __m512 __A, __m512 __B)
{
  return (__m512) __builtin_ia32_scalefps512_mask ((__v16sf) __A,
               (__v16sf) __B,
               (__v16sf)
               _mm512_setzero_ps (),
               (__mmask16) __U,
               0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_scalef_sd (__m128d __A, __m128d __B)
{
  return (__m128d) __builtin_ia32_scalefsd_round_mask ((__v2df) __A,
              (__v2df)( __B), (__v2df) _mm_setzero_pd(),
              (__mmask8) -1,
              0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_scalef_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_scalefsd_round_mask ( (__v2df) __A,
                 (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_scalef_sd (__mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_scalefsd_round_mask ( (__v2df) __A,
                 (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 7117 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_scalef_ss (__m128 __A, __m128 __B)
{
  return (__m128) __builtin_ia32_scalefss_round_mask ((__v4sf) __A,
             (__v4sf)( __B), (__v4sf) _mm_setzero_ps(),
             (__mmask8) -1,
             0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_scalef_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_scalefss_round_mask ( (__v4sf) __A,
                (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_scalef_ss (__mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_scalefss_round_mask ( (__v4sf) __A,
                 (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}
# 7159 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srai_epi32(__m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_psradi512((__v16si)__A, __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srai_epi32(__m512i __W, __mmask16 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U, (__v16si)_mm512_srai_epi32(__A, __B), (__v16si)__W);


}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srai_epi32(__mmask16 __U, __m512i __A, int __B) {
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__U, (__v16si)_mm512_srai_epi32(__A, __B), (__v16si)_mm512_setzero_si512());


}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_srai_epi64(__m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_psraqi512((__v8di)__A, __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_srai_epi64(__m512i __W, __mmask8 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U, (__v8di)_mm512_srai_epi64(__A, __B), (__v8di)__W);


}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_srai_epi64(__mmask8 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U, (__v8di)_mm512_srai_epi64(__A, __B), (__v8di)_mm512_setzero_si512());


}
# 7332 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_sqrt_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_sqrtsd_round_mask ( (__v2df) __A,
                 (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U,
                0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_sqrt_sd (__mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_sqrtsd_round_mask ( (__v2df) __A,
                 (__v2df) __B,
                (__v2df) _mm_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 7370 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_sqrt_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_sqrtss_round_mask ( (__v4sf) __A,
                 (__v4sf) __B,
                (__v4sf) __W,
                (__mmask8) __U,
                0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_sqrt_ss (__mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_sqrtss_round_mask ( (__v4sf) __A,
                 (__v4sf) __B,
                (__v4sf) _mm_setzero_ps (),
                (__mmask8) __U,
                0x04);
}







static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcast_f32x4(__m128 __A)
{
  return (__m512)__builtin_shufflevector((__v4sf)__A, (__v4sf)__A,
                                         0, 1, 2, 3, 0, 1, 2, 3,
                                         0, 1, 2, 3, 0, 1, 2, 3);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcast_f32x4(__m512 __O, __mmask16 __M, __m128 __A)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__M,
                                           (__v16sf)_mm512_broadcast_f32x4(__A),
                                           (__v16sf)__O);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcast_f32x4(__mmask16 __M, __m128 __A)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__M,
                                           (__v16sf)_mm512_broadcast_f32x4(__A),
                                           (__v16sf)_mm512_setzero_ps());
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcast_f64x4(__m256d __A)
{
  return (__m512d)__builtin_shufflevector((__v4df)__A, (__v4df)__A,
                                          0, 1, 2, 3, 0, 1, 2, 3);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcast_f64x4(__m512d __O, __mmask8 __M, __m256d __A)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__M,
                                            (__v8df)_mm512_broadcast_f64x4(__A),
                                            (__v8df)__O);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcast_f64x4(__mmask8 __M, __m256d __A)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__M,
                                            (__v8df)_mm512_broadcast_f64x4(__A),
                                            (__v8df)_mm512_setzero_pd());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcast_i32x4(__m128i __A)
{
  return (__m512i)__builtin_shufflevector((__v4si)__A, (__v4si)__A,
                                          0, 1, 2, 3, 0, 1, 2, 3,
                                          0, 1, 2, 3, 0, 1, 2, 3);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcast_i32x4(__m512i __O, __mmask16 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__M,
                                           (__v16si)_mm512_broadcast_i32x4(__A),
                                           (__v16si)__O);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcast_i32x4(__mmask16 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask16)__M,
                                           (__v16si)_mm512_broadcast_i32x4(__A),
                                           (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_broadcast_i64x4(__m256i __A)
{
  return (__m512i)__builtin_shufflevector((__v4di)__A, (__v4di)__A,
                                          0, 1, 2, 3, 0, 1, 2, 3);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcast_i64x4(__m512i __O, __mmask8 __M, __m256i __A)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__M,
                                            (__v8di)_mm512_broadcast_i64x4(__A),
                                            (__v8di)__O);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcast_i64x4(__mmask8 __M, __m256i __A)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__M,
                                            (__v8di)_mm512_broadcast_i64x4(__A),
                                            (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcastsd_pd (__m512d __O, __mmask8 __M, __m128d __A)
{
  return (__m512d)__builtin_ia32_selectpd_512(__M,
                                              (__v8df) _mm512_broadcastsd_pd(__A),
                                              (__v8df) __O);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcastsd_pd (__mmask8 __M, __m128d __A)
{
  return (__m512d)__builtin_ia32_selectpd_512(__M,
                                              (__v8df) _mm512_broadcastsd_pd(__A),
                                              (__v8df) _mm512_setzero_pd());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_broadcastss_ps (__m512 __O, __mmask16 __M, __m128 __A)
{
  return (__m512)__builtin_ia32_selectps_512(__M,
                                             (__v16sf) _mm512_broadcastss_ps(__A),
                                             (__v16sf) __O);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_broadcastss_ps (__mmask16 __M, __m128 __A)
{
  return (__m512)__builtin_ia32_selectps_512(__M,
                                             (__v16sf) _mm512_broadcastss_ps(__A),
                                             (__v16sf) _mm512_setzero_ps());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtsepi32_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb512_mask ((__v16si) __A,
               (__v16qi) _mm_undefined_si128 (),
               (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi32_epi8 (__m128i __O, __mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb512_mask ((__v16si) __A,
               (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtsepi32_epi8 (__mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb512_mask ((__v16si) __A,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi32_storeu_epi8 (void * __P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovsdb512mem_mask ((__v16qi *) __P, (__v16si) __A, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtsepi32_epi16 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsdw512_mask ((__v16si) __A,
               (__v16hi) _mm256_undefined_si256 (),
               (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi32_epi16 (__m256i __O, __mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsdw512_mask ((__v16si) __A,
               (__v16hi) __O, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtsepi32_epi16 (__mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsdw512_mask ((__v16si) __A,
               (__v16hi) _mm256_setzero_si256 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi32_storeu_epi16 (void *__P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovsdw512mem_mask ((__v16hi*) __P, (__v16si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtsepi64_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb512_mask ((__v8di) __A,
               (__v16qi) _mm_undefined_si128 (),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi64_epi8 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb512_mask ((__v8di) __A,
               (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtsepi64_epi8 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb512_mask ((__v8di) __A,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovsqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtsepi64_epi32 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsqd512_mask ((__v8di) __A,
               (__v8si) _mm256_undefined_si256 (),
               (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi64_epi32 (__m256i __O, __mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsqd512_mask ((__v8di) __A,
               (__v8si) __O, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtsepi64_epi32 (__mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovsqd512_mask ((__v8di) __A,
               (__v8si) _mm256_setzero_si256 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi64_storeu_epi32 (void *__P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovsqd512mem_mask ((__v8si *) __P, (__v8di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtsepi64_epi16 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw512_mask ((__v8di) __A,
               (__v8hi) _mm_undefined_si128 (),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi64_epi16 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw512_mask ((__v8di) __A,
               (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtsepi64_epi16 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw512_mask ((__v8di) __A,
               (__v8hi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtsepi64_storeu_epi16 (void * __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovsqw512mem_mask ((__v8hi *) __P, (__v8di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtusepi32_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb512_mask ((__v16si) __A,
                (__v16qi) _mm_undefined_si128 (),
                (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi32_epi8 (__m128i __O, __mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb512_mask ((__v16si) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtusepi32_epi8 (__mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb512_mask ((__v16si) __A,
                (__v16qi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi32_storeu_epi8 (void * __P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovusdb512mem_mask ((__v16qi *) __P, (__v16si) __A, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtusepi32_epi16 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusdw512_mask ((__v16si) __A,
                (__v16hi) _mm256_undefined_si256 (),
                (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi32_epi16 (__m256i __O, __mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusdw512_mask ((__v16si) __A,
                (__v16hi) __O,
                __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtusepi32_epi16 (__mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusdw512_mask ((__v16si) __A,
                (__v16hi) _mm256_setzero_si256 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi32_storeu_epi16 (void *__P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovusdw512mem_mask ((__v16hi*) __P, (__v16si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtusepi64_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb512_mask ((__v8di) __A,
                (__v16qi) _mm_undefined_si128 (),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi64_epi8 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb512_mask ((__v8di) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtusepi64_epi8 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb512_mask ((__v8di) __A,
                (__v16qi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovusqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtusepi64_epi32 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusqd512_mask ((__v8di) __A,
                (__v8si) _mm256_undefined_si256 (),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi64_epi32 (__m256i __O, __mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusqd512_mask ((__v8di) __A,
                (__v8si) __O, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtusepi64_epi32 (__mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovusqd512_mask ((__v8di) __A,
                (__v8si) _mm256_setzero_si256 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi64_storeu_epi32 (void* __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovusqd512mem_mask ((__v8si*) __P, (__v8di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtusepi64_epi16 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw512_mask ((__v8di) __A,
                (__v8hi) _mm_undefined_si128 (),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi64_epi16 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw512_mask ((__v8di) __A,
                (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtusepi64_epi16 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw512_mask ((__v8di) __A,
                (__v8hi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtusepi64_storeu_epi16 (void *__P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovusqw512mem_mask ((__v8hi*) __P, (__v8di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi32_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovdb512_mask ((__v16si) __A,
              (__v16qi) _mm_undefined_si128 (),
              (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_epi8 (__m128i __O, __mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovdb512_mask ((__v16si) __A,
              (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi32_epi8 (__mmask16 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovdb512_mask ((__v16si) __A,
              (__v16qi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_storeu_epi8 (void * __P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovdb512mem_mask ((__v16qi *) __P, (__v16si) __A, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi32_epi16 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovdw512_mask ((__v16si) __A,
              (__v16hi) _mm256_undefined_si256 (),
              (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_epi16 (__m256i __O, __mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovdw512_mask ((__v16si) __A,
              (__v16hi) __O, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi32_epi16 (__mmask16 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovdw512_mask ((__v16si) __A,
              (__v16hi) _mm256_setzero_si256 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi32_storeu_epi16 (void * __P, __mmask16 __M, __m512i __A)
{
  __builtin_ia32_pmovdw512mem_mask ((__v16hi *) __P, (__v16si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi64_epi8 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqb512_mask ((__v8di) __A,
              (__v16qi) _mm_undefined_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi64_epi8 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqb512_mask ((__v8di) __A,
              (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi64_epi8 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqb512_mask ((__v8di) __A,
              (__v16qi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi64_storeu_epi8 (void * __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovqb512mem_mask ((__v16qi *) __P, (__v8di) __A, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi64_epi32 (__m512i __A)
{
  return (__m256i) __builtin_ia32_pmovqd512_mask ((__v8di) __A,
              (__v8si) _mm256_undefined_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi64_epi32 (__m256i __O, __mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovqd512_mask ((__v8di) __A,
              (__v8si) __O, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi64_epi32 (__mmask8 __M, __m512i __A)
{
  return (__m256i) __builtin_ia32_pmovqd512_mask ((__v8di) __A,
              (__v8si) _mm256_setzero_si256 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi64_storeu_epi32 (void* __P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovqd512mem_mask ((__v8si *) __P, (__v8di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtepi64_epi16 (__m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqw512_mask ((__v8di) __A,
              (__v8hi) _mm_undefined_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi64_epi16 (__m128i __O, __mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqw512_mask ((__v8di) __A,
              (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtepi64_epi16 (__mmask8 __M, __m512i __A)
{
  return (__m128i) __builtin_ia32_pmovqw512_mask ((__v8di) __A,
              (__v8hi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtepi64_storeu_epi16 (void *__P, __mmask8 __M, __m512i __A)
{
  __builtin_ia32_pmovqw512mem_mask ((__v8hi *) __P, (__v8di) __A, __M);
}
# 8199 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_getexp_pd (__m512d __A)
{
  return (__m512d) __builtin_ia32_getexppd512_mask ((__v8df) __A,
                (__v8df) _mm512_undefined_pd (),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_getexp_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_getexppd512_mask ((__v8df) __A,
                (__v8df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_getexp_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_getexppd512_mask ((__v8df) __A,
                (__v8df) _mm512_setzero_pd (),
                (__mmask8) __U,
                0x04);
}
# 8241 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_getexp_ps (__m512 __A)
{
  return (__m512) __builtin_ia32_getexpps512_mask ((__v16sf) __A,
               (__v16sf) _mm512_undefined_ps (),
               (__mmask16) -1,
               0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_getexp_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_getexpps512_mask ((__v16sf) __A,
               (__v16sf) __W,
               (__mmask16) __U,
               0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_getexp_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_getexpps512_mask ((__v16sf) __A,
               (__v16sf) _mm512_setzero_ps (),
               (__mmask16) __U,
               0x04);
}
# 8444 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fmadd_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __W,
          (__v4sf) __A,
          (__v4sf) __B,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fmadd_ss (__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
 return (__m128) __builtin_ia32_vfmaddss3_maskz ((__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fmadd_ss (__m128 __W, __m128 __X, __m128 __Y, __mmask8 __U)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask3 ((__v4sf) __W,
          (__v4sf) __X,
          (__v4sf) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fmsub_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __W,
          (__v4sf) __A,
          -(__v4sf) __B,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fmsub_ss (__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
 return (__m128) __builtin_ia32_vfmaddss3_maskz ((__v4sf) __A,
          (__v4sf) __B,
          -(__v4sf) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fmsub_ss (__m128 __W, __m128 __X, __m128 __Y, __mmask8 __U)
{
 return (__m128) __builtin_ia32_vfmsubss3_mask3 ((__v4sf) __W,
          (__v4sf) __X,
          (__v4sf) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fnmadd_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __W,
          -(__v4sf) __A,
          (__v4sf) __B,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fnmadd_ss (__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
 return (__m128) __builtin_ia32_vfmaddss3_maskz (-(__v4sf) __A,
          (__v4sf) __B,
          (__v4sf) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fnmadd_ss (__m128 __W, __m128 __X, __m128 __Y, __mmask8 __U)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask3 (-(__v4sf) __W,
          (__v4sf) __X,
          (__v4sf) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fnmsub_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
 return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __W,
          -(__v4sf) __A,
          -(__v4sf) __B,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fnmsub_ss (__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
 return (__m128) __builtin_ia32_vfmaddss3_maskz (-(__v4sf) __A,
          (__v4sf) __B,
          -(__v4sf) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fnmsub_ss (__m128 __W, __m128 __X, __m128 __Y, __mmask8 __U)
{
 return (__m128) __builtin_ia32_vfnmsubss3_mask3 ((__v4sf) __W,
          (__v4sf) __X,
          (__v4sf) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fmadd_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask ( (__v2df) __W,
          (__v2df) __A,
          (__v2df) __B,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fmadd_sd (__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_maskz ( (__v2df) __A,
          (__v2df) __B,
          (__v2df) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fmadd_sd (__m128d __W, __m128d __X, __m128d __Y, __mmask8 __U)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask3 ((__v2df) __W,
          (__v2df) __X,
          (__v2df) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fmsub_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask ( (__v2df) __W,
          (__v2df) __A,
          -(__v2df) __B,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fmsub_sd (__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_maskz ( (__v2df) __A,
          (__v2df) __B,
          -(__v2df) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fmsub_sd (__m128d __W, __m128d __X, __m128d __Y, __mmask8 __U)
{
 return (__m128d) __builtin_ia32_vfmsubsd3_mask3 ((__v2df) __W,
          (__v2df) __X,
          (__v2df) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fnmadd_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask ( (__v2df) __W,
          -(__v2df) __A,
          (__v2df) __B,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fnmadd_sd (__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_maskz ( -(__v2df) __A,
          (__v2df) __B,
          (__v2df) __C,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fnmadd_sd (__m128d __W, __m128d __X, __m128d __Y, __mmask8 __U)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask3 (-(__v2df) __W,
          (__v2df) __X,
          (__v2df) __Y,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_fnmsub_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_mask ( (__v2df) __W,
          -(__v2df) __A,
          -(__v2df) __B,
          (__mmask8) __U,
          0x04);
}







static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_fnmsub_sd (__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
 return (__m128d) __builtin_ia32_vfmaddsd3_maskz ( -(__v2df) __A,
          (__v2df) __B,
          -(__v2df) __C,
          (__mmask8) __U,
          0x04);
}
# 8813 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask3_fnmsub_sd (__m128d __W, __m128d __X, __m128d __Y, __mmask8 __U)
{
 return (__m128d) __builtin_ia32_vfnmsubsd3_mask3 ((__v2df) (__W),
          (__v2df) __X,
          (__v2df) (__Y),
          (__mmask8) __U,
          0x04);
}
# 8873 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutexvar_pd (__m512i __X, __m512d __Y)
{
  return (__m512d) __builtin_ia32_permvardf512_mask ((__v8df) __Y,
                 (__v8di) __X,
                 (__v8df) _mm512_undefined_pd (),
                 (__mmask8) -1);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutexvar_pd (__m512d __W, __mmask8 __U, __m512i __X, __m512d __Y)
{
  return (__m512d) __builtin_ia32_permvardf512_mask ((__v8df) __Y,
                 (__v8di) __X,
                 (__v8df) __W,
                 (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutexvar_pd (__mmask8 __U, __m512i __X, __m512d __Y)
{
  return (__m512d) __builtin_ia32_permvardf512_mask ((__v8df) __Y,
                 (__v8di) __X,
                 (__v8df) _mm512_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutexvar_epi64 (__mmask8 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvardi512_mask ((__v8di) __Y,
                 (__v8di) __X,
                 (__v8di) _mm512_setzero_si512 (),
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutexvar_epi64 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvardi512_mask ((__v8di) __Y,
                 (__v8di) __X,
                 (__v8di) _mm512_undefined_epi32 (),
                 (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutexvar_epi64 (__m512i __W, __mmask8 __M, __m512i __X,
             __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvardi512_mask ((__v8di) __Y,
                 (__v8di) __X,
                 (__v8di) __W,
                 __M);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutexvar_ps (__m512i __X, __m512 __Y)
{
  return (__m512) __builtin_ia32_permvarsf512_mask ((__v16sf) __Y,
                (__v16si) __X,
                (__v16sf) _mm512_undefined_ps (),
                (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutexvar_ps (__m512 __W, __mmask16 __U, __m512i __X, __m512 __Y)
{
  return (__m512) __builtin_ia32_permvarsf512_mask ((__v16sf) __Y,
                (__v16si) __X,
                (__v16sf) __W,
                (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutexvar_ps (__mmask16 __U, __m512i __X, __m512 __Y)
{
  return (__m512) __builtin_ia32_permvarsf512_mask ((__v16sf) __Y,
                (__v16si) __X,
                (__v16sf) _mm512_setzero_ps (),
                (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_permutexvar_epi32 (__mmask16 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvarsi512_mask ((__v16si) __Y,
                 (__v16si) __X,
                 (__v16si) _mm512_setzero_si512 (),
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_permutexvar_epi32 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvarsi512_mask ((__v16si) __Y,
                 (__v16si) __X,
                 (__v16si) _mm512_undefined_epi32 (),
                 (__mmask16) -1);
}



static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_permutexvar_epi32 (__m512i __W, __mmask16 __M, __m512i __X,
             __m512i __Y)
{
  return (__m512i) __builtin_ia32_permvarsi512_mask ((__v16si) __Y,
                 (__v16si) __X,
                 (__v16si) __W,
                 __M);
}



static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kand (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kandhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kandn (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kandnhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kor (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_korhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kortestc (__mmask16 __A, __mmask16 __B)
{
  return __builtin_ia32_kortestchi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kortestz (__mmask16 __A, __mmask16 __B)
{
  return __builtin_ia32_kortestzhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kunpackb (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kunpckhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kxnor (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kxnorhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_kxor (__mmask16 __A, __mmask16 __B)
{
  return (__mmask16) __builtin_ia32_kxorhi ((__mmask16) __A, (__mmask16) __B);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_stream_si512 (__m512i * __P, __m512i __A)
{
  __builtin_nontemporal_store((__v8di)__A, (__v8di*)__P);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_stream_load_si512 (void *__P)
{
  return (__m512i) __builtin_nontemporal_load((const __v8di *)__P);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_stream_pd (double *__P, __m512d __A)
{
  __builtin_nontemporal_store((__v8df)__A, (__v8df*)__P);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_stream_ps (float *__P, __m512 __A)
{
  __builtin_nontemporal_store((__v16sf)__A, (__v16sf*)__P);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compress_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_compressdf512_mask ((__v8df) __A,
                  (__v8df) __W,
                  (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_compress_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_compressdf512_mask ((__v8df) __A,
                  (__v8df)
                  _mm512_setzero_pd (),
                  (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compress_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_compressdi512_mask ((__v8di) __A,
                  (__v8di) __W,
                  (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_compress_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_compressdi512_mask ((__v8di) __A,
                  (__v8di)
                  _mm512_setzero_si512 (),
                  (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compress_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_compresssf512_mask ((__v16sf) __A,
                 (__v16sf) __W,
                 (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_compress_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_compresssf512_mask ((__v16sf) __A,
                 (__v16sf)
                 _mm512_setzero_ps (),
                 (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compress_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_compresssi512_mask ((__v16si) __A,
                  (__v16si) __W,
                  (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_compress_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_compresssi512_mask ((__v16si) __A,
                  (__v16si)
                  _mm512_setzero_si512 (),
                  (__mmask16) __U);
}
# 9171 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_movehdup_ps (__m512 __A)
{
  return (__m512)__builtin_shufflevector((__v16sf)__A, (__v16sf)__A,
                         1, 1, 3, 3, 5, 5, 7, 7, 9, 9, 11, 11, 13, 13, 15, 15);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_movehdup_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_movehdup_ps(__A),
                                             (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_movehdup_ps (__mmask16 __U, __m512 __A)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_movehdup_ps(__A),
                                             (__v16sf)_mm512_setzero_ps());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_moveldup_ps (__m512 __A)
{
  return (__m512)__builtin_shufflevector((__v16sf)__A, (__v16sf)__A,
                         0, 0, 2, 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_moveldup_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_moveldup_ps(__A),
                                             (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_moveldup_ps (__mmask16 __U, __m512 __A)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_moveldup_ps(__A),
                                             (__v16sf)_mm512_setzero_ps());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_move_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
  __m128 res = __A;
  res[0] = (__U & 1) ? __B[0] : __W[0];
  return res;
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_move_ss (__mmask8 __U, __m128 __A, __m128 __B)
{
  __m128 res = __A;
  res[0] = (__U & 1) ? __B[0] : 0;
  return res;
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_move_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
  __m128d res = __A;
  res[0] = (__U & 1) ? __B[0] : __W[0];
  return res;
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_move_sd (__mmask8 __U, __m128d __A, __m128d __B)
{
  __m128d res = __A;
  res[0] = (__U & 1) ? __B[0] : 0;
  return res;
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_store_ss (float * __W, __mmask8 __U, __m128 __A)
{
  __builtin_ia32_storess128_mask ((__v16sf *)__W,
                (__v16sf) _mm512_castps128_ps512(__A),
                (__mmask16) __U & (__mmask16)1);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_store_sd (double * __W, __mmask8 __U, __m128d __A)
{
  __builtin_ia32_storesd128_mask ((__v8df *)__W,
                (__v8df) _mm512_castpd128_pd512(__A),
                (__mmask8) __U & 1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_load_ss (__m128 __W, __mmask8 __U, const float* __A)
{
  __m128 src = (__v4sf) __builtin_shufflevector((__v4sf) __W,
                                                (__v4sf) {0.0, 0.0, 0.0, 0.0},
                                                0, 4, 4, 4);

  return (__m128) __builtin_shufflevector(
                           __builtin_ia32_loadss128_mask ((__v16sf *) __A,
                                      (__v16sf) _mm512_castps128_ps512(src),
                                      (__mmask16) __U & 1),
                           _mm512_undefined_ps(), 0, 1, 2, 3);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_load_ss (__mmask8 __U, const float* __A)
{
  return (__m128) __builtin_shufflevector(
                           __builtin_ia32_loadss128_mask ((__v16sf *) __A,
                                      (__v16sf) _mm512_setzero_ps(),
                                      (__mmask16) __U & 1),
                           _mm512_undefined_ps(), 0, 1, 2, 3);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_load_sd (__m128d __W, __mmask8 __U, const double* __A)
{
  __m128d src = (__v2df) __builtin_shufflevector((__v2df) __W,
                                                 (__v2df) {0.0, 0.0}, 0, 2);

  return (__m128d) __builtin_shufflevector(
                            __builtin_ia32_loadsd128_mask ((__v8df *) __A,
                                      (__v8df) _mm512_castpd128_pd512(src),
                                      (__mmask8) __U & 1),
                            _mm512_undefined_pd(), 0, 1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_load_sd (__mmask8 __U, const double* __A)
{
  return (__m128d) __builtin_shufflevector(
                            __builtin_ia32_loadsd128_mask ((__v8df *) __A,
                                      (__v8df) _mm512_setzero_pd(),
                                      (__mmask8) __U & 1),
                            _mm512_undefined_pd(), 0, 1);
}
# 9342 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expand_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_expanddf512_mask ((__v8df) __A,
                (__v8df) __W,
                (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expand_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_expanddf512_mask ((__v8df) __A,
                (__v8df) _mm512_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expand_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_expanddi512_mask ((__v8di) __A,
                (__v8di) __W,
                (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expand_epi64 ( __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_expanddi512_mask ((__v8di) __A,
                (__v8di) _mm512_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expandloadu_pd(__m512d __W, __mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_expandloaddf512_mask ((const __v8df *)__P,
              (__v8df) __W,
              (__mmask8) __U);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expandloadu_pd(__mmask8 __U, void const *__P)
{
  return (__m512d) __builtin_ia32_expandloaddf512_mask ((const __v8df *)__P,
              (__v8df) _mm512_setzero_pd(),
              (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expandloadu_epi64(__m512i __W, __mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_expandloaddi512_mask ((const __v8di *)__P,
              (__v8di) __W,
              (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expandloadu_epi64(__mmask8 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_expandloaddi512_mask ((const __v8di *)__P,
              (__v8di) _mm512_setzero_pd(),
              (__mmask8) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expandloadu_ps(__m512 __W, __mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_expandloadsf512_mask ((const __v16sf *)__P,
                   (__v16sf) __W,
                   (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expandloadu_ps(__mmask16 __U, void const *__P)
{
  return (__m512) __builtin_ia32_expandloadsf512_mask ((const __v16sf *)__P,
                   (__v16sf) _mm512_setzero_ps(),
                   (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expandloadu_epi32(__m512i __W, __mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_expandloadsi512_mask ((const __v16si *)__P,
              (__v16si) __W,
              (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expandloadu_epi32(__mmask16 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_expandloadsi512_mask ((const __v16si *)__P,
              (__v16si) _mm512_setzero_ps(),
              (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expand_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_expandsf512_mask ((__v16sf) __A,
               (__v16sf) __W,
               (__mmask16) __U);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expand_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_expandsf512_mask ((__v16sf) __A,
               (__v16sf) _mm512_setzero_ps(),
               (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_expand_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_expandsi512_mask ((__v16si) __A,
                (__v16si) __W,
                (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_expand_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_expandsi512_mask ((__v16si) __A,
                (__v16si) _mm512_setzero_ps(),
                (__mmask16) __U);
}
# 9485 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtps_pd (__m256 __A)
{
  return (__m512d) __builtin_ia32_cvtps2pd512_mask ((__v8sf) __A,
                (__v8df)
                _mm512_undefined_pd (),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtps_pd (__m512d __W, __mmask8 __U, __m256 __A)
{
  return (__m512d) __builtin_ia32_cvtps2pd512_mask ((__v8sf) __A,
                (__v8df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_cvtps_pd (__mmask8 __U, __m256 __A)
{
  return (__m512d) __builtin_ia32_cvtps2pd512_mask ((__v8sf) __A,
                (__v8df)
                _mm512_setzero_pd (),
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_cvtpslo_pd (__m512 __A)
{
  return (__m512) _mm512_cvtps_pd(_mm512_castps512_ps256(__A));
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_cvtpslo_pd (__m512d __W, __mmask8 __U, __m512 __A)
{
  return (__m512) _mm512_mask_cvtps_pd(__W, __U, _mm512_castps512_ps256(__A));
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mov_pd (__m512d __W, __mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_selectpd_512 ((__mmask8) __U,
              (__v8df) __A,
              (__v8df) __W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mov_pd (__mmask8 __U, __m512d __A)
{
  return (__m512d) __builtin_ia32_selectpd_512 ((__mmask8) __U,
              (__v8df) __A,
              (__v8df) _mm512_setzero_pd ());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_mov_ps (__m512 __W, __mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_selectps_512 ((__mmask16) __U,
             (__v16sf) __A,
             (__v16sf) __W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_maskz_mov_ps (__mmask16 __U, __m512 __A)
{
  return (__m512) __builtin_ia32_selectps_512 ((__mmask16) __U,
             (__v16sf) __A,
             (__v16sf) _mm512_setzero_ps ());
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compressstoreu_pd (void *__P, __mmask8 __U, __m512d __A)
{
  __builtin_ia32_compressstoredf512_mask ((__v8df *) __P, (__v8df) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compressstoreu_epi64 (void *__P, __mmask8 __U, __m512i __A)
{
  __builtin_ia32_compressstoredi512_mask ((__v8di *) __P, (__v8di) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compressstoreu_ps (void *__P, __mmask16 __U, __m512 __A)
{
  __builtin_ia32_compressstoresf512_mask ((__v16sf *) __P, (__v16sf) __A,
            (__mmask16) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_compressstoreu_epi32 (void *__P, __mmask16 __U, __m512i __A)
{
  __builtin_ia32_compressstoresi512_mask ((__v16si *) __P, (__v16si) __A,
            (__mmask16) __U);
}
# 9604 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_cvtsd_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128d __B)
{
  return __builtin_ia32_cvtsd2ss_round_mask ((__v4sf)(__A),
                                             (__v2df)(__B),
                                             (__v4sf)(__W),
                                             (__mmask8)(__U), 0x04);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_cvtsd_ss (__mmask8 __U, __m128 __A, __m128d __B)
{
  return __builtin_ia32_cvtsd2ss_round_mask ((__v4sf)(__A),
                                             (__v2df)(__B),
                                             (__v4sf)_mm_setzero_ps(),
                                             (__mmask8)(__U), 0x04);
}
# 9677 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_mask_cvtss_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128 __B)
{
  return __builtin_ia32_cvtss2sd_round_mask((__v2df)(__A),
                                              (__v4sf)(__B),
                                              (__v2df)(__W),
                                              (__mmask8)(__U), 0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_maskz_cvtss_sd (__mmask8 __U, __m128d __A, __m128 __B)
{
  return __builtin_ia32_cvtss2sd_round_mask((__v2df)(__A),
                                              (__v4sf)(__B),
                                              (__v2df)_mm_setzero_pd(),
                                              (__mmask8)(__U), 0x04);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtu32_sd (__m128d __A, unsigned __B)
{
  return (__m128d) __builtin_ia32_cvtusi2sd32 ((__v2df) __A, __B);
}






static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtu64_sd (__m128d __A, unsigned long long __B)
{
  return (__m128d) __builtin_ia32_cvtusi2sd64 ((__v2df) __A, __B,
                 0x04);
}






static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtu32_ss (__m128 __A, unsigned __B)
{
  return (__m128) __builtin_ia32_cvtusi2ss32 ((__v4sf) __A, __B,
                0x04);
}






static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_cvtu64_ss (__m128 __A, unsigned long long __B)
{
  return (__m128) __builtin_ia32_cvtusi2ss64 ((__v4sf) __A, __B,
                0x04);
}


static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_set1_epi32 (__m512i __O, __mmask16 __M, int __A)
{
  return (__m512i) __builtin_ia32_pbroadcastd512_gpr_mask (__A, (__v16si) __O,
                 __M);
}


static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_set1_epi64 (__m512i __O, __mmask8 __M, long long __A)
{
  return (__m512i) __builtin_ia32_pbroadcastq512_gpr_mask (__A, (__v8di) __O,
                 __M);
}


static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set_epi8 (char __e63, char __e62, char __e61, char __e60, char __e59,
    char __e58, char __e57, char __e56, char __e55, char __e54, char __e53,
    char __e52, char __e51, char __e50, char __e49, char __e48, char __e47,
    char __e46, char __e45, char __e44, char __e43, char __e42, char __e41,
    char __e40, char __e39, char __e38, char __e37, char __e36, char __e35,
    char __e34, char __e33, char __e32, char __e31, char __e30, char __e29,
    char __e28, char __e27, char __e26, char __e25, char __e24, char __e23,
    char __e22, char __e21, char __e20, char __e19, char __e18, char __e17,
    char __e16, char __e15, char __e14, char __e13, char __e12, char __e11,
    char __e10, char __e9, char __e8, char __e7, char __e6, char __e5,
    char __e4, char __e3, char __e2, char __e1, char __e0) {

  return __extension__ (__m512i)(__v64qi)
    {__e0, __e1, __e2, __e3, __e4, __e5, __e6, __e7,
     __e8, __e9, __e10, __e11, __e12, __e13, __e14, __e15,
     __e16, __e17, __e18, __e19, __e20, __e21, __e22, __e23,
     __e24, __e25, __e26, __e27, __e28, __e29, __e30, __e31,
     __e32, __e33, __e34, __e35, __e36, __e37, __e38, __e39,
     __e40, __e41, __e42, __e43, __e44, __e45, __e46, __e47,
     __e48, __e49, __e50, __e51, __e52, __e53, __e54, __e55,
     __e56, __e57, __e58, __e59, __e60, __e61, __e62, __e63};
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set_epi16(short __e31, short __e30, short __e29, short __e28,
    short __e27, short __e26, short __e25, short __e24, short __e23,
    short __e22, short __e21, short __e20, short __e19, short __e18,
    short __e17, short __e16, short __e15, short __e14, short __e13,
    short __e12, short __e11, short __e10, short __e9, short __e8,
    short __e7, short __e6, short __e5, short __e4, short __e3,
    short __e2, short __e1, short __e0) {
  return __extension__ (__m512i)(__v32hi)
    {__e0, __e1, __e2, __e3, __e4, __e5, __e6, __e7,
     __e8, __e9, __e10, __e11, __e12, __e13, __e14, __e15,
     __e16, __e17, __e18, __e19, __e20, __e21, __e22, __e23,
     __e24, __e25, __e26, __e27, __e28, __e29, __e30, __e31 };
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set_epi32 (int __A, int __B, int __C, int __D,
     int __E, int __F, int __G, int __H,
     int __I, int __J, int __K, int __L,
     int __M, int __N, int __O, int __P)
{
  return __extension__ (__m512i)(__v16si)
  { __P, __O, __N, __M, __L, __K, __J, __I,
    __H, __G, __F, __E, __D, __C, __B, __A };
}






static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set_epi64 (long long __A, long long __B, long long __C,
     long long __D, long long __E, long long __F,
     long long __G, long long __H)
{
  return __extension__ (__m512i) (__v8di)
  { __H, __G, __F, __E, __D, __C, __B, __A };
}




static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set_pd (double __A, double __B, double __C, double __D,
        double __E, double __F, double __G, double __H)
{
  return __extension__ (__m512d)
  { __H, __G, __F, __E, __D, __C, __B, __A };
}




static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_set_ps (float __A, float __B, float __C, float __D,
        float __E, float __F, float __G, float __H,
        float __I, float __J, float __K, float __L,
        float __M, float __N, float __O, float __P)
{
  return __extension__ (__m512)
  { __P, __O, __N, __M, __L, __K, __J, __I,
    __H, __G, __F, __E, __D, __C, __B, __A };
}





static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_abs_ps(__m512 __A)
{
  return (__m512)_mm512_and_epi32(_mm512_set1_epi32(0x7FFFFFFF),(__m512i)__A) ;
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_abs_ps(__m512 __W, __mmask16 __K, __m512 __A)
{
  return (__m512)_mm512_mask_and_epi32((__m512i)__W, __K, _mm512_set1_epi32(0x7FFFFFFF),(__m512i)__A) ;
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_abs_pd(__m512d __A)
{
  return (__m512d)_mm512_and_epi64(_mm512_set1_epi64(0x7FFFFFFFFFFFFFFF),(__v8di)__A) ;
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_abs_pd(__m512d __W, __mmask8 __K, __m512d __A)
{
  return (__m512d)_mm512_mask_and_epi64((__v8di)__W, __K, _mm512_set1_epi64(0x7FFFFFFFFFFFFFFF),(__v8di)__A);
}
# 9913 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f"))) _mm512_reduce_add_epi64(__m512i __W) {
  __extension__({ __m256i Vec256 = __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 0, 1, 2, 3) + __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 4, 5, 6, 7); __m128i Vec128 = __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 0, 1) + __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 2, 3); Vec128 = __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 0, -1) + __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 1, -1); return Vec128[0]; });
}

static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f"))) _mm512_reduce_mul_epi64(__m512i __W) {
  __extension__({ __m256i Vec256 = __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 0, 1, 2, 3) * __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 4, 5, 6, 7); __m128i Vec128 = __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 0, 1) * __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 2, 3); Vec128 = __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 0, -1) * __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 1, -1); return Vec128[0]; });
}

static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f"))) _mm512_reduce_and_epi64(__m512i __W) {
  __extension__({ __m256i Vec256 = __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 0, 1, 2, 3) & __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 4, 5, 6, 7); __m128i Vec128 = __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 0, 1) & __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 2, 3); Vec128 = __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 0, -1) & __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 1, -1); return Vec128[0]; });
}

static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f"))) _mm512_reduce_or_epi64(__m512i __W) {
  __extension__({ __m256i Vec256 = __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 0, 1, 2, 3) | __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 4, 5, 6, 7); __m128i Vec128 = __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 0, 1) | __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 2, 3); Vec128 = __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 0, -1) | __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 1, -1); return Vec128[0]; });
}

static __inline__ double __attribute__((__always_inline__, __nodebug__, __target__("avx512f"))) _mm512_reduce_add_pd(__m512d __W) {
  __extension__({ __m256d Vec256 = __builtin_shufflevector( (__v8df)__W, (__v8df)__W, 0, 1, 2, 3) + __builtin_shufflevector( (__v8df)__W, (__v8df)__W, 4, 5, 6, 7); __m128d Vec128 = __builtin_shufflevector( (__v4df)Vec256, (__v4df)Vec256, 0, 1) + __builtin_shufflevector( (__v4df)Vec256, (__v4df)Vec256, 2, 3); Vec128 = __builtin_shufflevector((__v2df)Vec128, (__v2df)Vec128, 0, -1) + __builtin_shufflevector((__v2df)Vec128, (__v2df)Vec128, 1, -1); return Vec128[0]; });
}

static __inline__ double __attribute__((__always_inline__, __nodebug__, __target__("avx512f"))) _mm512_reduce_mul_pd(__m512d __W) {
  __extension__({ __m256d Vec256 = __builtin_shufflevector( (__v8df)__W, (__v8df)__W, 0, 1, 2, 3) * __builtin_shufflevector( (__v8df)__W, (__v8df)__W, 4, 5, 6, 7); __m128d Vec128 = __builtin_shufflevector( (__v4df)Vec256, (__v4df)Vec256, 0, 1) * __builtin_shufflevector( (__v4df)Vec256, (__v4df)Vec256, 2, 3); Vec128 = __builtin_shufflevector((__v2df)Vec128, (__v2df)Vec128, 0, -1) * __builtin_shufflevector((__v2df)Vec128, (__v2df)Vec128, 1, -1); return Vec128[0]; });
}
# 9956 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_add_epi64(__mmask8 __M, __m512i __W) {
  __extension__({ __W = __builtin_ia32_selectq_512( (__mmask8)__M, (__v8di)__W, (__v8di)_mm512_set1_epi64(0)); __extension__({ __m256i Vec256 = __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 0, 1, 2, 3) + __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 4, 5, 6, 7); __m128i Vec128 = __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 0, 1) + __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 2, 3); Vec128 = __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 0, -1) + __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 1, -1); return Vec128[0]; }); });
}

static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_mul_epi64(__mmask8 __M, __m512i __W) {
  __extension__({ __W = __builtin_ia32_selectq_512( (__mmask8)__M, (__v8di)__W, (__v8di)_mm512_set1_epi64(1)); __extension__({ __m256i Vec256 = __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 0, 1, 2, 3) * __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 4, 5, 6, 7); __m128i Vec128 = __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 0, 1) * __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 2, 3); Vec128 = __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 0, -1) * __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 1, -1); return Vec128[0]; }); });
}

static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_and_epi64(__mmask8 __M, __m512i __W) {
  __extension__({ __W = __builtin_ia32_selectq_512( (__mmask8)__M, (__v8di)__W, (__v8di)_mm512_set1_epi64(0xFFFFFFFFFFFFFFFF)); __extension__({ __m256i Vec256 = __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 0, 1, 2, 3) & __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 4, 5, 6, 7); __m128i Vec128 = __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 0, 1) & __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 2, 3); Vec128 = __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 0, -1) & __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 1, -1); return Vec128[0]; }); });

}

static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_or_epi64(__mmask8 __M, __m512i __W) {
  __extension__({ __W = __builtin_ia32_selectq_512( (__mmask8)__M, (__v8di)__W, (__v8di)_mm512_set1_epi64(0)); __extension__({ __m256i Vec256 = __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 0, 1, 2, 3) | __builtin_shufflevector( (__v8di)__W, (__v8di)__W, 4, 5, 6, 7); __m128i Vec128 = __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 0, 1) | __builtin_shufflevector( (__v4di)Vec256, (__v4di)Vec256, 2, 3); Vec128 = __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 0, -1) | __builtin_shufflevector((__v2di)Vec128, (__v2di)Vec128, 1, -1); return Vec128[0]; }); });

}

static __inline__ double __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_add_pd(__mmask8 __M, __m512d __W) {
  __extension__({ __W = __builtin_ia32_selectpd_512( (__mmask8)__M, (__v8df)__W, (__v8df)_mm512_set1_pd(0)); __extension__({ __m256d Vec256 = __builtin_shufflevector( (__v8df)__W, (__v8df)__W, 0, 1, 2, 3) + __builtin_shufflevector( (__v8df)__W, (__v8df)__W, 4, 5, 6, 7); __m128d Vec128 = __builtin_shufflevector( (__v4df)Vec256, (__v4df)Vec256, 0, 1) + __builtin_shufflevector( (__v4df)Vec256, (__v4df)Vec256, 2, 3); Vec128 = __builtin_shufflevector((__v2df)Vec128, (__v2df)Vec128, 0, -1) + __builtin_shufflevector((__v2df)Vec128, (__v2df)Vec128, 1, -1); return Vec128[0]; }); });

}

static __inline__ double __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_mul_pd(__mmask8 __M, __m512d __W) {
  __extension__({ __W = __builtin_ia32_selectpd_512( (__mmask8)__M, (__v8df)__W, (__v8df)_mm512_set1_pd(1)); __extension__({ __m256d Vec256 = __builtin_shufflevector( (__v8df)__W, (__v8df)__W, 0, 1, 2, 3) * __builtin_shufflevector( (__v8df)__W, (__v8df)__W, 4, 5, 6, 7); __m128d Vec128 = __builtin_shufflevector( (__v4df)Vec256, (__v4df)Vec256, 0, 1) * __builtin_shufflevector( (__v4df)Vec256, (__v4df)Vec256, 2, 3); Vec128 = __builtin_shufflevector((__v2df)Vec128, (__v2df)Vec128, 0, -1) * __builtin_shufflevector((__v2df)Vec128, (__v2df)Vec128, 1, -1); return Vec128[0]; }); });

}
# 10037 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_reduce_add_epi32(__m512i __W) {
  __extension__({ __m256i Vec256 = (__m256i)(__builtin_shufflevector( (__v16si)__W, (__v16si)__W, 0, 1, 2, 3, 4, 5, 6, 7) + __builtin_shufflevector( (__v16si)__W, (__v16si)__W, 8, 9, 10, 11, 12, 13, 14, 15)); __m128i Vec128 = (__m128i)(__builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 0, 1, 2, 3) + __builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 4, 5, 6, 7)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, 1, -1, -1) + __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 2, 3, -1, -1)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, -1, -1, -1) + __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 1, -1, -1, -1)); return Vec128[0]; });
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_reduce_mul_epi32(__m512i __W) {
  __extension__({ __m256i Vec256 = (__m256i)(__builtin_shufflevector( (__v16si)__W, (__v16si)__W, 0, 1, 2, 3, 4, 5, 6, 7) * __builtin_shufflevector( (__v16si)__W, (__v16si)__W, 8, 9, 10, 11, 12, 13, 14, 15)); __m128i Vec128 = (__m128i)(__builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 0, 1, 2, 3) * __builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 4, 5, 6, 7)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, 1, -1, -1) * __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 2, 3, -1, -1)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, -1, -1, -1) * __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 1, -1, -1, -1)); return Vec128[0]; });
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_reduce_and_epi32(__m512i __W) {
  __extension__({ __m256i Vec256 = (__m256i)(__builtin_shufflevector( (__v16si)__W, (__v16si)__W, 0, 1, 2, 3, 4, 5, 6, 7) & __builtin_shufflevector( (__v16si)__W, (__v16si)__W, 8, 9, 10, 11, 12, 13, 14, 15)); __m128i Vec128 = (__m128i)(__builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 0, 1, 2, 3) & __builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 4, 5, 6, 7)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, 1, -1, -1) & __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 2, 3, -1, -1)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, -1, -1, -1) & __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 1, -1, -1, -1)); return Vec128[0]; });
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_reduce_or_epi32(__m512i __W) {
  __extension__({ __m256i Vec256 = (__m256i)(__builtin_shufflevector( (__v16si)__W, (__v16si)__W, 0, 1, 2, 3, 4, 5, 6, 7) | __builtin_shufflevector( (__v16si)__W, (__v16si)__W, 8, 9, 10, 11, 12, 13, 14, 15)); __m128i Vec128 = (__m128i)(__builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 0, 1, 2, 3) | __builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 4, 5, 6, 7)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, 1, -1, -1) | __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 2, 3, -1, -1)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, -1, -1, -1) | __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 1, -1, -1, -1)); return Vec128[0]; });
}

static __inline__ float __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_reduce_add_ps(__m512 __W) {
  __extension__({ __m256 Vec256 = (__m256)(__builtin_shufflevector( (__v16sf)__W, (__v16sf)__W, 0, 1, 2, 3, 4, 5, 6, 7) + __builtin_shufflevector( (__v16sf)__W, (__v16sf)__W, 8, 9, 10, 11, 12, 13, 14, 15)); __m128 Vec128 = (__m128)(__builtin_shufflevector( (__v8sf)Vec256, (__v8sf)Vec256, 0, 1, 2, 3) + __builtin_shufflevector( (__v8sf)Vec256, (__v8sf)Vec256, 4, 5, 6, 7)); Vec128 = (__m128)(__builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 0, 1, -1, -1) + __builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 2, 3, -1, -1)); Vec128 = (__m128)(__builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 0, -1, -1, -1) + __builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 1, -1, -1, -1)); return Vec128[0]; });
}

static __inline__ float __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_reduce_mul_ps(__m512 __W) {
  __extension__({ __m256 Vec256 = (__m256)(__builtin_shufflevector( (__v16sf)__W, (__v16sf)__W, 0, 1, 2, 3, 4, 5, 6, 7) * __builtin_shufflevector( (__v16sf)__W, (__v16sf)__W, 8, 9, 10, 11, 12, 13, 14, 15)); __m128 Vec128 = (__m128)(__builtin_shufflevector( (__v8sf)Vec256, (__v8sf)Vec256, 0, 1, 2, 3) * __builtin_shufflevector( (__v8sf)Vec256, (__v8sf)Vec256, 4, 5, 6, 7)); Vec128 = (__m128)(__builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 0, 1, -1, -1) * __builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 2, 3, -1, -1)); Vec128 = (__m128)(__builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 0, -1, -1, -1) * __builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 1, -1, -1, -1)); return Vec128[0]; });
}
# 10086 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_add_epi32( __mmask16 __M, __m512i __W) {
  __extension__({ __W = (__m512i)__builtin_ia32_selectd_512( (__mmask16)__M, (__v16si)__W, (__v16si)_mm512_set1_epi32(0)); __extension__({ __m256i Vec256 = (__m256i)(__builtin_shufflevector( (__v16si)__W, (__v16si)__W, 0, 1, 2, 3, 4, 5, 6, 7) + __builtin_shufflevector( (__v16si)__W, (__v16si)__W, 8, 9, 10, 11, 12, 13, 14, 15)); __m128i Vec128 = (__m128i)(__builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 0, 1, 2, 3) + __builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 4, 5, 6, 7)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, 1, -1, -1) + __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 2, 3, -1, -1)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, -1, -1, -1) + __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 1, -1, -1, -1)); return Vec128[0]; }); });
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_mul_epi32( __mmask16 __M, __m512i __W) {
  __extension__({ __W = (__m512i)__builtin_ia32_selectd_512( (__mmask16)__M, (__v16si)__W, (__v16si)_mm512_set1_epi32(1)); __extension__({ __m256i Vec256 = (__m256i)(__builtin_shufflevector( (__v16si)__W, (__v16si)__W, 0, 1, 2, 3, 4, 5, 6, 7) * __builtin_shufflevector( (__v16si)__W, (__v16si)__W, 8, 9, 10, 11, 12, 13, 14, 15)); __m128i Vec128 = (__m128i)(__builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 0, 1, 2, 3) * __builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 4, 5, 6, 7)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, 1, -1, -1) * __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 2, 3, -1, -1)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, -1, -1, -1) * __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 1, -1, -1, -1)); return Vec128[0]; }); });
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_and_epi32( __mmask16 __M, __m512i __W) {
  __extension__({ __W = (__m512i)__builtin_ia32_selectd_512( (__mmask16)__M, (__v16si)__W, (__v16si)_mm512_set1_epi32(0xFFFFFFFF)); __extension__({ __m256i Vec256 = (__m256i)(__builtin_shufflevector( (__v16si)__W, (__v16si)__W, 0, 1, 2, 3, 4, 5, 6, 7) & __builtin_shufflevector( (__v16si)__W, (__v16si)__W, 8, 9, 10, 11, 12, 13, 14, 15)); __m128i Vec128 = (__m128i)(__builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 0, 1, 2, 3) & __builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 4, 5, 6, 7)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, 1, -1, -1) & __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 2, 3, -1, -1)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, -1, -1, -1) & __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 1, -1, -1, -1)); return Vec128[0]; }); });

}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_or_epi32(__mmask16 __M, __m512i __W) {
  __extension__({ __W = (__m512i)__builtin_ia32_selectd_512( (__mmask16)__M, (__v16si)__W, (__v16si)_mm512_set1_epi32(0)); __extension__({ __m256i Vec256 = (__m256i)(__builtin_shufflevector( (__v16si)__W, (__v16si)__W, 0, 1, 2, 3, 4, 5, 6, 7) | __builtin_shufflevector( (__v16si)__W, (__v16si)__W, 8, 9, 10, 11, 12, 13, 14, 15)); __m128i Vec128 = (__m128i)(__builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 0, 1, 2, 3) | __builtin_shufflevector( (__v8si)Vec256, (__v8si)Vec256, 4, 5, 6, 7)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, 1, -1, -1) | __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 2, 3, -1, -1)); Vec128 = (__m128i)(__builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 0, -1, -1, -1) | __builtin_shufflevector( (__v4si)Vec128, (__v4si)Vec128, 1, -1, -1, -1)); return Vec128[0]; }); });
}

static __inline__ float __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_add_ps(__mmask16 __M, __m512 __W) {
  __extension__({ __W = (__m512)__builtin_ia32_selectps_512( (__mmask16)__M, (__v16sf)__W, (__v16sf)_mm512_set1_ps(0)); __extension__({ __m256 Vec256 = (__m256)(__builtin_shufflevector( (__v16sf)__W, (__v16sf)__W, 0, 1, 2, 3, 4, 5, 6, 7) + __builtin_shufflevector( (__v16sf)__W, (__v16sf)__W, 8, 9, 10, 11, 12, 13, 14, 15)); __m128 Vec128 = (__m128)(__builtin_shufflevector( (__v8sf)Vec256, (__v8sf)Vec256, 0, 1, 2, 3) + __builtin_shufflevector( (__v8sf)Vec256, (__v8sf)Vec256, 4, 5, 6, 7)); Vec128 = (__m128)(__builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 0, 1, -1, -1) + __builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 2, 3, -1, -1)); Vec128 = (__m128)(__builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 0, -1, -1, -1) + __builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 1, -1, -1, -1)); return Vec128[0]; }); });
}

static __inline__ float __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_mul_ps(__mmask16 __M, __m512 __W) {
  __extension__({ __W = (__m512)__builtin_ia32_selectps_512( (__mmask16)__M, (__v16sf)__W, (__v16sf)_mm512_set1_ps(1)); __extension__({ __m256 Vec256 = (__m256)(__builtin_shufflevector( (__v16sf)__W, (__v16sf)__W, 0, 1, 2, 3, 4, 5, 6, 7) * __builtin_shufflevector( (__v16sf)__W, (__v16sf)__W, 8, 9, 10, 11, 12, 13, 14, 15)); __m128 Vec128 = (__m128)(__builtin_shufflevector( (__v8sf)Vec256, (__v8sf)Vec256, 0, 1, 2, 3) * __builtin_shufflevector( (__v8sf)Vec256, (__v8sf)Vec256, 4, 5, 6, 7)); Vec128 = (__m128)(__builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 0, 1, -1, -1) * __builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 2, 3, -1, -1)); Vec128 = (__m128)(__builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 0, -1, -1, -1) * __builtin_shufflevector( (__v4sf)Vec128, (__v4sf)Vec128, 1, -1, -1, -1)); return Vec128[0]; }); });
}
# 10161 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_reduce_max_epi64(__m512i __V) {
  __extension__({ __V = _mm512_max_epi64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, 2, 3, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 4, 5, 6, 7, -1, -1, -1, -1)); __V = _mm512_max_epi64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 2, 3, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_epi64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 1, -1, -1, -1, -1, -1, -1, -1)) ; return __V[0]; });
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_reduce_max_epu64(__m512i __V) {
  __extension__({ __V = _mm512_max_epu64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, 2, 3, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 4, 5, 6, 7, -1, -1, -1, -1)); __V = _mm512_max_epu64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 2, 3, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_epu64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 1, -1, -1, -1, -1, -1, -1, -1)) ; return __V[0]; });
}

static __inline__ double __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_reduce_max_pd(__m512d __V) {
  __extension__({ __V = _mm512_max_pd( (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 0, 1, 2, 3, -1, -1, -1, -1), (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 4, 5, 6, 7, -1, -1, -1, -1)); __V = _mm512_max_pd( (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 0, 1, -1, -1, -1, -1, -1, -1), (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 2, 3, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_pd( (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 0, -1, -1, -1, -1, -1, -1, -1), (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 1, -1, -1, -1, -1, -1, -1, -1)) ; return __V[0]; });
}

static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f"))) _mm512_reduce_min_epi64
(__m512i __V) {
  __extension__({ __V = _mm512_min_epi64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, 2, 3, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 4, 5, 6, 7, -1, -1, -1, -1)); __V = _mm512_min_epi64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 2, 3, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_epi64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 1, -1, -1, -1, -1, -1, -1, -1)) ; return __V[0]; });
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_reduce_min_epu64(__m512i __V) {
  __extension__({ __V = _mm512_min_epu64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, 2, 3, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 4, 5, 6, 7, -1, -1, -1, -1)); __V = _mm512_min_epu64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 2, 3, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_epu64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 1, -1, -1, -1, -1, -1, -1, -1)) ; return __V[0]; });
}

static __inline__ double __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_reduce_min_pd(__m512d __V) {
  __extension__({ __V = _mm512_min_pd( (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 0, 1, 2, 3, -1, -1, -1, -1), (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 4, 5, 6, 7, -1, -1, -1, -1)); __V = _mm512_min_pd( (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 0, 1, -1, -1, -1, -1, -1, -1), (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 2, 3, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_pd( (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 0, -1, -1, -1, -1, -1, -1, -1), (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 1, -1, -1, -1, -1, -1, -1, -1)) ; return __V[0]; });
}
# 10218 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_max_epi64(__mmask8 __M, __m512i __V) {
  __extension__({ __V = (__m512i)__builtin_ia32_selectq_512( (__mmask8)__M, (__v8di)__V, (__v8di)_mm512_set1_epi64(0x8000000000000000)); __extension__({ __V = _mm512_max_epi64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, 2, 3, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 4, 5, 6, 7, -1, -1, -1, -1)); __V = _mm512_max_epi64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 2, 3, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_epi64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 1, -1, -1, -1, -1, -1, -1, -1)) ; return __V[0]; }); });

}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_max_epu64(__mmask8 __M, __m512i __V) {
  __extension__({ __V = (__m512i)__builtin_ia32_selectq_512( (__mmask8)__M, (__v8di)__V, (__v8di)_mm512_set1_epi64(0x0000000000000000)); __extension__({ __V = _mm512_max_epu64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, 2, 3, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 4, 5, 6, 7, -1, -1, -1, -1)); __V = _mm512_max_epu64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 2, 3, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_epu64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 1, -1, -1, -1, -1, -1, -1, -1)) ; return __V[0]; }); });

}

static __inline__ double __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_max_pd(__mmask8 __M, __m512d __V) {
  __extension__({ __V = (__m512d)__builtin_ia32_selectpd_512( (__mmask8)__M, (__v8df)__V, (__v8df)-_mm512_set1_pd(__builtin_inf())); __extension__({ __V = _mm512_max_pd( (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 0, 1, 2, 3, -1, -1, -1, -1), (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 4, 5, 6, 7, -1, -1, -1, -1)); __V = _mm512_max_pd( (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 0, 1, -1, -1, -1, -1, -1, -1), (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 2, 3, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_pd( (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 0, -1, -1, -1, -1, -1, -1, -1), (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 1, -1, -1, -1, -1, -1, -1, -1)) ; return __V[0]; }); });

}

static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_min_epi64(__mmask8 __M, __m512i __V) {
  __extension__({ __V = (__m512i)__builtin_ia32_selectq_512( (__mmask8)__M, (__v8di)__V, (__v8di)_mm512_set1_epi64(0x7FFFFFFFFFFFFFFF)); __extension__({ __V = _mm512_min_epi64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, 2, 3, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 4, 5, 6, 7, -1, -1, -1, -1)); __V = _mm512_min_epi64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 2, 3, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_epi64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 1, -1, -1, -1, -1, -1, -1, -1)) ; return __V[0]; }); });

}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_min_epu64(__mmask8 __M, __m512i __V) {
  __extension__({ __V = (__m512i)__builtin_ia32_selectq_512( (__mmask8)__M, (__v8di)__V, (__v8di)_mm512_set1_epi64(0xFFFFFFFFFFFFFFFF)); __extension__({ __V = _mm512_min_epu64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, 2, 3, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 4, 5, 6, 7, -1, -1, -1, -1)); __V = _mm512_min_epu64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, 1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 2, 3, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_epu64( (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 0, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v8di)__V, (__v8di)__V, 1, -1, -1, -1, -1, -1, -1, -1)) ; return __V[0]; }); });

}

static __inline__ double __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_min_pd(__mmask8 __M, __m512d __V) {
  __extension__({ __V = (__m512d)__builtin_ia32_selectpd_512( (__mmask8)__M, (__v8df)__V, (__v8df)_mm512_set1_pd(__builtin_inf())); __extension__({ __V = _mm512_min_pd( (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 0, 1, 2, 3, -1, -1, -1, -1), (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 4, 5, 6, 7, -1, -1, -1, -1)); __V = _mm512_min_pd( (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 0, 1, -1, -1, -1, -1, -1, -1), (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 2, 3, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_pd( (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 0, -1, -1, -1, -1, -1, -1, -1), (__m512d)__builtin_shufflevector( (__v8df)__V, (__v8df)__V, 1, -1, -1, -1, -1, -1, -1, -1)) ; return __V[0]; }); });

}
# 10308 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f"))) _mm512_reduce_max_epi32(__m512i a) {
  __extension__({ a = _mm512_max_epi32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_max_epi32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_max_epi32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_max_epi32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); return a[0]; });
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_reduce_max_epu32(__m512i a) {
  __extension__({ a = _mm512_max_epu32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_max_epu32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_max_epu32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_max_epu32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); return a[0]; });
}

static __inline__ float __attribute__((__always_inline__, __nodebug__, __target__("avx512f"))) _mm512_reduce_max_ps(__m512 a) {
  __extension__({ a = _mm512_max_ps( (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_max_ps( (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_max_ps( (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_max_ps( (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); return a[0]; });
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f"))) _mm512_reduce_min_epi32(__m512i a) {
  __extension__({ a = _mm512_min_epi32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_min_epi32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_min_epi32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_min_epi32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); return a[0]; });
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_reduce_min_epu32(__m512i a) {
  __extension__({ a = _mm512_min_epu32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_min_epu32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_min_epu32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_min_epu32( (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)a, (__v16si)a, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); return a[0]; });
}

static __inline__ float __attribute__((__always_inline__, __nodebug__, __target__("avx512f"))) _mm512_reduce_min_ps(__m512 a) {
  __extension__({ a = _mm512_min_ps( (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_min_ps( (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_min_ps( (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); a = _mm512_min_ps( (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)a, (__v16sf)a, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); return a[0]; });
}
# 10361 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512fintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_max_epi32(__mmask16 __M, __m512i __V) {
  __extension__({ __V = (__m512i)__builtin_ia32_selectd_512( (__mmask16)__M, (__v16si)__V, (__v16si)_mm512_set1_epi32(0x80000000)); __extension__({ __V = _mm512_max_epi32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_epi32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_epi32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_epi32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); return __V[0]; }); });

}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_max_epu32(__mmask16 __M, __m512i __V) {
  __extension__({ __V = (__m512i)__builtin_ia32_selectd_512( (__mmask16)__M, (__v16si)__V, (__v16si)_mm512_set1_epi32(0x00000000)); __extension__({ __V = _mm512_max_epu32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_epu32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_epu32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_epu32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); return __V[0]; }); });

}

static __inline__ float __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_max_ps(__mmask16 __M, __m512 __V) {
  __extension__({ __V = (__m512)__builtin_ia32_selectps_512( (__mmask16)__M, (__v16sf)__V, (__v16sf)-_mm512_set1_ps(__builtin_inff())); __extension__({ __V = _mm512_max_ps( (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_ps( (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_ps( (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_max_ps( (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); return __V[0]; }); });

}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_min_epi32(__mmask16 __M, __m512i __V) {
  __extension__({ __V = (__m512i)__builtin_ia32_selectd_512( (__mmask16)__M, (__v16si)__V, (__v16si)_mm512_set1_epi32(0x7FFFFFFF)); __extension__({ __V = _mm512_min_epi32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_epi32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_epi32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_epi32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); return __V[0]; }); });

}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_min_epu32(__mmask16 __M, __m512i __V) {
  __extension__({ __V = (__m512i)__builtin_ia32_selectd_512( (__mmask16)__M, (__v16si)__V, (__v16si)_mm512_set1_epi32(0xFFFFFFFF)); __extension__({ __V = _mm512_min_epu32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_epu32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_epu32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_epu32( (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512i)__builtin_shufflevector( (__v16si)__V, (__v16si)__V, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); return __V[0]; }); });

}

static __inline__ float __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm512_mask_reduce_min_ps(__mmask16 __M, __m512 __V) {
  __extension__({ __V = (__m512)__builtin_ia32_selectps_512( (__mmask16)__M, (__v16sf)__V, (__v16sf)_mm512_set1_ps(__builtin_inff())); __extension__({ __V = _mm512_min_ps( (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_ps( (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_ps( (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); __V = _mm512_min_ps( (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (__m512)__builtin_shufflevector( (__v16sf)__V, (__v16sf)__V, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)); return __V[0]; }); });

}
# 135 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512f")))
_mm_setzero_di(void) {
  return (__m128i)(__v2di){ 0LL, 0LL};
}



static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpeq_epi32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqd128_mask((__v4si)__a, (__v4si)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpeq_epi32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqd128_mask((__v4si)__a, (__v4si)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpeq_epu32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 0,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpeq_epu32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 0,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpeq_epi32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqd256_mask((__v8si)__a, (__v8si)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpeq_epi32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqd256_mask((__v8si)__a, (__v8si)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpeq_epu32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 0,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpeq_epu32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 0,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpeq_epi64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqq128_mask((__v2di)__a, (__v2di)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpeq_epi64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqq128_mask((__v2di)__a, (__v2di)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpeq_epu64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 0,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpeq_epu64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 0,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpeq_epi64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqq256_mask((__v4di)__a, (__v4di)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpeq_epi64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqq256_mask((__v4di)__a, (__v4di)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpeq_epu64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 0,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpeq_epu64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 0,
                                                __u);
}


static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpge_epi32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 5,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpge_epi32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 5,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpge_epu32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 5,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpge_epu32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 5,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpge_epi32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 5,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpge_epi32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 5,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpge_epu32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 5,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpge_epu32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 5,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpge_epi64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 5,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpge_epi64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 5,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpge_epu64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 5,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpge_epu64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 5,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpge_epi64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 5,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpge_epi64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 5,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpge_epu64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 5,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpge_epu64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 5,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpgt_epi32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtd128_mask((__v4si)__a, (__v4si)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpgt_epi32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtd128_mask((__v4si)__a, (__v4si)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpgt_epu32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 6,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpgt_epu32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 6,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpgt_epi32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtd256_mask((__v8si)__a, (__v8si)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpgt_epi32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtd256_mask((__v8si)__a, (__v8si)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpgt_epu32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 6,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpgt_epu32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 6,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpgt_epi64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtq128_mask((__v2di)__a, (__v2di)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpgt_epi64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtq128_mask((__v2di)__a, (__v2di)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpgt_epu64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 6,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpgt_epu64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 6,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpgt_epi64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtq256_mask((__v4di)__a, (__v4di)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpgt_epi64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtq256_mask((__v4di)__a, (__v4di)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpgt_epu64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 6,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpgt_epu64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 6,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmple_epi32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 2,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmple_epi32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 2,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmple_epu32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 2,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmple_epu32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 2,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmple_epi32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 2,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmple_epi32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 2,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmple_epu32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 2,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmple_epu32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 2,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmple_epi64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 2,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmple_epi64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 2,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmple_epu64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 2,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmple_epu64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 2,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmple_epi64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 2,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmple_epi64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 2,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmple_epu64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 2,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmple_epu64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 2,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmplt_epi32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 1,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmplt_epi32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 1,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmplt_epu32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 1,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmplt_epu32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 1,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmplt_epi32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 1,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmplt_epi32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 1,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmplt_epu32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 1,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmplt_epu32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 1,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmplt_epi64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 1,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmplt_epi64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 1,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmplt_epu64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 1,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmplt_epu64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 1,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmplt_epi64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 1,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmplt_epi64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 1,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmplt_epu64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 1,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmplt_epu64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 1,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpneq_epi32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 4,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpneq_epi32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__a, (__v4si)__b, 4,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpneq_epu32_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 4,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpneq_epu32_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__a, (__v4si)__b, 4,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpneq_epi32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 4,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpneq_epi32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__a, (__v8si)__b, 4,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpneq_epu32_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 4,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpneq_epu32_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__a, (__v8si)__b, 4,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpneq_epi64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 4,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpneq_epi64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__a, (__v2di)__b, 4,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cmpneq_epu64_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 4,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cmpneq_epu64_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__a, (__v2di)__b, 4,
                                                __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpneq_epi64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 4,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpneq_epi64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__a, (__v4di)__b, 4,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cmpneq_epu64_mask(__m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 4,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cmpneq_epu64_mask(__mmask8 __u, __m256i __a, __m256i __b) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__a, (__v4di)__b, 4,
                                                __u);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_add_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_add_epi32(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_add_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_add_epi32(__A, __B),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_add_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_add_epi64(__A, __B),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_add_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_add_epi64(__A, __B),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sub_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_sub_epi32(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sub_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_sub_epi32(__A, __B),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sub_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_sub_epi64(__A, __B),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sub_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_sub_epi64(__A, __B),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_add_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_add_epi32(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_add_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_add_epi32(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_add_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_add_epi64(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_add_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_add_epi64(__A, __B),
                                             (__v2di)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sub_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_sub_epi32(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sub_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_sub_epi32(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sub_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_sub_epi64(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sub_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_sub_epi64(__A, __B),
                                             (__v2di)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mul_epi32(__m256i __W, __mmask8 __M, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__M,
                                             (__v4di)_mm256_mul_epi32(__X, __Y),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mul_epi32(__mmask8 __M, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__M,
                                             (__v4di)_mm256_mul_epi32(__X, __Y),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mul_epi32(__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__M,
                                             (__v2di)_mm_mul_epi32(__X, __Y),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mul_epi32(__mmask8 __M, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__M,
                                             (__v2di)_mm_mul_epi32(__X, __Y),
                                             (__v2di)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mul_epu32(__m256i __W, __mmask8 __M, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__M,
                                             (__v4di)_mm256_mul_epu32(__X, __Y),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mul_epu32(__mmask8 __M, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__M,
                                             (__v4di)_mm256_mul_epu32(__X, __Y),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mul_epu32(__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__M,
                                             (__v2di)_mm_mul_epu32(__X, __Y),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mul_epu32(__mmask8 __M, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__M,
                                             (__v2di)_mm_mul_epu32(__X, __Y),
                                             (__v2di)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mullo_epi32(__mmask8 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__M,
                                             (__v8si)_mm256_mullo_epi32(__A, __B),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mullo_epi32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__M,
                                             (__v8si)_mm256_mullo_epi32(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mullo_epi32(__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__M,
                                             (__v4si)_mm_mullo_epi32(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mullo_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__M,
                                             (__v4si)_mm_mullo_epi32(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_and_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_and_si256(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_and_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_and_epi32(_mm256_setzero_si256(), __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_and_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_and_si128(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_and_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_and_epi32(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_andnot_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                          (__v8si)_mm256_andnot_si256(__A, __B),
                                          (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_andnot_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_andnot_epi32(_mm256_setzero_si256(),
                                           __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_andnot_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_andnot_si128(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_andnot_epi32 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_andnot_epi32(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_or_epi32 (__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_or_si256(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_or_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_or_epi32(_mm256_setzero_si256(), __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_or_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_or_si128(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_or_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_or_epi32(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_xor_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_xor_si256(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_xor_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_xor_epi32(_mm256_setzero_si256(), __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_xor_epi32(__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_xor_si128(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_xor_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_xor_epi32(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_and_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_and_si256(__A, __B),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_and_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_and_epi64(_mm256_setzero_si256(), __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_and_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_and_si128(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_and_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_and_epi64(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_andnot_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                          (__v4di)_mm256_andnot_si256(__A, __B),
                                          (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_andnot_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_andnot_epi64(_mm256_setzero_si256(),
                                           __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_andnot_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_andnot_si128(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_andnot_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_andnot_epi64(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_or_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_or_si256(__A, __B),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_or_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_or_epi64(_mm256_setzero_si256(), __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_or_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_or_si128(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_or_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_or_epi64(_mm_setzero_si128(), __U, __A, __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_xor_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_xor_si256(__A, __B),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_xor_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)_mm256_mask_xor_epi64(_mm256_setzero_si256(), __U, __A, __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_xor_epi64(__m128i __W, __mmask8 __U, __m128i __A,
        __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_xor_si128(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_xor_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)_mm_mask_xor_epi64(_mm_setzero_si128(), __U, __A, __B);
}
# 1190 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_mask ((__v2df) __A,
                                                    (__v2df) __B,
                                                    (__v2df) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_mask3 ((__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_maskz ((__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_mask ((__v2df) __A,
                                                    (__v2df) __B,
                                                    -(__v2df) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_maskz ((__v2df) __A,
                                                     (__v2df) __B,
                                                     -(__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fnmadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_mask3 (-(__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fnmadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_maskz (-(__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fnmsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddpd128_maskz (-(__v2df) __A,
                                                     (__v2df) __B,
                                                     -(__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_mask ((__v4df) __A,
                                                    (__v4df) __B,
                                                    (__v4df) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_mask3 ((__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_maskz ((__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_mask ((__v4df) __A,
                                                    (__v4df) __B,
                                                    -(__v4df) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_maskz ((__v4df) __A,
                                                     (__v4df) __B,
                                                     -(__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fnmadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_mask3 (-(__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fnmadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_maskz (-(__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fnmsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddpd256_maskz (-(__v4df) __A,
                                                     (__v4df) __B,
                                                     -(__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps128_mask ((__v4sf) __A,
                                                   (__v4sf) __B,
                                                   (__v4sf) __C,
                                                   (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U)
{
  return (__m128) __builtin_ia32_vfmaddps128_mask3 ((__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps128_maskz ((__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps128_mask ((__v4sf) __A,
                                                   (__v4sf) __B,
                                                   -(__v4sf) __C,
                                                   (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps128_maskz ((__v4sf) __A,
                                                    (__v4sf) __B,
                                                    -(__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fnmadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U)
{
  return (__m128) __builtin_ia32_vfmaddps128_mask3 (-(__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fnmadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps128_maskz (-(__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fnmsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddps128_maskz (-(__v4sf) __A,
                                                    (__v4sf) __B,
                                                    -(__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256_mask ((__v8sf) __A,
                                                   (__v8sf) __B,
                                                   (__v8sf) __C,
                                                   (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U)
{
  return (__m256) __builtin_ia32_vfmaddps256_mask3 ((__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256_maskz ((__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmsub_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256_mask ((__v8sf) __A,
                                                   (__v8sf) __B,
                                                   -(__v8sf) __C,
                                                   (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256_maskz ((__v8sf) __A,
                                                    (__v8sf) __B,
                                                    -(__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fnmadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U)
{
  return (__m256) __builtin_ia32_vfmaddps256_mask3 (-(__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fnmadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256_maskz (-(__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fnmsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddps256_maskz (-(__v8sf) __A,
                                                    (__v8sf) __B,
                                                    -(__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmaddsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsubpd128_mask ((__v2df) __A,
                                                       (__v2df) __B,
                                                       (__v2df) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmaddsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U)
{
  return (__m128d) __builtin_ia32_vfmaddsubpd128_mask3 ((__v2df) __A,
                                                        (__v2df) __B,
                                                        (__v2df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmaddsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsubpd128_maskz ((__v2df) __A,
                                                        (__v2df) __B,
                                                        (__v2df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmsubadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsubpd128_mask ((__v2df) __A,
                                                       (__v2df) __B,
                                                       -(__v2df) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmsubadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfmaddsubpd128_maskz ((__v2df) __A,
                                                        (__v2df) __B,
                                                        -(__v2df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmaddsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddsubpd256_mask ((__v4df) __A,
                                                       (__v4df) __B,
                                                       (__v4df) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmaddsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U)
{
  return (__m256d) __builtin_ia32_vfmaddsubpd256_mask3 ((__v4df) __A,
                                                        (__v4df) __B,
                                                        (__v4df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmaddsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddsubpd256_maskz ((__v4df) __A,
                                                        (__v4df) __B,
                                                        (__v4df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmsubadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddsubpd256_mask ((__v4df) __A,
                                                       (__v4df) __B,
                                                       -(__v4df) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmsubadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfmaddsubpd256_maskz ((__v4df) __A,
                                                        (__v4df) __B,
                                                        -(__v4df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmaddsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddsubps128_mask ((__v4sf) __A,
                                                      (__v4sf) __B,
                                                      (__v4sf) __C,
                                                      (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmaddsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U)
{
  return (__m128) __builtin_ia32_vfmaddsubps128_mask3 ((__v4sf) __A,
                                                       (__v4sf) __B,
                                                       (__v4sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmaddsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddsubps128_maskz ((__v4sf) __A,
                                                       (__v4sf) __B,
                                                       (__v4sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fmsubadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddsubps128_mask ((__v4sf) __A,
                                                      (__v4sf) __B,
                                                      -(__v4sf) __C,
                                                      (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_fmsubadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfmaddsubps128_maskz ((__v4sf) __A,
                                                       (__v4sf) __B,
                                                       -(__v4sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmaddsub_ps(__m256 __A, __mmask8 __U, __m256 __B,
                         __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddsubps256_mask ((__v8sf) __A,
                                                      (__v8sf) __B,
                                                      (__v8sf) __C,
                                                      (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmaddsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U)
{
  return (__m256) __builtin_ia32_vfmaddsubps256_mask3 ((__v8sf) __A,
                                                       (__v8sf) __B,
                                                       (__v8sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmaddsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddsubps256_maskz ((__v8sf) __A,
                                                       (__v8sf) __B,
                                                       (__v8sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fmsubadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddsubps256_mask ((__v8sf) __A,
                                                      (__v8sf) __B,
                                                      -(__v8sf) __C,
                                                      (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_fmsubadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfmaddsubps256_maskz ((__v8sf) __A,
                                                       (__v8sf) __B,
                                                       -(__v8sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U)
{
  return (__m128d) __builtin_ia32_vfmsubpd128_mask3 ((__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U)
{
  return (__m256d) __builtin_ia32_vfmsubpd256_mask3 ((__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U)
{
  return (__m128) __builtin_ia32_vfmsubps128_mask3 ((__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U)
{
  return (__m256) __builtin_ia32_vfmsubps256_mask3 ((__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmsubadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U)
{
  return (__m128d) __builtin_ia32_vfmsubaddpd128_mask3 ((__v2df) __A,
                                                        (__v2df) __B,
                                                        (__v2df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmsubadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U)
{
  return (__m256d) __builtin_ia32_vfmsubaddpd256_mask3 ((__v4df) __A,
                                                        (__v4df) __B,
                                                        (__v4df) __C,
                                                        (__mmask8)
                                                        __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fmsubadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U)
{
  return (__m128) __builtin_ia32_vfmsubaddps128_mask3 ((__v4sf) __A,
                                                       (__v4sf) __B,
                                                       (__v4sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fmsubadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U)
{
  return (__m256) __builtin_ia32_vfmsubaddps256_mask3 ((__v8sf) __A,
                                                       (__v8sf) __B,
                                                       (__v8sf) __C,
                                                       (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fnmadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfnmaddpd128_mask ((__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fnmadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfnmaddpd256_mask ((__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fnmadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfnmaddps128_mask ((__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fnmadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfnmaddps256_mask ((__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fnmsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C)
{
  return (__m128d) __builtin_ia32_vfnmsubpd128_mask ((__v2df) __A,
                                                     (__v2df) __B,
                                                     (__v2df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fnmsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U)
{
  return (__m128d) __builtin_ia32_vfnmsubpd128_mask3 ((__v2df) __A,
                                                      (__v2df) __B,
                                                      (__v2df) __C,
                                                      (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fnmsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C)
{
  return (__m256d) __builtin_ia32_vfnmsubpd256_mask ((__v4df) __A,
                                                     (__v4df) __B,
                                                     (__v4df) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fnmsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U)
{
  return (__m256d) __builtin_ia32_vfnmsubpd256_mask3 ((__v4df) __A,
                                                      (__v4df) __B,
                                                      (__v4df) __C,
                                                      (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_fnmsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C)
{
  return (__m128) __builtin_ia32_vfnmsubps128_mask ((__v4sf) __A,
                                                    (__v4sf) __B,
                                                    (__v4sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask3_fnmsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U)
{
  return (__m128) __builtin_ia32_vfnmsubps128_mask3 ((__v4sf) __A,
                                                     (__v4sf) __B,
                                                     (__v4sf) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_fnmsub_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C)
{
  return (__m256) __builtin_ia32_vfnmsubps256_mask ((__v8sf) __A,
                                                    (__v8sf) __B,
                                                    (__v8sf) __C,
                                                    (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask3_fnmsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U)
{
  return (__m256) __builtin_ia32_vfnmsubps256_mask3 ((__v8sf) __A,
                                                     (__v8sf) __B,
                                                     (__v8sf) __C,
                                                     (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_add_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_add_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_add_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_add_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_add_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_add_pd(__A, __B),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_add_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_add_pd(__A, __B),
                                              (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_add_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_add_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_add_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_add_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_add_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_add_ps(__A, __B),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_add_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_add_ps(__A, __B),
                                             (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_blend_epi32 (__mmask8 __U, __m128i __A, __m128i __W) {
  return (__m128i) __builtin_ia32_selectd_128 ((__mmask8) __U,
                (__v4si) __W,
                (__v4si) __A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_blend_epi32 (__mmask8 __U, __m256i __A, __m256i __W) {
  return (__m256i) __builtin_ia32_selectd_256 ((__mmask8) __U,
                (__v8si) __W,
                (__v8si) __A);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_blend_pd (__mmask8 __U, __m128d __A, __m128d __W) {
  return (__m128d) __builtin_ia32_selectpd_128 ((__mmask8) __U,
                 (__v2df) __W,
                 (__v2df) __A);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_blend_pd (__mmask8 __U, __m256d __A, __m256d __W) {
  return (__m256d) __builtin_ia32_selectpd_256 ((__mmask8) __U,
                 (__v4df) __W,
                 (__v4df) __A);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_blend_ps (__mmask8 __U, __m128 __A, __m128 __W) {
  return (__m128) __builtin_ia32_selectps_128 ((__mmask8) __U,
                (__v4sf) __W,
                (__v4sf) __A);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_blend_ps (__mmask8 __U, __m256 __A, __m256 __W) {
  return (__m256) __builtin_ia32_selectps_256 ((__mmask8) __U,
                (__v8sf) __W,
                (__v8sf) __A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_blend_epi64 (__mmask8 __U, __m128i __A, __m128i __W) {
  return (__m128i) __builtin_ia32_selectq_128 ((__mmask8) __U,
                (__v2di) __W,
                (__v2di) __A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_blend_epi64 (__mmask8 __U, __m256i __A, __m256i __W) {
  return (__m256i) __builtin_ia32_selectq_256 ((__mmask8) __U,
                (__v4di) __W,
                (__v4di) __A);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compress_pd (__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_compressdf128_mask ((__v2df) __A,
                  (__v2df) __W,
                  (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_compress_pd (__mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_compressdf128_mask ((__v2df) __A,
                  (__v2df)
                  _mm_setzero_pd (),
                  (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compress_pd (__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_compressdf256_mask ((__v4df) __A,
                  (__v4df) __W,
                  (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_compress_pd (__mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_compressdf256_mask ((__v4df) __A,
                  (__v4df)
                  _mm256_setzero_pd (),
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compress_epi64 (__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_compressdi128_mask ((__v2di) __A,
                  (__v2di) __W,
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_compress_epi64 (__mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_compressdi128_mask ((__v2di) __A,
                  (__v2di)
                  _mm_setzero_si128 (),
                  (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compress_epi64 (__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_compressdi256_mask ((__v4di) __A,
                  (__v4di) __W,
                  (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_compress_epi64 (__mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_compressdi256_mask ((__v4di) __A,
                  (__v4di)
                  _mm256_setzero_si256 (),
                  (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compress_ps (__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_compresssf128_mask ((__v4sf) __A,
                 (__v4sf) __W,
                 (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_compress_ps (__mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_compresssf128_mask ((__v4sf) __A,
                 (__v4sf)
                 _mm_setzero_ps (),
                 (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compress_ps (__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_compresssf256_mask ((__v8sf) __A,
                 (__v8sf) __W,
                 (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_compress_ps (__mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_compresssf256_mask ((__v8sf) __A,
                 (__v8sf)
                 _mm256_setzero_ps (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compress_epi32 (__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_compresssi128_mask ((__v4si) __A,
                  (__v4si) __W,
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_compress_epi32 (__mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_compresssi128_mask ((__v4si) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compress_epi32 (__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_compresssi256_mask ((__v8si) __A,
                  (__v8si) __W,
                  (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_compress_epi32 (__mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_compresssi256_mask ((__v8si) __A,
                  (__v8si)
                  _mm256_setzero_si256 (),
                  (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compressstoreu_pd (void *__P, __mmask8 __U, __m128d __A) {
  __builtin_ia32_compressstoredf128_mask ((__v2df *) __P,
            (__v2df) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compressstoreu_pd (void *__P, __mmask8 __U, __m256d __A) {
  __builtin_ia32_compressstoredf256_mask ((__v4df *) __P,
            (__v4df) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compressstoreu_epi64 (void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_compressstoredi128_mask ((__v2di *) __P,
            (__v2di) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compressstoreu_epi64 (void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_compressstoredi256_mask ((__v4di *) __P,
            (__v4di) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compressstoreu_ps (void *__P, __mmask8 __U, __m128 __A) {
  __builtin_ia32_compressstoresf128_mask ((__v4sf *) __P,
            (__v4sf) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compressstoreu_ps (void *__P, __mmask8 __U, __m256 __A) {
  __builtin_ia32_compressstoresf256_mask ((__v8sf *) __P,
            (__v8sf) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_compressstoreu_epi32 (void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_compressstoresi128_mask ((__v4si *) __P,
            (__v4si) __A,
            (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_compressstoreu_epi32 (void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_compressstoresi256_mask ((__v8si *) __P,
            (__v8si) __A,
            (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_pd (__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8) __U,
                                              (__v2df)_mm_cvtepi32_pd(__A),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi32_pd (__mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8) __U,
                                              (__v2df)_mm_cvtepi32_pd(__A),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_pd (__m256d __W, __mmask8 __U, __m128i __A) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8) __U,
                                              (__v4df)_mm256_cvtepi32_pd(__A),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi32_pd (__mmask8 __U, __m128i __A) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8) __U,
                                              (__v4df)_mm256_cvtepi32_pd(__A),
                                              (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_ps (__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtdq2ps128_mask ((__v4si) __A,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi32_ps (__mmask16 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtdq2ps128_mask ((__v4si) __A,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_ps (__m256 __W, __mmask8 __U, __m256i __A) {
  return (__m256) __builtin_ia32_cvtdq2ps256_mask ((__v8si) __A,
               (__v8sf) __W,
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi32_ps (__mmask16 __U, __m256i __A) {
  return (__m256) __builtin_ia32_cvtdq2ps256_mask ((__v8si) __A,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtpd_epi32 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2dq128_mask ((__v2df) __A,
                (__v4si) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtpd_epi32 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2dq128_mask ((__v2df) __A,
                (__v4si)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtpd_epi32 (__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvtpd2dq256_mask ((__v4df) __A,
                (__v4si) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtpd_epi32 (__mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvtpd2dq256_mask ((__v4df) __A,
                (__v4si)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtpd_ps (__m128 __W, __mmask8 __U, __m128d __A) {
  return (__m128) __builtin_ia32_cvtpd2ps_mask ((__v2df) __A,
            (__v4sf) __W,
            (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtpd_ps (__mmask8 __U, __m128d __A) {
  return (__m128) __builtin_ia32_cvtpd2ps_mask ((__v2df) __A,
            (__v4sf)
            _mm_setzero_ps (),
            (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtpd_ps (__m128 __W, __mmask8 __U, __m256d __A) {
  return (__m128) __builtin_ia32_cvtpd2ps256_mask ((__v4df) __A,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtpd_ps (__mmask8 __U, __m256d __A) {
  return (__m128) __builtin_ia32_cvtpd2ps256_mask ((__v4df) __A,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtpd_epu32 (__m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2udq128_mask ((__v2df) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtpd_epu32 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2udq128_mask ((__v2df) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtpd_epu32 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2udq128_mask ((__v2df) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtpd_epu32 (__m256d __A) {
  return (__m128i) __builtin_ia32_cvtpd2udq256_mask ((__v4df) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtpd_epu32 (__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvtpd2udq256_mask ((__v4df) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtpd_epu32 (__mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvtpd2udq256_mask ((__v4df) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtps_epi32 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2dq128_mask ((__v4sf) __A,
                (__v4si) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtps_epi32 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2dq128_mask ((__v4sf) __A,
                (__v4si)
                _mm_setzero_si128 (),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtps_epi32 (__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvtps2dq256_mask ((__v8sf) __A,
                (__v8si) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtps_epi32 (__mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvtps2dq256_mask ((__v8sf) __A,
                (__v8si)
                _mm256_setzero_si256 (),
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtps_pd (__m128d __W, __mmask8 __U, __m128 __A) {
  return (__m128d) __builtin_ia32_cvtps2pd128_mask ((__v4sf) __A,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtps_pd (__mmask8 __U, __m128 __A) {
  return (__m128d) __builtin_ia32_cvtps2pd128_mask ((__v4sf) __A,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtps_pd (__m256d __W, __mmask8 __U, __m128 __A) {
  return (__m256d) __builtin_ia32_cvtps2pd256_mask ((__v4sf) __A,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtps_pd (__mmask8 __U, __m128 __A) {
  return (__m256d) __builtin_ia32_cvtps2pd256_mask ((__v4sf) __A,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtps_epu32 (__m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2udq128_mask ((__v4sf) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtps_epu32 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2udq128_mask ((__v4sf) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtps_epu32 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2udq128_mask ((__v4sf) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtps_epu32 (__m256 __A) {
  return (__m256i) __builtin_ia32_cvtps2udq256_mask ((__v8sf) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtps_epu32 (__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvtps2udq256_mask ((__v8sf) __A,
                 (__v8si) __W,
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtps_epu32 (__mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvtps2udq256_mask ((__v8sf) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvttpd_epi32 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2dq128_mask ((__v2df) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvttpd_epi32 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2dq128_mask ((__v2df) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvttpd_epi32 (__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvttpd2dq256_mask ((__v4df) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvttpd_epi32 (__mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvttpd2dq256_mask ((__v4df) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvttpd_epu32 (__m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2udq128_mask ((__v2df) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvttpd_epu32 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2udq128_mask ((__v2df) __A,
                  (__v4si) __W,
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvttpd_epu32 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2udq128_mask ((__v2df) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvttpd_epu32 (__m256d __A) {
  return (__m128i) __builtin_ia32_cvttpd2udq256_mask ((__v4df) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvttpd_epu32 (__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvttpd2udq256_mask ((__v4df) __A,
                  (__v4si) __W,
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvttpd_epu32 (__mmask8 __U, __m256d __A) {
  return (__m128i) __builtin_ia32_cvttpd2udq256_mask ((__v4df) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvttps_epi32 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2dq128_mask ((__v4sf) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvttps_epi32 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2dq128_mask ((__v4sf) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvttps_epi32 (__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvttps2dq256_mask ((__v8sf) __A,
                 (__v8si) __W,
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvttps_epi32 (__mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvttps2dq256_mask ((__v8sf) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvttps_epu32 (__m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2udq128_mask ((__v4sf) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvttps_epu32 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2udq128_mask ((__v4sf) __A,
                  (__v4si) __W,
                  (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvttps_epu32 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2udq128_mask ((__v4sf) __A,
                  (__v4si)
                  _mm_setzero_si128 (),
                  (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvttps_epu32 (__m256 __A) {
  return (__m256i) __builtin_ia32_cvttps2udq256_mask ((__v8sf) __A,
                  (__v8si)
                  _mm256_setzero_si256 (),
                  (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvttps_epu32 (__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvttps2udq256_mask ((__v8sf) __A,
                  (__v8si) __W,
                  (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvttps_epu32 (__mmask8 __U, __m256 __A) {
  return (__m256i) __builtin_ia32_cvttps2udq256_mask ((__v8sf) __A,
                  (__v8si)
                  _mm256_setzero_si256 (),
                  (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepu32_pd (__m128i __A) {
  return (__m128d) __builtin_convertvector(
      __builtin_shufflevector((__v4su)__A, (__v4su)__A, 0, 1), __v2df);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu32_pd (__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8) __U,
                                              (__v2df)_mm_cvtepu32_pd(__A),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu32_pd (__mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8) __U,
                                              (__v2df)_mm_cvtepu32_pd(__A),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepu32_pd (__m128i __A) {
  return (__m256d)__builtin_convertvector((__v4su)__A, __v4df);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu32_pd (__m256d __W, __mmask8 __U, __m128i __A) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8) __U,
                                              (__v4df)_mm256_cvtepu32_pd(__A),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu32_pd (__mmask8 __U, __m128i __A) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8) __U,
                                              (__v4df)_mm256_cvtepu32_pd(__A),
                                              (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepu32_ps (__m128i __A) {
  return (__m128) __builtin_ia32_cvtudq2ps128_mask ((__v4si) __A,
                (__v4sf)
                _mm_setzero_ps (),
                (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu32_ps (__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtudq2ps128_mask ((__v4si) __A,
                (__v4sf) __W,
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu32_ps (__mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtudq2ps128_mask ((__v4si) __A,
                (__v4sf)
                _mm_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepu32_ps (__m256i __A) {
  return (__m256) __builtin_ia32_cvtudq2ps256_mask ((__v8si) __A,
                (__v8sf)
                _mm256_setzero_ps (),
                (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu32_ps (__m256 __W, __mmask8 __U, __m256i __A) {
  return (__m256) __builtin_ia32_cvtudq2ps256_mask ((__v8si) __A,
                (__v8sf) __W,
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu32_ps (__mmask8 __U, __m256i __A) {
  return (__m256) __builtin_ia32_cvtudq2ps256_mask ((__v8si) __A,
                (__v8sf)
                _mm256_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_div_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_div_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_div_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_div_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_div_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_div_pd(__A, __B),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_div_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_div_pd(__A, __B),
                                              (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_div_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_div_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_div_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_div_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_div_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_div_ps(__A, __B),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_div_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_div_ps(__A, __B),
                                             (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expand_pd (__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_expanddf128_mask ((__v2df) __A,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expand_pd (__mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_expanddf128_mask ((__v2df) __A,
                 (__v2df)
                 _mm_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expand_pd (__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_expanddf256_mask ((__v4df) __A,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expand_pd (__mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_expanddf256_mask ((__v4df) __A,
                 (__v4df)
                 _mm256_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expand_epi64 (__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_expanddi128_mask ((__v2di) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expand_epi64 (__mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_expanddi128_mask ((__v2di) __A,
                 (__v2di)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expand_epi64 (__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_expanddi256_mask ((__v4di) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expand_epi64 (__mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_expanddi256_mask ((__v4di) __A,
                 (__v4di)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expandloadu_pd (__m128d __W, __mmask8 __U, void const *__P) {
  return (__m128d) __builtin_ia32_expandloaddf128_mask ((__v2df *) __P,
              (__v2df) __W,
              (__mmask8)
              __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expandloadu_pd (__mmask8 __U, void const *__P) {
  return (__m128d) __builtin_ia32_expandloaddf128_mask ((__v2df *) __P,
               (__v2df)
               _mm_setzero_pd (),
               (__mmask8)
               __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expandloadu_pd (__m256d __W, __mmask8 __U, void const *__P) {
  return (__m256d) __builtin_ia32_expandloaddf256_mask ((__v4df *) __P,
              (__v4df) __W,
              (__mmask8)
              __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expandloadu_pd (__mmask8 __U, void const *__P) {
  return (__m256d) __builtin_ia32_expandloaddf256_mask ((__v4df *) __P,
               (__v4df)
               _mm256_setzero_pd (),
               (__mmask8)
               __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expandloadu_epi64 (__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i) __builtin_ia32_expandloaddi128_mask ((__v2di *) __P,
              (__v2di) __W,
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expandloadu_epi64 (__mmask8 __U, void const *__P) {
  return (__m128i) __builtin_ia32_expandloaddi128_mask ((__v2di *) __P,
               (__v2di)
               _mm_setzero_si128 (),
               (__mmask8)
               __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expandloadu_epi64 (__m256i __W, __mmask8 __U,
             void const *__P) {
  return (__m256i) __builtin_ia32_expandloaddi256_mask ((__v4di *) __P,
              (__v4di) __W,
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expandloadu_epi64 (__mmask8 __U, void const *__P) {
  return (__m256i) __builtin_ia32_expandloaddi256_mask ((__v4di *) __P,
               (__v4di)
               _mm256_setzero_si256 (),
               (__mmask8)
               __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expandloadu_ps (__m128 __W, __mmask8 __U, void const *__P) {
  return (__m128) __builtin_ia32_expandloadsf128_mask ((__v4sf *) __P,
                   (__v4sf) __W,
                   (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expandloadu_ps (__mmask8 __U, void const *__P) {
  return (__m128) __builtin_ia32_expandloadsf128_mask ((__v4sf *) __P,
              (__v4sf)
              _mm_setzero_ps (),
              (__mmask8)
              __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expandloadu_ps (__m256 __W, __mmask8 __U, void const *__P) {
  return (__m256) __builtin_ia32_expandloadsf256_mask ((__v8sf *) __P,
                   (__v8sf) __W,
                   (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expandloadu_ps (__mmask8 __U, void const *__P) {
  return (__m256) __builtin_ia32_expandloadsf256_mask ((__v8sf *) __P,
              (__v8sf)
              _mm256_setzero_ps (),
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expandloadu_epi32 (__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i) __builtin_ia32_expandloadsi128_mask ((__v4si *) __P,
              (__v4si) __W,
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expandloadu_epi32 (__mmask8 __U, void const *__P) {
  return (__m128i) __builtin_ia32_expandloadsi128_mask ((__v4si *) __P,
               (__v4si)
               _mm_setzero_si128 (),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expandloadu_epi32 (__m256i __W, __mmask8 __U,
             void const *__P) {
  return (__m256i) __builtin_ia32_expandloadsi256_mask ((__v8si *) __P,
              (__v8si) __W,
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expandloadu_epi32 (__mmask8 __U, void const *__P) {
  return (__m256i) __builtin_ia32_expandloadsi256_mask ((__v8si *) __P,
               (__v8si)
               _mm256_setzero_si256 (),
               (__mmask8)
               __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expand_ps (__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_expandsf128_mask ((__v4sf) __A,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expand_ps (__mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_expandsf128_mask ((__v4sf) __A,
                (__v4sf)
                _mm_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expand_ps (__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_expandsf256_mask ((__v8sf) __A,
               (__v8sf) __W,
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expand_ps (__mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_expandsf256_mask ((__v8sf) __A,
                (__v8sf)
                _mm256_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_expand_epi32 (__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_expandsi128_mask ((__v4si) __A,
                (__v4si) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_expand_epi32 (__mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_expandsi128_mask ((__v4si) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_expand_epi32 (__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_expandsi256_mask ((__v8si) __A,
                (__v8si) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_expand_epi32 (__mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_expandsi256_mask ((__v8si) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_getexp_pd (__m128d __A) {
  return (__m128d) __builtin_ia32_getexppd128_mask ((__v2df) __A,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_getexp_pd (__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_getexppd128_mask ((__v2df) __A,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_getexp_pd (__mmask8 __U, __m128d __A) {
  return (__m128d) __builtin_ia32_getexppd128_mask ((__v2df) __A,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_getexp_pd (__m256d __A) {
  return (__m256d) __builtin_ia32_getexppd256_mask ((__v4df) __A,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_getexp_pd (__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_getexppd256_mask ((__v4df) __A,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_getexp_pd (__mmask8 __U, __m256d __A) {
  return (__m256d) __builtin_ia32_getexppd256_mask ((__v4df) __A,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_getexp_ps (__m128 __A) {
  return (__m128) __builtin_ia32_getexpps128_mask ((__v4sf) __A,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_getexp_ps (__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_getexpps128_mask ((__v4sf) __A,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_getexp_ps (__mmask8 __U, __m128 __A) {
  return (__m128) __builtin_ia32_getexpps128_mask ((__v4sf) __A,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_getexp_ps (__m256 __A) {
  return (__m256) __builtin_ia32_getexpps256_mask ((__v8sf) __A,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_getexp_ps (__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_getexpps256_mask ((__v8sf) __A,
               (__v8sf) __W,
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_getexp_ps (__mmask8 __U, __m256 __A) {
  return (__m256) __builtin_ia32_getexpps256_mask ((__v8sf) __A,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_max_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_max_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_max_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_max_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_max_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_max_pd(__A, __B),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_max_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_max_pd(__A, __B),
                                              (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_max_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_max_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_max_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_max_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_max_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_max_ps(__A, __B),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_max_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_max_ps(__A, __B),
                                             (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_min_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_min_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_min_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_min_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_min_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_min_pd(__A, __B),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_min_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_min_pd(__A, __B),
                                              (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_min_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_min_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_min_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_min_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_min_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_min_ps(__A, __B),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_min_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_min_ps(__A, __B),
                                             (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mul_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_mul_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mul_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_mul_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mul_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_mul_pd(__A, __B),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mul_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_mul_pd(__A, __B),
                                              (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mul_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_mul_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mul_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_mul_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mul_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_mul_ps(__A, __B),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mul_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_mul_ps(__A, __B),
                                             (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_abs_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_abs_epi32(__A),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_abs_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_abs_epi32(__A),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_abs_epi32(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_selectd_256((__mmask16)__U,
                                             (__v8si)_mm256_abs_epi32(__A),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_abs_epi32(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_selectd_256((__mmask16)__U,
                                             (__v8si)_mm256_abs_epi32(__A),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_abs_epi64 (__m128i __A) {
  return (__m128i) __builtin_ia32_pabsq128_mask ((__v2di) __A,
             (__v2di)
             _mm_setzero_si128 (),
             (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_abs_epi64 (__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_pabsq128_mask ((__v2di) __A,
             (__v2di) __W,
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_abs_epi64 (__mmask8 __U, __m128i __A) {
  return (__m128i) __builtin_ia32_pabsq128_mask ((__v2di) __A,
             (__v2di)
             _mm_setzero_si128 (),
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_abs_epi64 (__m256i __A) {
  return (__m256i) __builtin_ia32_pabsq256_mask ((__v4di) __A,
             (__v4di)
             _mm256_setzero_si256 (),
             (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_abs_epi64 (__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_pabsq256_mask ((__v4di) __A,
             (__v4di) __W,
             (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_abs_epi64 (__mmask8 __U, __m256i __A) {
  return (__m256i) __builtin_ia32_pabsq256_mask ((__v4di) __A,
             (__v4di)
             _mm256_setzero_si256 (),
             (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_max_epi32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__M,
                                             (__v4si)_mm_max_epi32(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_max_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__M,
                                             (__v4si)_mm_max_epi32(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_max_epi32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__M,
                                             (__v8si)_mm256_max_epi32(__A, __B),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_max_epi32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__M,
                                             (__v8si)_mm256_max_epi32(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_max_epi64 (__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxsq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_max_epi64 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxsq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_max_epi64 (__m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxsq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_max_epi64 (__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxsq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_max_epi64 (__m256i __W, __mmask8 __M, __m256i __A,
           __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxsq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_max_epi64 (__m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxsq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_max_epu32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__M,
                                             (__v4si)_mm_max_epu32(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_max_epu32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__M,
                                             (__v4si)_mm_max_epu32(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_max_epu32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__M,
                                             (__v8si)_mm256_max_epu32(__A, __B),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_max_epu32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__M,
                                             (__v8si)_mm256_max_epu32(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_max_epu64 (__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxuq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_max_epu64 (__m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxuq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_max_epu64 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B) {
  return (__m128i) __builtin_ia32_pmaxuq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_max_epu64 (__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxuq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_max_epu64 (__m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxuq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_max_epu64 (__m256i __W, __mmask8 __M, __m256i __A,
           __m256i __B) {
  return (__m256i) __builtin_ia32_pmaxuq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_min_epi32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__M,
                                             (__v4si)_mm_min_epi32(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_min_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__M,
                                             (__v4si)_mm_min_epi32(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_min_epi32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__M,
                                             (__v8si)_mm256_min_epi32(__A, __B),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_min_epi32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__M,
                                             (__v8si)_mm256_min_epi32(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_min_epi64 (__m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pminsq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_min_epi64 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B) {
  return (__m128i) __builtin_ia32_pminsq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_min_epi64 (__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pminsq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_min_epi64 (__m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pminsq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_min_epi64 (__m256i __W, __mmask8 __M, __m256i __A,
           __m256i __B) {
  return (__m256i) __builtin_ia32_pminsq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_min_epi64 (__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pminsq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_min_epu32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__M,
                                             (__v4si)_mm_min_epu32(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_min_epu32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__M,
                                             (__v4si)_mm_min_epu32(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_min_epu32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__M,
                                             (__v8si)_mm256_min_epu32(__A, __B),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_min_epu32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__M,
                                             (__v8si)_mm256_min_epu32(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_min_epu64 (__m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pminuq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_min_epu64 (__m128i __W, __mmask8 __M, __m128i __A,
        __m128i __B) {
  return (__m128i) __builtin_ia32_pminuq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di) __W, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_min_epu64 (__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i) __builtin_ia32_pminuq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_min_epu64 (__m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pminuq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_min_epu64 (__m256i __W, __mmask8 __M, __m256i __A,
           __m256i __B) {
  return (__m256i) __builtin_ia32_pminuq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di) __W, __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_min_epu64 (__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i) __builtin_ia32_pminuq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              __M);
}
# 3681 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_scalef_pd (__m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_scalefpd128_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_scalef_pd (__m128d __W, __mmask8 __U, __m128d __A,
        __m128d __B) {
  return (__m128d) __builtin_ia32_scalefpd128_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_scalef_pd (__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d) __builtin_ia32_scalefpd128_mask ((__v2df) __A,
                (__v2df) __B,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_scalef_pd (__m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_scalefpd256_mask ((__v4df) __A,
                (__v4df) __B,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_scalef_pd (__m256d __W, __mmask8 __U, __m256d __A,
           __m256d __B) {
  return (__m256d) __builtin_ia32_scalefpd256_mask ((__v4df) __A,
                (__v4df) __B,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_scalef_pd (__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d) __builtin_ia32_scalefpd256_mask ((__v4df) __A,
                (__v4df) __B,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_scalef_ps (__m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_scalefps128_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_scalef_ps (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_scalefps128_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_scalef_ps (__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128) __builtin_ia32_scalefps128_mask ((__v4sf) __A,
               (__v4sf) __B,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_scalef_ps (__m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_scalefps256_mask ((__v8sf) __A,
               (__v8sf) __B,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_scalef_ps (__m256 __W, __mmask8 __U, __m256 __A,
           __m256 __B) {
  return (__m256) __builtin_ia32_scalefps256_mask ((__v8sf) __A,
               (__v8sf) __B,
               (__v8sf) __W,
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_scalef_ps (__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256) __builtin_ia32_scalefps256_mask ((__v8sf) __A,
               (__v8sf) __B,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) __U);
}
# 3948 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sqrt_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_sqrt_pd(__A),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sqrt_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_sqrt_pd(__A),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sqrt_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_sqrt_pd(__A),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sqrt_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_sqrt_pd(__A),
                                              (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sqrt_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_sqrt_ps(__A),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sqrt_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_sqrt_ps(__A),
                                             (__v4sf)_mm_setzero_pd());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sqrt_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_sqrt_ps(__A),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sqrt_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_sqrt_ps(__A),
                                             (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sub_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_sub_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sub_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_sub_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sub_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_sub_pd(__A, __B),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sub_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_sub_pd(__A, __B),
                                              (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sub_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_sub_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sub_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_sub_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sub_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_sub_ps(__A, __B),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sub_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_sub_ps(__A, __B),
                                             (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask2_permutex2var_epi32 (__m128i __A, __m128i __I, __mmask8 __U,
            __m128i __B) {
  return (__m128i) __builtin_ia32_vpermi2vard128_mask ((__v4si) __A,
                   (__v4si) __I
                             ,
                   (__v4si) __B,
                   (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask2_permutex2var_epi32 (__m256i __A, __m256i __I,
         __mmask8 __U, __m256i __B) {
  return (__m256i) __builtin_ia32_vpermi2vard256_mask ((__v8si) __A,
                   (__v8si) __I
                             ,
                   (__v8si) __B,
                   (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask2_permutex2var_pd (__m128d __A, __m128i __I, __mmask8 __U,
         __m128d __B) {
  return (__m128d) __builtin_ia32_vpermi2varpd128_mask ((__v2df) __A,
              (__v2di) __I
                        ,
              (__v2df) __B,
              (__mmask8)
              __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask2_permutex2var_pd (__m256d __A, __m256i __I, __mmask8 __U,
            __m256d __B) {
  return (__m256d) __builtin_ia32_vpermi2varpd256_mask ((__v4df) __A,
              (__v4di) __I
                        ,
              (__v4df) __B,
              (__mmask8)
              __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask2_permutex2var_ps (__m128 __A, __m128i __I, __mmask8 __U,
         __m128 __B) {
  return (__m128) __builtin_ia32_vpermi2varps128_mask ((__v4sf) __A,
                   (__v4si) __I
                             ,
                   (__v4sf) __B,
                   (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask2_permutex2var_ps (__m256 __A, __m256i __I, __mmask8 __U,
            __m256 __B) {
  return (__m256) __builtin_ia32_vpermi2varps256_mask ((__v8sf) __A,
                   (__v8si) __I
                             ,
                   (__v8sf) __B,
                   (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask2_permutex2var_epi64 (__m128i __A, __m128i __I, __mmask8 __U,
            __m128i __B) {
  return (__m128i) __builtin_ia32_vpermi2varq128_mask ((__v2di) __A,
                   (__v2di) __I
                             ,
                   (__v2di) __B,
                   (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask2_permutex2var_epi64 (__m256i __A, __m256i __I,
         __mmask8 __U, __m256i __B) {
  return (__m256i) __builtin_ia32_vpermi2varq256_mask ((__v4di) __A,
                   (__v4di) __I
                             ,
                   (__v4di) __B,
                   (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_permutex2var_epi32 (__m128i __A, __m128i __I, __m128i __B) {
  return (__m128i) __builtin_ia32_vpermt2vard128_mask ((__v4si) __I
                             ,
                   (__v4si) __A,
                   (__v4si) __B,
                   (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_permutex2var_epi32 (__m128i __A, __mmask8 __U, __m128i __I,
           __m128i __B) {
  return (__m128i) __builtin_ia32_vpermt2vard128_mask ((__v4si) __I
                             ,
                   (__v4si) __A,
                   (__v4si) __B,
                   (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_permutex2var_epi32 (__mmask8 __U, __m128i __A, __m128i __I,
            __m128i __B) {
  return (__m128i) __builtin_ia32_vpermt2vard128_maskz ((__v4si) __I
                        ,
              (__v4si) __A,
              (__v4si) __B,
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutex2var_epi32 (__m256i __A, __m256i __I, __m256i __B) {
  return (__m256i) __builtin_ia32_vpermt2vard256_mask ((__v8si) __I
                             ,
                   (__v8si) __A,
                   (__v8si) __B,
                   (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutex2var_epi32 (__m256i __A, __mmask8 __U, __m256i __I,
        __m256i __B) {
  return (__m256i) __builtin_ia32_vpermt2vard256_mask ((__v8si) __I
                             ,
                   (__v8si) __A,
                   (__v8si) __B,
                   (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutex2var_epi32 (__mmask8 __U, __m256i __A,
         __m256i __I, __m256i __B) {
  return (__m256i) __builtin_ia32_vpermt2vard256_maskz ((__v8si) __I
                        ,
              (__v8si) __A,
              (__v8si) __B,
              (__mmask8)
              __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_permutex2var_pd (__m128d __A, __m128i __I, __m128d __B) {
  return (__m128d) __builtin_ia32_vpermt2varpd128_mask ((__v2di) __I
                        ,
              (__v2df) __A,
              (__v2df) __B,
              (__mmask8) -
              1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_permutex2var_pd (__m128d __A, __mmask8 __U, __m128i __I,
        __m128d __B) {
  return (__m128d) __builtin_ia32_vpermt2varpd128_mask ((__v2di) __I
                        ,
              (__v2df) __A,
              (__v2df) __B,
              (__mmask8)
              __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_permutex2var_pd (__mmask8 __U, __m128d __A, __m128i __I,
         __m128d __B) {
  return (__m128d) __builtin_ia32_vpermt2varpd128_maskz ((__v2di) __I
                         ,
               (__v2df) __A,
               (__v2df) __B,
               (__mmask8)
               __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutex2var_pd (__m256d __A, __m256i __I, __m256d __B) {
  return (__m256d) __builtin_ia32_vpermt2varpd256_mask ((__v4di) __I
                        ,
              (__v4df) __A,
              (__v4df) __B,
              (__mmask8) -
              1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutex2var_pd (__m256d __A, __mmask8 __U, __m256i __I,
           __m256d __B) {
  return (__m256d) __builtin_ia32_vpermt2varpd256_mask ((__v4di) __I
                        ,
              (__v4df) __A,
              (__v4df) __B,
              (__mmask8)
              __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutex2var_pd (__mmask8 __U, __m256d __A, __m256i __I,
            __m256d __B) {
  return (__m256d) __builtin_ia32_vpermt2varpd256_maskz ((__v4di) __I
                         ,
               (__v4df) __A,
               (__v4df) __B,
               (__mmask8)
               __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_permutex2var_ps (__m128 __A, __m128i __I, __m128 __B) {
  return (__m128) __builtin_ia32_vpermt2varps128_mask ((__v4si) __I
                             ,
                   (__v4sf) __A,
                   (__v4sf) __B,
                   (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_permutex2var_ps (__m128 __A, __mmask8 __U, __m128i __I,
        __m128 __B) {
  return (__m128) __builtin_ia32_vpermt2varps128_mask ((__v4si) __I
                             ,
                   (__v4sf) __A,
                   (__v4sf) __B,
                   (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_permutex2var_ps (__mmask8 __U, __m128 __A, __m128i __I,
         __m128 __B) {
  return (__m128) __builtin_ia32_vpermt2varps128_maskz ((__v4si) __I
                        ,
              (__v4sf) __A,
              (__v4sf) __B,
              (__mmask8)
              __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutex2var_ps (__m256 __A, __m256i __I, __m256 __B) {
  return (__m256) __builtin_ia32_vpermt2varps256_mask ((__v8si) __I
                             ,
                   (__v8sf) __A,
                   (__v8sf) __B,
                   (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutex2var_ps (__m256 __A, __mmask8 __U, __m256i __I,
           __m256 __B) {
  return (__m256) __builtin_ia32_vpermt2varps256_mask ((__v8si) __I
                             ,
                   (__v8sf) __A,
                   (__v8sf) __B,
                   (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutex2var_ps (__mmask8 __U, __m256 __A, __m256i __I,
            __m256 __B) {
  return (__m256) __builtin_ia32_vpermt2varps256_maskz ((__v8si) __I
                        ,
              (__v8sf) __A,
              (__v8sf) __B,
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_permutex2var_epi64 (__m128i __A, __m128i __I, __m128i __B) {
  return (__m128i) __builtin_ia32_vpermt2varq128_mask ((__v2di) __I
                             ,
                   (__v2di) __A,
                   (__v2di) __B,
                   (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_permutex2var_epi64 (__m128i __A, __mmask8 __U, __m128i __I,
           __m128i __B) {
  return (__m128i) __builtin_ia32_vpermt2varq128_mask ((__v2di) __I
                             ,
                   (__v2di) __A,
                   (__v2di) __B,
                   (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_permutex2var_epi64 (__mmask8 __U, __m128i __A, __m128i __I,
            __m128i __B) {
  return (__m128i) __builtin_ia32_vpermt2varq128_maskz ((__v2di) __I
                        ,
              (__v2di) __A,
              (__v2di) __B,
              (__mmask8)
              __U);
}


static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutex2var_epi64 (__m256i __A, __m256i __I, __m256i __B) {
  return (__m256i) __builtin_ia32_vpermt2varq256_mask ((__v4di) __I
                             ,
                   (__v4di) __A,
                   (__v4di) __B,
                   (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutex2var_epi64 (__m256i __A, __mmask8 __U, __m256i __I,
        __m256i __B) {
  return (__m256i) __builtin_ia32_vpermt2varq256_mask ((__v4di) __I
                             ,
                   (__v4di) __A,
                   (__v4di) __B,
                   (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutex2var_epi64 (__mmask8 __U, __m256i __A,
         __m256i __I, __m256i __B) {
  return (__m256i) __builtin_ia32_vpermt2varq256_maskz ((__v4di) __I
                        ,
              (__v4di) __A,
              (__v4di) __B,
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi8_epi32(__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_cvtepi8_epi32(__A),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi8_epi32(__mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_cvtepi8_epi32(__A),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi8_epi32 (__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_cvtepi8_epi32(__A),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi8_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_cvtepi8_epi32(__A),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi8_epi64(__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_cvtepi8_epi64(__A),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi8_epi64(__mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_cvtepi8_epi64(__A),
                                             (__v2di)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi8_epi64(__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_cvtepi8_epi64(__A),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi8_epi64(__mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_cvtepi8_epi64(__A),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_epi64(__m128i __W, __mmask8 __U, __m128i __X)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_cvtepi32_epi64(__X),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi32_epi64(__mmask8 __U, __m128i __X)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_cvtepi32_epi64(__X),
                                             (__v2di)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_epi64(__m256i __W, __mmask8 __U, __m128i __X)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_cvtepi32_epi64(__X),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi32_epi64(__mmask8 __U, __m128i __X)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_cvtepi32_epi64(__X),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi16_epi32(__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_cvtepi16_epi32(__A),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi16_epi32(__mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_cvtepi16_epi32(__A),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi16_epi32(__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_cvtepi16_epi32(__A),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi16_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_cvtepi16_epi32(__A),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi16_epi64(__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_cvtepi16_epi64(__A),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi16_epi64(__mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_cvtepi16_epi64(__A),
                                             (__v2di)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi16_epi64(__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_cvtepi16_epi64(__A),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi16_epi64(__mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_cvtepi16_epi64(__A),
                                             (__v4di)_mm256_setzero_si256());
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu8_epi32(__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_cvtepu8_epi32(__A),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu8_epi32(__mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_cvtepu8_epi32(__A),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu8_epi32(__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_cvtepu8_epi32(__A),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu8_epi32(__mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_cvtepu8_epi32(__A),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu8_epi64(__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_cvtepu8_epi64(__A),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu8_epi64(__mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_cvtepu8_epi64(__A),
                                             (__v2di)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu8_epi64(__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_cvtepu8_epi64(__A),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu8_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_cvtepu8_epi64(__A),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu32_epi64(__m128i __W, __mmask8 __U, __m128i __X)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_cvtepu32_epi64(__X),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu32_epi64(__mmask8 __U, __m128i __X)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_cvtepu32_epi64(__X),
                                             (__v2di)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu32_epi64(__m256i __W, __mmask8 __U, __m128i __X)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_cvtepu32_epi64(__X),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu32_epi64(__mmask8 __U, __m128i __X)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_cvtepu32_epi64(__X),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu16_epi32(__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_cvtepu16_epi32(__A),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu16_epi32(__mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_cvtepu16_epi32(__A),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu16_epi32(__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_cvtepu16_epi32(__A),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu16_epi32(__mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_cvtepu16_epi32(__A),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepu16_epi64(__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_cvtepu16_epi64(__A),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepu16_epi64(__mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_cvtepu16_epi64(__A),
                                             (__v2di)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepu16_epi64(__m256i __W, __mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_cvtepu16_epi64(__A),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepu16_epi64(__mmask8 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_cvtepu16_epi64(__A),
                                             (__v4di)_mm256_setzero_si256());
}
# 4765 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rolv_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prolvd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si)
              _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rolv_epi32 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_prolvd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si) __W,
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rolv_epi32 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prolvd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si)
              _mm_setzero_si128 (),
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rolv_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prolvd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rolv_epi32 (__m256i __W, __mmask8 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_prolvd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si) __W,
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rolv_epi32 (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prolvd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si)
              _mm256_setzero_si256 (),
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rolv_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prolvq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_di (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rolv_epi64 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_prolvq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di) __W,
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rolv_epi64 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prolvq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_di (),
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rolv_epi64 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prolvq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rolv_epi64 (__m256i __W, __mmask8 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_prolvq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di) __W,
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rolv_epi64 (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prolvq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) __U);
}
# 4941 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sll_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_sll_epi32(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sll_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_sll_epi32(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sll_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_sll_epi32(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sll_epi32(__mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_sll_epi32(__A, __B),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_slli_epi32(__m128i __W, __mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_slli_epi32(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_slli_epi32(__mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_slli_epi32(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_slli_epi32(__m256i __W, __mmask8 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_slli_epi32(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_slli_epi32(__mmask8 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_slli_epi32(__A, __B),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sll_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_sll_epi64(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sll_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_sll_epi64(__A, __B),
                                             (__v2di)_mm_setzero_di());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sll_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_sll_epi64(__A, __B),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sll_epi64(__mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_sll_epi64(__A, __B),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_slli_epi64(__m128i __W, __mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_slli_epi64(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_slli_epi64(__mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_slli_epi64(__A, __B),
                                             (__v2di)_mm_setzero_di());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_slli_epi64(__m256i __W, __mmask8 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_slli_epi64(__A, __B),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_slli_epi64(__mmask8 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_slli_epi64(__A, __B),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rorv_epi32 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prorvd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si)
              _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rorv_epi32 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_prorvd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si) __W,
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rorv_epi32 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prorvd128_mask ((__v4si) __A,
              (__v4si) __B,
              (__v4si)
              _mm_setzero_si128 (),
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rorv_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prorvd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rorv_epi32 (__m256i __W, __mmask8 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_prorvd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si) __W,
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rorv_epi32 (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prorvd256_mask ((__v8si) __A,
              (__v8si) __B,
              (__v8si)
              _mm256_setzero_si256 (),
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rorv_epi64 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prorvq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_di (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rorv_epi64 (__m128i __W, __mmask8 __U, __m128i __A,
         __m128i __B)
{
  return (__m128i) __builtin_ia32_prorvq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di) __W,
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rorv_epi64 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_prorvq128_mask ((__v2di) __A,
              (__v2di) __B,
              (__v2di)
              _mm_setzero_di (),
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rorv_epi64 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prorvq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rorv_epi64 (__m256i __W, __mmask8 __U, __m256i __A,
      __m256i __B)
{
  return (__m256i) __builtin_ia32_prorvq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di) __W,
              (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rorv_epi64 (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_prorvq256_mask ((__v4di) __A,
              (__v4di) __B,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sllv_epi64(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_sllv_epi64(__X, __Y),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sllv_epi64(__mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_sllv_epi64(__X, __Y),
                                             (__v2di)_mm_setzero_di());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sllv_epi64(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                            (__v4di)_mm256_sllv_epi64(__X, __Y),
                                            (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sllv_epi64(__mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                            (__v4di)_mm256_sllv_epi64(__X, __Y),
                                            (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sllv_epi32(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_sllv_epi32(__X, __Y),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sllv_epi32(__mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_sllv_epi32(__X, __Y),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sllv_epi32(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                            (__v8si)_mm256_sllv_epi32(__X, __Y),
                                            (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sllv_epi32(__mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                            (__v8si)_mm256_sllv_epi32(__X, __Y),
                                            (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srlv_epi64(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_srlv_epi64(__X, __Y),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srlv_epi64(__mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_srlv_epi64(__X, __Y),
                                             (__v2di)_mm_setzero_di());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srlv_epi64(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                            (__v4di)_mm256_srlv_epi64(__X, __Y),
                                            (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srlv_epi64(__mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                            (__v4di)_mm256_srlv_epi64(__X, __Y),
                                            (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srlv_epi32(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                            (__v4si)_mm_srlv_epi32(__X, __Y),
                                            (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srlv_epi32(__mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                            (__v4si)_mm_srlv_epi32(__X, __Y),
                                            (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srlv_epi32(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                            (__v8si)_mm256_srlv_epi32(__X, __Y),
                                            (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srlv_epi32(__mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                            (__v8si)_mm256_srlv_epi32(__X, __Y),
                                            (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srl_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_srl_epi32(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srl_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_srl_epi32(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srl_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_srl_epi32(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srl_epi32(__mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_srl_epi32(__A, __B),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srli_epi32(__m128i __W, __mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_srli_epi32(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srli_epi32(__mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_srli_epi32(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srli_epi32(__m256i __W, __mmask8 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_srli_epi32(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srli_epi32(__mmask8 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_srli_epi32(__A, __B),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srl_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_srl_epi64(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srl_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_srl_epi64(__A, __B),
                                             (__v2di)_mm_setzero_di());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srl_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_srl_epi64(__A, __B),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srl_epi64(__mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_srl_epi64(__A, __B),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srli_epi64(__m128i __W, __mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_srli_epi64(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srli_epi64(__mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_srli_epi64(__A, __B),
                                             (__v2di)_mm_setzero_di());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srli_epi64(__m256i __W, __mmask8 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_srli_epi64(__A, __B),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srli_epi64(__mmask8 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_srli_epi64(__A, __B),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srav_epi32(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                            (__v4si)_mm_srav_epi32(__X, __Y),
                                            (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srav_epi32(__mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                            (__v4si)_mm_srav_epi32(__X, __Y),
                                            (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srav_epi32(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                            (__v8si)_mm256_srav_epi32(__X, __Y),
                                            (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srav_epi32(__mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                            (__v8si)_mm256_srav_epi32(__X, __Y),
                                            (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_srav_epi64(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_psravq128((__v2di)__X, (__v2di)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srav_epi64(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_srav_epi64(__X, __Y),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srav_epi64(__mmask8 __U, __m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_srav_epi64(__X, __Y),
                                             (__v2di)_mm_setzero_di());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_srav_epi64(__m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_psravq256((__v4di)__X, (__v4di) __Y);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srav_epi64(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_srav_epi64(__X, __Y),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srav_epi64 (__mmask8 __U, __m256i __X, __m256i __Y)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_srav_epi64(__X, __Y),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mov_epi32 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectd_128 ((__mmask8) __U,
                 (__v4si) __A,
                 (__v4si) __W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mov_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectd_128 ((__mmask8) __U,
                 (__v4si) __A,
                 (__v4si) _mm_setzero_si128 ());
}


static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mov_epi32 (__m256i __W, __mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectd_256 ((__mmask8) __U,
                 (__v8si) __A,
                 (__v8si) __W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mov_epi32 (__mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectd_256 ((__mmask8) __U,
                 (__v8si) __A,
                 (__v8si) _mm256_setzero_si256 ());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_load_epi32 (__m128i __W, __mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_movdqa32load128_mask ((__v4si *) __P,
              (__v4si) __W,
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_load_epi32 (__mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_movdqa32load128_mask ((__v4si *) __P,
              (__v4si)
              _mm_setzero_si128 (),
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_load_epi32 (__m256i __W, __mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_movdqa32load256_mask ((__v8si *) __P,
              (__v8si) __W,
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_load_epi32 (__mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_movdqa32load256_mask ((__v8si *) __P,
              (__v8si)
              _mm256_setzero_si256 (),
              (__mmask8)
              __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_store_epi32 (void *__P, __mmask8 __U, __m128i __A)
{
  __builtin_ia32_movdqa32store128_mask ((__v4si *) __P,
          (__v4si) __A,
          (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_store_epi32 (void *__P, __mmask8 __U, __m256i __A)
{
  __builtin_ia32_movdqa32store256_mask ((__v8si *) __P,
          (__v8si) __A,
          (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mov_epi64 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectq_128 ((__mmask8) __U,
                 (__v2di) __A,
                 (__v2di) __W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mov_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectq_128 ((__mmask8) __U,
                 (__v2di) __A,
                 (__v2di) _mm_setzero_di ());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mov_epi64 (__m256i __W, __mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectq_256 ((__mmask8) __U,
                 (__v4di) __A,
                 (__v4di) __W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mov_epi64 (__mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectq_256 ((__mmask8) __U,
                 (__v4di) __A,
                 (__v4di) _mm256_setzero_si256 ());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_load_epi64 (__m128i __W, __mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_movdqa64load128_mask ((__v2di *) __P,
              (__v2di) __W,
              (__mmask8)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_load_epi64 (__mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_movdqa64load128_mask ((__v2di *) __P,
              (__v2di)
              _mm_setzero_di (),
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_load_epi64 (__m256i __W, __mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_movdqa64load256_mask ((__v4di *) __P,
              (__v4di) __W,
              (__mmask8)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_load_epi64 (__mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_movdqa64load256_mask ((__v4di *) __P,
              (__v4di)
              _mm256_setzero_si256 (),
              (__mmask8)
              __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_store_epi64 (void *__P, __mmask8 __U, __m128i __A)
{
  __builtin_ia32_movdqa64store128_mask ((__v2di *) __P,
          (__v2di) __A,
          (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_store_epi64 (void *__P, __mmask8 __U, __m256i __A)
{
  __builtin_ia32_movdqa64store256_mask ((__v4di *) __P,
          (__v4di) __A,
          (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_movedup_pd (__m128d __W, __mmask8 __U, __m128d __A)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_movedup_pd(__A),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_movedup_pd (__mmask8 __U, __m128d __A)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_movedup_pd(__A),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_movedup_pd (__m256d __W, __mmask8 __U, __m256d __A)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_movedup_pd(__A),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_movedup_pd (__mmask8 __U, __m256d __A)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_movedup_pd(__A),
                                              (__v4df)_mm256_setzero_pd());
}
# 5748 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_set1_epi64 (__m128i __O, __mmask8 __M, long long __A)
{
  return (__m128i) __builtin_ia32_pbroadcastq128_gpr_mask (__A, (__v2di) __O,
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_set1_epi64 (__mmask8 __M, long long __A)
{
  return (__m128i) __builtin_ia32_pbroadcastq128_gpr_mask (__A,
                 (__v2di)
                 _mm_setzero_si128 (),
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_set1_epi64 (__m256i __O, __mmask8 __M, long long __A)
{
  return (__m256i) __builtin_ia32_pbroadcastq256_gpr_mask (__A, (__v4di) __O,
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_set1_epi64 (__mmask8 __M, long long __A)
{
  return (__m256i) __builtin_ia32_pbroadcastq256_gpr_mask (__A,
                 (__v4di)
                 _mm256_setzero_si256 (),
                 __M);
}
# 5853 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_load_pd (__m128d __W, __mmask8 __U, void const *__P)
{
  return (__m128d) __builtin_ia32_loadapd128_mask ((__v2df *) __P,
               (__v2df) __W,
               (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_load_pd (__mmask8 __U, void const *__P)
{
  return (__m128d) __builtin_ia32_loadapd128_mask ((__v2df *) __P,
               (__v2df)
               _mm_setzero_pd (),
               (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_load_pd (__m256d __W, __mmask8 __U, void const *__P)
{
  return (__m256d) __builtin_ia32_loadapd256_mask ((__v4df *) __P,
               (__v4df) __W,
               (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_load_pd (__mmask8 __U, void const *__P)
{
  return (__m256d) __builtin_ia32_loadapd256_mask ((__v4df *) __P,
               (__v4df)
               _mm256_setzero_pd (),
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_load_ps (__m128 __W, __mmask8 __U, void const *__P)
{
  return (__m128) __builtin_ia32_loadaps128_mask ((__v4sf *) __P,
              (__v4sf) __W,
              (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_load_ps (__mmask8 __U, void const *__P)
{
  return (__m128) __builtin_ia32_loadaps128_mask ((__v4sf *) __P,
              (__v4sf)
              _mm_setzero_ps (),
              (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_load_ps (__m256 __W, __mmask8 __U, void const *__P)
{
  return (__m256) __builtin_ia32_loadaps256_mask ((__v8sf *) __P,
              (__v8sf) __W,
              (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_load_ps (__mmask8 __U, void const *__P)
{
  return (__m256) __builtin_ia32_loadaps256_mask ((__v8sf *) __P,
              (__v8sf)
              _mm256_setzero_ps (),
              (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_loadu_epi64 (__m128i __W, __mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddqudi128_mask ((__v2di *) __P,
                 (__v2di) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_loadu_epi64 (__mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddqudi128_mask ((__v2di *) __P,
                 (__v2di)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_loadu_epi64 (__m256i __W, __mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddqudi256_mask ((__v4di *) __P,
                 (__v4di) __W,
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_loadu_epi64 (__mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddqudi256_mask ((__v4di *) __P,
                 (__v4di)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_loadu_epi32 (__m128i __W, __mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddqusi128_mask ((__v4si *) __P,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_loadu_epi32 (__mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddqusi128_mask ((__v4si *) __P,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_loadu_epi32 (__m256i __W, __mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddqusi256_mask ((__v8si *) __P,
                 (__v8si) __W,
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_loadu_epi32 (__mmask8 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddqusi256_mask ((__v8si *) __P,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_loadu_pd (__m128d __W, __mmask8 __U, void const *__P)
{
  return (__m128d) __builtin_ia32_loadupd128_mask ((__v2df *) __P,
               (__v2df) __W,
               (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_loadu_pd (__mmask8 __U, void const *__P)
{
  return (__m128d) __builtin_ia32_loadupd128_mask ((__v2df *) __P,
               (__v2df)
               _mm_setzero_pd (),
               (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_loadu_pd (__m256d __W, __mmask8 __U, void const *__P)
{
  return (__m256d) __builtin_ia32_loadupd256_mask ((__v4df *) __P,
               (__v4df) __W,
               (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_loadu_pd (__mmask8 __U, void const *__P)
{
  return (__m256d) __builtin_ia32_loadupd256_mask ((__v4df *) __P,
               (__v4df)
               _mm256_setzero_pd (),
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_loadu_ps (__m128 __W, __mmask8 __U, void const *__P)
{
  return (__m128) __builtin_ia32_loadups128_mask ((__v4sf *) __P,
              (__v4sf) __W,
              (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_loadu_ps (__mmask8 __U, void const *__P)
{
  return (__m128) __builtin_ia32_loadups128_mask ((__v4sf *) __P,
              (__v4sf)
              _mm_setzero_ps (),
              (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_loadu_ps (__m256 __W, __mmask8 __U, void const *__P)
{
  return (__m256) __builtin_ia32_loadups256_mask ((__v8sf *) __P,
              (__v8sf) __W,
              (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_loadu_ps (__mmask8 __U, void const *__P)
{
  return (__m256) __builtin_ia32_loadups256_mask ((__v8sf *) __P,
              (__v8sf)
              _mm256_setzero_ps (),
              (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_store_pd (void *__P, __mmask8 __U, __m128d __A)
{
  __builtin_ia32_storeapd128_mask ((__v2df *) __P,
           (__v2df) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_store_pd (void *__P, __mmask8 __U, __m256d __A)
{
  __builtin_ia32_storeapd256_mask ((__v4df *) __P,
           (__v4df) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_store_ps (void *__P, __mmask8 __U, __m128 __A)
{
  __builtin_ia32_storeaps128_mask ((__v4sf *) __P,
           (__v4sf) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_store_ps (void *__P, __mmask8 __U, __m256 __A)
{
  __builtin_ia32_storeaps256_mask ((__v8sf *) __P,
           (__v8sf) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_storeu_epi64 (void *__P, __mmask8 __U, __m128i __A)
{
  __builtin_ia32_storedqudi128_mask ((__v2di *) __P,
             (__v2di) __A,
             (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_storeu_epi64 (void *__P, __mmask8 __U, __m256i __A)
{
  __builtin_ia32_storedqudi256_mask ((__v4di *) __P,
             (__v4di) __A,
             (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_storeu_epi32 (void *__P, __mmask8 __U, __m128i __A)
{
  __builtin_ia32_storedqusi128_mask ((__v4si *) __P,
             (__v4si) __A,
             (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_storeu_epi32 (void *__P, __mmask8 __U, __m256i __A)
{
  __builtin_ia32_storedqusi256_mask ((__v8si *) __P,
             (__v8si) __A,
             (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_storeu_pd (void *__P, __mmask8 __U, __m128d __A)
{
  __builtin_ia32_storeupd128_mask ((__v2df *) __P,
           (__v2df) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_storeu_pd (void *__P, __mmask8 __U, __m256d __A)
{
  __builtin_ia32_storeupd256_mask ((__v4df *) __P,
           (__v4df) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_storeu_ps (void *__P, __mmask8 __U, __m128 __A)
{
  __builtin_ia32_storeups128_mask ((__v4sf *) __P,
           (__v4sf) __A,
           (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_storeu_ps (void *__P, __mmask8 __U, __m256 __A)
{
  __builtin_ia32_storeups256_mask ((__v8sf *) __P,
           (__v8sf) __A,
           (__mmask8) __U);
}


static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpackhi_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_unpackhi_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpackhi_pd(__mmask8 __U, __m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_unpackhi_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpackhi_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                           (__v4df)_mm256_unpackhi_pd(__A, __B),
                                           (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpackhi_pd(__mmask8 __U, __m256d __A, __m256d __B)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                           (__v4df)_mm256_unpackhi_pd(__A, __B),
                                           (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpackhi_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_unpackhi_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpackhi_ps(__mmask8 __U, __m128 __A, __m128 __B)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_unpackhi_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpackhi_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                           (__v8sf)_mm256_unpackhi_ps(__A, __B),
                                           (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpackhi_ps(__mmask8 __U, __m256 __A, __m256 __B)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                           (__v8sf)_mm256_unpackhi_ps(__A, __B),
                                           (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpacklo_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_unpacklo_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpacklo_pd(__mmask8 __U, __m128d __A, __m128d __B)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_unpacklo_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpacklo_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                           (__v4df)_mm256_unpacklo_pd(__A, __B),
                                           (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpacklo_pd(__mmask8 __U, __m256d __A, __m256d __B)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                           (__v4df)_mm256_unpacklo_pd(__A, __B),
                                           (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpacklo_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_unpacklo_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpacklo_ps(__mmask8 __U, __m128 __A, __m128 __B)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_unpacklo_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpacklo_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                           (__v8sf)_mm256_unpacklo_ps(__A, __B),
                                           (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpacklo_ps(__mmask8 __U, __m256 __A, __m256 __B)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                           (__v8sf)_mm256_unpacklo_ps(__A, __B),
                                           (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rcp14_pd (__m128d __A)
{
  return (__m128d) __builtin_ia32_rcp14pd128_mask ((__v2df) __A,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rcp14_pd (__m128d __W, __mmask8 __U, __m128d __A)
{
  return (__m128d) __builtin_ia32_rcp14pd128_mask ((__v2df) __A,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rcp14_pd (__mmask8 __U, __m128d __A)
{
  return (__m128d) __builtin_ia32_rcp14pd128_mask ((__v2df) __A,
                (__v2df)
                _mm_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rcp14_pd (__m256d __A)
{
  return (__m256d) __builtin_ia32_rcp14pd256_mask ((__v4df) __A,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rcp14_pd (__m256d __W, __mmask8 __U, __m256d __A)
{
  return (__m256d) __builtin_ia32_rcp14pd256_mask ((__v4df) __A,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rcp14_pd (__mmask8 __U, __m256d __A)
{
  return (__m256d) __builtin_ia32_rcp14pd256_mask ((__v4df) __A,
                (__v4df)
                _mm256_setzero_pd (),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rcp14_ps (__m128 __A)
{
  return (__m128) __builtin_ia32_rcp14ps128_mask ((__v4sf) __A,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rcp14_ps (__m128 __W, __mmask8 __U, __m128 __A)
{
  return (__m128) __builtin_ia32_rcp14ps128_mask ((__v4sf) __A,
               (__v4sf) __W,
               (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rcp14_ps (__mmask8 __U, __m128 __A)
{
  return (__m128) __builtin_ia32_rcp14ps128_mask ((__v4sf) __A,
               (__v4sf)
               _mm_setzero_ps (),
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rcp14_ps (__m256 __A)
{
  return (__m256) __builtin_ia32_rcp14ps256_mask ((__v8sf) __A,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rcp14_ps (__m256 __W, __mmask8 __U, __m256 __A)
{
  return (__m256) __builtin_ia32_rcp14ps256_mask ((__v8sf) __A,
               (__v8sf) __W,
               (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rcp14_ps (__mmask8 __U, __m256 __A)
{
  return (__m256) __builtin_ia32_rcp14ps256_mask ((__v8sf) __A,
               (__v8sf)
               _mm256_setzero_ps (),
               (__mmask8) __U);
}
# 6426 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_permutevar_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128i __C)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                            (__v2df)_mm_permutevar_pd(__A, __C),
                                            (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_permutevar_pd(__mmask8 __U, __m128d __A, __m128i __C)
{
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                            (__v2df)_mm_permutevar_pd(__A, __C),
                                            (__v2df)_mm_setzero_pd());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutevar_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256i __C)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                         (__v4df)_mm256_permutevar_pd(__A, __C),
                                         (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutevar_pd(__mmask8 __U, __m256d __A, __m256i __C)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                         (__v4df)_mm256_permutevar_pd(__A, __C),
                                         (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_permutevar_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128i __C)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                            (__v4sf)_mm_permutevar_ps(__A, __C),
                                            (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_permutevar_ps(__mmask8 __U, __m128 __A, __m128i __C)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                            (__v4sf)_mm_permutevar_ps(__A, __C),
                                            (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutevar_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256i __C)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                          (__v8sf)_mm256_permutevar_ps(__A, __C),
                                          (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutevar_ps(__mmask8 __U, __m256 __A, __m256i __C)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                          (__v8sf)_mm256_permutevar_ps(__A, __C),
                                          (__v8sf)_mm256_setzero_ps());
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_test_epi32_mask (__m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestmd128 ((__v4si) __A,
                 (__v4si) __B,
                 (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_test_epi32_mask (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestmd128 ((__v4si) __A,
                 (__v4si) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_test_epi32_mask (__m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestmd256 ((__v8si) __A,
                 (__v8si) __B,
                 (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_test_epi32_mask (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestmd256 ((__v8si) __A,
                 (__v8si) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_test_epi64_mask (__m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq128 ((__v2di) __A,
                 (__v2di) __B,
                 (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_test_epi64_mask (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq128 ((__v2di) __A,
                 (__v2di) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_test_epi64_mask (__m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq256 ((__v4di) __A,
                 (__v4di) __B,
                 (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_test_epi64_mask (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestmq256 ((__v4di) __A,
                 (__v4di) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_testn_epi32_mask (__m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmd128 ((__v4si) __A,
            (__v4si) __B,
            (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_testn_epi32_mask (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmd128 ((__v4si) __A,
            (__v4si) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_testn_epi32_mask (__m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmd256 ((__v8si) __A,
            (__v8si) __B,
            (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_testn_epi32_mask (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmd256 ((__v8si) __A,
            (__v8si) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_testn_epi64_mask (__m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq128 ((__v2di) __A,
            (__v2di) __B,
            (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_testn_epi64_mask (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq128 ((__v2di) __A,
            (__v2di) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_testn_epi64_mask (__m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq256 ((__v4di) __A,
            (__v4di) __B,
            (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_testn_epi64_mask (__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmq256 ((__v4di) __A,
            (__v4di) __B, __U);
}



static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpackhi_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                           (__v4si)_mm_unpackhi_epi32(__A, __B),
                                           (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpackhi_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                           (__v4si)_mm_unpackhi_epi32(__A, __B),
                                           (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpackhi_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                        (__v8si)_mm256_unpackhi_epi32(__A, __B),
                                        (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpackhi_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                        (__v8si)_mm256_unpackhi_epi32(__A, __B),
                                        (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpackhi_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                           (__v2di)_mm_unpackhi_epi64(__A, __B),
                                           (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpackhi_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                           (__v2di)_mm_unpackhi_epi64(__A, __B),
                                           (__v2di)_mm_setzero_di());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpackhi_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                        (__v4di)_mm256_unpackhi_epi64(__A, __B),
                                        (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpackhi_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                        (__v4di)_mm256_unpackhi_epi64(__A, __B),
                                        (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpacklo_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                           (__v4si)_mm_unpacklo_epi32(__A, __B),
                                           (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpacklo_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                           (__v4si)_mm_unpacklo_epi32(__A, __B),
                                           (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpacklo_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                        (__v8si)_mm256_unpacklo_epi32(__A, __B),
                                        (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpacklo_epi32(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                        (__v8si)_mm256_unpacklo_epi32(__A, __B),
                                        (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_unpacklo_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                           (__v2di)_mm_unpacklo_epi64(__A, __B),
                                           (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_unpacklo_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                           (__v2di)_mm_unpacklo_epi64(__A, __B),
                                           (__v2di)_mm_setzero_di());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_unpacklo_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                        (__v4di)_mm256_unpacklo_epi64(__A, __B),
                                        (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_unpacklo_epi64(__mmask8 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                        (__v4di)_mm256_unpacklo_epi64(__A, __B),
                                        (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sra_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_sra_epi32(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sra_epi32(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_sra_epi32(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sra_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_sra_epi32(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sra_epi32(__mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_sra_epi32(__A, __B),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srai_epi32(__m128i __W, __mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_srai_epi32(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srai_epi32(__mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_srai_epi32(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srai_epi32(__m256i __W, __mmask8 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_srai_epi32(__A, __B),
                                             (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srai_epi32(__mmask8 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                             (__v8si)_mm256_srai_epi32(__A, __B),
                                             (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_sra_epi64(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psraq128((__v2di)__A, (__v2di)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_sra_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U, (__v2di)_mm_sra_epi64(__A, __B), (__v2di)__W);


}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_sra_epi64(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U, (__v2di)_mm_sra_epi64(__A, __B), (__v2di)_mm_setzero_di());


}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_sra_epi64(__m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_psraq256((__v4di) __A, (__v2di) __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_sra_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U, (__v4di)_mm256_sra_epi64(__A, __B), (__v4di)__W);


}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_sra_epi64(__mmask8 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U, (__v4di)_mm256_sra_epi64(__A, __B), (__v4di)_mm256_setzero_si256());


}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_srai_epi64(__m128i __A, int __imm)
{
  return (__m128i)__builtin_ia32_psraqi128((__v2di)__A, __imm);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_srai_epi64(__m128i __W, __mmask8 __U, __m128i __A, int __imm)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U, (__v2di)_mm_srai_epi64(__A, __imm), (__v2di)__W);


}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_srai_epi64(__mmask8 __U, __m128i __A, int __imm)
{
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U, (__v2di)_mm_srai_epi64(__A, __imm), (__v2di)_mm_setzero_di());


}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_srai_epi64(__m256i __A, int __imm)
{
  return (__m256i)__builtin_ia32_psraqi256((__v4di)__A, __imm);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_srai_epi64(__m256i __W, __mmask8 __U, __m256i __A, int __imm)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U, (__v4di)_mm256_srai_epi64(__A, __imm), (__v4di)__W);


}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_srai_epi64(__mmask8 __U, __m256i __A, int __imm)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U, (__v4di)_mm256_srai_epi64(__A, __imm), (__v4di)_mm256_setzero_si256());


}
# 7087 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rsqrt14_pd (__m128d __A)
{
  return (__m128d) __builtin_ia32_rsqrt14pd128_mask ((__v2df) __A,
                 (__v2df)
                 _mm_setzero_pd (),
                 (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rsqrt14_pd (__m128d __W, __mmask8 __U, __m128d __A)
{
  return (__m128d) __builtin_ia32_rsqrt14pd128_mask ((__v2df) __A,
                 (__v2df) __W,
                 (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rsqrt14_pd (__mmask8 __U, __m128d __A)
{
  return (__m128d) __builtin_ia32_rsqrt14pd128_mask ((__v2df) __A,
                 (__v2df)
                 _mm_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rsqrt14_pd (__m256d __A)
{
  return (__m256d) __builtin_ia32_rsqrt14pd256_mask ((__v4df) __A,
                 (__v4df)
                 _mm256_setzero_pd (),
                 (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rsqrt14_pd (__m256d __W, __mmask8 __U, __m256d __A)
{
  return (__m256d) __builtin_ia32_rsqrt14pd256_mask ((__v4df) __A,
                 (__v4df) __W,
                 (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rsqrt14_pd (__mmask8 __U, __m256d __A)
{
  return (__m256d) __builtin_ia32_rsqrt14pd256_mask ((__v4df) __A,
                 (__v4df)
                 _mm256_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_rsqrt14_ps (__m128 __A)
{
  return (__m128) __builtin_ia32_rsqrt14ps128_mask ((__v4sf) __A,
                (__v4sf)
                _mm_setzero_ps (),
                (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_rsqrt14_ps (__m128 __W, __mmask8 __U, __m128 __A)
{
  return (__m128) __builtin_ia32_rsqrt14ps128_mask ((__v4sf) __A,
                (__v4sf) __W,
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_rsqrt14_ps (__mmask8 __U, __m128 __A)
{
  return (__m128) __builtin_ia32_rsqrt14ps128_mask ((__v4sf) __A,
                (__v4sf)
                _mm_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_rsqrt14_ps (__m256 __A)
{
  return (__m256) __builtin_ia32_rsqrt14ps256_mask ((__v8sf) __A,
                (__v8sf)
                _mm256_setzero_ps (),
                (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_rsqrt14_ps (__m256 __W, __mmask8 __U, __m256 __A)
{
  return (__m256) __builtin_ia32_rsqrt14ps256_mask ((__v8sf) __A,
                (__v8sf) __W,
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_rsqrt14_ps (__mmask8 __U, __m256 __A)
{
  return (__m256) __builtin_ia32_rsqrt14ps256_mask ((__v8sf) __A,
                (__v8sf)
                _mm256_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_broadcast_f32x4(__m128 __A)
{
  return (__m256)__builtin_shufflevector((__v4sf)__A, (__v4sf)__A,
                                         0, 1, 2, 3, 0, 1, 2, 3);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_broadcast_f32x4(__m256 __O, __mmask8 __M, __m128 __A)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__M,
                                            (__v8sf)_mm256_broadcast_f32x4(__A),
                                            (__v8sf)__O);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_broadcast_f32x4 (__mmask8 __M, __m128 __A)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__M,
                                            (__v8sf)_mm256_broadcast_f32x4(__A),
                                            (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_broadcast_i32x4(__m128i __A)
{
  return (__m256i)__builtin_shufflevector((__v4si)__A, (__v4si)__A,
                                          0, 1, 2, 3, 0, 1, 2, 3);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_broadcast_i32x4(__m256i __O, __mmask8 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__M,
                                            (__v8si)_mm256_broadcast_i32x4(__A),
                                            (__v8si)__O);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_broadcast_i32x4(__mmask8 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__M,
                                            (__v8si)_mm256_broadcast_i32x4(__A),
                                            (__v8si)_mm256_setzero_si256());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_broadcastsd_pd (__m256d __O, __mmask8 __M, __m128d __A)
{
  return (__m256d)__builtin_ia32_selectpd_256(__M,
                                              (__v4df) _mm256_broadcastsd_pd(__A),
                                              (__v4df) __O);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_broadcastsd_pd (__mmask8 __M, __m128d __A)
{
  return (__m256d)__builtin_ia32_selectpd_256(__M,
                                              (__v4df) _mm256_broadcastsd_pd(__A),
                                              (__v4df) _mm256_setzero_pd());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_broadcastss_ps (__m128 __O, __mmask8 __M, __m128 __A)
{
  return (__m128)__builtin_ia32_selectps_128(__M,
                                             (__v4sf) _mm_broadcastss_ps(__A),
                                             (__v4sf) __O);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_broadcastss_ps (__mmask8 __M, __m128 __A)
{
  return (__m128)__builtin_ia32_selectps_128(__M,
                                             (__v4sf) _mm_broadcastss_ps(__A),
                                             (__v4sf) _mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_broadcastss_ps (__m256 __O, __mmask8 __M, __m128 __A)
{
  return (__m256)__builtin_ia32_selectps_256(__M,
                                             (__v8sf) _mm256_broadcastss_ps(__A),
                                             (__v8sf) __O);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_broadcastss_ps (__mmask8 __M, __m128 __A)
{
  return (__m256)__builtin_ia32_selectps_256(__M,
                                             (__v8sf) _mm256_broadcastss_ps(__A),
                                             (__v8sf) _mm256_setzero_ps());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_broadcastd_epi32 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectd_128(__M,
                                             (__v4si) _mm_broadcastd_epi32(__A),
                                             (__v4si) __O);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_broadcastd_epi32 (__mmask8 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectd_128(__M,
                                             (__v4si) _mm_broadcastd_epi32(__A),
                                             (__v4si) _mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_broadcastd_epi32 (__m256i __O, __mmask8 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256(__M,
                                             (__v8si) _mm256_broadcastd_epi32(__A),
                                             (__v8si) __O);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_broadcastd_epi32 (__mmask8 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectd_256(__M,
                                             (__v8si) _mm256_broadcastd_epi32(__A),
                                             (__v8si) _mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_broadcastq_epi64 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectq_128(__M,
                                             (__v2di) _mm_broadcastq_epi64(__A),
                                             (__v2di) __O);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_broadcastq_epi64 (__mmask8 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectq_128(__M,
                                             (__v2di) _mm_broadcastq_epi64(__A),
                                             (__v2di) _mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_broadcastq_epi64 (__m256i __O, __mmask8 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256(__M,
                                             (__v4di) _mm256_broadcastq_epi64(__A),
                                             (__v4di) __O);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_broadcastq_epi64 (__mmask8 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256(__M,
                                             (__v4di) _mm256_broadcastq_epi64(__A),
                                             (__v4di) _mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtsepi32_epi8 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb128_mask ((__v4si) __A,
               (__v16qi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi32_epi8 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb128_mask ((__v4si) __A,
               (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtsepi32_epi8 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb128_mask ((__v4si) __A,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi32_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovsdb128mem_mask ((__v16qi *) __P, (__v4si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtsepi32_epi8 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb256_mask ((__v8si) __A,
               (__v16qi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi32_epi8 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb256_mask ((__v8si) __A,
               (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtsepi32_epi8 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsdb256_mask ((__v8si) __A,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi32_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovsdb256mem_mask ((__v16qi *) __P, (__v8si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtsepi32_epi16 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsdw128_mask ((__v4si) __A,
               (__v8hi)_mm_setzero_si128 (),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi32_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsdw128_mask ((__v4si) __A,
               (__v8hi)__O,
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtsepi32_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsdw128_mask ((__v4si) __A,
               (__v8hi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi32_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovsdw128mem_mask ((__v8hi *) __P, (__v4si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtsepi32_epi16 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsdw256_mask ((__v8si) __A,
               (__v8hi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi32_epi16 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsdw256_mask ((__v8si) __A,
               (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtsepi32_epi16 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsdw256_mask ((__v8si) __A,
               (__v8hi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi32_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovsdw256mem_mask ((__v8hi *) __P, (__v8si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtsepi64_epi8 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb128_mask ((__v2di) __A,
               (__v16qi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi64_epi8 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb128_mask ((__v2di) __A,
               (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtsepi64_epi8 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb128_mask ((__v2di) __A,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi64_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovsqb128mem_mask ((__v16qi *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtsepi64_epi8 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb256_mask ((__v4di) __A,
               (__v16qi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi64_epi8 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb256_mask ((__v4di) __A,
               (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtsepi64_epi8 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqb256_mask ((__v4di) __A,
               (__v16qi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi64_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovsqb256mem_mask ((__v16qi *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtsepi64_epi32 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqd128_mask ((__v2di) __A,
               (__v4si)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi64_epi32 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqd128_mask ((__v2di) __A,
               (__v4si) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtsepi64_epi32 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqd128_mask ((__v2di) __A,
               (__v4si) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi64_storeu_epi32 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovsqd128mem_mask ((__v4si *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtsepi64_epi32 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqd256_mask ((__v4di) __A,
               (__v4si)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi64_epi32 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqd256_mask ((__v4di) __A,
               (__v4si)__O,
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtsepi64_epi32 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqd256_mask ((__v4di) __A,
               (__v4si) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi64_storeu_epi32 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovsqd256mem_mask ((__v4si *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtsepi64_epi16 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw128_mask ((__v2di) __A,
               (__v8hi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi64_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw128_mask ((__v2di) __A,
               (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtsepi64_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw128_mask ((__v2di) __A,
               (__v8hi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtsepi64_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovsqw128mem_mask ((__v8hi *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtsepi64_epi16 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw256_mask ((__v4di) __A,
               (__v8hi)_mm_undefined_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi64_epi16 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw256_mask ((__v4di) __A,
               (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtsepi64_epi16 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovsqw256_mask ((__v4di) __A,
               (__v8hi) _mm_setzero_si128 (),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtsepi64_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovsqw256mem_mask ((__v8hi *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtusepi32_epi8 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb128_mask ((__v4si) __A,
                (__v16qi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi32_epi8 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb128_mask ((__v4si) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtusepi32_epi8 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb128_mask ((__v4si) __A,
                (__v16qi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi32_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovusdb128mem_mask ((__v16qi *) __P, (__v4si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtusepi32_epi8 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb256_mask ((__v8si) __A,
                (__v16qi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi32_epi8 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb256_mask ((__v8si) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtusepi32_epi8 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusdb256_mask ((__v8si) __A,
                (__v16qi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi32_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovusdb256mem_mask ((__v16qi*) __P, (__v8si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtusepi32_epi16 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusdw128_mask ((__v4si) __A,
                (__v8hi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi32_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusdw128_mask ((__v4si) __A,
                (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtusepi32_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusdw128_mask ((__v4si) __A,
                (__v8hi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi32_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovusdw128mem_mask ((__v8hi *) __P, (__v4si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtusepi32_epi16 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusdw256_mask ((__v8si) __A,
                (__v8hi) _mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi32_epi16 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusdw256_mask ((__v8si) __A,
                (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtusepi32_epi16 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusdw256_mask ((__v8si) __A,
                (__v8hi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi32_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovusdw256mem_mask ((__v8hi *) __P, (__v8si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtusepi64_epi8 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb128_mask ((__v2di) __A,
                (__v16qi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi64_epi8 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb128_mask ((__v2di) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtusepi64_epi8 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb128_mask ((__v2di) __A,
                (__v16qi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi64_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovusqb128mem_mask ((__v16qi *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtusepi64_epi8 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb256_mask ((__v4di) __A,
                (__v16qi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi64_epi8 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb256_mask ((__v4di) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtusepi64_epi8 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqb256_mask ((__v4di) __A,
                (__v16qi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi64_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovusqb256mem_mask ((__v16qi *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtusepi64_epi32 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqd128_mask ((__v2di) __A,
                (__v4si)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi64_epi32 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqd128_mask ((__v2di) __A,
                (__v4si) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtusepi64_epi32 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqd128_mask ((__v2di) __A,
                (__v4si) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi64_storeu_epi32 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovusqd128mem_mask ((__v4si *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtusepi64_epi32 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqd256_mask ((__v4di) __A,
                (__v4si)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi64_epi32 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqd256_mask ((__v4di) __A,
                (__v4si) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtusepi64_epi32 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqd256_mask ((__v4di) __A,
                (__v4si) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi64_storeu_epi32 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovusqd256mem_mask ((__v4si *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtusepi64_epi16 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw128_mask ((__v2di) __A,
                (__v8hi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi64_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw128_mask ((__v2di) __A,
                (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtusepi64_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw128_mask ((__v2di) __A,
                (__v8hi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtusepi64_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovusqw128mem_mask ((__v8hi *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtusepi64_epi16 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw256_mask ((__v4di) __A,
                (__v8hi)_mm_undefined_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi64_epi16 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw256_mask ((__v4di) __A,
                (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtusepi64_epi16 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovusqw256_mask ((__v4di) __A,
                (__v8hi) _mm_setzero_si128 (),
                __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtusepi64_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)
{
  return __builtin_ia32_pmovusqw256mem_mask ((__v8hi *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepi32_epi8 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovdb128_mask ((__v4si) __A,
              (__v16qi)_mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_epi8 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovdb128_mask ((__v4si) __A,
              (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi32_epi8 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovdb128_mask ((__v4si) __A,
              (__v16qi)
              _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovdb128mem_mask ((__v16qi *) __P, (__v4si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepi32_epi8 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovdb256_mask ((__v8si) __A,
              (__v16qi)_mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_epi8 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovdb256_mask ((__v8si) __A,
              (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi32_epi8 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovdb256_mask ((__v8si) __A,
              (__v16qi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovdb256mem_mask ((__v16qi *) __P, (__v8si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepi32_epi16 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovdw128_mask ((__v4si) __A,
              (__v8hi) _mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovdw128_mask ((__v4si) __A,
              (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi32_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovdw128_mask ((__v4si) __A,
              (__v8hi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi32_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovdw128mem_mask ((__v8hi *) __P, (__v4si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepi32_epi16 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovdw256_mask ((__v8si) __A,
              (__v8hi)_mm_setzero_si128 (),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_epi16 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovdw256_mask ((__v8si) __A,
              (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi32_epi16 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovdw256_mask ((__v8si) __A,
              (__v8hi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi32_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovdw256mem_mask ((__v8hi *) __P, (__v8si) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepi64_epi8 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqb128_mask ((__v2di) __A,
              (__v16qi) _mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi64_epi8 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqb128_mask ((__v2di) __A,
              (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi64_epi8 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqb128_mask ((__v2di) __A,
              (__v16qi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi64_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovqb128mem_mask ((__v16qi *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepi64_epi8 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqb256_mask ((__v4di) __A,
              (__v16qi) _mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi64_epi8 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqb256_mask ((__v4di) __A,
              (__v16qi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi64_epi8 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqb256_mask ((__v4di) __A,
              (__v16qi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi64_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovqb256mem_mask ((__v16qi *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepi64_epi32 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqd128_mask ((__v2di) __A,
              (__v4si)_mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi64_epi32 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqd128_mask ((__v2di) __A,
              (__v4si) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi64_epi32 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqd128_mask ((__v2di) __A,
              (__v4si) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi64_storeu_epi32 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovqd128mem_mask ((__v4si *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepi64_epi32 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqd256_mask ((__v4di) __A,
              (__v4si) _mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi64_epi32 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqd256_mask ((__v4di) __A,
              (__v4si) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi64_epi32 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqd256_mask ((__v4di) __A,
              (__v4si) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi64_storeu_epi32 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovqd256mem_mask ((__v4si *) __P, (__v4di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_cvtepi64_epi16 (__m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqw128_mask ((__v2di) __A,
              (__v8hi) _mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi64_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqw128_mask ((__v2di) __A,
              (__v8hi)__O,
              __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtepi64_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_pmovqw128_mask ((__v2di) __A,
              (__v8hi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtepi64_storeu_epi16 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovqw128mem_mask ((__v8hi *) __P, (__v2di) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_cvtepi64_epi16 (__m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqw256_mask ((__v4di) __A,
              (__v8hi)_mm_undefined_si128(),
              (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi64_epi16 (__m128i __O, __mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqw256_mask ((__v4di) __A,
              (__v8hi) __O, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtepi64_epi16 (__mmask8 __M, __m256i __A)
{
  return (__m128i) __builtin_ia32_pmovqw256_mask ((__v4di) __A,
              (__v8hi) _mm_setzero_si128 (),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtepi64_storeu_epi16 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovqw256mem_mask ((__v8hi *) __P, (__v4di) __A, __M);
}
# 8507 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutexvar_pd (__m256i __X, __m256d __Y)
{
  return (__m256d) __builtin_ia32_permvardf256_mask ((__v4df) __Y,
                 (__v4di) __X,
                 (__v4df) _mm256_undefined_si256 (),
                 (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutexvar_pd (__m256d __W, __mmask8 __U, __m256i __X,
          __m256d __Y)
{
  return (__m256d) __builtin_ia32_permvardf256_mask ((__v4df) __Y,
                 (__v4di) __X,
                 (__v4df) __W,
                 (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutexvar_pd (__mmask8 __U, __m256i __X, __m256d __Y)
{
  return (__m256d) __builtin_ia32_permvardf256_mask ((__v4df) __Y,
                 (__v4di) __X,
                 (__v4df) _mm256_setzero_pd (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutexvar_epi64 (__mmask8 __M, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_permvardi256_mask ((__v4di) __Y,
                 (__v4di) __X,
                 (__v4di) _mm256_setzero_si256 (),
                 (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutexvar_epi64 ( __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_permvardi256_mask ((__v4di) __Y,
                 (__v4di) __X,
                 (__v4di) _mm256_undefined_si256 (),
                 (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutexvar_epi64 (__m256i __W, __mmask8 __M, __m256i __X,
             __m256i __Y)
{
  return (__m256i) __builtin_ia32_permvardi256_mask ((__v4di) __Y,
                 (__v4di) __X,
                 (__v4di) __W,
                 __M);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutexvar_ps (__m256 __W, __mmask8 __U, __m256i __X,
          __m256 __Y)
{
  return (__m256) __builtin_ia32_permvarsf256_mask ((__v8sf) __Y,
                (__v8si) __X,
                (__v8sf) __W,
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutexvar_ps (__mmask8 __U, __m256i __X, __m256 __Y)
{
  return (__m256) __builtin_ia32_permvarsf256_mask ((__v8sf) __Y,
                (__v8si) __X,
                (__v8sf) _mm256_setzero_ps (),
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutexvar_ps (__m256i __X, __m256 __Y)
{
  return (__m256) __builtin_ia32_permvarsf256_mask ((__v8sf) __Y,
                (__v8si) __X,
                (__v8sf) _mm256_undefined_si256 (),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_permutexvar_epi32 (__mmask8 __M, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_permvarsi256_mask ((__v8si) __Y,
                 (__v8si) __X,
                 (__v8si) _mm256_setzero_si256 (),
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_permutexvar_epi32 (__m256i __W, __mmask8 __M, __m256i __X,
             __m256i __Y)
{
  return (__m256i) __builtin_ia32_permvarsi256_mask ((__v8si) __Y,
                 (__v8si) __X,
                 (__v8si) __W,
                 (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_permutexvar_epi32 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_permvarsi256_mask ((__v8si) __Y,
                 (__v8si) __X,
                 (__v8si) _mm256_undefined_si256(),
                 (__mmask8) -1);
}
# 8693 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_movehdup_ps (__m128 __W, __mmask8 __U, __m128 __A)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_movehdup_ps(__A),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_movehdup_ps (__mmask8 __U, __m128 __A)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_movehdup_ps(__A),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_movehdup_ps (__m256 __W, __mmask8 __U, __m256 __A)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_movehdup_ps(__A),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_movehdup_ps (__mmask8 __U, __m256 __A)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_movehdup_ps(__A),
                                             (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_moveldup_ps (__m128 __W, __mmask8 __U, __m128 __A)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_moveldup_ps(__A),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_moveldup_ps (__mmask8 __U, __m128 __A)
{
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_moveldup_ps(__A),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_moveldup_ps (__m256 __W, __mmask8 __U, __m256 __A)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_moveldup_ps(__A),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_moveldup_ps (__mmask8 __U, __m256 __A)
{
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_moveldup_ps(__A),
                                             (__v8sf)_mm256_setzero_ps());
}
# 8777 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mov_pd (__m128d __W, __mmask8 __U, __m128d __A)
{
  return (__m128d) __builtin_ia32_selectpd_128 ((__mmask8) __U,
              (__v2df) __A,
              (__v2df) __W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mov_pd (__mmask8 __U, __m128d __A)
{
  return (__m128d) __builtin_ia32_selectpd_128 ((__mmask8) __U,
              (__v2df) __A,
              (__v2df) _mm_setzero_pd ());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mov_pd (__m256d __W, __mmask8 __U, __m256d __A)
{
  return (__m256d) __builtin_ia32_selectpd_256 ((__mmask8) __U,
              (__v4df) __A,
              (__v4df) __W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mov_pd (__mmask8 __U, __m256d __A)
{
  return (__m256d) __builtin_ia32_selectpd_256 ((__mmask8) __U,
              (__v4df) __A,
              (__v4df) _mm256_setzero_pd ());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_mov_ps (__m128 __W, __mmask8 __U, __m128 __A)
{
  return (__m128) __builtin_ia32_selectps_128 ((__mmask8) __U,
             (__v4sf) __A,
             (__v4sf) __W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_mov_ps (__mmask8 __U, __m128 __A)
{
  return (__m128) __builtin_ia32_selectps_128 ((__mmask8) __U,
             (__v4sf) __A,
             (__v4sf) _mm_setzero_ps ());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_mov_ps (__m256 __W, __mmask8 __U, __m256 __A)
{
  return (__m256) __builtin_ia32_selectps_256 ((__mmask8) __U,
             (__v8sf) __A,
             (__v8sf) __W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_mov_ps (__mmask8 __U, __m256 __A)
{
  return (__m256) __builtin_ia32_selectps_256 ((__mmask8) __U,
             (__v8sf) __A,
             (__v8sf) _mm256_setzero_ps ());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtph_ps (__m128 __W, __mmask8 __U, __m128i __A)
{
  return (__m128) __builtin_ia32_vcvtph2ps_mask ((__v8hi) __A,
             (__v4sf) __W,
             (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtph_ps (__mmask8 __U, __m128i __A)
{
  return (__m128) __builtin_ia32_vcvtph2ps_mask ((__v8hi) __A,
             (__v4sf)
             _mm_setzero_ps (),
             (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtph_ps (__m256 __W, __mmask8 __U, __m128i __A)
{
  return (__m256) __builtin_ia32_vcvtph2ps256_mask ((__v8hi) __A,
                (__v8sf) __W,
                (__mmask8) __U);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtph_ps (__mmask8 __U, __m128i __A)
{
  return (__m256) __builtin_ia32_vcvtph2ps256_mask ((__v8hi) __A,
                (__v8sf)
                _mm256_setzero_ps (),
                (__mmask8) __U);
}

static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_mask_cvtps_ph (__m128i __W, __mmask8 __U, __m128 __A)
{
  return (__m128i) __builtin_ia32_vcvtps2ph_mask ((__v4sf) __A, 0x04,
                                                  (__v8hi) __W,
                                                  (__mmask8) __U);
}

static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm_maskz_cvtps_ph (__mmask8 __U, __m128 __A)
{
  return (__m128i) __builtin_ia32_vcvtps2ph_mask ((__v4sf) __A, 0x04,
                                                  (__v8hi) _mm_setzero_si128 (),
                                                  (__mmask8) __U);
}
# 8901 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlintrin.h" 3
static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_mask_cvtps_ph (__m128i __W, __mmask8 __U, __m256 __A)
{
  return (__m128i) __builtin_ia32_vcvtps2ph256_mask ((__v8sf) __A, 0x04,
                                                      (__v8hi) __W,
                                                      (__mmask8) __U);
}

static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl")))
_mm256_maskz_cvtps_ph ( __mmask8 __U, __m256 __A)
{
  return (__m128i) __builtin_ia32_vcvtps2ph256_mask ((__v8sf) __A, 0x04,
                                                      (__v8hi) _mm_setzero_si128(),
                                                      (__mmask8) __U);
}
# 139 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512bwintrin.h" 1 3
# 31 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512bwintrin.h" 3
typedef unsigned int __mmask32;
typedef unsigned long long __mmask64;




static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_setzero_qi(void) {
  return (__m512i)(__v64qi){ 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };
}

static __inline __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_setzero_hi(void) {
  return (__m512i)(__v32hi){ 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };
}



static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpeq_epi8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_pcmpeqb512_mask((__v64qi)__a, (__v64qi)__b,
                                                   (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpeq_epi8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_pcmpeqb512_mask((__v64qi)__a, (__v64qi)__b,
                                                   __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpeq_epu8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 0,
                                                 (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpeq_epu8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 0,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpeq_epi16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_pcmpeqw512_mask((__v32hi)__a, (__v32hi)__b,
                                                   (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpeq_epi16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_pcmpeqw512_mask((__v32hi)__a, (__v32hi)__b,
                                                   __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpeq_epu16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 0,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpeq_epu16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 0,
                                                 __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpge_epi8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 5,
                                                (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpge_epi8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 5,
                                                __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpge_epu8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 5,
                                                 (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpge_epu8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 5,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpge_epi16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 5,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpge_epi16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 5,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpge_epu16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 5,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpge_epu16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 5,
                                                 __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpgt_epi8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_pcmpgtb512_mask((__v64qi)__a, (__v64qi)__b,
                                                   (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpgt_epi8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_pcmpgtb512_mask((__v64qi)__a, (__v64qi)__b,
                                                   __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpgt_epu8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 6,
                                                 (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpgt_epu8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 6,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpgt_epi16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_pcmpgtw512_mask((__v32hi)__a, (__v32hi)__b,
                                                   (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpgt_epi16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_pcmpgtw512_mask((__v32hi)__a, (__v32hi)__b,
                                                   __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpgt_epu16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 6,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpgt_epu16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 6,
                                                 __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmple_epi8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 2,
                                                (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmple_epi8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 2,
                                                __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmple_epu8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 2,
                                                 (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmple_epu8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 2,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmple_epi16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 2,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmple_epi16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 2,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmple_epu16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 2,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmple_epu16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 2,
                                                 __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmplt_epi8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 1,
                                                (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmplt_epi8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 1,
                                                __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmplt_epu8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 1,
                                                 (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmplt_epu8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 1,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmplt_epi16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 1,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmplt_epi16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 1,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmplt_epu16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 1,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmplt_epu16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 1,
                                                 __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpneq_epi8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 4,
                                                (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpneq_epi8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__a, (__v64qi)__b, 4,
                                                __u);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpneq_epu8_mask(__m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 4,
                                                 (__mmask64)-1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpneq_epu8_mask(__mmask64 __u, __m512i __a, __m512i __b) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__a, (__v64qi)__b, 4,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpneq_epi16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 4,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpneq_epi16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__a, (__v32hi)__b, 4,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cmpneq_epu16_mask(__m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 4,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cmpneq_epu16_mask(__mmask32 __u, __m512i __a, __m512i __b) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__a, (__v32hi)__b, 4,
                                                 __u);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_add_epi8 (__m512i __A, __m512i __B) {
  return (__m512i) ((__v64qu) __A + (__v64qu) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_add_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                             (__v64qi)_mm512_add_epi8(__A, __B),
                                             (__v64qi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_add_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                             (__v64qi)_mm512_add_epi8(__A, __B),
                                             (__v64qi)_mm512_setzero_qi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_sub_epi8 (__m512i __A, __m512i __B) {
  return (__m512i) ((__v64qu) __A - (__v64qu) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_sub_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                             (__v64qi)_mm512_sub_epi8(__A, __B),
                                             (__v64qi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_sub_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                             (__v64qi)_mm512_sub_epi8(__A, __B),
                                             (__v64qi)_mm512_setzero_qi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_add_epi16 (__m512i __A, __m512i __B) {
  return (__m512i) ((__v32hu) __A + (__v32hu) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_add_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                             (__v32hi)_mm512_add_epi16(__A, __B),
                                             (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_add_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                             (__v32hi)_mm512_add_epi16(__A, __B),
                                             (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_sub_epi16 (__m512i __A, __m512i __B) {
  return (__m512i) ((__v32hu) __A - (__v32hu) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_sub_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                             (__v32hi)_mm512_sub_epi16(__A, __B),
                                             (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_sub_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                             (__v32hi)_mm512_sub_epi16(__A, __B),
                                             (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mullo_epi16 (__m512i __A, __m512i __B) {
  return (__m512i) ((__v32hu) __A * (__v32hu) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_mullo_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                             (__v32hi)_mm512_mullo_epi16(__A, __B),
                                             (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_mullo_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                             (__v32hi)_mm512_mullo_epi16(__A, __B),
                                             (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_blend_epi8 (__mmask64 __U, __m512i __A, __m512i __W)
{
  return (__m512i) __builtin_ia32_selectb_512 ((__mmask64) __U,
              (__v64qi) __W,
              (__v64qi) __A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_blend_epi16 (__mmask32 __U, __m512i __A, __m512i __W)
{
  return (__m512i) __builtin_ia32_selectw_512 ((__mmask32) __U,
              (__v32hi) __W,
              (__v32hi) __A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_abs_epi8 (__m512i __A)
{
  return (__m512i) __builtin_ia32_pabsb512_mask ((__v64qi) __A,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_abs_epi8 (__m512i __W, __mmask64 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsb512_mask ((__v64qi) __A,
              (__v64qi) __W,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_abs_epi8 (__mmask64 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsb512_mask ((__v64qi) __A,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_abs_epi16 (__m512i __A)
{
  return (__m512i) __builtin_ia32_pabsw512_mask ((__v32hi) __A,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_abs_epi16 (__m512i __W, __mmask32 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsw512_mask ((__v32hi) __A,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_abs_epi16 (__mmask32 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_pabsw512_mask ((__v32hi) __A,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_packs_epi32(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_packssdw512((__v16si)__A, (__v16si)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_packs_epi32(__mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__M,
                                       (__v32hi)_mm512_packs_epi32(__A, __B),
                                       (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_packs_epi32(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__M,
                                       (__v32hi)_mm512_packs_epi32(__A, __B),
                                       (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_packs_epi16(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_packsswb512((__v32hi)__A, (__v32hi) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_packs_epi16(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__M,
                                        (__v64qi)_mm512_packs_epi16(__A, __B),
                                        (__v64qi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_packs_epi16(__mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__M,
                                        (__v64qi)_mm512_packs_epi16(__A, __B),
                                        (__v64qi)_mm512_setzero_qi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_packus_epi32(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_packusdw512((__v16si) __A, (__v16si) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_packus_epi32(__mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__M,
                                       (__v32hi)_mm512_packus_epi32(__A, __B),
                                       (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_packus_epi32(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__M,
                                       (__v32hi)_mm512_packus_epi32(__A, __B),
                                       (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_packus_epi16(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_packuswb512((__v32hi) __A, (__v32hi) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_packus_epi16(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__M,
                                        (__v64qi)_mm512_packus_epi16(__A, __B),
                                        (__v64qi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_packus_epi16(__mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__M,
                                        (__v64qi)_mm512_packus_epi16(__A, __B),
                                        (__v64qi)_mm512_setzero_qi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_adds_epi8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_adds_epi8 (__m512i __W, __mmask64 __U, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_paddsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_adds_epi8 (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_adds_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_adds_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
      __m512i __B)
{
  return (__m512i) __builtin_ia32_paddsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_adds_epi16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_adds_epu8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddusb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_adds_epu8 (__m512i __W, __mmask64 __U, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_paddusb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_adds_epu8 (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddusb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_adds_epu16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddusw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_adds_epu16 (__m512i __W, __mmask32 __U, __m512i __A,
      __m512i __B)
{
  return (__m512i) __builtin_ia32_paddusw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_adds_epu16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_paddusw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_avg_epu8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pavgb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_avg_epu8 (__m512i __W, __mmask64 __U, __m512i __A,
          __m512i __B)
{
  return (__m512i) __builtin_ia32_pavgb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_avg_epu8 (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pavgb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_avg_epu16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pavgw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_avg_epu16 (__m512i __W, __mmask32 __U, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_pavgw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_avg_epu16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pavgw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_max_epi8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_max_epi8 (__mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_max_epi8 (__m512i __W, __mmask64 __M, __m512i __A,
          __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_max_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_max_epi16 (__mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_max_epi16 (__m512i __W, __mmask32 __M, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_max_epu8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxub512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_max_epu8 (__mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxub512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_max_epu8 (__m512i __W, __mmask64 __M, __m512i __A,
          __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxub512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_max_epu16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_max_epu16 (__mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_max_epu16 (__m512i __W, __mmask32 __M, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_pmaxuw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_min_epi8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_min_epi8 (__mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_min_epi8 (__m512i __W, __mmask64 __M, __m512i __A,
          __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_min_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_min_epi16 (__mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_min_epi16 (__m512i __W, __mmask32 __M, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_pminsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_min_epu8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminub512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_min_epu8 (__mmask64 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminub512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_min_epu8 (__m512i __W, __mmask64 __M, __m512i __A,
          __m512i __B)
{
  return (__m512i) __builtin_ia32_pminub512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_min_epu16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_min_epu16 (__mmask32 __M, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_min_epu16 (__m512i __W, __mmask32 __M, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_pminuw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_shuffle_epi8(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_pshufb512((__v64qi)__A,(__v64qi)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_shuffle_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                         (__v64qi)_mm512_shuffle_epi8(__A, __B),
                                         (__v64qi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_shuffle_epi8(__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                         (__v64qi)_mm512_shuffle_epi8(__A, __B),
                                         (__v64qi)_mm512_setzero_qi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_subs_epi8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_subs_epi8 (__m512i __W, __mmask64 __U, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_psubsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_subs_epi8 (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubsb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_subs_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_subs_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
      __m512i __B)
{
  return (__m512i) __builtin_ia32_psubsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_subs_epi16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubsw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_subs_epu8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubusb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_subs_epu8 (__m512i __W, __mmask64 __U, __m512i __A,
           __m512i __B)
{
  return (__m512i) __builtin_ia32_psubusb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) __W,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_subs_epu8 (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubusb512_mask ((__v64qi) __A,
              (__v64qi) __B,
              (__v64qi) _mm512_setzero_qi(),
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_subs_epu16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubusw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_subs_epu16 (__m512i __W, __mmask32 __U, __m512i __A,
      __m512i __B)
{
  return (__m512i) __builtin_ia32_psubusw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_subs_epu16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_psubusw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask2_permutex2var_epi16 (__m512i __A, __m512i __I,
         __mmask32 __U, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermi2varhi512_mask ((__v32hi) __A,
              (__v32hi) __I ,
              (__v32hi) __B,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_permutex2var_epi16 (__m512i __A, __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varhi512_mask ((__v32hi) __I ,
              (__v32hi) __A,
              (__v32hi) __B,
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_permutex2var_epi16 (__m512i __A, __mmask32 __U,
        __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varhi512_mask ((__v32hi) __I ,
              (__v32hi) __A,
              (__v32hi) __B,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_permutex2var_epi16 (__mmask32 __U, __m512i __A,
         __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varhi512_maskz ((__v32hi) __I
                        ,
              (__v32hi) __A,
              (__v32hi) __B,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mulhrs_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhrsw512_mask ((__v32hi) __A,
                (__v32hi) __B,
                (__v32hi) _mm512_setzero_hi(),
                (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_mulhrs_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
        __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhrsw512_mask ((__v32hi) __A,
                (__v32hi) __B,
                (__v32hi) __W,
                (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_mulhrs_epi16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhrsw512_mask ((__v32hi) __A,
                (__v32hi) __B,
                (__v32hi) _mm512_setzero_hi(),
                (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mulhi_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_mulhi_epi16 (__m512i __W, __mmask32 __U, __m512i __A,
       __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) __W,
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_mulhi_epi16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhw512_mask ((__v32hi) __A,
              (__v32hi) __B,
              (__v32hi) _mm512_setzero_hi(),
              (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mulhi_epu16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhuw512_mask ((__v32hi) __A,
               (__v32hi) __B,
               (__v32hi) _mm512_setzero_hi(),
               (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_mulhi_epu16 (__m512i __W, __mmask32 __U, __m512i __A,
       __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhuw512_mask ((__v32hi) __A,
               (__v32hi) __B,
               (__v32hi) __W,
               (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_mulhi_epu16 (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_pmulhuw512_mask ((__v32hi) __A,
               (__v32hi) __B,
               (__v32hi) _mm512_setzero_hi(),
               (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maddubs_epi16 (__m512i __X, __m512i __Y) {
  return (__m512i) __builtin_ia32_pmaddubsw512_mask ((__v64qi) __X,
                 (__v64qi) __Y,
                 (__v32hi) _mm512_setzero_hi(),
                 (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_maddubs_epi16 (__m512i __W, __mmask32 __U, __m512i __X,
         __m512i __Y) {
  return (__m512i) __builtin_ia32_pmaddubsw512_mask ((__v64qi) __X,
                 (__v64qi) __Y,
                 (__v32hi) __W,
                 (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_maddubs_epi16 (__mmask32 __U, __m512i __X, __m512i __Y) {
  return (__m512i) __builtin_ia32_pmaddubsw512_mask ((__v64qi) __X,
                 (__v64qi) __Y,
                 (__v32hi) _mm512_setzero_hi(),
                 (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_madd_epi16 (__m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_pmaddwd512_mask ((__v32hi) __A,
               (__v32hi) __B,
               (__v16si) _mm512_setzero_si512(),
               (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_madd_epi16 (__m512i __W, __mmask16 __U, __m512i __A,
      __m512i __B) {
  return (__m512i) __builtin_ia32_pmaddwd512_mask ((__v32hi) __A,
               (__v32hi) __B,
               (__v16si) __W,
               (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_madd_epi16 (__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i) __builtin_ia32_pmaddwd512_mask ((__v32hi) __A,
               (__v32hi) __B,
               (__v16si) _mm512_setzero_si512(),
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cvtsepi16_epi8 (__m512i __A) {
  return (__m256i) __builtin_ia32_pmovswb512_mask ((__v32hi) __A,
               (__v32qi)_mm256_setzero_si256(),
               (__mmask32) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtsepi16_epi8 (__m256i __O, __mmask32 __M, __m512i __A) {
  return (__m256i) __builtin_ia32_pmovswb512_mask ((__v32hi) __A,
               (__v32qi)__O,
               __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_cvtsepi16_epi8 (__mmask32 __M, __m512i __A) {
  return (__m256i) __builtin_ia32_pmovswb512_mask ((__v32hi) __A,
               (__v32qi) _mm256_setzero_si256(),
               __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cvtusepi16_epi8 (__m512i __A) {
  return (__m256i) __builtin_ia32_pmovuswb512_mask ((__v32hi) __A,
                (__v32qi) _mm256_setzero_si256(),
                (__mmask32) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtusepi16_epi8 (__m256i __O, __mmask32 __M, __m512i __A) {
  return (__m256i) __builtin_ia32_pmovuswb512_mask ((__v32hi) __A,
                (__v32qi) __O,
                __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_cvtusepi16_epi8 (__mmask32 __M, __m512i __A) {
  return (__m256i) __builtin_ia32_pmovuswb512_mask ((__v32hi) __A,
                (__v32qi) _mm256_setzero_si256(),
                __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cvtepi16_epi8 (__m512i __A) {
  return (__m256i) __builtin_ia32_pmovwb512_mask ((__v32hi) __A,
              (__v32qi) _mm256_setzero_si256(),
              (__mmask32) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtepi16_epi8 (__m256i __O, __mmask32 __M, __m512i __A) {
  return (__m256i) __builtin_ia32_pmovwb512_mask ((__v32hi) __A,
              (__v32qi) __O,
              __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_cvtepi16_epi8 (__mmask32 __M, __m512i __A) {
  return (__m256i) __builtin_ia32_pmovwb512_mask ((__v32hi) __A,
              (__v32qi) _mm256_setzero_si256(),
              __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtepi16_storeu_epi8 (void * __P, __mmask32 __M, __m512i __A)
{
  __builtin_ia32_pmovwb512mem_mask ((__v32qi *) __P, (__v32hi) __A, __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtsepi16_storeu_epi8 (void * __P, __mmask32 __M, __m512i __A)
{
  __builtin_ia32_pmovswb512mem_mask ((__v32qi *) __P, (__v32hi) __A, __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtusepi16_storeu_epi8 (void * __P, __mmask32 __M, __m512i __A)
{
  __builtin_ia32_pmovuswb512mem_mask ((__v32qi *) __P, (__v32hi) __A, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_unpackhi_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_shufflevector((__v64qi)__A, (__v64qi)__B,
                                          8, 64+8, 9, 64+9,
                                          10, 64+10, 11, 64+11,
                                          12, 64+12, 13, 64+13,
                                          14, 64+14, 15, 64+15,
                                          24, 64+24, 25, 64+25,
                                          26, 64+26, 27, 64+27,
                                          28, 64+28, 29, 64+29,
                                          30, 64+30, 31, 64+31,
                                          40, 64+40, 41, 64+41,
                                          42, 64+42, 43, 64+43,
                                          44, 64+44, 45, 64+45,
                                          46, 64+46, 47, 64+47,
                                          56, 64+56, 57, 64+57,
                                          58, 64+58, 59, 64+59,
                                          60, 64+60, 61, 64+61,
                                          62, 64+62, 63, 64+63);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_unpackhi_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                        (__v64qi)_mm512_unpackhi_epi8(__A, __B),
                                        (__v64qi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_unpackhi_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                        (__v64qi)_mm512_unpackhi_epi8(__A, __B),
                                        (__v64qi)_mm512_setzero_qi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_unpackhi_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_shufflevector((__v32hi)__A, (__v32hi)__B,
                                          4, 32+4, 5, 32+5,
                                          6, 32+6, 7, 32+7,
                                          12, 32+12, 13, 32+13,
                                          14, 32+14, 15, 32+15,
                                          20, 32+20, 21, 32+21,
                                          22, 32+22, 23, 32+23,
                                          28, 32+28, 29, 32+29,
                                          30, 32+30, 31, 32+31);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_unpackhi_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                       (__v32hi)_mm512_unpackhi_epi16(__A, __B),
                                       (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_unpackhi_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                       (__v32hi)_mm512_unpackhi_epi16(__A, __B),
                                       (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_unpacklo_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_shufflevector((__v64qi)__A, (__v64qi)__B,
                                          0, 64+0, 1, 64+1,
                                          2, 64+2, 3, 64+3,
                                          4, 64+4, 5, 64+5,
                                          6, 64+6, 7, 64+7,
                                          16, 64+16, 17, 64+17,
                                          18, 64+18, 19, 64+19,
                                          20, 64+20, 21, 64+21,
                                          22, 64+22, 23, 64+23,
                                          32, 64+32, 33, 64+33,
                                          34, 64+34, 35, 64+35,
                                          36, 64+36, 37, 64+37,
                                          38, 64+38, 39, 64+39,
                                          48, 64+48, 49, 64+49,
                                          50, 64+50, 51, 64+51,
                                          52, 64+52, 53, 64+53,
                                          54, 64+54, 55, 64+55);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_unpacklo_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                        (__v64qi)_mm512_unpacklo_epi8(__A, __B),
                                        (__v64qi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_unpacklo_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectb_512((__mmask64)__U,
                                        (__v64qi)_mm512_unpacklo_epi8(__A, __B),
                                        (__v64qi)_mm512_setzero_qi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_unpacklo_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_shufflevector((__v32hi)__A, (__v32hi)__B,
                                          0, 32+0, 1, 32+1,
                                          2, 32+2, 3, 32+3,
                                          8, 32+8, 9, 32+9,
                                          10, 32+10, 11, 32+11,
                                          16, 32+16, 17, 32+17,
                                          18, 32+18, 19, 32+19,
                                          24, 32+24, 25, 32+25,
                                          26, 32+26, 27, 32+27);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_unpacklo_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                       (__v32hi)_mm512_unpacklo_epi16(__A, __B),
                                       (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_unpacklo_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                       (__v32hi)_mm512_unpacklo_epi16(__A, __B),
                                       (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cvtepi8_epi16(__m256i __A)
{


  return (__m512i)__builtin_convertvector((__v32qs)__A, __v32hi);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtepi8_epi16(__m512i __W, __mmask32 __U, __m256i __A)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                             (__v32hi)_mm512_cvtepi8_epi16(__A),
                                             (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_cvtepi8_epi16(__mmask32 __U, __m256i __A)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                             (__v32hi)_mm512_cvtepi8_epi16(__A),
                                             (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_cvtepu8_epi16(__m256i __A)
{
  return (__m512i)__builtin_convertvector((__v32qu)__A, __v32hi);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_cvtepu8_epi16(__m512i __W, __mmask32 __U, __m256i __A)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                             (__v32hi)_mm512_cvtepu8_epi16(__A),
                                             (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_cvtepu8_epi16(__mmask32 __U, __m256i __A)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                             (__v32hi)_mm512_cvtepu8_epi16(__A),
                                             (__v32hi)_mm512_setzero_hi());
}
# 1660 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512bwintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_sllv_epi16(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_psllv32hi((__v32hi) __A, (__v32hi) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_sllv_epi16 (__m512i __W, __mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                           (__v32hi)_mm512_sllv_epi16(__A, __B),
                                           (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_sllv_epi16(__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                           (__v32hi)_mm512_sllv_epi16(__A, __B),
                                           (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_sll_epi16(__m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_psllw512((__v32hi) __A, (__v8hi) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_sll_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                          (__v32hi)_mm512_sll_epi16(__A, __B),
                                          (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_sll_epi16(__mmask32 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                          (__v32hi)_mm512_sll_epi16(__A, __B),
                                          (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_slli_epi16(__m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_psllwi512((__v32hi)__A, __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_slli_epi16(__m512i __W, __mmask32 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                         (__v32hi)_mm512_slli_epi16(__A, __B),
                                         (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_slli_epi16(__mmask32 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                         (__v32hi)_mm512_slli_epi16(__A, __B),
                                         (__v32hi)_mm512_setzero_hi());
}
# 1795 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512bwintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_srlv_epi16(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_psrlv32hi((__v32hi)__A, (__v32hi)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_srlv_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                           (__v32hi)_mm512_srlv_epi16(__A, __B),
                                           (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_srlv_epi16(__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                           (__v32hi)_mm512_srlv_epi16(__A, __B),
                                           (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_srav_epi16(__m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_psrav32hi((__v32hi)__A, (__v32hi)__B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_srav_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                           (__v32hi)_mm512_srav_epi16(__A, __B),
                                           (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_srav_epi16(__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                           (__v32hi)_mm512_srav_epi16(__A, __B),
                                           (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_sra_epi16(__m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_psraw512((__v32hi) __A, (__v8hi) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_sra_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                          (__v32hi)_mm512_sra_epi16(__A, __B),
                                          (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_sra_epi16(__mmask32 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                          (__v32hi)_mm512_sra_epi16(__A, __B),
                                          (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_srai_epi16(__m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_psrawi512((__v32hi)__A, __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_srai_epi16(__m512i __W, __mmask32 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                         (__v32hi)_mm512_srai_epi16(__A, __B),
                                         (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_srai_epi16(__mmask32 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                         (__v32hi)_mm512_srai_epi16(__A, __B),
                                         (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_srl_epi16(__m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_psrlw512((__v32hi) __A, (__v8hi) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_srl_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                          (__v32hi)_mm512_srl_epi16(__A, __B),
                                          (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_srl_epi16(__mmask32 __U, __m512i __A, __m128i __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                          (__v32hi)_mm512_srl_epi16(__A, __B),
                                          (__v32hi)_mm512_setzero_hi());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_srli_epi16(__m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_psrlwi512((__v32hi)__A, __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_srli_epi16(__m512i __W, __mmask32 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                         (__v32hi)_mm512_srli_epi16(__A, __B),
                                         (__v32hi)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_srli_epi16(__mmask32 __U, __m512i __A, int __B)
{
  return (__m512i)__builtin_ia32_selectw_512((__mmask32)__U,
                                         (__v32hi)_mm512_srli_epi16(__A, __B),
                                         (__v32hi)_mm512_setzero_hi());
}
# 1996 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512bwintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_mov_epi16 (__m512i __W, __mmask32 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectw_512 ((__mmask32) __U,
                (__v32hi) __A,
                (__v32hi) __W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_mov_epi16 (__mmask32 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectw_512 ((__mmask32) __U,
                (__v32hi) __A,
                (__v32hi) _mm512_setzero_hi ());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_mov_epi8 (__m512i __W, __mmask64 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectb_512 ((__mmask64) __U,
                (__v64qi) __A,
                (__v64qi) __W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_mov_epi8 (__mmask64 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_selectb_512 ((__mmask64) __U,
                (__v64qi) __A,
                (__v64qi) _mm512_setzero_hi ());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_set1_epi8 (__m512i __O, __mmask64 __M, char __A)
{
  return (__m512i) __builtin_ia32_pbroadcastb512_gpr_mask (__A,
                 (__v64qi) __O,
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_set1_epi8 (__mmask64 __M, char __A)
{
  return (__m512i) __builtin_ia32_pbroadcastb512_gpr_mask (__A,
                 (__v64qi)
                 _mm512_setzero_qi(),
                 __M);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_kunpackd (__mmask64 __A, __mmask64 __B)
{
  return (__mmask64) __builtin_ia32_kunpckdi ((__mmask64) __A,
                (__mmask64) __B);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_kunpackw (__mmask32 __A, __mmask32 __B)
{
  return (__mmask32) __builtin_ia32_kunpcksi ((__mmask32) __A,
                (__mmask32) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_loadu_epi16 (__m512i __W, __mmask32 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddquhi512_mask ((__v32hi *) __P,
                 (__v32hi) __W,
                 (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_loadu_epi16 (__mmask32 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddquhi512_mask ((__v32hi *) __P,
                 (__v32hi)
                 _mm512_setzero_hi (),
                 (__mmask32) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_loadu_epi8 (__m512i __W, __mmask64 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddquqi512_mask ((__v64qi *) __P,
                 (__v64qi) __W,
                 (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_loadu_epi8 (__mmask64 __U, void const *__P)
{
  return (__m512i) __builtin_ia32_loaddquqi512_mask ((__v64qi *) __P,
                 (__v64qi)
                 _mm512_setzero_hi (),
                 (__mmask64) __U);
}
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_storeu_epi16 (void *__P, __mmask32 __U, __m512i __A)
{
  __builtin_ia32_storedquhi512_mask ((__v32hi *) __P,
             (__v32hi) __A,
             (__mmask32) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_storeu_epi8 (void *__P, __mmask64 __U, __m512i __A)
{
  __builtin_ia32_storedquqi512_mask ((__v64qi *) __P,
             (__v64qi) __A,
             (__mmask64) __U);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_test_epi8_mask (__m512i __A, __m512i __B)
{
  return (__mmask64) __builtin_ia32_ptestmb512 ((__v64qi) __A,
            (__v64qi) __B,
            (__mmask64) -1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_test_epi8_mask (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__mmask64) __builtin_ia32_ptestmb512 ((__v64qi) __A,
            (__v64qi) __B, __U);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_test_epi16_mask (__m512i __A, __m512i __B)
{
  return (__mmask32) __builtin_ia32_ptestmw512 ((__v32hi) __A,
            (__v32hi) __B,
            (__mmask32) -1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_test_epi16_mask (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__mmask32) __builtin_ia32_ptestmw512 ((__v32hi) __A,
            (__v32hi) __B, __U);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_testn_epi8_mask (__m512i __A, __m512i __B)
{
  return (__mmask64) __builtin_ia32_ptestnmb512 ((__v64qi) __A,
             (__v64qi) __B,
             (__mmask64) -1);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_testn_epi8_mask (__mmask64 __U, __m512i __A, __m512i __B)
{
  return (__mmask64) __builtin_ia32_ptestnmb512 ((__v64qi) __A,
             (__v64qi) __B, __U);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_testn_epi16_mask (__m512i __A, __m512i __B)
{
  return (__mmask32) __builtin_ia32_ptestnmw512 ((__v32hi) __A,
             (__v32hi) __B,
             (__mmask32) -1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_testn_epi16_mask (__mmask32 __U, __m512i __A, __m512i __B)
{
  return (__mmask32) __builtin_ia32_ptestnmw512 ((__v32hi) __A,
             (__v32hi) __B, __U);
}

static __inline__ __mmask64 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_movepi8_mask (__m512i __A)
{
  return (__mmask64) __builtin_ia32_cvtb2mask512 ((__v64qi) __A);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_movepi16_mask (__m512i __A)
{
  return (__mmask32) __builtin_ia32_cvtw2mask512 ((__v32hi) __A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_movm_epi8 (__mmask64 __A)
{
  return (__m512i) __builtin_ia32_cvtmask2b512 (__A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_movm_epi16 (__mmask32 __A)
{
  return (__m512i) __builtin_ia32_cvtmask2w512 (__A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_broadcastb_epi8 (__m128i __A)
{
  return (__m512i)__builtin_shufflevector((__v16qi) __A,
                                          (__v16qi)_mm_undefined_si128(),
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_broadcastb_epi8 (__m512i __O, __mmask64 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectb_512(__M,
                                             (__v64qi) _mm512_broadcastb_epi8(__A),
                                             (__v64qi) __O);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_broadcastb_epi8 (__mmask64 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectb_512(__M,
                                             (__v64qi) _mm512_broadcastb_epi8(__A),
                                             (__v64qi) _mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_set1_epi16 (__m512i __O, __mmask32 __M, short __A)
{
  return (__m512i) __builtin_ia32_pbroadcastw512_gpr_mask (__A,
                 (__v32hi) __O,
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_set1_epi16 (__mmask32 __M, short __A)
{
  return (__m512i) __builtin_ia32_pbroadcastw512_gpr_mask (__A,
                 (__v32hi) _mm512_setzero_hi(),
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_broadcastw_epi16 (__m128i __A)
{
  return (__m512i)__builtin_shufflevector((__v8hi) __A,
                                          (__v8hi)_mm_undefined_si128(),
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_broadcastw_epi16 (__m512i __O, __mmask32 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectw_512(__M,
                                             (__v32hi) _mm512_broadcastw_epi16(__A),
                                             (__v32hi) __O);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_broadcastw_epi16 (__mmask32 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectw_512(__M,
                                             (__v32hi) _mm512_broadcastw_epi16(__A),
                                             (__v32hi) _mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_permutexvar_epi16 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_permvarhi512_mask ((__v32hi) __B,
                 (__v32hi) __A,
                 (__v32hi) _mm512_undefined_epi32 (),
                 (__mmask32) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_maskz_permutexvar_epi16 (__mmask32 __M, __m512i __A,
        __m512i __B)
{
  return (__m512i) __builtin_ia32_permvarhi512_mask ((__v32hi) __B,
                 (__v32hi) __A,
                 (__v32hi) _mm512_setzero_hi(),
                 (__mmask32) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_mask_permutexvar_epi16 (__m512i __W, __mmask32 __M, __m512i __A,
             __m512i __B)
{
  return (__m512i) __builtin_ia32_permvarhi512_mask ((__v32hi) __B,
                 (__v32hi) __A,
                 (__v32hi) __W,
                 (__mmask32) __M);
}
# 2325 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512bwintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512bw")))
_mm512_sad_epu8 (__m512i __A, __m512i __B)
{
 return (__m512i) __builtin_ia32_psadbw512 ((__v64qi) __A,
               (__v64qi) __B);
}
# 143 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512cdintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512cdintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_conflict_epi64 (__m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,
                 (__v8di) _mm512_setzero_si512 (),
                 (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_mask_conflict_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,
               (__v8di) __W,
               (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_maskz_conflict_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,
                 (__v8di) _mm512_setzero_si512 (),
                 (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_conflict_epi32 (__m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictsi_512_mask ((__v16si) __A,
                 (__v16si) _mm512_setzero_si512 (),
                 (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_mask_conflict_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictsi_512_mask ((__v16si) __A,
               (__v16si) __W,
               (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_maskz_conflict_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vpconflictsi_512_mask ((__v16si) __A,
                 (__v16si) _mm512_setzero_si512 (),
                 (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_lzcnt_epi32 (__m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntd_512_mask ((__v16si) __A,
             (__v16si) _mm512_setzero_si512 (),
             (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_mask_lzcnt_epi32 (__m512i __W, __mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntd_512_mask ((__v16si) __A,
                 (__v16si) __W,
                 (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_maskz_lzcnt_epi32 (__mmask16 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntd_512_mask ((__v16si) __A,
             (__v16si) _mm512_setzero_si512 (),
             (__mmask16) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_lzcnt_epi64 (__m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntq_512_mask ((__v8di) __A,
             (__v8di) _mm512_setzero_si512 (),
             (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_mask_lzcnt_epi64 (__m512i __W, __mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntq_512_mask ((__v8di) __A,
                 (__v8di) __W,
                 (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_maskz_lzcnt_epi64 (__mmask8 __U, __m512i __A)
{
  return (__m512i) __builtin_ia32_vplzcntq_512_mask ((__v8di) __A,
             (__v8di) _mm512_setzero_si512 (),
             (__mmask8) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_broadcastmb_epi64 (__mmask8 __A)
{
  return (__m512i) __builtin_ia32_broadcastmb512 (__A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512cd")))
_mm512_broadcastmw_epi32 (__mmask16 __A)
{
  return (__m512i) __builtin_ia32_broadcastmw512 (__A);
}
# 147 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vpopcntdqintrin.h" 1 3
# 38 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vpopcntdqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vpopcntd" "q"))) _mm512_popcnt_epi64(__m512i __A) {
  return (__m512i)__builtin_ia32_vpopcntq_512((__v8di)__A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vpopcntd" "q")))
_mm512_mask_popcnt_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_selectq_512(
      (__mmask8)__U, (__v8di)_mm512_popcnt_epi64(__A), (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vpopcntd" "q")))
_mm512_maskz_popcnt_epi64(__mmask8 __U, __m512i __A) {
  return _mm512_mask_popcnt_epi64((__m512i)_mm512_setzero_si512(), __U, __A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vpopcntd" "q"))) _mm512_popcnt_epi32(__m512i __A) {
  return (__m512i)__builtin_ia32_vpopcntd_512((__v16si)__A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vpopcntd" "q")))
_mm512_mask_popcnt_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_selectd_512(
      (__mmask16)__U, (__v16si)_mm512_popcnt_epi32(__A), (__v16si)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vpopcntd" "q")))
_mm512_maskz_popcnt_epi32(__mmask16 __U, __m512i __A) {
  return _mm512_mask_popcnt_epi32((__m512i)_mm512_setzero_si512(), __U, __A);
}
# 151 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mullo_epi64 (__m512i __A, __m512i __B) {
  return (__m512i) ((__v8du) __A * (__v8du) __B);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_mullo_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_mullo_epi64(__A, __B),
                                             (__v8di)__W);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_mullo_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__U,
                                             (__v8di)_mm512_mullo_epi64(__A, __B),
                                             (__v8di)_mm512_setzero_si512());
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_xor_pd(__m512d __A, __m512d __B) {
  return (__m512d)((__v8du)__A ^ (__v8du)__B);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_xor_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_xor_pd(__A, __B),
                                              (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_xor_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_xor_pd(__A, __B),
                                              (__v8df)_mm512_setzero_pd());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_xor_ps (__m512 __A, __m512 __B) {
  return (__m512)((__v16su)__A ^ (__v16su)__B);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_xor_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_xor_ps(__A, __B),
                                             (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_xor_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_xor_ps(__A, __B),
                                             (__v16sf)_mm512_setzero_ps());
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_or_pd(__m512d __A, __m512d __B) {
  return (__m512d)((__v8du)__A | (__v8du)__B);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_or_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_or_pd(__A, __B),
                                              (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_or_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_or_pd(__A, __B),
                                              (__v8df)_mm512_setzero_pd());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_or_ps(__m512 __A, __m512 __B) {
  return (__m512)((__v16su)__A | (__v16su)__B);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_or_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_or_ps(__A, __B),
                                             (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_or_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_or_ps(__A, __B),
                                             (__v16sf)_mm512_setzero_ps());
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_and_pd(__m512d __A, __m512d __B) {
  return (__m512d)((__v8du)__A & (__v8du)__B);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_and_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_and_pd(__A, __B),
                                              (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_and_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_and_pd(__A, __B),
                                              (__v8df)_mm512_setzero_pd());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_and_ps(__m512 __A, __m512 __B) {
  return (__m512)((__v16su)__A & (__v16su)__B);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_and_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_and_ps(__A, __B),
                                             (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_and_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_and_ps(__A, __B),
                                             (__v16sf)_mm512_setzero_ps());
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_andnot_pd(__m512d __A, __m512d __B) {
  return (__m512d)(~(__v8du)__A & (__v8du)__B);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_andnot_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_andnot_pd(__A, __B),
                                              (__v8df)__W);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_andnot_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__U,
                                              (__v8df)_mm512_andnot_pd(__A, __B),
                                              (__v8df)_mm512_setzero_pd());
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_andnot_ps(__m512 __A, __m512 __B) {
  return (__m512)(~(__v16su)__A & (__v16su)__B);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_andnot_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_andnot_ps(__A, __B),
                                             (__v16sf)__W);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_andnot_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_selectps_512((__mmask16)__U,
                                             (__v16sf)_mm512_andnot_ps(__A, __B),
                                             (__v16sf)_mm512_setzero_ps());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtpd_epi64 (__m512d __A) {
  return (__m512i) __builtin_ia32_cvtpd2qq512_mask ((__v8df) __A,
                (__v8di) _mm512_setzero_si512(),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtpd_epi64 (__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvtpd2qq512_mask ((__v8df) __A,
                (__v8di) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtpd_epi64 (__mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvtpd2qq512_mask ((__v8df) __A,
                (__v8di) _mm512_setzero_si512(),
                (__mmask8) __U,
                0x04);
}
# 244 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtpd_epu64 (__m512d __A) {
  return (__m512i) __builtin_ia32_cvtpd2uqq512_mask ((__v8df) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) -1,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtpd_epu64 (__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvtpd2uqq512_mask ((__v8df) __A,
                 (__v8di) __W,
                 (__mmask8) __U,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtpd_epu64 (__mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvtpd2uqq512_mask ((__v8df) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) __U,
                 0x04);
}
# 283 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtps_epi64 (__m256 __A) {
  return (__m512i) __builtin_ia32_cvtps2qq512_mask ((__v8sf) __A,
                (__v8di) _mm512_setzero_si512(),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtps_epi64 (__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvtps2qq512_mask ((__v8sf) __A,
                (__v8di) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtps_epi64 (__mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvtps2qq512_mask ((__v8sf) __A,
                (__v8di) _mm512_setzero_si512(),
                (__mmask8) __U,
                0x04);
}
# 322 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtps_epu64 (__m256 __A) {
  return (__m512i) __builtin_ia32_cvtps2uqq512_mask ((__v8sf) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) -1,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtps_epu64 (__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvtps2uqq512_mask ((__v8sf) __A,
                 (__v8di) __W,
                 (__mmask8) __U,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtps_epu64 (__mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvtps2uqq512_mask ((__v8sf) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) __U,
                 0x04);
}
# 362 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtepi64_pd (__m512i __A) {
  return (__m512d) __builtin_ia32_cvtqq2pd512_mask ((__v8di) __A,
                (__v8df) _mm512_setzero_pd(),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtepi64_pd (__m512d __W, __mmask8 __U, __m512i __A) {
  return (__m512d) __builtin_ia32_cvtqq2pd512_mask ((__v8di) __A,
                (__v8df) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtepi64_pd (__mmask8 __U, __m512i __A) {
  return (__m512d) __builtin_ia32_cvtqq2pd512_mask ((__v8di) __A,
                (__v8df) _mm512_setzero_pd(),
                (__mmask8) __U,
                0x04);
}
# 401 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 3
static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtepi64_ps (__m512i __A) {
  return (__m256) __builtin_ia32_cvtqq2ps512_mask ((__v8di) __A,
               (__v8sf) _mm256_setzero_ps(),
               (__mmask8) -1,
               0x04);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtepi64_ps (__m256 __W, __mmask8 __U, __m512i __A) {
  return (__m256) __builtin_ia32_cvtqq2ps512_mask ((__v8di) __A,
               (__v8sf) __W,
               (__mmask8) __U,
               0x04);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtepi64_ps (__mmask8 __U, __m512i __A) {
  return (__m256) __builtin_ia32_cvtqq2ps512_mask ((__v8di) __A,
               (__v8sf) _mm256_setzero_ps(),
               (__mmask8) __U,
               0x04);
}
# 441 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvttpd_epi64 (__m512d __A) {
  return (__m512i) __builtin_ia32_cvttpd2qq512_mask ((__v8df) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) -1,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvttpd_epi64 (__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvttpd2qq512_mask ((__v8df) __A,
                 (__v8di) __W,
                 (__mmask8) __U,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvttpd_epi64 (__mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvttpd2qq512_mask ((__v8df) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) __U,
                 0x04);
}
# 480 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvttpd_epu64 (__m512d __A) {
  return (__m512i) __builtin_ia32_cvttpd2uqq512_mask ((__v8df) __A,
                  (__v8di) _mm512_setzero_si512(),
                  (__mmask8) -1,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvttpd_epu64 (__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvttpd2uqq512_mask ((__v8df) __A,
                  (__v8di) __W,
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvttpd_epu64 (__mmask8 __U, __m512d __A) {
  return (__m512i) __builtin_ia32_cvttpd2uqq512_mask ((__v8df) __A,
                  (__v8di) _mm512_setzero_si512(),
                  (__mmask8) __U,
                  0x04);
}
# 519 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvttps_epi64 (__m256 __A) {
  return (__m512i) __builtin_ia32_cvttps2qq512_mask ((__v8sf) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) -1,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvttps_epi64 (__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvttps2qq512_mask ((__v8sf) __A,
                 (__v8di) __W,
                 (__mmask8) __U,
                 0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvttps_epi64 (__mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvttps2qq512_mask ((__v8sf) __A,
                 (__v8di) _mm512_setzero_si512(),
                 (__mmask8) __U,
                 0x04);
}
# 558 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvttps_epu64 (__m256 __A) {
  return (__m512i) __builtin_ia32_cvttps2uqq512_mask ((__v8sf) __A,
                  (__v8di) _mm512_setzero_si512(),
                  (__mmask8) -1,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvttps_epu64 (__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvttps2uqq512_mask ((__v8sf) __A,
                  (__v8di) __W,
                  (__mmask8) __U,
                  0x04);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvttps_epu64 (__mmask8 __U, __m256 __A) {
  return (__m512i) __builtin_ia32_cvttps2uqq512_mask ((__v8sf) __A,
                  (__v8di) _mm512_setzero_si512(),
                  (__mmask8) __U,
                  0x04);
}
# 597 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 3
static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtepu64_pd (__m512i __A) {
  return (__m512d) __builtin_ia32_cvtuqq2pd512_mask ((__v8di) __A,
                 (__v8df) _mm512_setzero_pd(),
                 (__mmask8) -1,
                 0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtepu64_pd (__m512d __W, __mmask8 __U, __m512i __A) {
  return (__m512d) __builtin_ia32_cvtuqq2pd512_mask ((__v8di) __A,
                 (__v8df) __W,
                 (__mmask8) __U,
                 0x04);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtepu64_pd (__mmask8 __U, __m512i __A) {
  return (__m512d) __builtin_ia32_cvtuqq2pd512_mask ((__v8di) __A,
                 (__v8df) _mm512_setzero_pd(),
                 (__mmask8) __U,
                 0x04);
}
# 638 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 3
static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_cvtepu64_ps (__m512i __A) {
  return (__m256) __builtin_ia32_cvtuqq2ps512_mask ((__v8di) __A,
                (__v8sf) _mm256_setzero_ps(),
                (__mmask8) -1,
                0x04);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_cvtepu64_ps (__m256 __W, __mmask8 __U, __m512i __A) {
  return (__m256) __builtin_ia32_cvtuqq2ps512_mask ((__v8di) __A,
                (__v8sf) __W,
                (__mmask8) __U,
                0x04);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_cvtepu64_ps (__mmask8 __U, __m512i __A) {
  return (__m256) __builtin_ia32_cvtuqq2ps512_mask ((__v8di) __A,
                (__v8sf) _mm256_setzero_ps(),
                (__mmask8) __U,
                0x04);
}
# 948 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512dqintrin.h" 3
static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_movepi32_mask (__m512i __A)
{
  return (__mmask16) __builtin_ia32_cvtd2mask512 ((__v16si) __A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_movm_epi32 (__mmask16 __A)
{
  return (__m512i) __builtin_ia32_cvtmask2d512 (__A);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_movm_epi64 (__mmask8 __A)
{
  return (__m512i) __builtin_ia32_cvtmask2q512 (__A);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_movepi64_mask (__m512i __A)
{
  return (__mmask8) __builtin_ia32_cvtq2mask512 ((__v8di) __A);
}


static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_broadcast_f32x2 (__m128 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x2_512_mask ((__v4sf) __A,
                (__v16sf)_mm512_undefined_ps(),
                (__mmask16) -1);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_broadcast_f32x2 (__m512 __O, __mmask16 __M, __m128 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x2_512_mask ((__v4sf) __A,
                (__v16sf)
                __O, __M);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_broadcast_f32x2 (__mmask16 __M, __m128 __A)
{
  return (__m512) __builtin_ia32_broadcastf32x2_512_mask ((__v4sf) __A,
                (__v16sf)_mm512_setzero_ps (),
                __M);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_broadcast_f32x8(__m256 __A)
{
  return (__m512)__builtin_shufflevector((__v8sf)__A, (__v8sf)__A,
                                         0, 1, 2, 3, 4, 5, 6, 7,
                                         0, 1, 2, 3, 4, 5, 6, 7);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_broadcast_f32x8(__m512 __O, __mmask16 __M, __m256 __A)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask8)__M,
                                           (__v16sf)_mm512_broadcast_f32x8(__A),
                                           (__v16sf)__O);
}

static __inline__ __m512 __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_broadcast_f32x8(__mmask16 __M, __m256 __A)
{
  return (__m512)__builtin_ia32_selectps_512((__mmask8)__M,
                                           (__v16sf)_mm512_broadcast_f32x8(__A),
                                           (__v16sf)_mm512_setzero_ps());
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_broadcast_f64x2(__m128d __A)
{
  return (__m512d)__builtin_shufflevector((__v2df)__A, (__v2df)__A,
                                          0, 1, 0, 1, 0, 1, 0, 1);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_broadcast_f64x2(__m512d __O, __mmask8 __M, __m128d __A)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__M,
                                            (__v8df)_mm512_broadcast_f64x2(__A),
                                            (__v8df)__O);
}

static __inline__ __m512d __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_broadcast_f64x2(__mmask8 __M, __m128d __A)
{
  return (__m512d)__builtin_ia32_selectpd_512((__mmask8)__M,
                                            (__v8df)_mm512_broadcast_f64x2(__A),
                                            (__v8df)_mm512_setzero_pd());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_broadcast_i32x2 (__m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x2_512_mask ((__v4si) __A,
                 (__v16si)_mm512_setzero_si512(),
                 (__mmask16) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_broadcast_i32x2 (__m512i __O, __mmask16 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x2_512_mask ((__v4si) __A,
                 (__v16si)
                 __O, __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_broadcast_i32x2 (__mmask16 __M, __m128i __A)
{
  return (__m512i) __builtin_ia32_broadcasti32x2_512_mask ((__v4si) __A,
                 (__v16si)_mm512_setzero_si512 (),
                 __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_broadcast_i32x8(__m256i __A)
{
  return (__m512i)__builtin_shufflevector((__v8si)__A, (__v8si)__A,
                                          0, 1, 2, 3, 4, 5, 6, 7,
                                          0, 1, 2, 3, 4, 5, 6, 7);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_broadcast_i32x8(__m512i __O, __mmask16 __M, __m256i __A)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask8)__M,
                                           (__v16si)_mm512_broadcast_i32x8(__A),
                                           (__v16si)__O);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_broadcast_i32x8(__mmask16 __M, __m256i __A)
{
  return (__m512i)__builtin_ia32_selectd_512((__mmask8)__M,
                                           (__v16si)_mm512_broadcast_i32x8(__A),
                                           (__v16si)_mm512_setzero_si512());
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_broadcast_i64x2(__m128i __A)
{
  return (__m512i)__builtin_shufflevector((__v2di)__A, (__v2di)__A,
                                          0, 1, 0, 1, 0, 1, 0, 1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_mask_broadcast_i64x2(__m512i __O, __mmask8 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__M,
                                            (__v8di)_mm512_broadcast_i64x2(__A),
                                            (__v8di)__O);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512dq")))
_mm512_maskz_broadcast_i64x2(__mmask8 __M, __m128i __A)
{
  return (__m512i)__builtin_ia32_selectq_512((__mmask8)__M,
                                            (__v8di)_mm512_broadcast_i64x2(__A),
                                            (__v8di)_mm512_setzero_si512());
}
# 155 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3




# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlbwintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlbwintrin.h" 3
static __inline __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_setzero_hi(void){
    return (__m128i)(__v8hi){ 0, 0, 0, 0, 0, 0, 0, 0 };
}



static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpeq_epi8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_pcmpeqb128_mask((__v16qi)__a, (__v16qi)__b,
                                                   (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpeq_epi8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_pcmpeqb128_mask((__v16qi)__a, (__v16qi)__b,
                                                   __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpeq_epu8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 0,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpeq_epu8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 0,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpeq_epi8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_pcmpeqb256_mask((__v32qi)__a, (__v32qi)__b,
                                                   (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpeq_epi8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_pcmpeqb256_mask((__v32qi)__a, (__v32qi)__b,
                                                   __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpeq_epu8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 0,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpeq_epu8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 0,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpeq_epi16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqw128_mask((__v8hi)__a, (__v8hi)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpeq_epi16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpeqw128_mask((__v8hi)__a, (__v8hi)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpeq_epu16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 0,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpeq_epu16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 0,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpeq_epi16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_pcmpeqw256_mask((__v16hi)__a, (__v16hi)__b,
                                                   (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpeq_epi16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_pcmpeqw256_mask((__v16hi)__a, (__v16hi)__b,
                                                   __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpeq_epu16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 0,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpeq_epu16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 0,
                                                 __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpge_epi8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 5,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpge_epi8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 5,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpge_epu8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 5,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpge_epu8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 5,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpge_epi8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 5,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpge_epi8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 5,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpge_epu8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 5,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpge_epu8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 5,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpge_epi16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 5,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpge_epi16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 5,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpge_epu16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 5,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpge_epu16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 5,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpge_epi16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 5,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpge_epi16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 5,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpge_epu16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 5,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpge_epu16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 5,
                                                 __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpgt_epi8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_pcmpgtb128_mask((__v16qi)__a, (__v16qi)__b,
                                                   (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpgt_epi8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_pcmpgtb128_mask((__v16qi)__a, (__v16qi)__b,
                                                   __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpgt_epu8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 6,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpgt_epu8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 6,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpgt_epi8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_pcmpgtb256_mask((__v32qi)__a, (__v32qi)__b,
                                                   (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpgt_epi8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_pcmpgtb256_mask((__v32qi)__a, (__v32qi)__b,
                                                   __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpgt_epu8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 6,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpgt_epu8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 6,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpgt_epi16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtw128_mask((__v8hi)__a, (__v8hi)__b,
                                                  (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpgt_epi16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_pcmpgtw128_mask((__v8hi)__a, (__v8hi)__b,
                                                  __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpgt_epu16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 6,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpgt_epu16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 6,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpgt_epi16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_pcmpgtw256_mask((__v16hi)__a, (__v16hi)__b,
                                                   (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpgt_epi16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_pcmpgtw256_mask((__v16hi)__a, (__v16hi)__b,
                                                   __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpgt_epu16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 6,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpgt_epu16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 6,
                                                 __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmple_epi8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 2,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmple_epi8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 2,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmple_epu8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 2,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmple_epu8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 2,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmple_epi8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 2,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmple_epi8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 2,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmple_epu8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 2,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmple_epu8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 2,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmple_epi16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 2,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmple_epi16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 2,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmple_epu16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 2,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmple_epu16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 2,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmple_epi16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 2,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmple_epi16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 2,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmple_epu16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 2,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmple_epu16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 2,
                                                 __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmplt_epi8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 1,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmplt_epi8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 1,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmplt_epu8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 1,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmplt_epu8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 1,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmplt_epi8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 1,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmplt_epi8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 1,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmplt_epu8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 1,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmplt_epu8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 1,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmplt_epi16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 1,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmplt_epi16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 1,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmplt_epu16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 1,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmplt_epu16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 1,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmplt_epi16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 1,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmplt_epi16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 1,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmplt_epu16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 1,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmplt_epu16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 1,
                                                 __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpneq_epi8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 4,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpneq_epi8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__a, (__v16qi)__b, 4,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpneq_epu8_mask(__m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 4,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpneq_epu8_mask(__mmask16 __u, __m128i __a, __m128i __b) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__a, (__v16qi)__b, 4,
                                                 __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpneq_epi8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 4,
                                                (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpneq_epi8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__a, (__v32qi)__b, 4,
                                                __u);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpneq_epu8_mask(__m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 4,
                                                 (__mmask32)-1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpneq_epu8_mask(__mmask32 __u, __m256i __a, __m256i __b) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__a, (__v32qi)__b, 4,
                                                 __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpneq_epi16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 4,
                                               (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpneq_epi16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__a, (__v8hi)__b, 4,
                                               __u);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cmpneq_epu16_mask(__m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 4,
                                                (__mmask8)-1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cmpneq_epu16_mask(__mmask8 __u, __m128i __a, __m128i __b) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__a, (__v8hi)__b, 4,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpneq_epi16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 4,
                                                (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpneq_epi16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__a, (__v16hi)__b, 4,
                                                __u);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cmpneq_epu16_mask(__m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 4,
                                                 (__mmask16)-1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cmpneq_epu16_mask(__mmask16 __u, __m256i __a, __m256i __b) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__a, (__v16hi)__b, 4,
                                                 __u);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_add_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B){
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                             (__v32qi)_mm256_add_epi8(__A, __B),
                                             (__v32qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_add_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                             (__v32qi)_mm256_add_epi8(__A, __B),
                                             (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_add_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                             (__v16hi)_mm256_add_epi16(__A, __B),
                                             (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_add_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                             (__v16hi)_mm256_add_epi16(__A, __B),
                                             (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_sub_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                             (__v32qi)_mm256_sub_epi8(__A, __B),
                                             (__v32qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_sub_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                             (__v32qi)_mm256_sub_epi8(__A, __B),
                                             (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_sub_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                             (__v16hi)_mm256_sub_epi16(__A, __B),
                                             (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_sub_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                             (__v16hi)_mm256_sub_epi16(__A, __B),
                                             (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_add_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_add_epi8(__A, __B),
                                             (__v16qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_add_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_add_epi8(__A, __B),
                                             (__v16qi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_add_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_add_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_add_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_add_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_sub_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_sub_epi8(__A, __B),
                                             (__v16qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_sub_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_sub_epi8(__A, __B),
                                             (__v16qi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_sub_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_sub_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_sub_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_sub_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_mullo_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                             (__v16hi)_mm256_mullo_epi16(__A, __B),
                                             (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_mullo_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                             (__v16hi)_mm256_mullo_epi16(__A, __B),
                                             (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_mullo_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_mullo_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_mullo_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_mullo_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_blend_epi8 (__mmask16 __U, __m128i __A, __m128i __W)
{
  return (__m128i) __builtin_ia32_selectb_128 ((__mmask16) __U,
              (__v16qi) __W,
              (__v16qi) __A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_blend_epi8 (__mmask32 __U, __m256i __A, __m256i __W)
{
  return (__m256i) __builtin_ia32_selectb_256 ((__mmask32) __U,
               (__v32qi) __W,
               (__v32qi) __A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_blend_epi16 (__mmask8 __U, __m128i __A, __m128i __W)
{
  return (__m128i) __builtin_ia32_selectw_128 ((__mmask8) __U,
               (__v8hi) __W,
               (__v8hi) __A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_blend_epi16 (__mmask16 __U, __m256i __A, __m256i __W)
{
  return (__m256i) __builtin_ia32_selectw_256 ((__mmask16) __U,
               (__v16hi) __W,
               (__v16hi) __A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_abs_epi8(__m128i __W, __mmask16 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_abs_epi8(__A),
                                             (__v16qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_abs_epi8(__mmask16 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_abs_epi8(__A),
                                             (__v16qi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_abs_epi8(__m256i __W, __mmask32 __U, __m256i __A)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                             (__v32qi)_mm256_abs_epi8(__A),
                                             (__v32qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_abs_epi8 (__mmask32 __U, __m256i __A)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                             (__v32qi)_mm256_abs_epi8(__A),
                                             (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_abs_epi16(__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_abs_epi16(__A),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_abs_epi16(__mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_abs_epi16(__A),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_abs_epi16(__m256i __W, __mmask16 __U, __m256i __A)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                             (__v16hi)_mm256_abs_epi16(__A),
                                             (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_abs_epi16(__mmask16 __U, __m256i __A)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                             (__v16hi)_mm256_abs_epi16(__A),
                                             (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_packs_epi32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__M,
                                             (__v8hi)_mm_packs_epi32(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_packs_epi32(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__M,
                                             (__v8hi)_mm_packs_epi32(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_packs_epi32(__mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__M,
                                          (__v16hi)_mm256_packs_epi32(__A, __B),
                                          (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_packs_epi32(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__M,
                                          (__v16hi)_mm256_packs_epi32(__A, __B),
                                          (__v16hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_packs_epi16(__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__M,
                                             (__v16qi)_mm_packs_epi16(__A, __B),
                                             (__v16qi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_packs_epi16(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__M,
                                             (__v16qi)_mm_packs_epi16(__A, __B),
                                             (__v16qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_packs_epi16(__mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__M,
                                          (__v32qi)_mm256_packs_epi16(__A, __B),
                                          (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_packs_epi16(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__M,
                                          (__v32qi)_mm256_packs_epi16(__A, __B),
                                          (__v32qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_packus_epi32(__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__M,
                                             (__v8hi)_mm_packus_epi32(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_packus_epi32(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__M,
                                             (__v8hi)_mm_packus_epi32(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_packus_epi32(__mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__M,
                                         (__v16hi)_mm256_packus_epi32(__A, __B),
                                         (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_packus_epi32(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__M,
                                         (__v16hi)_mm256_packus_epi32(__A, __B),
                                         (__v16hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_packus_epi16(__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__M,
                                            (__v16qi)_mm_packus_epi16(__A, __B),
                                            (__v16qi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_packus_epi16(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__M,
                                            (__v16qi)_mm_packus_epi16(__A, __B),
                                            (__v16qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_packus_epi16(__mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__M,
                                         (__v32qi)_mm256_packus_epi16(__A, __B),
                                         (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_packus_epi16(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__M,
                                         (__v32qi)_mm256_packus_epi16(__A, __B),
                                         (__v32qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_adds_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_adds_epi8(__A, __B),
                                             (__v16qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_adds_epi8(__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_adds_epi8(__A, __B),
                                             (__v16qi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_adds_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                            (__v32qi)_mm256_adds_epi8(__A, __B),
                                            (__v32qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_adds_epi8(__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                            (__v32qi)_mm256_adds_epi8(__A, __B),
                                            (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_adds_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_adds_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_adds_epi16(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_adds_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_adds_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_adds_epi16(__A, __B),
                                           (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_adds_epi16(__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_adds_epi16(__A, __B),
                                           (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_adds_epu8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_adds_epu8(__A, __B),
                                             (__v16qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_adds_epu8(__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_adds_epu8(__A, __B),
                                             (__v16qi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_adds_epu8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                            (__v32qi)_mm256_adds_epu8(__A, __B),
                                            (__v32qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_adds_epu8(__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                            (__v32qi)_mm256_adds_epu8(__A, __B),
                                            (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_adds_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_adds_epu16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_adds_epu16(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_adds_epu16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_adds_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_adds_epu16(__A, __B),
                                           (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_adds_epu16(__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_adds_epu16(__A, __B),
                                           (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_avg_epu8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_avg_epu8(__A, __B),
                                             (__v16qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_avg_epu8(__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_avg_epu8(__A, __B),
                                             (__v16qi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_avg_epu8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                             (__v32qi)_mm256_avg_epu8(__A, __B),
                                             (__v32qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_avg_epu8(__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                             (__v32qi)_mm256_avg_epu8(__A, __B),
                                             (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_avg_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_avg_epu16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_avg_epu16(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_avg_epu16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_avg_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                            (__v16hi)_mm256_avg_epu16(__A, __B),
                                            (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_avg_epu16(__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                            (__v16hi)_mm256_avg_epu16(__A, __B),
                                            (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_max_epi8(__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__M,
                                             (__v16qi)_mm_max_epi8(__A, __B),
                                             (__v16qi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_max_epi8(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__M,
                                             (__v16qi)_mm_max_epi8(__A, __B),
                                             (__v16qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_max_epi8(__mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__M,
                                             (__v32qi)_mm256_max_epi8(__A, __B),
                                             (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_max_epi8(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__M,
                                             (__v32qi)_mm256_max_epi8(__A, __B),
                                             (__v32qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_max_epi16(__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__M,
                                             (__v8hi)_mm_max_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_max_epi16(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__M,
                                             (__v8hi)_mm_max_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_max_epi16(__mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__M,
                                            (__v16hi)_mm256_max_epi16(__A, __B),
                                            (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_max_epi16(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__M,
                                            (__v16hi)_mm256_max_epi16(__A, __B),
                                            (__v16hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_max_epu8(__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__M,
                                             (__v16qi)_mm_max_epu8(__A, __B),
                                             (__v16qi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_max_epu8(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__M,
                                             (__v16qi)_mm_max_epu8(__A, __B),
                                             (__v16qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_max_epu8 (__mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__M,
                                             (__v32qi)_mm256_max_epu8(__A, __B),
                                             (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_max_epu8(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__M,
                                             (__v32qi)_mm256_max_epu8(__A, __B),
                                             (__v32qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_max_epu16(__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__M,
                                             (__v8hi)_mm_max_epu16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_max_epu16(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__M,
                                             (__v8hi)_mm_max_epu16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_max_epu16(__mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__M,
                                            (__v16hi)_mm256_max_epu16(__A, __B),
                                            (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_max_epu16(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__M,
                                            (__v16hi)_mm256_max_epu16(__A, __B),
                                            (__v16hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_min_epi8(__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__M,
                                             (__v16qi)_mm_min_epi8(__A, __B),
                                             (__v16qi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_min_epi8(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__M,
                                             (__v16qi)_mm_min_epi8(__A, __B),
                                             (__v16qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_min_epi8(__mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__M,
                                             (__v32qi)_mm256_min_epi8(__A, __B),
                                             (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_min_epi8(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__M,
                                             (__v32qi)_mm256_min_epi8(__A, __B),
                                             (__v32qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_min_epi16(__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__M,
                                             (__v8hi)_mm_min_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_min_epi16(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__M,
                                             (__v8hi)_mm_min_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_min_epi16(__mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__M,
                                            (__v16hi)_mm256_min_epi16(__A, __B),
                                            (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_min_epi16(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__M,
                                            (__v16hi)_mm256_min_epi16(__A, __B),
                                            (__v16hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_min_epu8(__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__M,
                                             (__v16qi)_mm_min_epu8(__A, __B),
                                             (__v16qi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_min_epu8(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__M,
                                             (__v16qi)_mm_min_epu8(__A, __B),
                                             (__v16qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_min_epu8 (__mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__M,
                                             (__v32qi)_mm256_min_epu8(__A, __B),
                                             (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_min_epu8(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__M,
                                             (__v32qi)_mm256_min_epu8(__A, __B),
                                             (__v32qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_min_epu16(__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__M,
                                             (__v8hi)_mm_min_epu16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_min_epu16(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__M,
                                             (__v8hi)_mm_min_epu16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_min_epu16(__mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__M,
                                            (__v16hi)_mm256_min_epu16(__A, __B),
                                            (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_min_epu16(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__M,
                                            (__v16hi)_mm256_min_epu16(__A, __B),
                                            (__v16hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_shuffle_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                            (__v16qi)_mm_shuffle_epi8(__A, __B),
                                            (__v16qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_shuffle_epi8(__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                            (__v16qi)_mm_shuffle_epi8(__A, __B),
                                            (__v16qi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_shuffle_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                         (__v32qi)_mm256_shuffle_epi8(__A, __B),
                                         (__v32qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_shuffle_epi8(__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                         (__v32qi)_mm256_shuffle_epi8(__A, __B),
                                         (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_subs_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_subs_epi8(__A, __B),
                                             (__v16qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_subs_epi8(__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_subs_epi8(__A, __B),
                                             (__v16qi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_subs_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                            (__v32qi)_mm256_subs_epi8(__A, __B),
                                            (__v32qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_subs_epi8(__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                            (__v32qi)_mm256_subs_epi8(__A, __B),
                                            (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_subs_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_subs_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_subs_epi16(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_subs_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_subs_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_subs_epi16(__A, __B),
                                           (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_subs_epi16(__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_subs_epi16(__A, __B),
                                           (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_subs_epu8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_subs_epu8(__A, __B),
                                             (__v16qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_subs_epu8(__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                             (__v16qi)_mm_subs_epu8(__A, __B),
                                             (__v16qi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_subs_epu8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                            (__v32qi)_mm256_subs_epu8(__A, __B),
                                            (__v32qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_subs_epu8(__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                            (__v32qi)_mm256_subs_epu8(__A, __B),
                                            (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_subs_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_subs_epu16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_subs_epu16(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_subs_epu16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_subs_epu16(__m256i __W, __mmask16 __U, __m256i __A,
      __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_subs_epu16(__A, __B),
                                           (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_subs_epu16(__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_subs_epu16(__A, __B),
                                           (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask2_permutex2var_epi16 (__m128i __A, __m128i __I, __mmask8 __U,
            __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermi2varhi128_mask ((__v8hi) __A,
               (__v8hi) __I ,
               (__v8hi) __B,
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask2_permutex2var_epi16 (__m256i __A, __m256i __I,
         __mmask16 __U, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermi2varhi256_mask ((__v16hi) __A,
               (__v16hi) __I ,
               (__v16hi) __B,
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_permutex2var_epi16 (__m128i __A, __m128i __I, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermt2varhi128_mask ((__v8hi) __I ,
               (__v8hi) __A,
               (__v8hi) __B,
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_permutex2var_epi16 (__m128i __A, __mmask8 __U, __m128i __I,
           __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermt2varhi128_mask ((__v8hi) __I ,
               (__v8hi) __A,
               (__v8hi) __B,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_permutex2var_epi16 (__mmask8 __U, __m128i __A, __m128i __I,
            __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermt2varhi128_maskz ((__v8hi) __I ,
               (__v8hi) __A,
               (__v8hi) __B,
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_permutex2var_epi16 (__m256i __A, __m256i __I, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermt2varhi256_mask ((__v16hi) __I ,
               (__v16hi) __A,
               (__v16hi) __B,
               (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_permutex2var_epi16 (__m256i __A, __mmask16 __U,
        __m256i __I, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermt2varhi256_mask ((__v16hi) __I ,
               (__v16hi) __A,
               (__v16hi) __B,
               (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_permutex2var_epi16 (__mmask16 __U, __m256i __A,
         __m256i __I, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermt2varhi256_maskz ((__v16hi) __I ,
               (__v16hi) __A,
               (__v16hi) __B,
               (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_maddubs_epi16(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                            (__v8hi)_mm_maddubs_epi16(__X, __Y),
                                            (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_maddubs_epi16(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                            (__v8hi)_mm_maddubs_epi16(__X, __Y),
                                            (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_maddubs_epi16(__m256i __W, __mmask16 __U, __m256i __X,
                          __m256i __Y) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                        (__v16hi)_mm256_maddubs_epi16(__X, __Y),
                                        (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_maddubs_epi16(__mmask16 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                        (__v16hi)_mm256_maddubs_epi16(__X, __Y),
                                        (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_madd_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_madd_epi16(__A, __B),
                                             (__v4si)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_madd_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectd_128((__mmask8)__U,
                                             (__v4si)_mm_madd_epi16(__A, __B),
                                             (__v4si)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_madd_epi16(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                            (__v8si)_mm256_madd_epi16(__A, __B),
                                            (__v8si)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_madd_epi16(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectd_256((__mmask8)__U,
                                            (__v8si)_mm256_madd_epi16(__A, __B),
                                            (__v8si)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cvtsepi16_epi8 (__m128i __A) {
  return (__m128i) __builtin_ia32_pmovswb128_mask ((__v8hi) __A,
               (__v16qi) _mm_setzero_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtsepi16_epi8 (__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i) __builtin_ia32_pmovswb128_mask ((__v8hi) __A,
               (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_cvtsepi16_epi8 (__mmask8 __M, __m128i __A) {
  return (__m128i) __builtin_ia32_pmovswb128_mask ((__v8hi) __A,
               (__v16qi) _mm_setzero_si128(),
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cvtsepi16_epi8 (__m256i __A) {
  return (__m128i) __builtin_ia32_pmovswb256_mask ((__v16hi) __A,
               (__v16qi) _mm_setzero_si128(),
               (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtsepi16_epi8 (__m128i __O, __mmask16 __M, __m256i __A) {
  return (__m128i) __builtin_ia32_pmovswb256_mask ((__v16hi) __A,
               (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_cvtsepi16_epi8 (__mmask16 __M, __m256i __A) {
  return (__m128i) __builtin_ia32_pmovswb256_mask ((__v16hi) __A,
               (__v16qi) _mm_setzero_si128(),
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cvtusepi16_epi8 (__m128i __A) {
  return (__m128i) __builtin_ia32_pmovuswb128_mask ((__v8hi) __A,
                (__v16qi) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtusepi16_epi8 (__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i) __builtin_ia32_pmovuswb128_mask ((__v8hi) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_cvtusepi16_epi8 (__mmask8 __M, __m128i __A) {
  return (__m128i) __builtin_ia32_pmovuswb128_mask ((__v8hi) __A,
                (__v16qi) _mm_setzero_si128(),
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cvtusepi16_epi8 (__m256i __A) {
  return (__m128i) __builtin_ia32_pmovuswb256_mask ((__v16hi) __A,
                (__v16qi) _mm_setzero_si128(),
                (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtusepi16_epi8 (__m128i __O, __mmask16 __M, __m256i __A) {
  return (__m128i) __builtin_ia32_pmovuswb256_mask ((__v16hi) __A,
                (__v16qi) __O,
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_cvtusepi16_epi8 (__mmask16 __M, __m256i __A) {
  return (__m128i) __builtin_ia32_pmovuswb256_mask ((__v16hi) __A,
                (__v16qi) _mm_setzero_si128(),
                __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_cvtepi16_epi8 (__m128i __A) {

  return (__m128i) __builtin_ia32_pmovwb128_mask ((__v8hi) __A,
               (__v16qi) _mm_setzero_si128(),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtepi16_epi8 (__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i) __builtin_ia32_pmovwb128_mask ((__v8hi) __A,
               (__v16qi) __O,
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_cvtepi16_epi8 (__mmask8 __M, __m128i __A) {
  return (__m128i) __builtin_ia32_pmovwb128_mask ((__v8hi) __A,
               (__v16qi) _mm_setzero_si128(),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtepi16_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovwb128mem_mask ((__v16qi *) __P, (__v8hi) __A, __M);
}


static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtsepi16_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovswb128mem_mask ((__v16qi *) __P, (__v8hi) __A, __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtusepi16_storeu_epi8 (void * __P, __mmask8 __M, __m128i __A)
{
  __builtin_ia32_pmovuswb128mem_mask ((__v16qi *) __P, (__v8hi) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_cvtepi16_epi8 (__m256i __A) {
  return (__m128i) __builtin_ia32_pmovwb256_mask ((__v16hi) __A,
               (__v16qi) _mm_setzero_si128(),
               (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtepi16_epi8 (__m128i __O, __mmask16 __M, __m256i __A) {
  return (__m128i) __builtin_ia32_pmovwb256_mask ((__v16hi) __A,
               (__v16qi) __O,
               __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_cvtepi16_epi8 (__mmask16 __M, __m256i __A) {
  return (__m128i) __builtin_ia32_pmovwb256_mask ((__v16hi) __A,
               (__v16qi) _mm_setzero_si128(),
               __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtepi16_storeu_epi8 (void * __P, __mmask16 __M, __m256i __A)
{
  __builtin_ia32_pmovwb256mem_mask ((__v16qi *) __P, (__v16hi) __A, __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtsepi16_storeu_epi8 (void * __P, __mmask16 __M, __m256i __A)
{
  __builtin_ia32_pmovswb256mem_mask ((__v16qi *) __P, (__v16hi) __A, __M);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtusepi16_storeu_epi8 (void * __P, __mmask8 __M, __m256i __A)
{
  __builtin_ia32_pmovuswb256mem_mask ((__v16qi*) __P, (__v16hi) __A, __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_mulhrs_epi16(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_mulhrs_epi16(__X, __Y),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_mulhrs_epi16(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_mulhrs_epi16(__X, __Y),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_mulhrs_epi16(__m256i __W, __mmask16 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                         (__v16hi)_mm256_mulhrs_epi16(__X, __Y),
                                         (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_mulhrs_epi16(__mmask16 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                         (__v16hi)_mm256_mulhrs_epi16(__X, __Y),
                                         (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_mulhi_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_mulhi_epu16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_mulhi_epu16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_mulhi_epu16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_mulhi_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                          (__v16hi)_mm256_mulhi_epu16(__A, __B),
                                          (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_mulhi_epu16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                          (__v16hi)_mm256_mulhi_epu16(__A, __B),
                                          (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_mulhi_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_mulhi_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_mulhi_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_mulhi_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_mulhi_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                          (__v16hi)_mm256_mulhi_epi16(__A, __B),
                                          (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_mulhi_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                          (__v16hi)_mm256_mulhi_epi16(__A, __B),
                                          (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_unpackhi_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                           (__v16qi)_mm_unpackhi_epi8(__A, __B),
                                           (__v16qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_unpackhi_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                           (__v16qi)_mm_unpackhi_epi8(__A, __B),
                                           (__v16qi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_unpackhi_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                        (__v32qi)_mm256_unpackhi_epi8(__A, __B),
                                        (__v32qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_unpackhi_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                        (__v32qi)_mm256_unpackhi_epi8(__A, __B),
                                        (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_unpackhi_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                           (__v8hi)_mm_unpackhi_epi16(__A, __B),
                                           (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_unpackhi_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                           (__v8hi)_mm_unpackhi_epi16(__A, __B),
                                           (__v8hi) _mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_unpackhi_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                       (__v16hi)_mm256_unpackhi_epi16(__A, __B),
                                       (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_unpackhi_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                       (__v16hi)_mm256_unpackhi_epi16(__A, __B),
                                       (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_unpacklo_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                           (__v16qi)_mm_unpacklo_epi8(__A, __B),
                                           (__v16qi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_unpacklo_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectb_128((__mmask16)__U,
                                           (__v16qi)_mm_unpacklo_epi8(__A, __B),
                                           (__v16qi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_unpacklo_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                        (__v32qi)_mm256_unpacklo_epi8(__A, __B),
                                        (__v32qi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_unpacklo_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectb_256((__mmask32)__U,
                                        (__v32qi)_mm256_unpacklo_epi8(__A, __B),
                                        (__v32qi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_unpacklo_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                           (__v8hi)_mm_unpacklo_epi16(__A, __B),
                                           (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_unpacklo_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                           (__v8hi)_mm_unpacklo_epi16(__A, __B),
                                           (__v8hi) _mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_unpacklo_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                       (__v16hi)_mm256_unpacklo_epi16(__A, __B),
                                       (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_unpacklo_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                       (__v16hi)_mm256_unpacklo_epi16(__A, __B),
                                       (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtepi8_epi16(__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_cvtepi8_epi16(__A),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_cvtepi8_epi16(__mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_cvtepi8_epi16(__A),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtepi8_epi16(__m256i __W, __mmask16 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                             (__v16hi)_mm256_cvtepi8_epi16(__A),
                                             (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_cvtepi8_epi16(__mmask16 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                             (__v16hi)_mm256_cvtepi8_epi16(__A),
                                             (__v16hi)_mm256_setzero_si256());
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_cvtepu8_epi16(__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_cvtepu8_epi16(__A),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_cvtepu8_epi16(__mmask8 __U, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_cvtepu8_epi16(__A),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_cvtepu8_epi16(__m256i __W, __mmask16 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                             (__v16hi)_mm256_cvtepu8_epi16(__A),
                                             (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_cvtepu8_epi16 (__mmask16 __U, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                             (__v16hi)_mm256_cvtepu8_epi16(__A),
                                             (__v16hi)_mm256_setzero_si256());
}
# 2271 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlbwintrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_sllv_epi16(__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_psllv16hi((__v16hi)__A, (__v16hi)__B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_sllv_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_sllv_epi16(__A, __B),
                                           (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_sllv_epi16(__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_sllv_epi16(__A, __B),
                                           (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_sllv_epi16(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psllv8hi((__v8hi)__A, (__v8hi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_sllv_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_sllv_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_sllv_epi16(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_sllv_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_sll_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_sll_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_sll_epi16 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_sll_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_sll_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                          (__v16hi)_mm256_sll_epi16(__A, __B),
                                          (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_sll_epi16(__mmask16 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                          (__v16hi)_mm256_sll_epi16(__A, __B),
                                          (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_slli_epi16(__m128i __W, __mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_slli_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_slli_epi16 (__mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_slli_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_slli_epi16(__m256i __W, __mmask16 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                         (__v16hi)_mm256_slli_epi16(__A, __B),
                                         (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_slli_epi16(__mmask16 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                         (__v16hi)_mm256_slli_epi16(__A, __B),
                                         (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_srlv_epi16(__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_psrlv16hi((__v16hi)__A, (__v16hi)__B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_srlv_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_srlv_epi16(__A, __B),
                                           (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_srlv_epi16(__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_srlv_epi16(__A, __B),
                                           (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_srlv_epi16(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psrlv8hi((__v8hi)__A, (__v8hi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_srlv_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_srlv_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_srlv_epi16(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_srlv_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_srav_epi16(__m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_psrav16hi((__v16hi)__A, (__v16hi)__B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_srav_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_srav_epi16(__A, __B),
                                           (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_srav_epi16(__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                           (__v16hi)_mm256_srav_epi16(__A, __B),
                                           (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_srav_epi16(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_psrav8hi((__v8hi)__A, (__v8hi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_srav_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_srav_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_srav_epi16(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_srav_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_sra_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_sra_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_sra_epi16(__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_sra_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_sra_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                          (__v16hi)_mm256_sra_epi16(__A, __B),
                                          (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_sra_epi16(__mmask16 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                          (__v16hi)_mm256_sra_epi16(__A, __B),
                                          (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_srai_epi16(__m128i __W, __mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_srai_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_srai_epi16(__mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_srai_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_srai_epi16(__m256i __W, __mmask16 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                         (__v16hi)_mm256_srai_epi16(__A, __B),
                                         (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_srai_epi16(__mmask16 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                         (__v16hi)_mm256_srai_epi16(__A, __B),
                                         (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_srl_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_srl_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_srl_epi16 (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_srl_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_srl_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                          (__v16hi)_mm256_srl_epi16(__A, __B),
                                          (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_srl_epi16(__mmask16 __U, __m256i __A, __m128i __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                          (__v16hi)_mm256_srl_epi16(__A, __B),
                                          (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_srli_epi16(__m128i __W, __mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_srli_epi16(__A, __B),
                                             (__v8hi)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_srli_epi16 (__mmask8 __U, __m128i __A, int __B)
{
  return (__m128i)__builtin_ia32_selectw_128((__mmask8)__U,
                                             (__v8hi)_mm_srli_epi16(__A, __B),
                                             (__v8hi)_mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_srli_epi16(__m256i __W, __mmask16 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                         (__v16hi)_mm256_srli_epi16(__A, __B),
                                         (__v16hi)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_srli_epi16(__mmask16 __U, __m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_selectw_256((__mmask16)__U,
                                         (__v16hi)_mm256_srli_epi16(__A, __B),
                                         (__v16hi)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_mov_epi16 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectw_128 ((__mmask8) __U,
                (__v8hi) __A,
                (__v8hi) __W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_mov_epi16 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectw_128 ((__mmask8) __U,
                (__v8hi) __A,
                (__v8hi) _mm_setzero_hi ());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_mov_epi16 (__m256i __W, __mmask16 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectw_256 ((__mmask16) __U,
                (__v16hi) __A,
                (__v16hi) __W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_mov_epi16 (__mmask16 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectw_256 ((__mmask16) __U,
                (__v16hi) __A,
                (__v16hi) _mm256_setzero_si256 ());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_mov_epi8 (__m128i __W, __mmask16 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectb_128 ((__mmask16) __U,
                (__v16qi) __A,
                (__v16qi) __W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_mov_epi8 (__mmask16 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_selectb_128 ((__mmask16) __U,
                (__v16qi) __A,
                (__v16qi) _mm_setzero_hi ());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_mov_epi8 (__m256i __W, __mmask32 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectb_256 ((__mmask32) __U,
                (__v32qi) __A,
                (__v32qi) __W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_mov_epi8 (__mmask32 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_selectb_256 ((__mmask32) __U,
                (__v32qi) __A,
                (__v32qi) _mm256_setzero_si256 ());
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_set1_epi8 (__m128i __O, __mmask16 __M, char __A)
{
  return (__m128i) __builtin_ia32_pbroadcastb128_gpr_mask (__A,
                 (__v16qi) __O,
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_set1_epi8 (__mmask16 __M, char __A)
{
  return (__m128i) __builtin_ia32_pbroadcastb128_gpr_mask (__A,
                 (__v16qi)
                 _mm_setzero_si128 (),
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_set1_epi8 (__m256i __O, __mmask32 __M, char __A)
{
  return (__m256i) __builtin_ia32_pbroadcastb256_gpr_mask (__A,
                 (__v32qi) __O,
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_set1_epi8 (__mmask32 __M, char __A)
{
  return (__m256i) __builtin_ia32_pbroadcastb256_gpr_mask (__A,
                 (__v32qi)
                 _mm256_setzero_si256 (),
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_loadu_epi16 (__m128i __W, __mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddquhi128_mask ((__v8hi *) __P,
                 (__v8hi) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_loadu_epi16 (__mmask8 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddquhi128_mask ((__v8hi *) __P,
                 (__v8hi)
                 _mm_setzero_hi (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_loadu_epi16 (__m256i __W, __mmask16 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddquhi256_mask ((__v16hi *) __P,
                 (__v16hi) __W,
                 (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_loadu_epi16 (__mmask16 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddquhi256_mask ((__v16hi *) __P,
                 (__v16hi)
                 _mm256_setzero_si256 (),
                 (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_loadu_epi8 (__m128i __W, __mmask16 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddquqi128_mask ((__v16qi *) __P,
                 (__v16qi) __W,
                 (__mmask16) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_loadu_epi8 (__mmask16 __U, void const *__P)
{
  return (__m128i) __builtin_ia32_loaddquqi128_mask ((__v16qi *) __P,
                 (__v16qi)
                 _mm_setzero_si128 (),
                 (__mmask16) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_loadu_epi8 (__m256i __W, __mmask32 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddquqi256_mask ((__v32qi *) __P,
                 (__v32qi) __W,
                 (__mmask32) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_loadu_epi8 (__mmask32 __U, void const *__P)
{
  return (__m256i) __builtin_ia32_loaddquqi256_mask ((__v32qi *) __P,
                 (__v32qi)
                 _mm256_setzero_si256 (),
                 (__mmask32) __U);
}
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_storeu_epi16 (void *__P, __mmask8 __U, __m128i __A)
{
  __builtin_ia32_storedquhi128_mask ((__v8hi *) __P,
             (__v8hi) __A,
             (__mmask8) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_storeu_epi16 (void *__P, __mmask16 __U, __m256i __A)
{
  __builtin_ia32_storedquhi256_mask ((__v16hi *) __P,
             (__v16hi) __A,
             (__mmask16) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_storeu_epi8 (void *__P, __mmask16 __U, __m128i __A)
{
  __builtin_ia32_storedquqi128_mask ((__v16qi *) __P,
             (__v16qi) __A,
             (__mmask16) __U);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_storeu_epi8 (void *__P, __mmask32 __U, __m256i __A)
{
  __builtin_ia32_storedquqi256_mask ((__v32qi *) __P,
             (__v32qi) __A,
             (__mmask32) __U);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_test_epi8_mask (__m128i __A, __m128i __B)
{
  return (__mmask16) __builtin_ia32_ptestmb128 ((__v16qi) __A,
            (__v16qi) __B,
            (__mmask16) -1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_test_epi8_mask (__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__mmask16) __builtin_ia32_ptestmb128 ((__v16qi) __A,
            (__v16qi) __B, __U);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_test_epi8_mask (__m256i __A, __m256i __B)
{
  return (__mmask32) __builtin_ia32_ptestmb256 ((__v32qi) __A,
            (__v32qi) __B,
            (__mmask32) -1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_test_epi8_mask (__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__mmask32) __builtin_ia32_ptestmb256 ((__v32qi) __A,
            (__v32qi) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_test_epi16_mask (__m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestmw128 ((__v8hi) __A,
                 (__v8hi) __B,
                 (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_test_epi16_mask (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestmw128 ((__v8hi) __A,
                 (__v8hi) __B, __U);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_test_epi16_mask (__m256i __A, __m256i __B)
{
  return (__mmask16) __builtin_ia32_ptestmw256 ((__v16hi) __A,
            (__v16hi) __B,
            (__mmask16) -1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_test_epi16_mask (__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__mmask16) __builtin_ia32_ptestmw256 ((__v16hi) __A,
            (__v16hi) __B, __U);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_testn_epi8_mask (__m128i __A, __m128i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmb128 ((__v16qi) __A,
             (__v16qi) __B,
             (__mmask16) -1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_testn_epi8_mask (__mmask16 __U, __m128i __A, __m128i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmb128 ((__v16qi) __A,
             (__v16qi) __B, __U);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_testn_epi8_mask (__m256i __A, __m256i __B)
{
  return (__mmask32) __builtin_ia32_ptestnmb256 ((__v32qi) __A,
             (__v32qi) __B,
             (__mmask32) -1);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_testn_epi8_mask (__mmask32 __U, __m256i __A, __m256i __B)
{
  return (__mmask32) __builtin_ia32_ptestnmb256 ((__v32qi) __A,
             (__v32qi) __B, __U);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_testn_epi16_mask (__m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmw128 ((__v8hi) __A,
            (__v8hi) __B,
            (__mmask8) -1);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_testn_epi16_mask (__mmask8 __U, __m128i __A, __m128i __B)
{
  return (__mmask8) __builtin_ia32_ptestnmw128 ((__v8hi) __A,
            (__v8hi) __B, __U);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_testn_epi16_mask (__m256i __A, __m256i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmw256 ((__v16hi) __A,
             (__v16hi) __B,
             (__mmask16) -1);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_testn_epi16_mask (__mmask16 __U, __m256i __A, __m256i __B)
{
  return (__mmask16) __builtin_ia32_ptestnmw256 ((__v16hi) __A,
             (__v16hi) __B, __U);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_movepi8_mask (__m128i __A)
{
  return (__mmask16) __builtin_ia32_cvtb2mask128 ((__v16qi) __A);
}

static __inline__ __mmask32 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_movepi8_mask (__m256i __A)
{
  return (__mmask32) __builtin_ia32_cvtb2mask256 ((__v32qi) __A);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_movepi16_mask (__m128i __A)
{
  return (__mmask8) __builtin_ia32_cvtw2mask128 ((__v8hi) __A);
}

static __inline__ __mmask16 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_movepi16_mask (__m256i __A)
{
  return (__mmask16) __builtin_ia32_cvtw2mask256 ((__v16hi) __A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_movm_epi8 (__mmask16 __A)
{
  return (__m128i) __builtin_ia32_cvtmask2b128 (__A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_movm_epi8 (__mmask32 __A)
{
  return (__m256i) __builtin_ia32_cvtmask2b256 (__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_movm_epi16 (__mmask8 __A)
{
  return (__m128i) __builtin_ia32_cvtmask2w128 (__A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_movm_epi16 (__mmask16 __A)
{
  return (__m256i) __builtin_ia32_cvtmask2w256 (__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_broadcastb_epi8 (__m128i __O, __mmask16 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectb_128(__M,
                                             (__v16qi) _mm_broadcastb_epi8(__A),
                                             (__v16qi) __O);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_broadcastb_epi8 (__mmask16 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectb_128(__M,
                                             (__v16qi) _mm_broadcastb_epi8(__A),
                                             (__v16qi) _mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_broadcastb_epi8 (__m256i __O, __mmask32 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectb_256(__M,
                                             (__v32qi) _mm256_broadcastb_epi8(__A),
                                             (__v32qi) __O);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_broadcastb_epi8 (__mmask32 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectb_256(__M,
                                             (__v32qi) _mm256_broadcastb_epi8(__A),
                                             (__v32qi) _mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_broadcastw_epi16 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectw_128(__M,
                                             (__v8hi) _mm_broadcastw_epi16(__A),
                                             (__v8hi) __O);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_broadcastw_epi16 (__mmask8 __M, __m128i __A)
{
  return (__m128i)__builtin_ia32_selectw_128(__M,
                                             (__v8hi) _mm_broadcastw_epi16(__A),
                                             (__v8hi) _mm_setzero_si128());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_broadcastw_epi16 (__m256i __O, __mmask16 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectw_256(__M,
                                             (__v16hi) _mm256_broadcastw_epi16(__A),
                                             (__v16hi) __O);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_broadcastw_epi16 (__mmask16 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectw_256(__M,
                                             (__v16hi) _mm256_broadcastw_epi16(__A),
                                             (__v16hi) _mm256_setzero_si256());
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_set1_epi16 (__m256i __O, __mmask16 __M, short __A)
{
  return (__m256i) __builtin_ia32_pbroadcastw256_gpr_mask (__A,
                 (__v16hi) __O,
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_set1_epi16 (__mmask16 __M, short __A)
{
  return (__m256i) __builtin_ia32_pbroadcastw256_gpr_mask (__A,
                 (__v16hi) _mm256_setzero_si256 (),
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_set1_epi16 (__m128i __O, __mmask8 __M, short __A)
{
  return (__m128i) __builtin_ia32_pbroadcastw128_gpr_mask (__A,
                 (__v8hi) __O,
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_set1_epi16 (__mmask8 __M, short __A)
{
  return (__m128i) __builtin_ia32_pbroadcastw128_gpr_mask (__A,
                 (__v8hi) _mm_setzero_si128 (),
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_permutexvar_epi16 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_permvarhi128_mask ((__v8hi) __B,
                 (__v8hi) __A,
                 (__v8hi) _mm_undefined_si128 (),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_maskz_permutexvar_epi16 (__mmask8 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_permvarhi128_mask ((__v8hi) __B,
                 (__v8hi) __A,
                 (__v8hi) _mm_setzero_si128 (),
                 (__mmask8) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm_mask_permutexvar_epi16 (__m128i __W, __mmask8 __M, __m128i __A,
          __m128i __B)
{
  return (__m128i) __builtin_ia32_permvarhi128_mask ((__v8hi) __B,
                 (__v8hi) __A,
                 (__v8hi) __W,
                 (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_permutexvar_epi16 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_permvarhi256_mask ((__v16hi) __B,
                 (__v16hi) __A,
                 (__v16hi) _mm256_undefined_si256 (),
                 (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_maskz_permutexvar_epi16 (__mmask16 __M, __m256i __A,
        __m256i __B)
{
  return (__m256i) __builtin_ia32_permvarhi256_mask ((__v16hi) __B,
                 (__v16hi) __A,
                 (__v16hi) _mm256_setzero_si256 (),
                 (__mmask16) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512bw")))
_mm256_mask_permutexvar_epi16 (__m256i __W, __mmask16 __M, __m256i __A,
             __m256i __B)
{
  return (__m256i) __builtin_ia32_permvarhi256_mask ((__v16hi) __B,
                 (__v16hi) __A,
                 (__v16hi) __W,
                 (__mmask16) __M);
}
# 160 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3




# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlcdintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vlcdintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_broadcastmb_epi64 (__mmask8 __A)
{
  return (__m128i) __builtin_ia32_broadcastmb128 (__A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_broadcastmb_epi64 (__mmask8 __A)
{
  return (__m256i) __builtin_ia32_broadcastmb256 (__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_broadcastmw_epi32 (__mmask16 __A)
{
  return (__m128i) __builtin_ia32_broadcastmw128 (__A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_broadcastmw_epi32 (__mmask16 __A)
{
  return (__m256i) __builtin_ia32_broadcastmw256 (__A);
}


static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_conflict_epi64 (__m128i __A)
{
  return (__m128i) __builtin_ia32_vpconflictdi_128_mask ((__v2di) __A,
               (__v2di) _mm_undefined_si128 (),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_mask_conflict_epi64 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vpconflictdi_128_mask ((__v2di) __A,
               (__v2di) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_maskz_conflict_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vpconflictdi_128_mask ((__v2di) __A,
               (__v2di)
               _mm_setzero_di (),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_conflict_epi64 (__m256i __A)
{
  return (__m256i) __builtin_ia32_vpconflictdi_256_mask ((__v4di) __A,
               (__v4di) _mm256_undefined_si256 (),
               (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_mask_conflict_epi64 (__m256i __W, __mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vpconflictdi_256_mask ((__v4di) __A,
               (__v4di) __W,
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_maskz_conflict_epi64 (__mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vpconflictdi_256_mask ((__v4di) __A,
               (__v4di) _mm256_setzero_si256 (),
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_conflict_epi32 (__m128i __A)
{
  return (__m128i) __builtin_ia32_vpconflictsi_128_mask ((__v4si) __A,
               (__v4si) _mm_undefined_si128 (),
               (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_mask_conflict_epi32 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vpconflictsi_128_mask ((__v4si) __A,
               (__v4si) __W,
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_maskz_conflict_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vpconflictsi_128_mask ((__v4si) __A,
               (__v4si) _mm_setzero_si128 (),
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_conflict_epi32 (__m256i __A)
{
  return (__m256i) __builtin_ia32_vpconflictsi_256_mask ((__v8si) __A,
               (__v8si) _mm256_undefined_si256 (),
               (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_mask_conflict_epi32 (__m256i __W, __mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vpconflictsi_256_mask ((__v8si) __A,
               (__v8si) __W,
               (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_maskz_conflict_epi32 (__mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vpconflictsi_256_mask ((__v8si) __A,
               (__v8si)
               _mm256_setzero_si256 (),
               (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_lzcnt_epi32 (__m128i __A)
{
  return (__m128i) __builtin_ia32_vplzcntd_128_mask ((__v4si) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_mask_lzcnt_epi32 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vplzcntd_128_mask ((__v4si) __A,
                 (__v4si) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_maskz_lzcnt_epi32 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vplzcntd_128_mask ((__v4si) __A,
                 (__v4si)
                 _mm_setzero_si128 (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_lzcnt_epi32 (__m256i __A)
{
  return (__m256i) __builtin_ia32_vplzcntd_256_mask ((__v8si) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_mask_lzcnt_epi32 (__m256i __W, __mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vplzcntd_256_mask ((__v8si) __A,
                 (__v8si) __W,
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_maskz_lzcnt_epi32 (__mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vplzcntd_256_mask ((__v8si) __A,
                 (__v8si)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_lzcnt_epi64 (__m128i __A)
{
  return (__m128i) __builtin_ia32_vplzcntq_128_mask ((__v2di) __A,
                 (__v2di)
                 _mm_setzero_di (),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_mask_lzcnt_epi64 (__m128i __W, __mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vplzcntq_128_mask ((__v2di) __A,
                 (__v2di) __W,
                 (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm_maskz_lzcnt_epi64 (__mmask8 __U, __m128i __A)
{
  return (__m128i) __builtin_ia32_vplzcntq_128_mask ((__v2di) __A,
                 (__v2di)
                 _mm_setzero_di (),
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_lzcnt_epi64 (__m256i __A)
{
  return (__m256i) __builtin_ia32_vplzcntq_256_mask ((__v4di) __A,
                 (__v4di)
                 _mm256_setzero_si256 (),
                 (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_mask_lzcnt_epi64 (__m256i __W, __mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vplzcntq_256_mask ((__v4di) __A,
                 (__v4di) __W,
                 (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512cd")))
_mm256_maskz_lzcnt_epi64 (__mmask8 __U, __m256i __A)
{
  return (__m256i) __builtin_ia32_vplzcntq_256_mask ((__v4di) __A,
                 (__v4di)
                 _mm256_setzero_si256 (),
                 (__mmask8) __U);
}
# 165 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3




# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vldqintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vldqintrin.h" 3
static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mullo_epi64 (__m256i __A, __m256i __B) {
  return (__m256i) ((__v4du) __A * (__v4du) __B);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_mullo_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_mullo_epi64(__A, __B),
                                             (__v4di)__W);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_mullo_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__U,
                                             (__v4di)_mm256_mullo_epi64(__A, __B),
                                             (__v4di)_mm256_setzero_si256());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mullo_epi64 (__m128i __A, __m128i __B) {
  return (__m128i) ((__v2du) __A * (__v2du) __B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_mullo_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_mullo_epi64(__A, __B),
                                             (__v2di)__W);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_mullo_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_selectq_128((__mmask8)__U,
                                             (__v2di)_mm_mullo_epi64(__A, __B),
                                             (__v2di)_mm_setzero_si128());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_andnot_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_andnot_pd(__A, __B),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_andnot_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_andnot_pd(__A, __B),
                                              (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_andnot_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_andnot_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_andnot_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_andnot_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_andnot_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_andnot_ps(__A, __B),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_andnot_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_andnot_ps(__A, __B),
                                             (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_andnot_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_andnot_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_andnot_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_andnot_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_and_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_and_pd(__A, __B),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_and_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_and_pd(__A, __B),
                                              (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_and_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_and_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_and_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_and_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_and_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_and_ps(__A, __B),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_and_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_and_ps(__A, __B),
                                             (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_and_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_and_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_and_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_and_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_xor_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_xor_pd(__A, __B),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_xor_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_xor_pd(__A, __B),
                                              (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_xor_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_xor_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_xor_pd (__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_xor_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_xor_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_xor_ps(__A, __B),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_xor_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_xor_ps(__A, __B),
                                             (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_xor_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_xor_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_xor_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_xor_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_or_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_or_pd(__A, __B),
                                              (__v4df)__W);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_or_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__U,
                                              (__v4df)_mm256_or_pd(__A, __B),
                                              (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_or_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_or_pd(__A, __B),
                                              (__v2df)__W);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_or_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_selectpd_128((__mmask8)__U,
                                              (__v2df)_mm_or_pd(__A, __B),
                                              (__v2df)_mm_setzero_pd());
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_or_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_or_ps(__A, __B),
                                             (__v8sf)__W);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_or_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_selectps_256((__mmask8)__U,
                                             (__v8sf)_mm256_or_ps(__A, __B),
                                             (__v8sf)_mm256_setzero_ps());
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_or_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_or_ps(__A, __B),
                                             (__v4sf)__W);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_or_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_selectps_128((__mmask8)__U,
                                             (__v4sf)_mm_or_ps(__A, __B),
                                             (__v4sf)_mm_setzero_ps());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtpd_epi64 (__m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2qq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtpd_epi64 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2qq128_mask ((__v2df) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtpd_epi64 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2qq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtpd_epi64 (__m256d __A) {
  return (__m256i) __builtin_ia32_cvtpd2qq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtpd_epi64 (__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvtpd2qq256_mask ((__v4df) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtpd_epi64 (__mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvtpd2qq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtpd_epu64 (__m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2uqq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtpd_epu64 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2uqq128_mask ((__v2df) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtpd_epu64 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvtpd2uqq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtpd_epu64 (__m256d __A) {
  return (__m256i) __builtin_ia32_cvtpd2uqq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtpd_epu64 (__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvtpd2uqq256_mask ((__v4df) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtpd_epu64 (__mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvtpd2uqq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtps_epi64 (__m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2qq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtps_epi64 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2qq128_mask ((__v4sf) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtps_epi64 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2qq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtps_epi64 (__m128 __A) {
  return (__m256i) __builtin_ia32_cvtps2qq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtps_epi64 (__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvtps2qq256_mask ((__v4sf) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtps_epi64 (__mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvtps2qq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtps_epu64 (__m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2uqq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtps_epu64 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2uqq128_mask ((__v4sf) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtps_epu64 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvtps2uqq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtps_epu64 (__m128 __A) {
  return (__m256i) __builtin_ia32_cvtps2uqq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtps_epu64 (__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvtps2uqq256_mask ((__v4sf) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtps_epu64 (__mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvtps2uqq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtepi64_pd (__m128i __A) {
  return (__m128d) __builtin_ia32_cvtqq2pd128_mask ((__v2di) __A,
                (__v2df) _mm_setzero_pd(),
                (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtepi64_pd (__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d) __builtin_ia32_cvtqq2pd128_mask ((__v2di) __A,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtepi64_pd (__mmask8 __U, __m128i __A) {
  return (__m128d) __builtin_ia32_cvtqq2pd128_mask ((__v2di) __A,
                (__v2df) _mm_setzero_pd(),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtepi64_pd (__m256i __A) {
  return (__m256d) __builtin_ia32_cvtqq2pd256_mask ((__v4di) __A,
                (__v4df) _mm256_setzero_pd(),
                (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtepi64_pd (__m256d __W, __mmask8 __U, __m256i __A) {
  return (__m256d) __builtin_ia32_cvtqq2pd256_mask ((__v4di) __A,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtepi64_pd (__mmask8 __U, __m256i __A) {
  return (__m256d) __builtin_ia32_cvtqq2pd256_mask ((__v4di) __A,
                (__v4df) _mm256_setzero_pd(),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtepi64_ps (__m128i __A) {
  return (__m128) __builtin_ia32_cvtqq2ps128_mask ((__v2di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtepi64_ps (__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtqq2ps128_mask ((__v2di) __A,
                (__v4sf) __W,
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtepi64_ps (__mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtqq2ps128_mask ((__v2di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtepi64_ps (__m256i __A) {
  return (__m128) __builtin_ia32_cvtqq2ps256_mask ((__v4di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtepi64_ps (__m128 __W, __mmask8 __U, __m256i __A) {
  return (__m128) __builtin_ia32_cvtqq2ps256_mask ((__v4di) __A,
                (__v4sf) __W,
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtepi64_ps (__mmask8 __U, __m256i __A) {
  return (__m128) __builtin_ia32_cvtqq2ps256_mask ((__v4di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvttpd_epi64 (__m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2qq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvttpd_epi64 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2qq128_mask ((__v2df) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvttpd_epi64 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2qq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvttpd_epi64 (__m256d __A) {
  return (__m256i) __builtin_ia32_cvttpd2qq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvttpd_epi64 (__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvttpd2qq256_mask ((__v4df) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvttpd_epi64 (__mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvttpd2qq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvttpd_epu64 (__m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2uqq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvttpd_epu64 (__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2uqq128_mask ((__v2df) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvttpd_epu64 (__mmask8 __U, __m128d __A) {
  return (__m128i) __builtin_ia32_cvttpd2uqq128_mask ((__v2df) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvttpd_epu64 (__m256d __A) {
  return (__m256i) __builtin_ia32_cvttpd2uqq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvttpd_epu64 (__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvttpd2uqq256_mask ((__v4df) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvttpd_epu64 (__mmask8 __U, __m256d __A) {
  return (__m256i) __builtin_ia32_cvttpd2uqq256_mask ((__v4df) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvttps_epi64 (__m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2qq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvttps_epi64 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2qq128_mask ((__v4sf) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvttps_epi64 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2qq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvttps_epi64 (__m128 __A) {
  return (__m256i) __builtin_ia32_cvttps2qq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvttps_epi64 (__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvttps2qq256_mask ((__v4sf) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvttps_epi64 (__mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvttps2qq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvttps_epu64 (__m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2uqq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvttps_epu64 (__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2uqq128_mask ((__v4sf) __A,
                (__v2di) __W,
                (__mmask8) __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvttps_epu64 (__mmask8 __U, __m128 __A) {
  return (__m128i) __builtin_ia32_cvttps2uqq128_mask ((__v4sf) __A,
                (__v2di) _mm_setzero_si128(),
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvttps_epu64 (__m128 __A) {
  return (__m256i) __builtin_ia32_cvttps2uqq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvttps_epu64 (__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvttps2uqq256_mask ((__v4sf) __A,
                (__v4di) __W,
                (__mmask8) __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvttps_epu64 (__mmask8 __U, __m128 __A) {
  return (__m256i) __builtin_ia32_cvttps2uqq256_mask ((__v4sf) __A,
                (__v4di) _mm256_setzero_si256(),
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtepu64_pd (__m128i __A) {
  return (__m128d) __builtin_ia32_cvtuqq2pd128_mask ((__v2di) __A,
                (__v2df) _mm_setzero_pd(),
                (__mmask8) -1);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtepu64_pd (__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d) __builtin_ia32_cvtuqq2pd128_mask ((__v2di) __A,
                (__v2df) __W,
                (__mmask8) __U);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtepu64_pd (__mmask8 __U, __m128i __A) {
  return (__m128d) __builtin_ia32_cvtuqq2pd128_mask ((__v2di) __A,
                (__v2df) _mm_setzero_pd(),
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtepu64_pd (__m256i __A) {
  return (__m256d) __builtin_ia32_cvtuqq2pd256_mask ((__v4di) __A,
                (__v4df) _mm256_setzero_pd(),
                (__mmask8) -1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtepu64_pd (__m256d __W, __mmask8 __U, __m256i __A) {
  return (__m256d) __builtin_ia32_cvtuqq2pd256_mask ((__v4di) __A,
                (__v4df) __W,
                (__mmask8) __U);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtepu64_pd (__mmask8 __U, __m256i __A) {
  return (__m256d) __builtin_ia32_cvtuqq2pd256_mask ((__v4di) __A,
                (__v4df) _mm256_setzero_pd(),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_cvtepu64_ps (__m128i __A) {
  return (__m128) __builtin_ia32_cvtuqq2ps128_mask ((__v2di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_cvtepu64_ps (__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtuqq2ps128_mask ((__v2di) __A,
                (__v4sf) __W,
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_cvtepu64_ps (__mmask8 __U, __m128i __A) {
  return (__m128) __builtin_ia32_cvtuqq2ps128_mask ((__v2di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_cvtepu64_ps (__m256i __A) {
  return (__m128) __builtin_ia32_cvtuqq2ps256_mask ((__v4di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) -1);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_cvtepu64_ps (__m128 __W, __mmask8 __U, __m256i __A) {
  return (__m128) __builtin_ia32_cvtuqq2ps256_mask ((__v4di) __A,
                (__v4sf) __W,
                (__mmask8) __U);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_cvtepu64_ps (__mmask8 __U, __m256i __A) {
  return (__m128) __builtin_ia32_cvtuqq2ps256_mask ((__v4di) __A,
                (__v4sf) _mm_setzero_ps(),
                (__mmask8) __U);
}
# 930 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vldqintrin.h" 3
static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_movepi32_mask (__m128i __A)
{
  return (__mmask8) __builtin_ia32_cvtd2mask128 ((__v4si) __A);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_movepi32_mask (__m256i __A)
{
  return (__mmask8) __builtin_ia32_cvtd2mask256 ((__v8si) __A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_movm_epi32 (__mmask8 __A)
{
  return (__m128i) __builtin_ia32_cvtmask2d128 (__A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_movm_epi32 (__mmask8 __A)
{
  return (__m256i) __builtin_ia32_cvtmask2d256 (__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_movm_epi64 (__mmask8 __A)
{
  return (__m128i) __builtin_ia32_cvtmask2q128 (__A);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_movm_epi64 (__mmask8 __A)
{
  return (__m256i) __builtin_ia32_cvtmask2q256 (__A);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_movepi64_mask (__m128i __A)
{
  return (__mmask8) __builtin_ia32_cvtq2mask128 ((__v2di) __A);
}

static __inline__ __mmask8 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_movepi64_mask (__m256i __A)
{
  return (__mmask8) __builtin_ia32_cvtq2mask256 ((__v4di) __A);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_broadcast_f32x2 (__m128 __A)
{
  return (__m256) __builtin_ia32_broadcastf32x2_256_mask ((__v4sf) __A,
                (__v8sf)_mm256_undefined_ps(),
                (__mmask8) -1);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_broadcast_f32x2 (__m256 __O, __mmask8 __M, __m128 __A)
{
  return (__m256) __builtin_ia32_broadcastf32x2_256_mask ((__v4sf) __A,
                (__v8sf) __O,
                __M);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_broadcast_f32x2 (__mmask8 __M, __m128 __A)
{
  return (__m256) __builtin_ia32_broadcastf32x2_256_mask ((__v4sf) __A,
                (__v8sf) _mm256_setzero_ps (),
                __M);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_broadcast_f64x2(__m128d __A)
{
  return (__m256d)__builtin_shufflevector((__v2df)__A, (__v2df)__A,
                                          0, 1, 0, 1);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_broadcast_f64x2(__m256d __O, __mmask8 __M, __m128d __A)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__M,
                                            (__v4df)_mm256_broadcast_f64x2(__A),
                                            (__v4df)__O);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_broadcast_f64x2 (__mmask8 __M, __m128d __A)
{
  return (__m256d)__builtin_ia32_selectpd_256((__mmask8)__M,
                                            (__v4df)_mm256_broadcast_f64x2(__A),
                                            (__v4df)_mm256_setzero_pd());
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_broadcast_i32x2 (__m128i __A)
{
  return (__m128i) __builtin_ia32_broadcasti32x2_128_mask ((__v4si) __A,
                 (__v4si)_mm_undefined_si128(),
                 (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_mask_broadcast_i32x2 (__m128i __O, __mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_broadcasti32x2_128_mask ((__v4si) __A,
                 (__v4si) __O,
                 __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm_maskz_broadcast_i32x2 (__mmask8 __M, __m128i __A)
{
  return (__m128i) __builtin_ia32_broadcasti32x2_128_mask ((__v4si) __A,
                 (__v4si) _mm_setzero_si128 (),
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_broadcast_i32x2 (__m128i __A)
{
  return (__m256i) __builtin_ia32_broadcasti32x2_256_mask ((__v4si) __A,
                 (__v8si)_mm256_undefined_si256(),
                 (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_broadcast_i32x2 (__m256i __O, __mmask8 __M, __m128i __A)
{
  return (__m256i) __builtin_ia32_broadcasti32x2_256_mask ((__v4si) __A,
                 (__v8si) __O,
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_broadcast_i32x2 (__mmask8 __M, __m128i __A)
{
  return (__m256i) __builtin_ia32_broadcasti32x2_256_mask ((__v4si) __A,
                 (__v8si) _mm256_setzero_si256 (),
                 __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_broadcast_i64x2(__m128i __A)
{
  return (__m256i)__builtin_shufflevector((__v2di)__A, (__v2di)__A,
                                          0, 1, 0, 1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_mask_broadcast_i64x2(__m256i __O, __mmask8 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__M,
                                            (__v4di)_mm256_broadcast_i64x2(__A),
                                            (__v4di)__O);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vl,avx512dq")))
_mm256_maskz_broadcast_i64x2 (__mmask8 __M, __m128i __A)
{
  return (__m256i)__builtin_ia32_selectq_256((__mmask8)__M,
                                            (__v4di)_mm256_broadcast_i64x2(__A),
                                            (__v4di)_mm256_setzero_si256());
}
# 170 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512erintrin.h" 1 3
# 174 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512ifmaintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512ifmaintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma")))
_mm512_madd52hi_epu64 (__m512i __X, __m512i __Y, __m512i __Z)
{
  return (__m512i) __builtin_ia32_vpmadd52huq512_mask ((__v8di) __X,
                   (__v8di) __Y,
                   (__v8di) __Z,
                   (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma")))
_mm512_mask_madd52hi_epu64 (__m512i __W, __mmask8 __M, __m512i __X,
          __m512i __Y)
{
  return (__m512i) __builtin_ia32_vpmadd52huq512_mask ((__v8di) __W,
                   (__v8di) __X,
                   (__v8di) __Y,
                   (__mmask8) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma")))
_mm512_maskz_madd52hi_epu64 (__mmask8 __M, __m512i __X, __m512i __Y, __m512i __Z)
{
  return (__m512i) __builtin_ia32_vpmadd52huq512_maskz ((__v8di) __X,
              (__v8di) __Y,
              (__v8di) __Z,
              (__mmask8) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma")))
_mm512_madd52lo_epu64 (__m512i __X, __m512i __Y, __m512i __Z)
{
  return (__m512i) __builtin_ia32_vpmadd52luq512_mask ((__v8di) __X,
                   (__v8di) __Y,
                   (__v8di) __Z,
                   (__mmask8) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma")))
_mm512_mask_madd52lo_epu64 (__m512i __W, __mmask8 __M, __m512i __X,
          __m512i __Y)
{
  return (__m512i) __builtin_ia32_vpmadd52luq512_mask ((__v8di) __W,
                   (__v8di) __X,
                   (__v8di) __Y,
                   (__mmask8) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma")))
_mm512_maskz_madd52lo_epu64 (__mmask8 __M, __m512i __X, __m512i __Y, __m512i __Z)
{
  return (__m512i) __builtin_ia32_vpmadd52luq512_maskz ((__v8di) __X,
              (__v8di) __Y,
              (__v8di) __Z,
              (__mmask8) __M);
}
# 178 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3




# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512ifmavlintrin.h" 1 3
# 36 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512ifmavlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm_madd52hi_epu64 (__m128i __X, __m128i __Y, __m128i __Z)
{
  return (__m128i) __builtin_ia32_vpmadd52huq128_mask ((__v2di) __X,
                   (__v2di) __Y,
                   (__v2di) __Z,
                   (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm_mask_madd52hi_epu64 (__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_vpmadd52huq128_mask ((__v2di) __W,
                   (__v2di) __X,
                   (__v2di) __Y,
                   (__mmask8) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm_maskz_madd52hi_epu64 (__mmask8 __M, __m128i __X, __m128i __Y, __m128i __Z)
{
  return (__m128i) __builtin_ia32_vpmadd52huq128_maskz ((__v2di) __X,
              (__v2di) __Y,
              (__v2di) __Z,
              (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm256_madd52hi_epu64 (__m256i __X, __m256i __Y, __m256i __Z)
{
  return (__m256i) __builtin_ia32_vpmadd52huq256_mask ((__v4di) __X,
                   (__v4di) __Y,
                   (__v4di) __Z,
                   (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm256_mask_madd52hi_epu64 (__m256i __W, __mmask8 __M, __m256i __X,
          __m256i __Y)
{
  return (__m256i) __builtin_ia32_vpmadd52huq256_mask ((__v4di) __W,
                   (__v4di) __X,
                   (__v4di) __Y,
                   (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm256_maskz_madd52hi_epu64 (__mmask8 __M, __m256i __X, __m256i __Y, __m256i __Z)
{
  return (__m256i) __builtin_ia32_vpmadd52huq256_maskz ((__v4di) __X,
              (__v4di) __Y,
              (__v4di) __Z,
              (__mmask8) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm_madd52lo_epu64 (__m128i __X, __m128i __Y, __m128i __Z)
{
  return (__m128i) __builtin_ia32_vpmadd52luq128_mask ((__v2di) __X,
                   (__v2di) __Y,
                   (__v2di) __Z,
                   (__mmask8) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm_mask_madd52lo_epu64 (__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_vpmadd52luq128_mask ((__v2di) __W,
                   (__v2di) __X,
                   (__v2di) __Y,
                   (__mmask8) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm_maskz_madd52lo_epu64 (__mmask8 __M, __m128i __X, __m128i __Y, __m128i __Z)
{
  return (__m128i) __builtin_ia32_vpmadd52luq128_maskz ((__v2di) __X,
              (__v2di) __Y,
              (__v2di) __Z,
              (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm256_madd52lo_epu64 (__m256i __X, __m256i __Y, __m256i __Z)
{
  return (__m256i) __builtin_ia32_vpmadd52luq256_mask ((__v4di) __X,
                   (__v4di) __Y,
                   (__v4di) __Z,
                   (__mmask8) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm256_mask_madd52lo_epu64 (__m256i __W, __mmask8 __M, __m256i __X,
          __m256i __Y)
{
  return (__m256i) __builtin_ia32_vpmadd52luq256_mask ((__v4di) __W,
                   (__v4di) __X,
                   (__v4di) __Y,
                   (__mmask8) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512ifma,avx512vl")))
_mm256_maskz_madd52lo_epu64 (__mmask8 __M, __m256i __X, __m256i __Y, __m256i __Z)
{
  return (__m256i) __builtin_ia32_vpmadd52luq256_maskz ((__v4di) __X,
              (__v4di) __Y,
              (__v4di) __Z,
              (__mmask8) __M);
}
# 183 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vbmiintrin.h" 1 3
# 35 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vbmiintrin.h" 3
static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_mask2_permutex2var_epi8 (__m512i __A, __m512i __I,
         __mmask64 __U, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermi2varqi512_mask ((__v64qi) __A,
              (__v64qi) __I
                        ,
              (__v64qi) __B,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_permutex2var_epi8 (__m512i __A, __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varqi512_mask ((__v64qi) __I
                        ,
              (__v64qi) __A,
              (__v64qi) __B,
              (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_mask_permutex2var_epi8 (__m512i __A, __mmask64 __U,
        __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varqi512_mask ((__v64qi) __I
                        ,
              (__v64qi) __A,
              (__v64qi) __B,
              (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_maskz_permutex2var_epi8 (__mmask64 __U, __m512i __A,
         __m512i __I, __m512i __B)
{
  return (__m512i) __builtin_ia32_vpermt2varqi512_maskz ((__v64qi) __I
                         ,
               (__v64qi) __A,
               (__v64qi) __B,
               (__mmask64) __U);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_permutexvar_epi8 (__m512i __A, __m512i __B)
{
  return (__m512i) __builtin_ia32_permvarqi512_mask ((__v64qi) __B,
                 (__v64qi) __A,
                 (__v64qi) _mm512_undefined_epi32 (),
                 (__mmask64) -1);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_maskz_permutexvar_epi8 (__mmask64 __M, __m512i __A,
        __m512i __B)
{
  return (__m512i) __builtin_ia32_permvarqi512_mask ((__v64qi) __B,
                 (__v64qi) __A,
                 (__v64qi) _mm512_setzero_si512(),
                 (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_mask_permutexvar_epi8 (__m512i __W, __mmask64 __M, __m512i __A,
             __m512i __B)
{
  return (__m512i) __builtin_ia32_permvarqi512_mask ((__v64qi) __B,
                 (__v64qi) __A,
                 (__v64qi) __W,
                 (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_mask_multishift_epi64_epi8 (__m512i __W, __mmask64 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_vpmultishiftqb512_mask ((__v64qi) __X,
                (__v64qi) __Y,
                (__v64qi) __W,
                (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_maskz_multishift_epi64_epi8 (__mmask64 __M, __m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_vpmultishiftqb512_mask ((__v64qi) __X,
                (__v64qi) __Y,
                (__v64qi) _mm512_setzero_si512 (),
                (__mmask64) __M);
}

static __inline__ __m512i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi")))
_mm512_multishift_epi64_epi8 (__m512i __X, __m512i __Y)
{
  return (__m512i) __builtin_ia32_vpmultishiftqb512_mask ((__v64qi) __X,
                (__v64qi) __Y,
                (__v64qi) _mm512_undefined_epi32 (),
                (__mmask64) -1);
}
# 187 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3




# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vbmivlintrin.h" 1 3
# 35 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512vbmivlintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_mask2_permutex2var_epi8 (__m128i __A, __m128i __I, __mmask16 __U,
            __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermi2varqi128_mask ((__v16qi) __A,
              (__v16qi) __I
                        ,
              (__v16qi) __B,
              (__mmask16)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_mask2_permutex2var_epi8 (__m256i __A, __m256i __I,
         __mmask32 __U, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermi2varqi256_mask ((__v32qi) __A,
              (__v32qi) __I
                        ,
              (__v32qi) __B,
              (__mmask32)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_permutex2var_epi8 (__m128i __A, __m128i __I, __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermt2varqi128_mask ((__v16qi) __I
                        ,
              (__v16qi) __A,
              (__v16qi) __B,
              (__mmask16) -
              1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_mask_permutex2var_epi8 (__m128i __A, __mmask16 __U, __m128i __I,
           __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermt2varqi128_mask ((__v16qi) __I
                        ,
              (__v16qi) __A,
              (__v16qi) __B,
              (__mmask16)
              __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_maskz_permutex2var_epi8 (__mmask16 __U, __m128i __A, __m128i __I,
            __m128i __B)
{
  return (__m128i) __builtin_ia32_vpermt2varqi128_maskz ((__v16qi) __I
                         ,
               (__v16qi) __A,
               (__v16qi) __B,
               (__mmask16)
               __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_permutex2var_epi8 (__m256i __A, __m256i __I, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermt2varqi256_mask ((__v32qi) __I
                        ,
              (__v32qi) __A,
              (__v32qi) __B,
              (__mmask32) -
              1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_mask_permutex2var_epi8 (__m256i __A, __mmask32 __U,
        __m256i __I, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermt2varqi256_mask ((__v32qi) __I
                        ,
              (__v32qi) __A,
              (__v32qi) __B,
              (__mmask32)
              __U);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_maskz_permutex2var_epi8 (__mmask32 __U, __m256i __A,
         __m256i __I, __m256i __B)
{
  return (__m256i) __builtin_ia32_vpermt2varqi256_maskz ((__v32qi) __I
                         ,
               (__v32qi) __A,
               (__v32qi) __B,
               (__mmask32)
               __U);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_permutexvar_epi8 (__m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_permvarqi128_mask ((__v16qi) __B,
                 (__v16qi) __A,
                 (__v16qi) _mm_undefined_si128 (),
                 (__mmask16) -1);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_maskz_permutexvar_epi8 (__mmask16 __M, __m128i __A, __m128i __B)
{
  return (__m128i) __builtin_ia32_permvarqi128_mask ((__v16qi) __B,
                 (__v16qi) __A,
                 (__v16qi) _mm_setzero_si128 (),
                 (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_mask_permutexvar_epi8 (__m128i __W, __mmask16 __M, __m128i __A,
          __m128i __B)
{
  return (__m128i) __builtin_ia32_permvarqi128_mask ((__v16qi) __B,
                 (__v16qi) __A,
                 (__v16qi) __W,
                 (__mmask16) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_permutexvar_epi8 (__m256i __A, __m256i __B)
{
  return (__m256i) __builtin_ia32_permvarqi256_mask ((__v32qi) __B,
                 (__v32qi) __A,
                 (__v32qi) _mm256_undefined_si256 (),
                 (__mmask32) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_maskz_permutexvar_epi8 (__mmask32 __M, __m256i __A,
        __m256i __B)
{
  return (__m256i) __builtin_ia32_permvarqi256_mask ((__v32qi) __B,
                 (__v32qi) __A,
                 (__v32qi) _mm256_setzero_si256 (),
                 (__mmask32) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_mask_permutexvar_epi8 (__m256i __W, __mmask32 __M, __m256i __A,
             __m256i __B)
{
  return (__m256i) __builtin_ia32_permvarqi256_mask ((__v32qi) __B,
                 (__v32qi) __A,
                 (__v32qi) __W,
                 (__mmask32) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_mask_multishift_epi64_epi8 (__m128i __W, __mmask16 __M, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_vpmultishiftqb128_mask ((__v16qi) __X,
                (__v16qi) __Y,
                (__v16qi) __W,
                (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_maskz_multishift_epi64_epi8 (__mmask16 __M, __m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_vpmultishiftqb128_mask ((__v16qi) __X,
                (__v16qi) __Y,
                (__v16qi)
                _mm_setzero_si128 (),
                (__mmask16) __M);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm_multishift_epi64_epi8 (__m128i __X, __m128i __Y)
{
  return (__m128i) __builtin_ia32_vpmultishiftqb128_mask ((__v16qi) __X,
                (__v16qi) __Y,
                (__v16qi)
                _mm_undefined_si128 (),
                (__mmask16) -1);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_mask_multishift_epi64_epi8 (__m256i __W, __mmask32 __M, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_vpmultishiftqb256_mask ((__v32qi) __X,
                (__v32qi) __Y,
                (__v32qi) __W,
                (__mmask32) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_maskz_multishift_epi64_epi8 (__mmask32 __M, __m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_vpmultishiftqb256_mask ((__v32qi) __X,
                (__v32qi) __Y,
                (__v32qi)
                _mm256_setzero_si256 (),
                (__mmask32) __M);
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("avx512vbmi,avx512vl")))
_mm256_multishift_epi64_epi8 (__m256i __X, __m256i __Y)
{
  return (__m256i) __builtin_ia32_vpmultishiftqb256_mask ((__v32qi) __X,
                (__v32qi) __Y,
                (__v32qi)
                _mm256_undefined_si256 (),
                (__mmask32) -1);
}
# 192 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/avx512pfintrin.h" 1 3
# 196 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pkuintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/pkuintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("pku")))
_rdpkru_u32(void)
{
  return __builtin_ia32_rdpkru();
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("pku")))
_wrpkru(unsigned int __val)
{
  return __builtin_ia32_wrpkru(__val);
}
# 200 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("rdrnd")))
_rdrand16_step(unsigned short *__p)
{
  return __builtin_ia32_rdrand16_step(__p);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("rdrnd")))
_rdrand32_step(unsigned int *__p)
{
  return __builtin_ia32_rdrand32_step(__p);
}


static __inline__ int __attribute__((__always_inline__, __nodebug__))
_bit_scan_forward(int __A) {
  return __builtin_ctz(__A);
}


static __inline__ int __attribute__((__always_inline__, __nodebug__))
_bit_scan_reverse(int __A) {
  return 31 - __builtin_clz(__A);
}


static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("rdrnd")))
_rdrand64_step(unsigned long long *__p)
{
  return __builtin_ia32_rdrand64_step(__p);
}





static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_readfsbase_u32(void)
{
  return __builtin_ia32_rdfsbase32();
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_readfsbase_u64(void)
{
  return __builtin_ia32_rdfsbase64();
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_readgsbase_u32(void)
{
  return __builtin_ia32_rdgsbase32();
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_readgsbase_u64(void)
{
  return __builtin_ia32_rdgsbase64();
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_writefsbase_u32(unsigned int __V)
{
  return __builtin_ia32_wrfsbase32(__V);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_writefsbase_u64(unsigned long long __V)
{
  return __builtin_ia32_wrfsbase64(__V);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_writegsbase_u32(unsigned int __V)
{
  return __builtin_ia32_wrgsbase32(__V);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fsgsbase")))
_writegsbase_u64(unsigned long long __V)
{
  return __builtin_ia32_wrgsbase64(__V);
}






# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/rtmintrin.h" 1 3
# 43 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/rtmintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("rtm")))
_xbegin(void)
{
  return __builtin_ia32_xbegin();
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("rtm")))
_xend(void)
{
  __builtin_ia32_xend();
}
# 291 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xtestintrin.h" 1 3
# 35 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xtestintrin.h" 3
static __inline__ int
    __attribute__((__always_inline__, __nodebug__, __target__("rtm")))
    _xtest(void) {
  return __builtin_ia32_xtest();
}
# 292 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/shaintrin.h" 1 3
# 37 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/shaintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sha")))
_mm_sha1nexte_epu32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_sha1nexte((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sha")))
_mm_sha1msg1_epu32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_sha1msg1((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sha")))
_mm_sha1msg2_epu32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_sha1msg2((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sha")))
_mm_sha256rnds2_epu32(__m128i __X, __m128i __Y, __m128i __Z)
{
  return (__m128i)__builtin_ia32_sha256rnds2((__v4si)__X, (__v4si)__Y, (__v4si)__Z);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sha")))
_mm_sha256msg1_epu32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_sha256msg1((__v4si)__X, (__v4si)__Y);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sha")))
_mm_sha256msg2_epu32(__m128i __X, __m128i __Y)
{
  return (__m128i)__builtin_ia32_sha256msg2((__v4si)__X, (__v4si)__Y);
}
# 296 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/fxsrintrin.h" 1 3
# 43 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/fxsrintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fxsr")))
_fxsave(void *__p)
{
  return __builtin_ia32_fxsave(__p);
}
# 61 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/fxsrintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fxsr")))
_fxrstor(void *__p)
{
  return __builtin_ia32_fxrstor(__p);
}
# 78 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/fxsrintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fxsr")))
_fxsave64(void *__p)
{
  return __builtin_ia32_fxsave64(__p);
}
# 96 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/fxsrintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("fxsr")))
_fxrstor64(void *__p)
{
  return __builtin_ia32_fxrstor64(__p);
}
# 300 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xsaveintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xsaveintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsave")))
_xsave(void *__p, unsigned long long __m) {
  return __builtin_ia32_xsave(__p, __m);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsave")))
_xrstor(void *__p, unsigned long long __m) {
  return __builtin_ia32_xrstor(__p, __m);
}


static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsave")))
_xsave64(void *__p, unsigned long long __m) {
  return __builtin_ia32_xsave64(__p, __m);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsave")))
_xrstor64(void *__p, unsigned long long __m) {
  return __builtin_ia32_xrstor64(__p, __m);
}
# 304 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xsaveoptintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xsaveoptintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsaveopt")))
_xsaveopt(void *__p, unsigned long long __m) {
  return __builtin_ia32_xsaveopt(__p, __m);
}


static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsaveopt")))
_xsaveopt64(void *__p, unsigned long long __m) {
  return __builtin_ia32_xsaveopt64(__p, __m);
}
# 308 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xsavecintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xsavecintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsavec")))
_xsavec(void *__p, unsigned long long __m) {
  __builtin_ia32_xsavec(__p, __m);
}


static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsavec")))
_xsavec64(void *__p, unsigned long long __m) {
  __builtin_ia32_xsavec64(__p, __m);
}
# 312 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xsavesintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xsavesintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsaves")))
_xsaves(void *__p, unsigned long long __m) {
  __builtin_ia32_xsaves(__p, __m);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsaves")))
_xrstors(void *__p, unsigned long long __m) {
  __builtin_ia32_xrstors(__p, __m);
}


static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsaves")))
_xrstors64(void *__p, unsigned long long __m) {
  __builtin_ia32_xrstors64(__p, __m);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("xsaves")))
_xsaves64(void *__p, unsigned long long __m) {
  __builtin_ia32_xsaves64(__p, __m);
}
# 316 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3




# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/adxintrin.h" 1 3
# 35 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/adxintrin.h" 3
static __inline unsigned char __attribute__((__always_inline__, __nodebug__, __target__("adx")))
_addcarryx_u32(unsigned char __cf, unsigned int __x, unsigned int __y,
               unsigned int *__p)
{
  return __builtin_ia32_addcarryx_u32(__cf, __x, __y, __p);
}


static __inline unsigned char __attribute__((__always_inline__, __nodebug__, __target__("adx")))
_addcarryx_u64(unsigned char __cf, unsigned long long __x,
               unsigned long long __y, unsigned long long *__p)
{
  return __builtin_ia32_addcarryx_u64(__cf, __x, __y, __p);
}



static __inline unsigned char __attribute__((__always_inline__, __nodebug__))
_addcarry_u32(unsigned char __cf, unsigned int __x, unsigned int __y,
              unsigned int *__p)
{
  return __builtin_ia32_addcarry_u32(__cf, __x, __y, __p);
}


static __inline unsigned char __attribute__((__always_inline__, __nodebug__))
_addcarry_u64(unsigned char __cf, unsigned long long __x,
              unsigned long long __y, unsigned long long *__p)
{
  return __builtin_ia32_addcarry_u64(__cf, __x, __y, __p);
}


static __inline unsigned char __attribute__((__always_inline__, __nodebug__))
_subborrow_u32(unsigned char __cf, unsigned int __x, unsigned int __y,
              unsigned int *__p)
{
  return __builtin_ia32_subborrow_u32(__cf, __x, __y, __p);
}


static __inline unsigned char __attribute__((__always_inline__, __nodebug__))
_subborrow_u64(unsigned char __cf, unsigned long long __x,
               unsigned long long __y, unsigned long long *__p)
{
  return __builtin_ia32_subborrow_u64(__cf, __x, __y, __p);
}
# 321 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/immintrin.h" 2 3
# 30 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3


# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mm3dnow.h" 1 3
# 28 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mm3dnow.h" 3
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/prfchwintrin.h" 1 3
# 29 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mm3dnow.h" 2 3

typedef float __v2sf __attribute__((__vector_size__(8)));




static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_femms(void) {
  __builtin_ia32_femms();
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pavgusb(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pavgusb((__v8qi)__m1, (__v8qi)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pf2id(__m64 __m) {
  return (__m64)__builtin_ia32_pf2id((__v2sf)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfacc(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfacc((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfadd(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfadd((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfcmpeq(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfcmpeq((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfcmpge(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfcmpge((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfcmpgt(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfcmpgt((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfmax(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfmax((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfmin(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfmin((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfmul(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfmul((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfrcp(__m64 __m) {
  return (__m64)__builtin_ia32_pfrcp((__v2sf)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfrcpit1(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfrcpit1((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfrcpit2(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfrcpit2((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfrsqrt(__m64 __m) {
  return (__m64)__builtin_ia32_pfrsqrt((__v2sf)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfrsqrtit1(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfrsqit1((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfsub(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfsub((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pfsubr(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfsubr((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pi2fd(__m64 __m) {
  return (__m64)__builtin_ia32_pi2fd((__v2si)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnow")))
_m_pmulhrw(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pmulhrw((__v4hi)__m1, (__v4hi)__m2);
}





static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnowa")))
_m_pf2iw(__m64 __m) {
  return (__m64)__builtin_ia32_pf2iw((__v2sf)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnowa")))
_m_pfnacc(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfnacc((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnowa")))
_m_pfpnacc(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pfpnacc((__v2sf)__m1, (__v2sf)__m2);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnowa")))
_m_pi2fw(__m64 __m) {
  return (__m64)__builtin_ia32_pi2fw((__v2si)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnowa")))
_m_pswapdsf(__m64 __m) {
  return (__m64)__builtin_ia32_pswapdsf((__v2sf)__m);
}

static __inline__ __m64 __attribute__((__always_inline__, __nodebug__, __target__("3dnowa")))
_m_pswapdsi(__m64 __m) {
  return (__m64)__builtin_ia32_pswapdsi((__v2si)__m);
}
# 33 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmiintrin.h" 1 3
# 37 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/bmi2intrin.h" 1 3
# 41 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/lzcntintrin.h" 1 3
# 45 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/popcntintrin.h" 1 3
# 40 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/popcntintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("popcnt")))
_mm_popcnt_u32(unsigned int __A)
{
  return __builtin_popcount(__A);
}
# 56 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/popcntintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("popcnt")))
_popcnt32(int __A)
{
  return __builtin_popcount(__A);
}
# 73 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/popcntintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("popcnt")))
_mm_popcnt_u64(unsigned long long __A)
{
  return __builtin_popcountll(__A);
}
# 89 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/popcntintrin.h" 3
static __inline__ long long __attribute__((__always_inline__, __nodebug__, __target__("popcnt")))
_popcnt64(long long __A)
{
  return __builtin_popcountll(__A);
}
# 49 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/rdseedintrin.h" 1 3
# 34 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/rdseedintrin.h" 3
static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("rdseed")))
_rdseed16_step(unsigned short *__p)
{
  return __builtin_ia32_rdseed16_step(__p);
}

static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("rdseed")))
_rdseed32_step(unsigned int *__p)
{
  return __builtin_ia32_rdseed32_step(__p);
}


static __inline__ int __attribute__((__always_inline__, __nodebug__, __target__("rdseed")))
_rdseed64_step(unsigned long long *__p)
{
  return __builtin_ia32_rdseed64_step(__p);
}
# 53 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/prfchwintrin.h" 1 3
# 57 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/ammintrin.h" 1 3
# 79 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/ammintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4a")))
_mm_extract_si64(__m128i __x, __m128i __y)
{
  return (__m128i)__builtin_ia32_extrq((__v2di)__x, (__v16qi)__y);
}
# 149 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/ammintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("sse4a")))
_mm_insert_si64(__m128i __x, __m128i __y)
{
  return (__m128i)__builtin_ia32_insertq((__v2di)__x, (__v2di)__y);
}
# 167 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/ammintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse4a")))
_mm_stream_sd(double *__p, __m128d __a)
{
  __builtin_ia32_movntsd(__p, (__v2df)__a);
}
# 185 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/ammintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("sse4a")))
_mm_stream_ss(float *__p, __m128 __a)
{
  __builtin_ia32_movntss(__p, (__v4sf)__a);
}
# 61 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/fma4intrin.h" 1 3
# 36 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/fma4intrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_macc_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_macc_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_macc_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_macc_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_msub_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_msub_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_msub_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmsubss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_msub_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmsubsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmacc_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmacc_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmacc_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmaddss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmacc_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmaddsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmsub_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmsub_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmsub_ss(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfnmsubss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_nmsub_sd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfnmsubsd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_maddsub_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmaddsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_maddsub_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmaddsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_msubadd_ps(__m128 __A, __m128 __B, __m128 __C)
{
  return (__m128)__builtin_ia32_vfmsubaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm_msubadd_pd(__m128d __A, __m128d __B, __m128d __C)
{
  return (__m128d)__builtin_ia32_vfmsubaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_macc_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_macc_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_msub_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_msub_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_nmacc_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfnmaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_nmacc_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfnmaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_nmsub_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfnmsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_nmsub_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfnmsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_maddsub_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmaddsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_maddsub_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmaddsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_msubadd_ps(__m256 __A, __m256 __B, __m256 __C)
{
  return (__m256)__builtin_ia32_vfmsubaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("fma4")))
_mm256_msubadd_pd(__m256d __A, __m256d __B, __m256d __C)
{
  return (__m256d)__builtin_ia32_vfmsubaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C);
}
# 65 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xopintrin.h" 1 3
# 31 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xopintrin.h" 3
# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/fma4intrin.h" 1 3
# 32 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xopintrin.h" 2 3




static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maccs_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacssww((__v8hi)__A, (__v8hi)__B, (__v8hi)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_macc_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacsww((__v8hi)__A, (__v8hi)__B, (__v8hi)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maccsd_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacsswd((__v8hi)__A, (__v8hi)__B, (__v4si)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maccd_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacswd((__v8hi)__A, (__v8hi)__B, (__v4si)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maccs_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacssdd((__v4si)__A, (__v4si)__B, (__v4si)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_macc_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacsdd((__v4si)__A, (__v4si)__B, (__v4si)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maccslo_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacssdql((__v4si)__A, (__v4si)__B, (__v2di)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_macclo_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacsdql((__v4si)__A, (__v4si)__B, (__v2di)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maccshi_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacssdqh((__v4si)__A, (__v4si)__B, (__v2di)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_macchi_epi32(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmacsdqh((__v4si)__A, (__v4si)__B, (__v2di)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maddsd_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmadcsswd((__v8hi)__A, (__v8hi)__B, (__v4si)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_maddd_epi16(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpmadcswd((__v8hi)__A, (__v8hi)__B, (__v4si)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddw_epi8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddbw((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddd_epi8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddbd((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddq_epi8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddbq((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddd_epi16(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddwd((__v8hi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddq_epi16(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddwq((__v8hi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddq_epi32(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphadddq((__v4si)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddw_epu8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddubw((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddd_epu8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddubd((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddq_epu8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddubq((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddd_epu16(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphadduwd((__v8hi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddq_epu16(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphadduwq((__v8hi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_haddq_epu32(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphaddudq((__v4si)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_hsubw_epi8(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphsubbw((__v16qi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_hsubd_epi16(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphsubwd((__v8hi)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_hsubq_epi32(__m128i __A)
{
  return (__m128i)__builtin_ia32_vphsubdq((__v4si)__A);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_cmov_si128(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)(((__v2du)__A & (__v2du)__C) | ((__v2du)__B & ~(__v2du)__C));
}

static __inline__ __m256i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm256_cmov_si256(__m256i __A, __m256i __B, __m256i __C)
{
  return (__m256i)(((__v4du)__A & (__v4du)__C) | ((__v4du)__B & ~(__v4du)__C));
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_perm_epi8(__m128i __A, __m128i __B, __m128i __C)
{
  return (__m128i)__builtin_ia32_vpperm((__v16qi)__A, (__v16qi)__B, (__v16qi)__C);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_rot_epi8(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vprotb((__v16qi)__A, (__v16qi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_rot_epi16(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vprotw((__v8hi)__A, (__v8hi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_rot_epi32(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vprotd((__v4si)__A, (__v4si)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_rot_epi64(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vprotq((__v2di)__A, (__v2di)__B);
}
# 252 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xopintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_shl_epi8(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshlb((__v16qi)__A, (__v16qi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_shl_epi16(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshlw((__v8hi)__A, (__v8hi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_shl_epi32(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshld((__v4si)__A, (__v4si)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_shl_epi64(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshlq((__v2di)__A, (__v2di)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_sha_epi8(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshab((__v16qi)__A, (__v16qi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_sha_epi16(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshaw((__v8hi)__A, (__v8hi)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_sha_epi32(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshad((__v4si)__A, (__v4si)__B);
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_sha_epi64(__m128i __A, __m128i __B)
{
  return (__m128i)__builtin_ia32_vpshaq((__v2di)__A, (__v2di)__B);
}
# 341 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xopintrin.h" 3
static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epu8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomub((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epu16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epu32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomud((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epu64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomuq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epi8(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomb((__v16qi)(__m128i)(__A), (__v16qi)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epi16(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomw((__v8hi)(__m128i)(__A), (__v8hi)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epi32(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomd((__v4si)(__m128i)(__A), (__v4si)(__m128i)(__B), (7)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comlt_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (0)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comle_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (1)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comgt_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (2)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comge_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (3)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comeq_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (4)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comneq_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (5)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comfalse_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (6)); });
}

static __inline__ __m128i __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_comtrue_epi64(__m128i __A, __m128i __B)
{
  return __extension__ ({ (__m128i)__builtin_ia32_vpcomq((__v2di)(__m128i)(__A), (__v2di)(__m128i)(__B), (7)); });
}
# 744 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/xopintrin.h" 3
static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_frcz_ss(__m128 __A)
{
  return (__m128)__builtin_ia32_vfrczss((__v4sf)__A);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_frcz_sd(__m128d __A)
{
  return (__m128d)__builtin_ia32_vfrczsd((__v2df)__A);
}

static __inline__ __m128 __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_frcz_ps(__m128 __A)
{
  return (__m128)__builtin_ia32_vfrczps((__v4sf)__A);
}

static __inline__ __m128d __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm_frcz_pd(__m128d __A)
{
  return (__m128d)__builtin_ia32_vfrczpd((__v2df)__A);
}

static __inline__ __m256 __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm256_frcz_ps(__m256 __A)
{
  return (__m256)__builtin_ia32_vfrczps256((__v8sf)__A);
}

static __inline__ __m256d __attribute__((__always_inline__, __nodebug__, __target__("xop")))
_mm256_frcz_pd(__m256d __A)
{
  return (__m256d)__builtin_ia32_vfrczpd256((__v4df)__A);
}
# 69 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tbmintrin.h" 1 3
# 38 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/tbmintrin.h" 3
static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcfill_u32(unsigned int __a)
{
  return __a & (__a + 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blci_u32(unsigned int __a)
{
  return __a | ~(__a + 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcic_u32(unsigned int __a)
{
  return ~__a & (__a + 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcmsk_u32(unsigned int __a)
{
  return __a ^ (__a + 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcs_u32(unsigned int __a)
{
  return __a | (__a + 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blsfill_u32(unsigned int __a)
{
  return __a | (__a - 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blsic_u32(unsigned int __a)
{
  return ~__a | (__a - 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__t1mskc_u32(unsigned int __a)
{
  return ~__a | (__a + 1);
}

static __inline__ unsigned int __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__tzmsk_u32(unsigned int __a)
{
  return ~__a & (__a - 1);
}






static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcfill_u64(unsigned long long __a)
{
  return __a & (__a + 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blci_u64(unsigned long long __a)
{
  return __a | ~(__a + 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcic_u64(unsigned long long __a)
{
  return ~__a & (__a + 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcmsk_u64(unsigned long long __a)
{
  return __a ^ (__a + 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blcs_u64(unsigned long long __a)
{
  return __a | (__a + 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blsfill_u64(unsigned long long __a)
{
  return __a | (__a - 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__blsic_u64(unsigned long long __a)
{
  return ~__a | (__a - 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__t1mskc_u64(unsigned long long __a)
{
  return ~__a | (__a + 1);
}

static __inline__ unsigned long long __attribute__((__always_inline__, __nodebug__, __target__("tbm")))
__tzmsk_u64(unsigned long long __a)
{
  return ~__a & (__a - 1);
}
# 73 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/lwpintrin.h" 1 3
# 45 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/lwpintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("lwp")))
__llwpcb (void *__addr)
{
  __builtin_ia32_llwpcb(__addr);
}
# 60 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/lwpintrin.h" 3
static __inline__ void* __attribute__((__always_inline__, __nodebug__, __target__("lwp")))
__slwpcb ()
{
  return __builtin_ia32_slwpcb();
}
# 77 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/f16cintrin.h" 1 3
# 81 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mwaitxintrin.h" 1 3
# 33 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/mwaitxintrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("mwaitx")))
_mm_monitorx(void const * __p, unsigned __extensions, unsigned __hints)
{
  __builtin_ia32_monitorx((void *)__p, __extensions, __hints);
}

static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("mwaitx")))
_mm_mwaitx(unsigned __extensions, unsigned __hints, unsigned __clock)
{
  __builtin_ia32_mwaitx(__extensions, __hints, __clock);
}
# 85 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3



# 1 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/clzerointrin.h" 1 3
# 42 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/clzerointrin.h" 3
static __inline__ void __attribute__((__always_inline__, __nodebug__, __target__("clzero")))
_mm_clzero (void * __line)
{
  __builtin_ia32_clzero ((void *)__line);
}
# 89 "/opt/rocm/hcc-1.0/compiler/lib/clang/5.0.0/include/x86intrin.h" 2 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/opt_random.h" 2 3
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/opt_random.h" 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/x86_64-linux-gnu/c++/5.4.0/bits/opt_random.h" 3
}
# 51 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/random" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.tcc" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.tcc" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/numeric" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/numeric" 3



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_numeric.h" 1 3
# 65 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_numeric.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 80 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_numeric.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)
    {





                                                     ;

      for (; __first != __last; ++__first)
 {
   *__first = __value;
   ++__value;
 }
    }


}



namespace std __attribute__ ((__visibility__ ("default")))
{
# 118 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __init + *__first;
      return __init;
    }
# 144 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _Tp, typename _BinaryOperation>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,
        _BinaryOperation __binary_op)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __binary_op(__init, *__first);
      return __init;
    }
# 172 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_numeric.h" 3
  template<typename _InputIterator1, typename _InputIterator2, typename _Tp>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __init + (*__first1 * *__first2);
      return __init;
    }
# 203 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_numeric.h" 3
  template<typename _InputIterator1, typename _InputIterator2, typename _Tp,
    typename _BinaryOperation1, typename _BinaryOperation2>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init,
    _BinaryOperation1 __binary_op1,
    _BinaryOperation2 __binary_op2)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __binary_op1(__init, __binary_op2(*__first1, *__first2));
      return __init;
    }
# 235 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __value + *__first;
   *++__result = __value;
 }
      return ++__result;
    }
# 275 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __binary_op(__value, *__first);
   *++__result = __value;
 }
      return ++__result;
    }
# 315 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    adjacent_difference(_InputIterator __first,
   _InputIterator __last, _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __tmp - __value;
   __value = std::move(__tmp);
 }
      return ++__result;
    }
# 357 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    adjacent_difference(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __binary_op(__tmp, __value);
   __value = std::move(__tmp);
 }
      return ++__result;
    }


}
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/numeric" 2 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.tcc" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  namespace __detail
  {
# 50 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.tcc" 3
    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>
      _Tp
      _Mod<_Tp, __m, __a, __c, false, true>::
      __calc(_Tp __x)
      {
 if (__a == 1)
   __x %= __m;
 else
   {
     static const _Tp __q = __m / __a;
     static const _Tp __r = __m % __a;

     _Tp __t1 = __a * (__x % __q);
     _Tp __t2 = __r * (__x / __q);
     if (__t1 >= __t2)
       __x = __t1 - __t2;
     else
       __x = __m - __t2 + __t1;
   }

 if (__c != 0)
   {
     const _Tp __d = __m - __x;
     if (__d > __c)
       __x += __c;
     else
       __x = __c - __d;
   }
 return __x;
      }

    template<typename _InputIterator, typename _OutputIterator,
      typename _Tp>
      _OutputIterator
      __normalize(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, const _Tp& __factor)
      {
 for (; __first != __last; ++__first, ++__result)
   *__result = *__first / __factor;
 return __result;
      }


  }



  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::multiplier;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::increment;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::modulus;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::default_seed;





  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    void
    linear_congruential_engine<_UIntType, __a, __c, __m>::
    seed(result_type __s)
    {
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
   && (__detail::__mod<_UIntType, __m>(__s) == 0))
 _M_x = 1;
      else
 _M_x = __detail::__mod<_UIntType, __m>(__s);
    }




  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      linear_congruential_engine<_UIntType, __a, __c, __m>::
      seed(_Sseq& __q)
      {
 const _UIntType __k0 = __m == 0 ? std::numeric_limits<_UIntType>::digits
                                 : std::__lg(__m);
 const _UIntType __k = (__k0 + 31) / 32;
 uint_least32_t __arr[__k + 3];
 __q.generate(__arr + 0, __arr + __k + 3);
 _UIntType __factor = 1u;
 _UIntType __sum = 0u;
 for (size_t __j = 0; __j < __k; ++__j)
   {
     __sum += __arr[__j + 3] * __factor;
     __factor *= __detail::_Shift<_UIntType, 32>::__value;
   }
 seed(__sum);
      }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const linear_congruential_engine<_UIntType,
      __a, __c, __m>& __lcr)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__os.widen(' '));

      __os << __lcr._M_x;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        linear_congruential_engine<_UIntType, __a, __c, __m>& __lcr)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec);

      __is >> __lcr._M_x;

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::word_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::state_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::shift_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::mask_bits;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::xor_mask;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_u;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_d;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_s;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_b;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_t;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_c;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_l;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
                                              initialization_multiplier;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::default_seed;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
 __detail::_Shift<_UIntType, __w>::__value>(__sd);

      for (size_t __i = 1; __i < state_size; ++__i)
 {
   _UIntType __x = _M_x[__i - 1];
   __x ^= __x >> (__w - 2);
   __x *= __f;
   __x += __detail::__mod<_UIntType, __n>(__i);
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__x);
 }
      _M_p = state_size;
    }

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
         __s, __b, __t, __c, __l, __f>::
      seed(_Sseq& __q)
      {
 const _UIntType __upper_mask = (~_UIntType()) << __r;
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__n * __k];
 __q.generate(__arr + 0, __arr + __n * __k);

 bool __zero = true;
 for (size_t __i = 0; __i < state_size; ++__i)
   {
     _UIntType __factor = 1u;
     _UIntType __sum = 0u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);

     if (__zero)
       {
  if (__i == 0)
    {
      if ((_M_x[0] & __upper_mask) != 0u)
        __zero = false;
    }
  else if (_M_x[__i] != 0u)
    __zero = false;
       }
   }
        if (__zero)
          _M_x[0] = __detail::_Shift<_UIntType, __w - 1>::__value;
 _M_p = state_size;
      }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    _M_gen_rand(void)
    {
      const _UIntType __upper_mask = (~_UIntType()) << __r;
      const _UIntType __lower_mask = ~__upper_mask;

      for (size_t __k = 0; __k < (__n - __m); ++__k)
        {
   _UIntType __y = ((_M_x[__k] & __upper_mask)
      | (_M_x[__k + 1] & __lower_mask));
   _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
         ^ ((__y & 0x01) ? __a : 0));
        }

      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
 {
   _UIntType __y = ((_M_x[__k] & __upper_mask)
      | (_M_x[__k + 1] & __lower_mask));
   _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
         ^ ((__y & 0x01) ? __a : 0));
 }

      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
         | (_M_x[0] & __lower_mask));
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
         ^ ((__y & 0x01) ? __a : 0));
      _M_p = 0;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    discard(unsigned long long __z)
    {
      while (__z > state_size - _M_p)
 {
   __z -= state_size - _M_p;
   _M_gen_rand();
 }
      _M_p += __z;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    typename
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::result_type
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    operator()()
    {

      if (_M_p >= state_size)
 _M_gen_rand();


      result_type __z = _M_x[_M_p++];
      __z ^= (__z >> __u) & __d;
      __z ^= (__z << __s) & __b;
      __z ^= (__z << __t) & __c;
      __z ^= (__z >> __l);

      return __z;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __n; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_p;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __n; ++__i)
 __is >> __x._M_x[__i];
      __is >> __x._M_p;

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::word_size;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::short_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::long_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr _UIntType
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::default_seed;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    void
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    seed(result_type __value)
    {
      std::linear_congruential_engine<result_type, 40014u, 0u, 2147483563u>
 __lcg(__value == 0u ? default_seed : __value);

      const size_t __n = (__w + 31) / 32;

      for (size_t __i = 0; __i < long_lag; ++__i)
 {
   _UIntType __sum = 0u;
   _UIntType __factor = 1u;
   for (size_t __j = 0; __j < __n; ++__j)
     {
       __sum += __detail::__mod<uint_least32_t,
         __detail::_Shift<uint_least32_t, 32>::__value>
    (__lcg()) * __factor;
       __factor *= __detail::_Shift<_UIntType, 32>::__value;
     }
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__sum);
 }
      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
      _M_p = 0;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      seed(_Sseq& __q)
      {
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__r * __k];
 __q.generate(__arr + 0, __arr + __r * __k);

 for (size_t __i = 0; __i < long_lag; ++__i)
   {
     _UIntType __sum = 0u;
     _UIntType __factor = 1u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);
   }
 _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
 _M_p = 0;
      }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    typename subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      result_type
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    operator()()
    {

      long __ps = _M_p - short_lag;
      if (__ps < 0)
 __ps += long_lag;




      _UIntType __xi;
      if (_M_x[__ps] >= _M_x[_M_p] + _M_carry)
 {
   __xi = _M_x[__ps] - _M_x[_M_p] - _M_carry;
   _M_carry = 0;
 }
      else
 {
   __xi = (__detail::_Shift<_UIntType, __w>::__value
    - _M_x[_M_p] - _M_carry + _M_x[__ps]);
   _M_carry = 1;
 }
      _M_x[_M_p] = __xi;


      if (++_M_p >= long_lag)
 _M_p = 0;

      return __xi;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const subtract_with_carry_engine<_UIntType,
      __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __r; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_carry << __space << __x._M_p;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        subtract_with_carry_engine<_UIntType, __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __r; ++__i)
 __is >> __x._M_x[__i];
      __is >> __x._M_carry;
      __is >> __x._M_p;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::block_size;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::used_block;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    typename discard_block_engine<_RandomNumberEngine,
      __p, __r>::result_type
    discard_block_engine<_RandomNumberEngine, __p, __r>::
    operator()()
    {
      if (_M_n >= used_block)
 {
   _M_b.discard(block_size - _M_n);
   _M_n = 0;
 }
      ++_M_n;
      return _M_b();
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discard_block_engine<_RandomNumberEngine,
        __p, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base() << __space << __x._M_n;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discard_block_engine<_RandomNumberEngine, __p, __r>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b >> __x._M_n;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    typename independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
      result_type
    independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
    operator()()
    {
      typedef typename _RandomNumberEngine::result_type _Eresult_type;
      const _Eresult_type __r
 = (_M_b.max() - _M_b.min() < std::numeric_limits<_Eresult_type>::max()
    ? _M_b.max() - _M_b.min() + 1 : 0);
      const unsigned __edig = std::numeric_limits<_Eresult_type>::digits;
      const unsigned __m = __r ? std::__lg(__r) : __edig;

      typedef typename std::common_type<_Eresult_type, result_type>::type
 __ctype;
      const unsigned __cdig = std::numeric_limits<__ctype>::digits;

      unsigned __n, __n0;
      __ctype __s0, __s1, __y0, __y1;

      for (size_t __i = 0; __i < 2; ++__i)
 {
   __n = (__w + __m - 1) / __m + __i;
   __n0 = __n - __w % __n;
   const unsigned __w0 = __w / __n;

   __s0 = 0;
   __s1 = 0;
   if (__w0 < __cdig)
     {
       __s0 = __ctype(1) << __w0;
       __s1 = __s0 << 1;
     }

   __y0 = 0;
   __y1 = 0;
   if (__r)
     {
       __y0 = __s0 * (__r / __s0);
       if (__s1)
  __y1 = __s1 * (__r / __s1);

       if (__r - __y0 <= __y0 / __n)
  break;
     }
   else
     break;
 }

      result_type __sum = 0;
      for (size_t __k = 0; __k < __n0; ++__k)
 {
   __ctype __u;
   do
     __u = _M_b() - _M_b.min();
   while (__y0 && __u >= __y0);
   __sum = __s0 * __sum + (__s0 ? __u % __s0 : __u);
 }
      for (size_t __k = __n0; __k < __n; ++__k)
 {
   __ctype __u;
   do
     __u = _M_b() - _M_b.min();
   while (__y1 && __u >= __y1);
   __sum = __s1 * __sum + (__s1 ? __u % __s1 : __u);
 }
      return __sum;
    }


  template<typename _RandomNumberEngine, size_t __k>
    constexpr size_t
    shuffle_order_engine<_RandomNumberEngine, __k>::table_size;

  template<typename _RandomNumberEngine, size_t __k>
    typename shuffle_order_engine<_RandomNumberEngine, __k>::result_type
    shuffle_order_engine<_RandomNumberEngine, __k>::
    operator()()
    {
      size_t __j = __k * ((_M_y - _M_b.min())
     / (_M_b.max() - _M_b.min() + 1.0L));
      _M_y = _M_v[__j];
      _M_v[__j] = _M_b();

      return _M_y;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base();
      for (size_t __i = 0; __i < __k; ++__i)
 __os << __space << __x._M_v[__i];
      __os << __space << __x._M_y;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b;
      for (size_t __i = 0; __i < __k; ++__i)
 __is >> __x._M_v[__i];
      __is >> __x._M_y;

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_int_distribution<_IntType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      uniform_real_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 auto __range = __p.b() - __p.a();
 while (__f != __t)
   *__f++ = __aurng() * __range + __p.a();
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_real_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _ForwardIterator,
    typename _UniformRandomNumberGenerator>
    void
    std::bernoulli_distribution::
    __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
      _UniformRandomNumberGenerator& __urng,
      const param_type& __p)
    {

      __detail::_Adaptor<_UniformRandomNumberGenerator, double>
 __aurng(__urng);
      auto __limit = __p.p() * (__aurng.max() - __aurng.min());

      while (__f != __t)
 *__f++ = (__aurng() - __aurng.min()) < __limit;
    }

  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const bernoulli_distribution& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename geometric_distribution<_IntType>::result_type
      geometric_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {


 const double __naf =
   (1 - std::numeric_limits<double>::epsilon()) / 2;

 const double __thr =
   std::numeric_limits<_IntType>::max() + __naf;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 double __cand;
 do
   __cand = std::floor(std::log(1.0 - __aurng()) / __param._M_log_1_p);
 while (__cand >= __thr);

 return result_type(__cand + __naf);
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      geometric_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {



 const double __naf =
   (1 - std::numeric_limits<double>::epsilon()) / 2;

 const double __thr =
   std::numeric_limits<_IntType>::max() + __naf;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 while (__f != __t)
   {
     double __cand;
     do
       __cand = std::floor(std::log(1.0 - __aurng())
      / __param._M_log_1_p);
     while (__cand >= __thr);

     *__f++ = __cand + __naf;
   }
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __p;
      __is >> __p;
      __x.param(typename geometric_distribution<_IntType>::param_type(__p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng)
      {
 const double __y = _M_gd(__urng);


 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 typedef typename std::gamma_distribution<double>::param_type
   param_type;

 const double __y =
   _M_gd(__urng, param_type(__p.k(), (1.0 - __p.p()) / __p.p()));

 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      negative_binomial_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   {
     const double __y = _M_gd(__urng);


     std::poisson_distribution<result_type> __poisson(__y);
     *__f++ = __poisson(__urng);
   }
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      negative_binomial_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 typename std::gamma_distribution<result_type>::param_type
   __p2(__p.k(), (1.0 - __p.p()) / __p.p());

 while (__f != __t)
   {
     const double __y = _M_gd(__urng, __p2);

     std::poisson_distribution<result_type> __poisson(__y);
     *__f++ = __poisson(__urng);
   }
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.k() << __space << __x.p()
    << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _IntType __k;
      double __p;
      __is >> __k >> __p >> __x._M_gd;
      __x.param(typename negative_binomial_distribution<_IntType>::
  param_type(__k, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    poisson_distribution<_IntType>::param_type::
    _M_initialize()
    {

      if (_M_mean >= 12)
 {
   const double __m = std::floor(_M_mean);
   _M_lm_thr = std::log(_M_mean);
   _M_lfm = std::lgamma(__m + 1);
   _M_sm = std::sqrt(__m);

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __dx = std::sqrt(2 * __m * std::log(32 * __m
             / __pi_4));
   _M_d = std::round(std::max(6.0, std::min(__m, __dx)));
   const double __cx = 2 * __m + _M_d;
   _M_scx = std::sqrt(__cx / 2);
   _M_1cx = 1 / __cx;

   _M_c2b = std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx);
   _M_cb = 2 * __cx * std::exp(-_M_d * _M_1cx * (1 + _M_d / 2))
  / _M_d;
 }
      else

 _M_lm_thr = std::exp(-_M_mean);
      }
# 1280 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.tcc" 3
  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename poisson_distribution<_IntType>::result_type
      poisson_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 if (__param.mean() >= 12)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __m = std::floor(__param.mean());

     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __c1 = __param._M_sm * __spi_2;
     const double __c2 = __param._M_c2b + __c1;
     const double __c3 = __c2 + 1;
     const double __c4 = __c3 + 1;

     const double __e178 = 1.0129030479320018583185514777512983L;
     const double __c5 = __c4 + __e178;
     const double __c = __param._M_cb + __c5;
     const double __2cx = 2 * (2 * __m + __param._M_d);

     bool __reject = true;
     do
       {
  const double __u = __c * __aurng();
  const double __e = -std::log(1.0 - __aurng());

  double __w = 0.0;

  if (__u <= __c1)
    {
      const double __n = _M_nd(__urng);
      const double __y = -std::abs(__n) * __param._M_sm - 1;
      __x = std::floor(__y);
      __w = -__n * __n / 2;
      if (__x < -__m)
        continue;
    }
  else if (__u <= __c2)
    {
      const double __n = _M_nd(__urng);
      const double __y = 1 + std::abs(__n) * __param._M_scx;
      __x = std::ceil(__y);
      __w = __y * (2 - __y) * __param._M_1cx;
      if (__x > __param._M_d)
        continue;
    }
  else if (__u <= __c3)


    __x = -1;
  else if (__u <= __c4)
    __x = 0;
  else if (__u <= __c5)
    __x = 1;
  else
    {
      const double __v = -std::log(1.0 - __aurng());
      const double __y = __param._M_d
         + __v * __2cx / __param._M_d;
      __x = std::ceil(__y);
      __w = -__param._M_d * __param._M_1cx * (1 + __y / 2);
    }

  __reject = (__w - __e - __x * __param._M_lm_thr
       > __param._M_lfm - std::lgamma(__x + __m + 1));

  __reject |= __x + __m >= __thr;

       } while (__reject);

     return result_type(__x + __m + __naf);
   }
 else

   {
     _IntType __x = 0;
     double __prod = 1.0;

     do
       {
  __prod *= __aurng();
  __x += 1;
       }
     while (__prod > __param._M_lm_thr);

     return __x - 1;
   }
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      poisson_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 while (__f != __t)
   *__f++ = this->operator()(__urng, __param);
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.mean() << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __mean;
      __is >> __mean >> __x._M_nd;
      __x.param(typename poisson_distribution<_IntType>::param_type(__mean));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    binomial_distribution<_IntType>::param_type::
    _M_initialize()
    {
      const double __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;

      _M_easy = true;


      if (_M_t * __p12 >= 8)
 {
   _M_easy = false;
   const double __np = std::floor(_M_t * __p12);
   const double __pa = __np / _M_t;
   const double __1p = 1 - __pa;

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __d1x =
     std::sqrt(__np * __1p * std::log(32 * __np
          / (81 * __pi_4 * __1p)));
   _M_d1 = std::round(std::max(1.0, __d1x));
   const double __d2x =
     std::sqrt(__np * __1p * std::log(32 * _M_t * __1p
          / (__pi_4 * __pa)));
   _M_d2 = std::round(std::max(1.0, __d2x));


   const double __spi_2 = 1.2533141373155002512078826424055226L;
   _M_s1 = std::sqrt(__np * __1p) * (1 + _M_d1 / (4 * __np));
   _M_s2 = std::sqrt(__np * __1p) * (1 + _M_d2 / (4 * _M_t * __1p));
   _M_c = 2 * _M_d1 / __np;
   _M_a1 = std::exp(_M_c) * _M_s1 * __spi_2;
   const double __a12 = _M_a1 + _M_s2 * __spi_2;
   const double __s1s = _M_s1 * _M_s1;
   _M_a123 = __a12 + (std::exp(_M_d1 / (_M_t * __1p))
        * 2 * __s1s / _M_d1
        * std::exp(-_M_d1 * _M_d1 / (2 * __s1s)));
   const double __s2s = _M_s2 * _M_s2;
   _M_s = (_M_a123 + 2 * __s2s / _M_d2
    * std::exp(-_M_d2 * _M_d2 / (2 * __s2s)));
   _M_lf = (std::lgamma(__np + 1)
     + std::lgamma(_M_t - __np + 1));
   _M_lp1p = std::log(__pa / __1p);

   _M_q = -std::log(1 - (__p12 - __pa) / __1p);
 }
      else

 _M_q = -std::log(1 - __p12);
    }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      _M_waiting(_UniformRandomNumberGenerator& __urng,
   _IntType __t, double __q)
      {
 _IntType __x = 0;
 double __sum = 0.0;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 do
   {
     if (__t == __x)
       return __x;
     const double __e = -std::log(1.0 - __aurng());
     __sum += __e / (__t - __x);
     __x += 1;
   }
 while (__sum <= __q);

 return __x - 1;
      }
# 1530 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.tcc" 3
  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 const _IntType __t = __param.t();
 const double __p = __param.p();
 const double __p12 = __p <= 0.5 ? __p : 1.0 - __p;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);


 if (!__param._M_easy)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __np = std::floor(__t * __p12);


     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __a1 = __param._M_a1;
     const double __a12 = __a1 + __param._M_s2 * __spi_2;
     const double __a123 = __param._M_a123;
     const double __s1s = __param._M_s1 * __param._M_s1;
     const double __s2s = __param._M_s2 * __param._M_s2;

     bool __reject;
     do
       {
  const double __u = __param._M_s * __aurng();

  double __v;

  if (__u <= __a1)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s1 * std::abs(__n);
      __reject = __y >= __param._M_d1;
      if (!__reject)
        {
   const double __e = -std::log(1.0 - __aurng());
   __x = std::floor(__y);
   __v = -__e - __n * __n / 2 + __param._M_c;
        }
    }
  else if (__u <= __a12)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s2 * std::abs(__n);
      __reject = __y >= __param._M_d2;
      if (!__reject)
        {
   const double __e = -std::log(1.0 - __aurng());
   __x = std::floor(-__y);
   __v = -__e - __n * __n / 2;
        }
    }
  else if (__u <= __a123)
    {
      const double __e1 = -std::log(1.0 - __aurng());
      const double __e2 = -std::log(1.0 - __aurng());

      const double __y = __param._M_d1
         + 2 * __s1s * __e1 / __param._M_d1;
      __x = std::floor(__y);
      __v = (-__e2 + __param._M_d1 * (1 / (__t - __np)
          -__y / (2 * __s1s)));
      __reject = false;
    }
  else
    {
      const double __e1 = -std::log(1.0 - __aurng());
      const double __e2 = -std::log(1.0 - __aurng());

      const double __y = __param._M_d2
         + 2 * __s2s * __e1 / __param._M_d2;
      __x = std::floor(-__y);
      __v = -__e2 - __param._M_d2 * __y / (2 * __s2s);
      __reject = false;
    }

  __reject = __reject || __x < -__np || __x > __t - __np;
  if (!__reject)
    {
      const double __lfx =
        std::lgamma(__np + __x + 1)
        + std::lgamma(__t - (__np + __x) + 1);
      __reject = __v > __param._M_lf - __lfx
        + __x * __param._M_lp1p;
    }

  __reject |= __x + __np >= __thr;
       }
     while (__reject);

     __x += __np + __naf;

     const _IntType __z = _M_waiting(__urng, __t - _IntType(__x),
         __param._M_q);
     __ret = _IntType(__x) + __z;
   }
 else

   __ret = _M_waiting(__urng, __t, __param._M_q);

 if (__p12 != __p)
   __ret = __t - __ret;
 return __ret;
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      binomial_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 while (__f != __t)
   *__f++ = this->operator()(__urng, __param);
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.t() << __space << __x.p()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __t;
      double __p;
      __is >> __t >> __p >> __x._M_nd;
      __x.param(typename binomial_distribution<_IntType>::
  param_type(__t, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::exponential_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 while (__f != __t)
   *__f++ = -std::log(result_type(1) - __aurng()) / __p.lambda();
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.lambda();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __lambda;
      __is >> __lambda;
      __x.param(typename exponential_distribution<_RealType>::
  param_type(__lambda));

      __is.flags(__flags);
      return __is;
    }
# 1779 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/random.tcc" 3
  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename normal_distribution<_RealType>::result_type
      normal_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 if (_M_saved_available)
   {
     _M_saved_available = false;
     __ret = _M_saved;
   }
 else
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     _M_saved = __x * __mult;
     _M_saved_available = true;
     __ret = __y * __mult;
   }

 __ret = __ret * __param.stddev() + __param.mean();
 return __ret;
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      normal_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 if (__f == __t)
   return;

 if (_M_saved_available)
   {
     _M_saved_available = false;
     *__f++ = _M_saved * __param.stddev() + __param.mean();

     if (__f == __t)
       return;
   }

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 while (__f + 1 < __t)
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     *__f++ = __y * __mult * __param.stddev() + __param.mean();
     *__f++ = __x * __mult * __param.stddev() + __param.mean();
   }

 if (__f != __t)
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     _M_saved = __x * __mult;
     _M_saved_available = true;
     *__f = __y * __mult * __param.stddev() + __param.mean();
   }
      }

  template<typename _RealType>
    bool
    operator==(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    {
      if (__d1._M_param == __d2._M_param
   && __d1._M_saved_available == __d2._M_saved_available)
 {
   if (__d1._M_saved_available
       && __d1._M_saved == __d2._M_saved)
     return true;
   else if(!__d1._M_saved_available)
     return true;
   else
     return false;
 }
      else
 return false;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const normal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.mean() << __space << __x.stddev()
    << __space << __x._M_saved_available;
      if (__x._M_saved_available)
 __os << __space << __x._M_saved;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        normal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      double __mean, __stddev;
      __is >> __mean >> __stddev
    >> __x._M_saved_available;
      if (__x._M_saved_available)
 __is >> __x._M_saved;
      __x.param(typename normal_distribution<_RealType>::
  param_type(__mean, __stddev));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      lognormal_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

   while (__f != __t)
     *__f++ = std::exp(__p.s() * _M_nd(__urng) + __p.m());
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.s()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __s;
      __is >> __m >> __s >> __x._M_nd;
      __x.param(typename lognormal_distribution<_RealType>::
  param_type(__m, __s));

      __is.flags(__flags);
      return __is;
    }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::chi_squared_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   *__f++ = 2 * _M_gd(__urng);
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::chi_squared_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const typename
        std::gamma_distribution<result_type>::param_type& __p)
      {

 while (__f != __t)
   *__f++ = 2 * _M_gd(__urng, __p);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_gd;
      __x.param(typename chi_squared_distribution<_RealType>::
  param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename cauchy_distribution<_RealType>::result_type
      cauchy_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 _RealType __u;
 do
   __u = __aurng();
 while (__u == 0.5);

 const _RealType __pi = 3.1415926535897932384626433832795029L;
 return __p.a() + __p.b() * std::tan(__pi * __u);
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      cauchy_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 const _RealType __pi = 3.1415926535897932384626433832795029L;
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 while (__f != __t)
   {
     _RealType __u;
     do
       __u = __aurng();
     while (__u == 0.5);

     *__f++ = __p.a() + __p.b() * std::tan(__pi * __u);
   }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename cauchy_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::fisher_f_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   *__f++ = ((_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()));
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::fisher_f_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 typedef typename std::gamma_distribution<result_type>::param_type
   param_type;
 param_type __p1(__p.m() / 2);
 param_type __p2(__p.n() / 2);
 while (__f != __t)
   *__f++ = ((_M_gd_x(__urng, __p1) * n())
      / (_M_gd_y(__urng, __p2) * m()));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.n()
    << __space << __x._M_gd_x << __space << __x._M_gd_y;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __n;
      __is >> __m >> __n >> __x._M_gd_x >> __x._M_gd_y;
      __x.param(typename fisher_f_distribution<_RealType>::
  param_type(__m, __n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::student_t_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   *__f++ = _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng));
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::student_t_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 typename std::gamma_distribution<result_type>::param_type
   __p2(__p.n() / 2, 2);
 while (__f != __t)
   *__f++ = _M_nd(__urng) * std::sqrt(__p.n() / _M_gd(__urng, __p2));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_nd << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_nd >> __x._M_gd;
      __x.param(typename student_t_distribution<_RealType>::param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    gamma_distribution<_RealType>::param_type::
    _M_initialize()
    {
      _M_malpha = _M_alpha < 1.0 ? _M_alpha + _RealType(1.0) : _M_alpha;

      const _RealType __a1 = _M_malpha - _RealType(1.0) / _RealType(3.0);
      _M_a2 = _RealType(1.0) / std::sqrt(_RealType(9.0) * __a1);
    }






  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename gamma_distribution<_RealType>::result_type
      gamma_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 result_type __u, __v, __n;
 const result_type __a1 = (__param._M_malpha
      - _RealType(1.0) / _RealType(3.0));

 do
   {
     do
       {
  __n = _M_nd(__urng);
  __v = result_type(1.0) + __param._M_a2 * __n;
       }
     while (__v <= 0.0);

     __v = __v * __v * __v;
     __u = __aurng();
   }
 while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
        && (std::log(__u) > (0.5 * __n * __n + __a1
        * (1.0 - __v + std::log(__v)))));

 if (__param.alpha() == __param._M_malpha)
   return __a1 * __v * __param.beta();
 else
   {
     do
       __u = __aurng();
     while (__u == 0.0);

     return (std::pow(__u, result_type(1.0) / __param.alpha())
      * __a1 * __v * __param.beta());
   }
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      gamma_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 result_type __u, __v, __n;
 const result_type __a1 = (__param._M_malpha
      - _RealType(1.0) / _RealType(3.0));

 if (__param.alpha() == __param._M_malpha)
   while (__f != __t)
     {
       do
  {
    do
      {
        __n = _M_nd(__urng);
        __v = result_type(1.0) + __param._M_a2 * __n;
      }
    while (__v <= 0.0);

    __v = __v * __v * __v;
    __u = __aurng();
  }
       while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
       && (std::log(__u) > (0.5 * __n * __n + __a1
       * (1.0 - __v + std::log(__v)))));

       *__f++ = __a1 * __v * __param.beta();
     }
 else
   while (__f != __t)
     {
       do
  {
    do
      {
        __n = _M_nd(__urng);
        __v = result_type(1.0) + __param._M_a2 * __n;
      }
    while (__v <= 0.0);

    __v = __v * __v * __v;
    __u = __aurng();
  }
       while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
       && (std::log(__u) > (0.5 * __n * __n + __a1
       * (1.0 - __v + std::log(__v)))));

       do
  __u = __aurng();
       while (__u == 0.0);

       *__f++ = (std::pow(__u, result_type(1.0) / __param.alpha())
   * __a1 * __v * __param.beta());
     }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.alpha() << __space << __x.beta()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __alpha_val, __beta_val;
      __is >> __alpha_val >> __beta_val >> __x._M_nd;
      __x.param(typename gamma_distribution<_RealType>::
  param_type(__alpha_val, __beta_val));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename weibull_distribution<_RealType>::result_type
      weibull_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.b() * std::pow(-std::log(result_type(1) - __aurng()),
      result_type(1) / __p.a());
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      weibull_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 auto __inv_a = result_type(1) / __p.a();

 while (__f != __t)
   *__f++ = __p.b() * std::pow(-std::log(result_type(1) - __aurng()),
          __inv_a);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename weibull_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename extreme_value_distribution<_RealType>::result_type
      extreme_value_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.a() - __p.b() * std::log(-std::log(result_type(1)
            - __aurng()));
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      extreme_value_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 while (__f != __t)
   *__f++ = __p.a() - __p.b() * std::log(-std::log(result_type(1)
         - __aurng()));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename extreme_value_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    discrete_distribution<_IntType>::param_type::
    _M_initialize()
    {
      if (_M_prob.size() < 2)
 {
   _M_prob.clear();
   return;
 }

      const double __sum = std::accumulate(_M_prob.begin(),
        _M_prob.end(), 0.0);

      __detail::__normalize(_M_prob.begin(), _M_prob.end(), _M_prob.begin(),
       __sum);

      _M_cp.reserve(_M_prob.size());
      std::partial_sum(_M_prob.begin(), _M_prob.end(),
         std::back_inserter(_M_cp));

      _M_cp[_M_cp.size() - 1] = 1.0;
    }

  template<typename _IntType>
    template<typename _Func>
      discrete_distribution<_IntType>::param_type::
      param_type(size_t __nw, double __xmin, double __xmax, _Func __fw)
      : _M_prob(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const double __delta = (__xmax - __xmin) / __n;

 _M_prob.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_prob.push_back(__fw(__xmin + __k * __delta + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename discrete_distribution<_IntType>::result_type
      discrete_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 if (__param._M_cp.empty())
   return result_type(0);

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);

 return __pos - __param._M_cp.begin();
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      discrete_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 if (__param._M_cp.empty())
   {
     while (__f != __t)
       *__f++ = result_type(0);
     return;
   }

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 while (__f != __t)
   {
     const double __p = __aurng();
     auto __pos = std::lower_bound(__param._M_cp.begin(),
       __param._M_cp.end(), __p);

     *__f++ = __pos - __param._M_cp.begin();
   }
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      std::vector<double> __prob = __x.probabilities();
      __os << __prob.size();
      for (auto __dit = __prob.begin(); __dit != __prob.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<double> __prob_vec;
      __prob_vec.reserve(__n);
      for (; __n != 0; --__n)
 {
   double __prob;
   __is >> __prob;
   __prob_vec.push_back(__prob);
 }

      __x.param(typename discrete_distribution<_IntType>::
  param_type(__prob_vec.begin(), __prob_vec.end()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_constant_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      const double __sum = std::accumulate(_M_den.begin(),
        _M_den.end(), 0.0);

      __detail::__normalize(_M_den.begin(), _M_den.end(), _M_den.begin(),
       __sum);

      _M_cp.reserve(_M_den.size());
      std::partial_sum(_M_den.begin(), _M_den.end(),
         std::back_inserter(_M_cp));


      _M_cp[_M_cp.size() - 1] = 1.0;

      for (size_t __k = 0; __k < _M_den.size(); ++__k)
 _M_den[__k] /= _M_int[__k + 1] - _M_int[__k];
    }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp()
      {
 if (__bbegin != __bend)
   {
     for (;;)
       {
  _M_int.push_back(*__bbegin);
  ++__bbegin;
  if (__bbegin == __bend)
    break;

  _M_den.push_back(*__wbegin);
  ++__wbegin;
       }
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 _M_int.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   _M_int.push_back(*__biter);

 _M_den.reserve(_M_int.size() - 1);
 for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
   _M_den.push_back(__fw(0.5 * (_M_int[__k + 1] + _M_int[__k])));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   _M_int.push_back(__xmin + __k * __delta);

 _M_den.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_den.push_back(__fw(_M_int[__k] + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_constant_distribution<_RealType>::result_type
      piecewise_constant_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 return __param._M_int[__i] + (__p - __pref) / __param._M_den[__i];
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      piecewise_constant_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 if (__param._M_cp.empty())
   {
     while (__f != __t)
       *__f++ = __aurng();
     return;
   }

 while (__f != __t)
   {
     const double __p = __aurng();

     auto __pos = std::lower_bound(__param._M_cp.begin(),
       __param._M_cp.end(), __p);
     const size_t __i = __pos - __param._M_cp.begin();

     const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

     *__f++ = (__param._M_int[__i]
        + (__p - __pref) / __param._M_den[__i]);
   }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n);
      for (size_t __i = 0; __i < __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_constant_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_linear_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)
       && _M_den[0] == _M_den[1]))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      double __sum = 0.0;
      _M_cp.reserve(_M_int.size() - 1);
      _M_m.reserve(_M_int.size() - 1);
      for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
 {
   const _RealType __delta = _M_int[__k + 1] - _M_int[__k];
   __sum += 0.5 * (_M_den[__k + 1] + _M_den[__k]) * __delta;
   _M_cp.push_back(__sum);
   _M_m.push_back((_M_den[__k + 1] - _M_den[__k]) / __delta);
 }


      __detail::__normalize(_M_den.begin(), _M_den.end(), _M_den.begin(),
       __sum);

      __detail::__normalize(_M_cp.begin(), _M_cp.end(), _M_cp.begin(), __sum);

      __detail::__normalize(_M_m.begin(), _M_m.end(), _M_m.begin(), __sum);


      _M_cp[_M_cp.size() - 1] = 1.0;
     }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 for (; __bbegin != __bend; ++__bbegin, ++__wbegin)
   {
     _M_int.push_back(*__bbegin);
     _M_den.push_back(*__wbegin);
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 _M_int.reserve(__bl.size());
 _M_den.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   {
     _M_int.push_back(*__biter);
     _M_den.push_back(__fw(*__biter));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 _M_den.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   {
     _M_int.push_back(__xmin + __k * __delta);
     _M_den.push_back(__fw(_M_int[__k] + __delta));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_linear_distribution<_RealType>::result_type
      piecewise_linear_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 const double __a = 0.5 * __param._M_m[__i];
 const double __b = __param._M_den[__i];
 const double __cm = __p - __pref;

 _RealType __x = __param._M_int[__i];
 if (__a == 0)
   __x += __cm / __b;
 else
   {
     const double __d = __b * __b + 4.0 * __a * __cm;
     __x += 0.5 * (std::sqrt(__d) - __b) / __a;
          }

        return __x;
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      piecewise_linear_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 while (__f != __t)
   *__f++ = this->operator()(__urng, __param);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_linear_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    seed_seq::seed_seq(std::initializer_list<_IntType> __il)
    {
      for (auto __iter = __il.begin(); __iter != __il.end(); ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _InputIterator>
    seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end)
    {
      for (_InputIterator __iter = __begin; __iter != __end; ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _RandomAccessIterator>
    void
    seed_seq::generate(_RandomAccessIterator __begin,
         _RandomAccessIterator __end)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
        _Type;

      if (__begin == __end)
 return;

      std::fill(__begin, __end, _Type(0x8b8b8b8bu));

      const size_t __n = __end - __begin;
      const size_t __s = _M_v.size();
      const size_t __t = (__n >= 623) ? 11
         : (__n >= 68) ? 7
         : (__n >= 39) ? 5
         : (__n >= 7) ? 3
         : (__n - 1) / 2;
      const size_t __p = (__n - __t) / 2;
      const size_t __q = __p + __t;
      const size_t __m = std::max(size_t(__s + 1), __n);

      for (size_t __k = 0; __k < __m; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    ^ __begin[(__k + __p) % __n]
    ^ __begin[(__k - 1) % __n]);
   _Type __r1 = __arg ^ (__arg >> 27);
   __r1 = __detail::__mod<_Type,
      __detail::_Shift<_Type, 32>::__value>(1664525u * __r1);
   _Type __r2 = __r1;
   if (__k == 0)
     __r2 += __s;
   else if (__k <= __s)
     __r2 += __k % __n + _M_v[__k - 1];
   else
     __r2 += __k % __n;
   __r2 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r2);
   __begin[(__k + __p) % __n] += __r1;
   __begin[(__k + __q) % __n] += __r2;
   __begin[__k % __n] = __r2;
 }

      for (size_t __k = __m; __k < __m + __n; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    + __begin[(__k + __p) % __n]
    + __begin[(__k - 1) % __n]);
   _Type __r3 = __arg ^ (__arg >> 27);
   __r3 = __detail::__mod<_Type,
     __detail::_Shift<_Type, 32>::__value>(1566083941u * __r3);
   _Type __r4 = __r3 - __k % __n;
   __r4 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r4);
   __begin[(__k + __p) % __n] ^= __r3;
   __begin[(__k + __q) % __n] ^= __r4;
   __begin[__k % __n] = __r4;
 }
    }

  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __urng)
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

      const size_t __b
 = std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),
                   __bits);
      const long double __r = static_cast<long double>(__urng.max())
       - static_cast<long double>(__urng.min()) + 1.0L;
      const size_t __log2r = std::log(__r) / std::log(2.0L);
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
 {
   __sum += _RealType(__urng() - __urng.min()) * __tmp;
   __tmp *= __r;
 }
      return __sum / __tmp;
    }


}
# 52 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/random" 2 3
# 67 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator, typename _Compare>
    void
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
      _Iterator __c, _Compare __comp)
    {
      if (__comp(__a, __b))
 {
   if (__comp(__b, __c))
     std::iter_swap(__result, __b);
   else if (__comp(__a, __c))
     std::iter_swap(__result, __c);
   else
     std::iter_swap(__result, __a);
 }
      else if (__comp(__a, __c))
 std::iter_swap(__result, __a);
      else if (__comp(__b, __c))
 std::iter_swap(__result, __c);
      else
 std::iter_swap(__result, __b);
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(__first))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }

  template<typename _Iterator, typename _Predicate>
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
    {
      return __find_if(__first, __last, __pred,
         std::__iterator_category(__first));
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred)
    {
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__negate(__pred),
       std::__iterator_category(__first));
    }




  template<typename _InputIterator, typename _Predicate, typename _Distance>
    _InputIterator
    __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
    {
      for (; __len; --__len, ++__first)
 if (!__pred(__first))
   break;
      return __first;
    }
# 202 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __predicate)
    {

      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 =
     std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));

   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(__current, __p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }






  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
    _ForwardIterator
    __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::forward_iterator_tag)
    {
      __first = std::__find_if(__first, __last, __unary_pred);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && __unary_pred(__i))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::__find_if(++__i, __last, __unary_pred);
 }
      return __last;
    }





  template<typename _RandomAccessIter, typename _Integer,
    typename _UnaryPredicate>
    _RandomAccessIter
    __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::random_access_iterator_tag)
    {
      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      _DistanceType __remainder = __count;

      while (__remainder <= __tailSize)
 {
   __first += __remainder;
   __tailSize -= __remainder;


   _RandomAccessIter __backTrack = __first;
   while (__unary_pred(--__backTrack))
     {
       if (--__remainder == 0)
         return (__first - __count);
     }
   __remainder = __count + 1 - (__first - __backTrack);
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _Integer,
           typename _UnaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count,
        _UnaryPredicate __unary_pred)
    {
      if (__count <= 0)
 return __first;

      if (__count == 1)
 return std::__find_if(__first, __last, __unary_pred);

      return std::__search_n_aux(__first, __last, __count, __unary_pred,
     std::__iterator_category(__first));
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;

      _ForwardIterator1 __result = __last1;
      while (1)
 {
   _ForwardIterator1 __new_result
     = std::__search(__first1, __last1, __first2, __last2, __comp);
   if (__new_result == __last1)
     return __result;
   else
     {
       __result = __new_result;
       __first1 = __new_result;
       ++__first1;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
           _RevIterator2(__last2), __rlast2,
           __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 423 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 471 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 506 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if_not(__first, __last, __pred); }
# 523 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if(__first, __last, __pred); }
# 541 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return !std::none_of(__first, __last, __pred); }
# 556 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
  _Predicate __pred)
    {




                                                     ;
      return std::__find_if_not(__first, __last,
    __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 580 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    is_partitioned(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      __first = std::find_if_not(__first, __last, __pred);
      return std::none_of(__first, __last, __pred);
    }
# 598 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    partition_point(_ForwardIterator __first, _ForwardIterator __last,
      _Predicate __pred)
    {






                                                     ;

      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__pred(*__middle))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }


  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    __remove_copy_if(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _Predicate __pred)
    {
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 665 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {






                                                     ;

      return std::__remove_copy_if(__first, __last, __result,
 __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 697 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    inline _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      return std::__remove_copy_if(__first, __last, __result,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 731 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }

  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    _OutputIterator
    __copy_n(_InputIterator __first, _Size __n,
      _OutputIterator __result, input_iterator_tag)
    {
      if (__n > 0)
 {
   while (true)
     {
       *__result = *__first;
       ++__result;
       if (--__n > 0)
  ++__first;
       else
  break;
     }
 }
      return __result;
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _OutputIterator>
    inline _OutputIterator
    __copy_n(_RandomAccessIterator __first, _Size __n,
      _OutputIterator __result, random_access_iterator_tag)
    { return std::copy(__first, __first + __n, __result); }
# 794 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    inline _OutputIterator
    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
    {





      return std::__copy_n(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 822 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator1,
    typename _OutputIterator2, typename _Predicate>
    pair<_OutputIterator1, _OutputIterator2>
    partition_copy(_InputIterator __first, _InputIterator __last,
     _OutputIterator1 __out_true, _OutputIterator2 __out_false,
     _Predicate __pred)
    {
# 837 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__out_true = *__first;
     ++__out_true;
   }
 else
   {
     *__out_false = *__first;
     ++__out_false;
   }

      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
      if (__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for (; __first != __last; ++__first)
        if (!__pred(__first))
          {
            *__result = std::move(*__first);
            ++__result;
          }
      return __result;
    }
# 891 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {





                                                     ;

      return std::__remove_if(__first, __last,
  __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 924 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__remove_if(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while (++__next != __last)
 {
   if (__binary_pred(__first, __next))
     return __first;
   __first = __next;
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __unique(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {

      __first = std::__adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!__binary_pred(__dest, __first))
   *++__dest = std::move(*__first);
      return ++__dest;
    }
# 990 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {





                                                     ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1020 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {






                                                     ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {





      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!__binary_pred(__first, __next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {





      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
 __rebound_pred
 = __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
      *__result = __value;
      while (++__first != __last)
 if (!__rebound_pred(__first, __value))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {




      *__result = *__first;
      while (++__first != __last)
 if (!__binary_pred(__result, __first))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1175 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {



                                                     ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1202 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {





                                                     ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }

  inline namespace _V2
  {


  template<typename _ForwardIterator>
    _ForwardIterator
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      _ForwardIterator __ret = __first;

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
      return __ret;
    }


  template<typename _BidirectionalIterator>
    _BidirectionalIterator
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {




      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 {
   std::__reverse(__middle, __last, bidirectional_iterator_tag());
   return __last;
 }
      else
 {
   std::__reverse(__first, __middle, bidirectional_iterator_tag());
   return __first;
 }
    }


  template<typename _RandomAccessIterator>
    _RandomAccessIterator
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {




      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return __middle;
 }

      _RandomAccessIterator __p = __first;
      _RandomAccessIterator __ret = __first + (__last - __middle);

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*__p);
    std::move(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*(__p + __n - 1));
    std::move_backward(__p, __p + __n - 1, __p + __n);
    *__p = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
     }
 }
    }
# 1429 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {



                                                       ;
                                                      ;

      return std::__rotate(__first, __middle, __last,
      std::__iterator_category(__first));
    }

  }
# 1466 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    inline _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {




                                                       ;
                                                      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }
# 1543 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len == 1)
 return __first;

      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;




   *__result2 = std::move(*__first);
   ++__result2;
   ++__first;
   for (; __first != __last; ++__first)
     if (__pred(__first))
       {
  *__result1 = std::move(*__first);
  ++__result1;
       }
     else
       {
  *__result2 = std::move(*__first);
  ++__result2;
       }

   std::move(__buffer, __result2, __result1);
   return __result1;
 }

      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __left_split =
 std::__stable_partition_adaptive(__first, __middle, __pred,
      __len / 2, __buffer,
      __buffer_size);



      _Distance __right_len = __len - __len / 2;
      _ForwardIterator __right_split =
 std::__find_if_not_n(__middle, __right_len, __pred);

      if (__right_len)
 __right_split =
   std::__stable_partition_adaptive(__right_split, __last, __pred,
        __right_len,
        __buffer, __buffer_size);

      std::rotate(__left_split, __middle, __right_split);
      std::advance(__left_split, std::distance(__middle, __right_split));
      return __left_split;
    }

  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
         _Predicate __pred)
    {
      __first = std::__find_if_not(__first, __last, __pred);

      if (__first == __last)
 return __first;

      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first, __last);
      return
 std::__stable_partition_adaptive(__first, __last, __pred,
      _DistanceType(__buf.requested_size()),
      __buf.begin(),
      _DistanceType(__buf.size()));
    }
# 1646 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__stable_partition(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::__make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(__i, __first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }



  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    _RandomAccessIterator
    __partial_sort_copy(_InputIterator __first, _InputIterator __last,
   _RandomAccessIterator __result_first,
   _RandomAccessIterator __result_last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef iterator_traits<_RandomAccessIterator> _RItTraits;
      typedef typename _RItTraits::difference_type _DistanceType;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while (__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }

      std::__make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(__first, __result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first), __comp);
   ++__first;
 }
      std::__sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }
# 1732 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 1752 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
          __gnu_cxx::__ops::__iter_less_iter());
    }
# 1780 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 1805 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(__i, __first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _RandomAccessIterator __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, __last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
      __comp);
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __partial_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __middle,
     _RandomAccessIterator __last,
     _Compare __comp)
    {
      std::__heap_select(__first, __middle, __last, __comp);
      std::__sort_heap(__first, __middle, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::__partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2,
    __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2016 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, __middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2073 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




                                                                  ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2105 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Tp,
    typename _CompareItTp, typename _CompareTpIt>
    pair<_ForwardIterator, _ForwardIterator>
    __equal_range(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val,
    _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp_it_val(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp_val_it(__val, __middle))
     __len = __half;
   else
     {
       _ForwardIterator __left
  = std::__lower_bound(__first, __middle, __val, __comp_it_val);
       std::advance(__first, __len);
       _ForwardIterator __right
  = std::__upper_bound(++__middle, __first, __val, __comp_val_it);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2179 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;





                                                                  ;
                                                                  ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val(),
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2216 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
# 2231 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                    ;

                    ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp),
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }
# 2252 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




                                                                  ;
                                                                  ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_less_val());
      return __i != __last && !(__val < *__i);
    }
# 2287 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

                    ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_comp_val(__comp));
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(__last2, __last1))
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::move(__middle, __last, __buffer);
       std::move_backward(__first, __middle, __last);
       return std::move(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::move(__first, __middle, __buffer);
       std::move(__middle, __last, __first);
       return std::move_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut
  = std::__lower_bound(__middle, __last, *__first_cut,
         __gnu_cxx::__ops::__iter_comp_val(__comp));
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut
  = std::__upper_bound(__first, __middle, *__second_cut,
         __gnu_cxx::__ops::__val_comp_iter(__comp));
       __len11 = std::distance(__first, __first_cut);
     }

   _BidirectionalIterator __new_middle
     = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
         __len1 - __len11, __len22, __buffer,
         __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;

      if (__len1 + __len2 == 2)
 {
   if (__comp(__middle, __first))
     std::iter_swap(__first, __middle);
   return;
 }

      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut
     = std::__lower_bound(__middle, __last, *__first_cut,
     __gnu_cxx::__ops::__iter_comp_val(__comp));
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut
     = std::__upper_bound(__first, __middle, *__second_cut,
     __gnu_cxx::__ops::__val_comp_iter(__comp));
   __len11 = std::distance(__first, __first_cut);
 }

      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }

  template<typename _BidirectionalIterator, typename _Compare>
    void
    __inplace_merge(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__merge_without_buffer
   (__first, __middle, __last, __len1, __len2, __comp);
      else
 std::__merge_adaptive
   (__first, __middle, __last, __len1, __len2, __buf.begin(),
    _DistanceType(__buf.size()), __comp);
    }
# 2584 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {





                                                  ;
                                                 ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_less_iter());
    }
# 2624 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {






                                                               ;
                                                              ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _InputIterator, typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator __first1, _InputIterator __last1,
   _InputIterator __first2, _InputIterator __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result));


    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 2795 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    __includes(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first2, __first1))
   return false;
 else if (__comp(__first1, __first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 2831 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {
# 2845 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 2873 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {
# 2889 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 2906 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __next_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__i, __ii))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(__i, --__j))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 2955 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 2986 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __prev_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__ii, __i))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(--__j, __i))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 3053 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      return std::__prev_permutation(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 3084 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      return std::__prev_permutation(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }




  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    __replace_copy_if(_InputIterator __first, _InputIterator __last,
        _OutputIterator __result,
        _Predicate __pred, const _Tp& __new_value)
    {
      for (; __first != __last; ++__first, ++__result)
 if (__pred(__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3133 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {






                                                     ;

      return std::__replace_copy_if(__first, __last, __result,
   __gnu_cxx::__ops::__iter_equals_val(__old_value),
           __new_value);
    }
# 3167 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    inline _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {






                                                     ;

      return std::__replace_copy_if(__first, __last, __result,
    __gnu_cxx::__ops::__pred_iter(__pred),
           __new_value);
    }

  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(__first))
   ++__n;
      return __n;
    }
# 3206 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last)
    { return std::is_sorted_until(__first, __last) == __last; }
# 3220 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    { return std::is_sorted_until(__first, __last, __comp) == __last; }

  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
        _Compare __comp)
    {
      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, ++__next)
 if (__comp(__next, __first))
   return __next;
      return __next;
    }
# 3249 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 3272 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
      _Compare __comp)
    {





                                                     ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 3296 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _Tp>

    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b)
    {



      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
                : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 3317 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>

    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
                       : pair<const _Tp&, const _Tp&>(__a, __b);
    }

  template<typename _ForwardIterator, typename _Compare>

    pair<_ForwardIterator, _ForwardIterator>
    __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    {
      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min{}, __max{};
      if (__comp(__next, __first))
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (__comp(__first, __min))
  __min = __first;
       else if (!__comp(__first, __max))
  __max = __first;
       break;
     }

   if (__comp(__next, __first))
     {
       if (__comp(__next, __min))
  __min = __next;
       if (!__comp(__first, __max))
  __max = __first;
     }
   else
     {
       if (__comp(__first, __min))
  __min = __first;
       if (!__comp(__next, __max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }
# 3397 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>

    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 3424 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>

    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last,
     _Compare __comp)
    {





                                                     ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  template<typename _Tp>

    inline _Tp
    min(initializer_list<_Tp> __l)
    { return *std::min_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>

    inline _Tp
    min(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::min_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>

    inline _Tp
    max(initializer_list<_Tp> __l)
    { return *std::max_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>

    inline _Tp
    max(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::max_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>

    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end());
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _Tp, typename _Compare>

    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l, _Compare __comp)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end(), __comp);
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
     __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches
     = std::__count_if(__first2, __last2,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches ||
       std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 3535 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {






                                                       ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3566 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {






                                                       ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }
# 3714 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator,
    typename _UniformRandomNumberGenerator>
    void
    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _UniformRandomNumberGenerator&& __g)
    {



                                                     ;

      if (__first == __last)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      typedef typename __distr_type::param_type __p_type;
      __distr_type __d;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    }
# 3759 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {


                                                     ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return std::move(__f);
    }
# 3780 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {




                                                     ;
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 3804 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {




                                                     ;

      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 3835 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 3875 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 3907 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__adjacent_find(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3932 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {





                                                     ;

      return std::__adjacent_find(__first, __last,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 3957 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {




                                                     ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 3980 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {




                                                     ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 4020 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4059 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {






                                                       ;
                                                       ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_comp_iter(__predicate));
    }
# 4094 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {




                                                     ;

      return std::__search_n(__first, __last, __count,
        __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 4127 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {




                                                     ;

      return std::__search_n(__first, __last, __count,
  __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val));
    }
# 4161 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {





                                                     ;

      for (; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4198 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {






                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4231 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4263 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 4295 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {




                                                     ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 4326 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {





      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __gen();
      return __first;
    }
# 4362 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {






                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    __gnu_cxx::__ops::__iter_equal_to_iter(),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4402 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4434 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {



                                                     ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   {

     _RandomAccessIterator __j = __first
     + std::rand() % ((__i - __first) + 1);
     if (__i != __j)
       std::iter_swap(__i, __j);
   }
    }
# 4468 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,

     _RandomNumberGenerator&& __rand)



    {



                                                     ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   _RandomAccessIterator __j = __first + __rand((__i - __first) + 1);
   if (__i != __j)
     std::iter_swap(__i, __j);
 }
    }
# 4508 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 4541 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {





                                                       ;
                                                      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 4578 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {






                                                       ;
                                                      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4613 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {





                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 4651 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {






                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4687 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 4716 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {






                                                     ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    __merge(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 4776 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
# 4793 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__merge(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 4824 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
# 4841 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__merge(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 4886 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 4919 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {






                                                     ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_union(_InputIterator1 __first1, _InputIterator1 __last1,
  _InputIterator2 __first2, _InputIterator2 __last2,
  _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first1, __first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 4986 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
# 5006 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5033 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
# 5053 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
         _InputIterator2 __first2, _InputIterator2 __last2,
         _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   ++__first1;
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5101 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
# 5119 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__set_intersection(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 5147 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
# 5165 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__set_intersection(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5217 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
# 5235 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 5265 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
# 5283 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_symmetric_difference(_InputIterator1 __first1,
          _InputIterator1 __last1,
          _InputIterator2 __first2,
          _InputIterator2 __last2,
          _OutputIterator __result,
          _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5341 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {
# 5361 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__set_symmetric_difference(__first1, __last1,
     __first2, __last2, __result,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 5389 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {
# 5410 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__set_symmetric_difference(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>

    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__first, __result))
   __result = __first;
      return __result;
    }
# 5440 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>

    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5464 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>

    inline _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>

    _ForwardIterator
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__result, __first))
   __result = __first;
      return __result;
    }
# 5502 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>

    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5526 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>

    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


}
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/algorithm" 2 3
# 5 "/opt/rocm/hcc/include/hc_defines.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cassert" 1 3
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cassert" 3

# 1 "/usr/include/assert.h" 1 3 4
# 44 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cassert" 2 3
# 6 "/opt/rocm/hcc/include/hc_defines.h" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstdlib" 3
# 8 "/opt/rocm/hcc/include/hc_defines.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstring" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstring" 3
# 71 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cstring" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;


  inline void*
  memchr(void* __s, int __c, size_t __n)
  { return __builtin_memchr(__s, __c, __n); }

  inline char*
  strchr(char* __s, int __n)
  { return __builtin_strchr(__s, __n); }

  inline char*
  strpbrk(char* __s1, const char* __s2)
  { return __builtin_strpbrk(__s1, __s2); }

  inline char*
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }



}
# 9 "/opt/rocm/hcc/include/hc_defines.h" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/future" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/future" 3






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/mutex" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/mutex" 3
# 51 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/mutex" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  class __mutex_base
  {
  protected:
    typedef __gthread_mutex_t __native_type;


    __native_type _M_mutex = { { 0, 0, 0, 0, 0, 0, 0, { 0, 0 } } };

    constexpr __mutex_base() noexcept = default;
# 78 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/mutex" 3
    __mutex_base(const __mutex_base&) = delete;
    __mutex_base& operator=(const __mutex_base&) = delete;
  };


  class __recursive_mutex_base
  {
  protected:
    typedef __gthread_recursive_mutex_t __native_type;

    __recursive_mutex_base(const __recursive_mutex_base&) = delete;
    __recursive_mutex_base& operator=(const __recursive_mutex_base&) = delete;


    __native_type _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0, { 0, 0 } } };

    __recursive_mutex_base() = default;
# 107 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/mutex" 3
  };
# 118 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/mutex" 3
  class mutex : private __mutex_base
  {
  public:
    typedef __native_type* native_handle_type;


    constexpr

    mutex() noexcept = default;
    ~mutex() = default;

    mutex(const mutex&) = delete;
    mutex& operator=(const mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    bool
    try_lock() noexcept
    {

      return !__gthread_mutex_trylock(&_M_mutex);
    }

    void
    unlock()
    {

      __gthread_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle()
    { return &_M_mutex; }
  };


  class recursive_mutex : private __recursive_mutex_base
  {
  public:
    typedef __native_type* native_handle_type;

    recursive_mutex() = default;
    ~recursive_mutex() = default;

    recursive_mutex(const recursive_mutex&) = delete;
    recursive_mutex& operator=(const recursive_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_recursive_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    bool
    try_lock() noexcept
    {

      return !__gthread_recursive_mutex_trylock(&_M_mutex);
    }

    void
    unlock()
    {

      __gthread_recursive_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle()
    { return &_M_mutex; }
  };


  template<typename _Derived>
    class __timed_mutex_impl
    {
    protected:
      typedef chrono::high_resolution_clock __clock_t;

      template<typename _Rep, typename _Period>
 bool
 _M_try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
 {
   using chrono::steady_clock;
   auto __rt = chrono::duration_cast<steady_clock::duration>(__rtime);
   if (ratio_greater<steady_clock::period, _Period>())
     ++__rt;
   return _M_try_lock_until(steady_clock::now() + __rt);
 }

      template<typename _Duration>
 bool
 _M_try_lock_until(const chrono::time_point<__clock_t,
         _Duration>& __atime)
 {
   auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
   auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

   __gthread_time_t __ts = {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

   auto __mutex = static_cast<_Derived*>(this)->native_handle();
   return !__gthread_mutex_timedlock(__mutex, &__ts);
 }

      template<typename _Clock, typename _Duration>
 bool
 _M_try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
 {
   auto __rtime = __atime - _Clock::now();
   return _M_try_lock_until(__clock_t::now() + __rtime);
 }
    };


  class timed_mutex
  : private __mutex_base, public __timed_mutex_impl<timed_mutex>
  {
  public:
    typedef __native_type* native_handle_type;

    timed_mutex() = default;
    ~timed_mutex() = default;

    timed_mutex(const timed_mutex&) = delete;
    timed_mutex& operator=(const timed_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    bool
    try_lock() noexcept
    {

      return !__gthread_mutex_trylock(&_M_mutex);
    }

    template <class _Rep, class _Period>
      bool
      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
      { return _M_try_lock_for(__rtime); }

    template <class _Clock, class _Duration>
      bool
      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
      { return _M_try_lock_until(__atime); }

    void
    unlock()
    {

      __gthread_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle()
    { return &_M_mutex; }
  };


  class recursive_timed_mutex
  : private __recursive_mutex_base,
    public __timed_mutex_impl<recursive_timed_mutex>
  {
  public:
    typedef __native_type* native_handle_type;

    recursive_timed_mutex() = default;
    ~recursive_timed_mutex() = default;

    recursive_timed_mutex(const recursive_timed_mutex&) = delete;
    recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_recursive_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    bool
    try_lock() noexcept
    {

      return !__gthread_recursive_mutex_trylock(&_M_mutex);
    }

    template <class _Rep, class _Period>
      bool
      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
      { return _M_try_lock_for(__rtime); }

    template <class _Clock, class _Duration>
      bool
      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
      { return _M_try_lock_until(__atime); }

    void
    unlock()
    {

      __gthread_recursive_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle()
    { return &_M_mutex; }
  };




  struct defer_lock_t { };


  struct try_to_lock_t { };



  struct adopt_lock_t { };


  constexpr defer_lock_t defer_lock { };


  constexpr try_to_lock_t try_to_lock { };


  constexpr adopt_lock_t adopt_lock { };
# 379 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/mutex" 3
  template<typename _Mutex>
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { }

      ~lock_guard()
      { _M_device.unlock(); }

      lock_guard(const lock_guard&) = delete;
      lock_guard& operator=(const lock_guard&) = delete;

    private:
      mutex_type& _M_device;
    };


  template<typename _Mutex>
    class unique_lock
    {
    public:
      typedef _Mutex mutex_type;

      unique_lock() noexcept
      : _M_device(0), _M_owns(false)
      { }

      explicit unique_lock(mutex_type& __m)
      : _M_device(std::__addressof(__m)), _M_owns(false)
      {
 lock();
 _M_owns = true;
      }

      unique_lock(mutex_type& __m, defer_lock_t) noexcept
      : _M_device(std::__addressof(__m)), _M_owns(false)
      { }

      unique_lock(mutex_type& __m, try_to_lock_t)
      : _M_device(std::__addressof(__m)), _M_owns(_M_device->try_lock())
      { }

      unique_lock(mutex_type& __m, adopt_lock_t)
      : _M_device(std::__addressof(__m)), _M_owns(true)
      {

      }

      template<typename _Clock, typename _Duration>
 unique_lock(mutex_type& __m,
      const chrono::time_point<_Clock, _Duration>& __atime)
 : _M_device(std::__addressof(__m)),
   _M_owns(_M_device->try_lock_until(__atime))
 { }

      template<typename _Rep, typename _Period>
 unique_lock(mutex_type& __m,
      const chrono::duration<_Rep, _Period>& __rtime)
 : _M_device(std::__addressof(__m)),
   _M_owns(_M_device->try_lock_for(__rtime))
 { }

      ~unique_lock()
      {
 if (_M_owns)
   unlock();
      }

      unique_lock(const unique_lock&) = delete;
      unique_lock& operator=(const unique_lock&) = delete;

      unique_lock(unique_lock&& __u) noexcept
      : _M_device(__u._M_device), _M_owns(__u._M_owns)
      {
 __u._M_device = 0;
 __u._M_owns = false;
      }

      unique_lock& operator=(unique_lock&& __u) noexcept
      {
 if(_M_owns)
   unlock();

 unique_lock(std::move(__u)).swap(*this);

 __u._M_device = 0;
 __u._M_owns = false;

 return *this;
      }

      void
      lock()
      {
 if (!_M_device)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_owns)
   __throw_system_error(int(errc::resource_deadlock_would_occur));
 else
   {
     _M_device->lock();
     _M_owns = true;
   }
      }

      bool
      try_lock()
      {
 if (!_M_device)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_owns)
   __throw_system_error(int(errc::resource_deadlock_would_occur));
 else
   {
     _M_owns = _M_device->try_lock();
     return _M_owns;
   }
      }

      template<typename _Clock, typename _Duration>
 bool
 try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
 {
   if (!_M_device)
     __throw_system_error(int(errc::operation_not_permitted));
   else if (_M_owns)
     __throw_system_error(int(errc::resource_deadlock_would_occur));
   else
     {
       _M_owns = _M_device->try_lock_until(__atime);
       return _M_owns;
     }
 }

      template<typename _Rep, typename _Period>
 bool
 try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
 {
   if (!_M_device)
     __throw_system_error(int(errc::operation_not_permitted));
   else if (_M_owns)
     __throw_system_error(int(errc::resource_deadlock_would_occur));
   else
     {
       _M_owns = _M_device->try_lock_for(__rtime);
       return _M_owns;
     }
  }

      void
      unlock()
      {
 if (!_M_owns)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_device)
   {
     _M_device->unlock();
     _M_owns = false;
   }
      }

      void
      swap(unique_lock& __u) noexcept
      {
 std::swap(_M_device, __u._M_device);
 std::swap(_M_owns, __u._M_owns);
      }

      mutex_type*
      release() noexcept
      {
 mutex_type* __ret = _M_device;
 _M_device = 0;
 _M_owns = false;
 return __ret;
      }

      bool
      owns_lock() const noexcept
      { return _M_owns; }

      explicit operator bool() const noexcept
      { return owns_lock(); }

      mutex_type*
      mutex() const noexcept
      { return _M_device; }

    private:
      mutex_type* _M_device;
      bool _M_owns;
    };


  template<typename _Mutex>
    inline void
    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y) noexcept
    { __x.swap(__y); }

  template<typename _Lock>
    inline unique_lock<_Lock>
    __try_to_lock(_Lock& __l)
    { return unique_lock<_Lock>{__l, try_to_lock}; }

  template<int _Idx, bool _Continue = true>
    struct __try_lock_impl
    {
      template<typename... _Lock>
 static void
 __do_try_lock(tuple<_Lock&...>& __locks, int& __idx)
 {
          __idx = _Idx;
          auto __lock = std::__try_to_lock(std::get<_Idx>(__locks));
          if (__lock.owns_lock())
            {
       constexpr bool __cont = _Idx + 2 < sizeof...(_Lock);
       using __try_locker = __try_lock_impl<_Idx + 1, __cont>;
       __try_locker::__do_try_lock(__locks, __idx);
              if (__idx == -1)
                __lock.release();
            }
 }
    };

  template<int _Idx>
    struct __try_lock_impl<_Idx, false>
    {
      template<typename... _Lock>
 static void
 __do_try_lock(tuple<_Lock&...>& __locks, int& __idx)
 {
          __idx = _Idx;
          auto __lock = std::__try_to_lock(std::get<_Idx>(__locks));
          if (__lock.owns_lock())
            {
              __idx = -1;
              __lock.release();
            }
 }
    };
# 636 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/mutex" 3
  template<typename _Lock1, typename _Lock2, typename... _Lock3>
    int
    try_lock(_Lock1& __l1, _Lock2& __l2, _Lock3&... __l3)
    {
      int __idx;
      auto __locks = std::tie(__l1, __l2, __l3...);
      __try_lock_impl<0>::__do_try_lock(__locks, __idx);
      return __idx;
    }
# 657 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/mutex" 3
  template<typename _L1, typename _L2, typename... _L3>
    void
    lock(_L1& __l1, _L2& __l2, _L3&... __l3)
    {
      while (true)
        {
          using __try_locker = __try_lock_impl<0, sizeof...(_L3) != 0>;
          unique_lock<_L1> __first(__l1);
          int __idx;
          auto __locks = std::tie(__l2, __l3...);
          __try_locker::__do_try_lock(__locks, __idx);
          if (__idx == -1)
            {
              __first.release();
              return;
            }
        }
    }



  struct once_flag
  {
  private:
    typedef __gthread_once_t __native_type;
    __native_type _M_once = 0;

  public:

    constexpr once_flag() noexcept = default;


    once_flag(const once_flag&) = delete;

    once_flag& operator=(const once_flag&) = delete;

    template<typename _Callable, typename... _Args>
      friend void
      call_once(once_flag& __once, _Callable&& __f, _Args&&... __args);
  };


  extern __thread void* __once_callable;
  extern __thread void (*__once_call)();

  template<typename _Callable>
    inline void
    __once_call_impl()
    {
      (*(_Callable*)__once_callable)();
    }
# 718 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/mutex" 3
  extern "C" void __once_proxy(void);


  template<typename _Callable, typename... _Args>
    void
    call_once(once_flag& __once, _Callable&& __f, _Args&&... __args)
    {

      auto __bound_functor = std::__bind_simple(std::forward<_Callable>(__f),
          std::forward<_Args>(__args)...);
      __once_callable = std::__addressof(__bound_functor);
      __once_call = &__once_call_impl<decltype(__bound_functor)>;
# 738 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/mutex" 3
      int __e = __gthread_once(&__once._M_once, &__once_proxy);






      if (__e)
 __throw_system_error(__e);
    }




}
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/future" 2 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/condition_variable" 1 3
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/condition_variable" 3
# 48 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/condition_variable" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 61 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/condition_variable" 3
  enum class cv_status { no_timeout, timeout };


  class condition_variable
  {
    typedef chrono::system_clock __clock_t;
    typedef __gthread_cond_t __native_type;


    __native_type _M_cond = { { 0, 0, 0, 0, 0, (void *) 0, 0, 0 } };




  public:
    typedef __native_type* native_handle_type;

    condition_variable() noexcept;
    ~condition_variable() noexcept;

    condition_variable(const condition_variable&) = delete;
    condition_variable& operator=(const condition_variable&) = delete;

    void
    notify_one() noexcept;

    void
    notify_all() noexcept;

    void
    wait(unique_lock<mutex>& __lock);

    template<typename _Predicate>
      void
      wait(unique_lock<mutex>& __lock, _Predicate __p)
      {
 while (!__p())
   wait(__lock);
      }

    template<typename _Duration>
      cv_status
      wait_until(unique_lock<mutex>& __lock,
   const chrono::time_point<__clock_t, _Duration>& __atime)
      { return __wait_until_impl(__lock, __atime); }

    template<typename _Clock, typename _Duration>
      cv_status
      wait_until(unique_lock<mutex>& __lock,
   const chrono::time_point<_Clock, _Duration>& __atime)
      {

 const typename _Clock::time_point __c_entry = _Clock::now();
 const __clock_t::time_point __s_entry = __clock_t::now();
 const auto __delta = __atime - __c_entry;
 const auto __s_atime = __s_entry + __delta;

 return __wait_until_impl(__lock, __s_atime);
      }

    template<typename _Clock, typename _Duration, typename _Predicate>
      bool
      wait_until(unique_lock<mutex>& __lock,
   const chrono::time_point<_Clock, _Duration>& __atime,
   _Predicate __p)
      {
 while (!__p())
   if (wait_until(__lock, __atime) == cv_status::timeout)
     return __p();
 return true;
      }

    template<typename _Rep, typename _Period>
      cv_status
      wait_for(unique_lock<mutex>& __lock,
        const chrono::duration<_Rep, _Period>& __rtime)
      { return wait_until(__lock, __clock_t::now() + __rtime); }

    template<typename _Rep, typename _Period, typename _Predicate>
      bool
      wait_for(unique_lock<mutex>& __lock,
        const chrono::duration<_Rep, _Period>& __rtime,
        _Predicate __p)
      { return wait_until(__lock, __clock_t::now() + __rtime, std::move(__p)); }

    native_handle_type
    native_handle()
    { return &_M_cond; }

  private:
    template<typename _Dur>
      cv_status
      __wait_until_impl(unique_lock<mutex>& __lock,
   const chrono::time_point<__clock_t, _Dur>& __atime)
      {
 auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
 auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

 __gthread_time_t __ts =
   {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

 __gthread_cond_timedwait(&_M_cond, __lock.mutex()->native_handle(),
     &__ts);

 return (__clock_t::now() < __atime
  ? cv_status::no_timeout : cv_status::timeout);
      }
  };

  void
  notify_all_at_thread_exit(condition_variable&, unique_lock<mutex>);

  struct __at_thread_exit_elt
  {
    __at_thread_exit_elt* _M_next;
    void (*_M_cb)(void*);
  };

  inline namespace _V2 {



  class condition_variable_any
  {
    typedef chrono::system_clock __clock_t;
    condition_variable _M_cond;
    shared_ptr<mutex> _M_mutex;


    template<typename _Lock>
      struct _Unlock
      {
 explicit _Unlock(_Lock& __lk) : _M_lock(__lk) { __lk.unlock(); }

 ~_Unlock() noexcept(false)
 {
   if (uncaught_exception())
     {
       try
       { _M_lock.lock(); }
       catch(const __cxxabiv1::__forced_unwind&)
       { throw; }
       catch(...)
       { }
     }
   else
     _M_lock.lock();
 }

 _Unlock(const _Unlock&) = delete;
 _Unlock& operator=(const _Unlock&) = delete;

 _Lock& _M_lock;
      };

  public:
    condition_variable_any() : _M_mutex(std::make_shared<mutex>()) { }
    ~condition_variable_any() = default;

    condition_variable_any(const condition_variable_any&) = delete;
    condition_variable_any& operator=(const condition_variable_any&) = delete;

    void
    notify_one() noexcept
    {
      lock_guard<mutex> __lock(*_M_mutex);
      _M_cond.notify_one();
    }

    void
    notify_all() noexcept
    {
      lock_guard<mutex> __lock(*_M_mutex);
      _M_cond.notify_all();
    }

    template<typename _Lock>
      void
      wait(_Lock& __lock)
      {
 shared_ptr<mutex> __mutex = _M_mutex;
 unique_lock<mutex> __my_lock(*__mutex);
 _Unlock<_Lock> __unlock(__lock);


 unique_lock<mutex> __my_lock2(std::move(__my_lock));
 _M_cond.wait(__my_lock2);
      }


    template<typename _Lock, typename _Predicate>
      void
      wait(_Lock& __lock, _Predicate __p)
      {
 while (!__p())
   wait(__lock);
      }

    template<typename _Lock, typename _Clock, typename _Duration>
      cv_status
      wait_until(_Lock& __lock,
   const chrono::time_point<_Clock, _Duration>& __atime)
      {
 shared_ptr<mutex> __mutex = _M_mutex;
 unique_lock<mutex> __my_lock(*__mutex);
 _Unlock<_Lock> __unlock(__lock);


 unique_lock<mutex> __my_lock2(std::move(__my_lock));
 return _M_cond.wait_until(__my_lock2, __atime);
      }

    template<typename _Lock, typename _Clock,
      typename _Duration, typename _Predicate>
      bool
      wait_until(_Lock& __lock,
   const chrono::time_point<_Clock, _Duration>& __atime,
   _Predicate __p)
      {
 while (!__p())
   if (wait_until(__lock, __atime) == cv_status::timeout)
     return __p();
 return true;
      }

    template<typename _Lock, typename _Rep, typename _Period>
      cv_status
      wait_for(_Lock& __lock, const chrono::duration<_Rep, _Period>& __rtime)
      { return wait_until(__lock, __clock_t::now() + __rtime); }

    template<typename _Lock, typename _Rep,
      typename _Period, typename _Predicate>
      bool
      wait_for(_Lock& __lock,
        const chrono::duration<_Rep, _Period>& __rtime, _Predicate __p)
      { return wait_until(__lock, __clock_t::now() + __rtime, std::move(__p)); }
  };

  }



}
# 42 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/future" 2 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/atomic" 1 3
# 36 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/atomic" 3







namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    struct atomic;



  template<>
  struct atomic<bool>
  {
  private:
    __atomic_base<bool> _M_base;

  public:
    atomic() noexcept = default;
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }

    bool
    operator=(bool __i) noexcept
    { return _M_base.operator=(__i); }

    bool
    operator=(bool __i) volatile noexcept
    { return _M_base.operator=(__i); }

    operator bool() const noexcept
    { return _M_base.load(); }

    operator bool() const volatile noexcept
    { return _M_base.load(); }

    bool
    is_lock_free() const noexcept { return _M_base.is_lock_free(); }

    bool
    is_lock_free() const volatile noexcept { return _M_base.is_lock_free(); }

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
    { _M_base.store(__i, __m); }

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
    { return _M_base.load(__m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const volatile noexcept
    { return _M_base.load(__m); }

    bool
    exchange(bool __i, memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.exchange(__i, __m); }

    bool
    exchange(bool __i,
      memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.exchange(__i, __m); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,
     memory_order __m2) noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,
     memory_order __m2) volatile noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2,
     memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2,
       memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,
       memory_order __m2) noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,
       memory_order __m2) volatile noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2,
       memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m); }
  };







  template<typename _Tp>
    struct atomic
    {
    private:

      static constexpr int _S_min_alignment
 = (sizeof(_Tp) & (sizeof(_Tp) - 1)) || sizeof(_Tp) > 16
 ? 0 : sizeof(_Tp);

      static constexpr int _S_alignment
        = _S_min_alignment > alignof(_Tp) ? _S_min_alignment : alignof(_Tp);

      alignas(_S_alignment) _Tp _M_i;

      static_assert(__is_trivially_copyable(_Tp),
      "std::atomic requires a trivially copyable type");

      static_assert(sizeof(_Tp) > 0,
      "Incomplete or zero-sized types are not supported");

    public:
      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }

      operator _Tp() const noexcept
      { return load(); }

      operator _Tp() const volatile noexcept
      { return load(); }

      _Tp
      operator=(_Tp __i) noexcept
      { store(__i); return __i; }

      _Tp
      operator=(_Tp __i) volatile noexcept
      { store(__i); return __i; }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      void
      store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
      { __atomic_store(&_M_i, &__i, __m); }

      void
      store(_Tp __i, memory_order __m = memory_order_seq_cst) volatile noexcept
      { __atomic_store(&_M_i, &__i, __m); }

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
        _Tp tmp;
 __atomic_load(&_M_i, &tmp, __m);
 return tmp;
      }

      _Tp
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
        _Tp tmp;
 __atomic_load(&_M_i, &tmp, __m);
 return tmp;
      }

      _Tp
      exchange(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
      {
        _Tp tmp;
 __atomic_exchange(&_M_i, &__i, &tmp, __m);
 return tmp;
      }

      _Tp
      exchange(_Tp __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
        _Tp tmp;
 __atomic_exchange(&_M_i, &__i, &tmp, __m);
 return tmp;
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,
       memory_order __f) noexcept
      {
 return __atomic_compare_exchange(&_M_i, &__e, &__i, true, __s, __f);
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,
       memory_order __f) volatile noexcept
      {
 return __atomic_compare_exchange(&_M_i, &__e, &__i, true, __s, __f);
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) noexcept
      { return compare_exchange_weak(__e, __i, __m,
                                     __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) volatile noexcept
      { return compare_exchange_weak(__e, __i, __m,
                                     __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
         memory_order __f) noexcept
      {
 return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
      }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
         memory_order __f) volatile noexcept
      {
 return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
      }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i,
          memory_order __m = memory_order_seq_cst) noexcept
      { return compare_exchange_strong(__e, __i, __m,
                                       __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) volatile noexcept
      { return compare_exchange_strong(__e, __i, __m,
                                       __cmpexch_failure_order(__m)); }
    };



  template<typename _Tp>
    struct atomic<_Tp*>
    {
      typedef _Tp* __pointer_type;
      typedef __atomic_base<_Tp*> __base_type;
      __base_type _M_b;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__pointer_type __p) noexcept : _M_b(__p) { }

      operator __pointer_type() const noexcept
      { return __pointer_type(_M_b); }

      operator __pointer_type() const volatile noexcept
      { return __pointer_type(_M_b); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      { return _M_b.operator=(__p); }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      { return _M_b.operator=(__p); }

      __pointer_type
      operator++(int) noexcept
      { return _M_b++; }

      __pointer_type
      operator++(int) volatile noexcept
      { return _M_b++; }

      __pointer_type
      operator--(int) noexcept
      { return _M_b--; }

      __pointer_type
      operator--(int) volatile noexcept
      { return _M_b--; }

      __pointer_type
      operator++() noexcept
      { return ++_M_b; }

      __pointer_type
      operator++() volatile noexcept
      { return ++_M_b; }

      __pointer_type
      operator--() noexcept
      { return --_M_b; }

      __pointer_type
      operator--() volatile noexcept
      { return --_M_b; }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      { return _M_b.operator+=(__d); }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      { return _M_b.operator+=(__d); }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      { return _M_b.operator-=(__d); }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      { return _M_b.operator-=(__d); }

      bool
      is_lock_free() const noexcept
      { return _M_b.is_lock_free(); }

      bool
      is_lock_free() const volatile noexcept
      { return _M_b.is_lock_free(); }

      void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.store(__p, __m); }

      void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.store(__p, __m); }

      __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { return _M_b.load(__m); }

      __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      { return _M_b.load(__m); }

      __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.exchange(__p, __m); }

      __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.exchange(__p, __m); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1, memory_order __m2) noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1, memory_order __m2) noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return _M_b.compare_exchange_strong(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return _M_b.compare_exchange_strong(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.fetch_add(__d, __m); }

      __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.fetch_add(__d, __m); }

      __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.fetch_sub(__d, __m); }

      __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.fetch_sub(__d, __m); }
    };



  template<>
    struct atomic<char> : __atomic_base<char>
    {
      typedef char __integral_type;
      typedef __atomic_base<char> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<signed char> : __atomic_base<signed char>
    {
      typedef signed char __integral_type;
      typedef __atomic_base<signed char> __base_type;

      atomic() noexcept= default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<unsigned char> : __atomic_base<unsigned char>
    {
      typedef unsigned char __integral_type;
      typedef __atomic_base<unsigned char> __base_type;

      atomic() noexcept= default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<short> : __atomic_base<short>
    {
      typedef short __integral_type;
      typedef __atomic_base<short> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<unsigned short> : __atomic_base<unsigned short>
    {
      typedef unsigned short __integral_type;
      typedef __atomic_base<unsigned short> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<int> : __atomic_base<int>
    {
      typedef int __integral_type;
      typedef __atomic_base<int> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<unsigned int> : __atomic_base<unsigned int>
    {
      typedef unsigned int __integral_type;
      typedef __atomic_base<unsigned int> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<long> : __atomic_base<long>
    {
      typedef long __integral_type;
      typedef __atomic_base<long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<unsigned long> : __atomic_base<unsigned long>
    {
      typedef unsigned long __integral_type;
      typedef __atomic_base<unsigned long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<long long> : __atomic_base<long long>
    {
      typedef long long __integral_type;
      typedef __atomic_base<long long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<unsigned long long> : __atomic_base<unsigned long long>
    {
      typedef unsigned long long __integral_type;
      typedef __atomic_base<unsigned long long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<wchar_t> : __atomic_base<wchar_t>
    {
      typedef wchar_t __integral_type;
      typedef __atomic_base<wchar_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<char16_t> : __atomic_base<char16_t>
    {
      typedef char16_t __integral_type;
      typedef __atomic_base<char16_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<char32_t> : __atomic_base<char32_t>
    {
      typedef char32_t __integral_type;
      typedef __atomic_base<char32_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };



  typedef atomic<bool> atomic_bool;


  typedef atomic<char> atomic_char;


  typedef atomic<signed char> atomic_schar;


  typedef atomic<unsigned char> atomic_uchar;


  typedef atomic<short> atomic_short;


  typedef atomic<unsigned short> atomic_ushort;


  typedef atomic<int> atomic_int;


  typedef atomic<unsigned int> atomic_uint;


  typedef atomic<long> atomic_long;


  typedef atomic<unsigned long> atomic_ulong;


  typedef atomic<long long> atomic_llong;


  typedef atomic<unsigned long long> atomic_ullong;


  typedef atomic<wchar_t> atomic_wchar_t;


  typedef atomic<char16_t> atomic_char16_t;


  typedef atomic<char32_t> atomic_char32_t;



  typedef atomic<int_least8_t> atomic_int_least8_t;


  typedef atomic<uint_least8_t> atomic_uint_least8_t;


  typedef atomic<int_least16_t> atomic_int_least16_t;


  typedef atomic<uint_least16_t> atomic_uint_least16_t;


  typedef atomic<int_least32_t> atomic_int_least32_t;


  typedef atomic<uint_least32_t> atomic_uint_least32_t;


  typedef atomic<int_least64_t> atomic_int_least64_t;


  typedef atomic<uint_least64_t> atomic_uint_least64_t;



  typedef atomic<int_fast8_t> atomic_int_fast8_t;


  typedef atomic<uint_fast8_t> atomic_uint_fast8_t;


  typedef atomic<int_fast16_t> atomic_int_fast16_t;


  typedef atomic<uint_fast16_t> atomic_uint_fast16_t;


  typedef atomic<int_fast32_t> atomic_int_fast32_t;


  typedef atomic<uint_fast32_t> atomic_uint_fast32_t;


  typedef atomic<int_fast64_t> atomic_int_fast64_t;


  typedef atomic<uint_fast64_t> atomic_uint_fast64_t;



  typedef atomic<intptr_t> atomic_intptr_t;


  typedef atomic<uintptr_t> atomic_uintptr_t;


  typedef atomic<size_t> atomic_size_t;


  typedef atomic<intmax_t> atomic_intmax_t;


  typedef atomic<uintmax_t> atomic_uintmax_t;


  typedef atomic<ptrdiff_t> atomic_ptrdiff_t;



  inline bool
  atomic_flag_test_and_set_explicit(atomic_flag* __a,
        memory_order __m) noexcept
  { return __a->test_and_set(__m); }

  inline bool
  atomic_flag_test_and_set_explicit(volatile atomic_flag* __a,
        memory_order __m) noexcept
  { return __a->test_and_set(__m); }

  inline void
  atomic_flag_clear_explicit(atomic_flag* __a, memory_order __m) noexcept
  { __a->clear(__m); }

  inline void
  atomic_flag_clear_explicit(volatile atomic_flag* __a,
        memory_order __m) noexcept
  { __a->clear(__m); }

  inline bool
  atomic_flag_test_and_set(atomic_flag* __a) noexcept
  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }

  inline bool
  atomic_flag_test_and_set(volatile atomic_flag* __a) noexcept
  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }

  inline void
  atomic_flag_clear(atomic_flag* __a) noexcept
  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }

  inline void
  atomic_flag_clear(volatile atomic_flag* __a) noexcept
  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }



  template<typename _ITp>
    inline bool
    atomic_is_lock_free(const atomic<_ITp>* __a) noexcept
    { return __a->is_lock_free(); }

  template<typename _ITp>
    inline bool
    atomic_is_lock_free(const volatile atomic<_ITp>* __a) noexcept
    { return __a->is_lock_free(); }

  template<typename _ITp>
    inline void
    atomic_init(atomic<_ITp>* __a, _ITp __i) noexcept
    { __a->store(__i, memory_order_relaxed); }

  template<typename _ITp>
    inline void
    atomic_init(volatile atomic<_ITp>* __a, _ITp __i) noexcept
    { __a->store(__i, memory_order_relaxed); }

  template<typename _ITp>
    inline void
    atomic_store_explicit(atomic<_ITp>* __a, _ITp __i,
     memory_order __m) noexcept
    { __a->store(__i, __m); }

  template<typename _ITp>
    inline void
    atomic_store_explicit(volatile atomic<_ITp>* __a, _ITp __i,
     memory_order __m) noexcept
    { __a->store(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_load_explicit(const atomic<_ITp>* __a, memory_order __m) noexcept
    { return __a->load(__m); }

  template<typename _ITp>
    inline _ITp
    atomic_load_explicit(const volatile atomic<_ITp>* __a,
    memory_order __m) noexcept
    { return __a->load(__m); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange_explicit(atomic<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->exchange(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange_explicit(volatile atomic<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->exchange(__i, __m); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak_explicit(atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2,
       memory_order __m1,
       memory_order __m2) noexcept
    { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak_explicit(volatile atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2,
       memory_order __m1,
       memory_order __m2) noexcept
    { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong_explicit(atomic<_ITp>* __a,
         _ITp* __i1, _ITp __i2,
         memory_order __m1,
         memory_order __m2) noexcept
    { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong_explicit(volatile atomic<_ITp>* __a,
         _ITp* __i1, _ITp __i2,
         memory_order __m1,
         memory_order __m2) noexcept
    { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }


  template<typename _ITp>
    inline void
    atomic_store(atomic<_ITp>* __a, _ITp __i) noexcept
    { atomic_store_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline void
    atomic_store(volatile atomic<_ITp>* __a, _ITp __i) noexcept
    { atomic_store_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_load(const atomic<_ITp>* __a) noexcept
    { return atomic_load_explicit(__a, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_load(const volatile atomic<_ITp>* __a) noexcept
    { return atomic_load_explicit(__a, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange(atomic<_ITp>* __a, _ITp __i) noexcept
    { return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange(volatile atomic<_ITp>* __a, _ITp __i) noexcept
    { return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak(atomic<_ITp>* __a,
     _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2,
         memory_order_seq_cst,
         memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak(volatile atomic<_ITp>* __a,
     _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2,
         memory_order_seq_cst,
         memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong(atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2,
           memory_order_seq_cst,
           memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong(volatile atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2,
           memory_order_seq_cst,
           memory_order_seq_cst);
    }





  template<typename _ITp>
    inline _ITp
    atomic_fetch_add_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_add(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_add(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_sub(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_sub(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_and(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_and(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or_explicit(__atomic_base<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->fetch_or(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->fetch_or(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_xor(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_xor(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }



  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add_explicit(atomic<_ITp*>* __a, ptrdiff_t __d,
         memory_order __m) noexcept
    { return __a->fetch_add(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add_explicit(volatile atomic<_ITp*>* __a, ptrdiff_t __d,
         memory_order __m) noexcept
    { return __a->fetch_add(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add(volatile atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_add(__d); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add(atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_add(__d); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub_explicit(volatile atomic<_ITp*>* __a,
         ptrdiff_t __d, memory_order __m) noexcept
    { return __a->fetch_sub(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub_explicit(atomic<_ITp*>* __a, ptrdiff_t __d,
         memory_order __m) noexcept
    { return __a->fetch_sub(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub(volatile atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_sub(__d); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub(atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_sub(__d); }



}
# 44 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/future" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_futex.h" 1 3
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_futex.h" 3
# 47 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_futex.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  struct __atomic_futex_unsigned_base
  {

    bool
    _M_futex_wait_until(unsigned *__addr, unsigned __val, bool __has_timeout,
 chrono::seconds __s, chrono::nanoseconds __ns);


    static void _M_futex_notify_all(unsigned* __addr);
  };

  template <unsigned _Waiter_bit = 0x80000000>
  class __atomic_futex_unsigned : __atomic_futex_unsigned_base
  {
    typedef chrono::system_clock __clock_t;


    atomic<unsigned> _M_data;

  public:
    explicit
    __atomic_futex_unsigned(unsigned __data) : _M_data(__data)
    { }

    inline __attribute__((__always_inline__)) unsigned
    _M_load(memory_order __mo)
    {
      return _M_data.load(__mo) & ~_Waiter_bit;
    }

  private:





    unsigned
    _M_load_and_test_until(unsigned __assumed, unsigned __operand,
 bool __equal, memory_order __mo, bool __has_timeout,
 chrono::seconds __s, chrono::nanoseconds __ns)
    {
      for (;;)
 {





   _M_data.fetch_or(_Waiter_bit, memory_order_relaxed);
   bool __ret = _M_futex_wait_until((unsigned*)(void*)&_M_data,
        __assumed | _Waiter_bit,
        __has_timeout, __s, __ns);

   __assumed = _M_load(__mo);
   if (!__ret || ((__operand == __assumed) == __equal))
     return __assumed;

 }
    }





    unsigned
    _M_load_and_test(unsigned __assumed, unsigned __operand,
 bool __equal, memory_order __mo)
    {
      return _M_load_and_test_until(__assumed, __operand, __equal, __mo,
        false, {}, {});
    }






    template<typename _Dur>
    unsigned
    _M_load_and_test_until_impl(unsigned __assumed, unsigned __operand,
 bool __equal, memory_order __mo,
 const chrono::time_point<__clock_t, _Dur>& __atime)
    {
      auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
      auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

      return _M_load_and_test_until(__assumed, __operand, __equal, __mo,
   true, __s.time_since_epoch(), __ns);
    }

  public:

    inline __attribute__((__always_inline__)) unsigned
    _M_load_when_not_equal(unsigned __val, memory_order __mo)
    {
      unsigned __i = _M_load(__mo);
      if ((__i & ~_Waiter_bit) != __val)
 return (__i & ~_Waiter_bit);

      return _M_load_and_test(__i, __val, false, __mo);
    }

    inline __attribute__((__always_inline__)) void
    _M_load_when_equal(unsigned __val, memory_order __mo)
    {
      unsigned __i = _M_load(__mo);
      if ((__i & ~_Waiter_bit) == __val)
 return;

      _M_load_and_test(__i, __val, true, __mo);
    }


    template<typename _Rep, typename _Period>
      inline __attribute__((__always_inline__)) bool
      _M_load_when_equal_for(unsigned __val, memory_order __mo,
   const chrono::duration<_Rep, _Period>& __rtime)
      {
 return _M_load_when_equal_until(__val, __mo,
     __clock_t::now() + __rtime);
      }


    template<typename _Clock, typename _Duration>
      inline __attribute__((__always_inline__)) bool
      _M_load_when_equal_until(unsigned __val, memory_order __mo,
   const chrono::time_point<_Clock, _Duration>& __atime)
      {

 const typename _Clock::time_point __c_entry = _Clock::now();
 const __clock_t::time_point __s_entry = __clock_t::now();
 const auto __delta = __atime - __c_entry;
 const auto __s_atime = __s_entry + __delta;
 return _M_load_when_equal_until(__val, __mo, __s_atime);
      }


    template<typename _Duration>
    inline __attribute__((__always_inline__)) bool
    _M_load_when_equal_until(unsigned __val, memory_order __mo,
 const chrono::time_point<__clock_t, _Duration>& __atime)
    {
      unsigned __i = _M_load(__mo);
      if ((__i & ~_Waiter_bit) == __val)
 return true;

      __i = _M_load_and_test_until_impl(__i, __val, true, __mo, __atime);
      return (__i & ~_Waiter_bit) == __val;
    }

    inline __attribute__((__always_inline__)) void
    _M_store_notify_all(unsigned __val, memory_order __mo)
    {
      unsigned* __futex = (unsigned *)(void *)&_M_data;
      if (_M_data.exchange(__val, __mo) & _Waiter_bit)
 _M_futex_notify_all(__futex);
    }
  };
# 288 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/atomic_futex.h" 3
}
# 45 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/future" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{
# 65 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/future" 3
  enum class future_errc
  {
    future_already_retrieved = 1,
    promise_already_satisfied,
    no_state,
    broken_promise
  };


  template<>
    struct is_error_code_enum<future_errc> : public true_type { };


  const error_category&
  future_category() noexcept;


  inline error_code
  make_error_code(future_errc __errc) noexcept
  { return error_code(static_cast<int>(__errc), future_category()); }


  inline error_condition
  make_error_condition(future_errc __errc) noexcept
  { return error_condition(static_cast<int>(__errc), future_category()); }





  class future_error : public logic_error
  {
    error_code _M_code;

  public:
    explicit future_error(error_code __ec)
    : logic_error("std::future_error: " + __ec.message()), _M_code(__ec)
    { }

    virtual ~future_error() noexcept;

    virtual const char*
    what() const noexcept;

    const error_code&
    code() const noexcept { return _M_code; }
  };


  template<typename _Res>
    class future;

  template<typename _Res>
    class shared_future;

  template<typename _Signature>
    class packaged_task;

  template<typename _Res>
    class promise;


  enum class launch
  {
    async = 1,
    deferred = 2
  };

  constexpr launch operator&(launch __x, launch __y)
  {
    return static_cast<launch>(
 static_cast<int>(__x) & static_cast<int>(__y));
  }

  constexpr launch operator|(launch __x, launch __y)
  {
    return static_cast<launch>(
 static_cast<int>(__x) | static_cast<int>(__y));
  }

  constexpr launch operator^(launch __x, launch __y)
  {
    return static_cast<launch>(
 static_cast<int>(__x) ^ static_cast<int>(__y));
  }

  constexpr launch operator~(launch __x)
  { return static_cast<launch>(~static_cast<int>(__x)); }

  inline launch& operator&=(launch& __x, launch __y)
  { return __x = __x & __y; }

  inline launch& operator|=(launch& __x, launch __y)
  { return __x = __x | __y; }

  inline launch& operator^=(launch& __x, launch __y)
  { return __x = __x ^ __y; }


  enum class future_status
  {
    ready,
    timeout,
    deferred
  };

  template<typename _Fn, typename... _Args>
    future<typename result_of<_Fn(_Args...)>::type>
    async(launch __policy, _Fn&& __fn, _Args&&... __args);

  template<typename _Fn, typename... _Args>
    future<typename result_of<_Fn(_Args...)>::type>
    async(_Fn&& __fn, _Args&&... __args);





  struct __future_base
  {

    struct _Result_base
    {
      exception_ptr _M_error;

      _Result_base(const _Result_base&) = delete;
      _Result_base& operator=(const _Result_base&) = delete;


      virtual void _M_destroy() = 0;

      struct _Deleter
      {
 void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
      };

    protected:
      _Result_base();
      virtual ~_Result_base();
    };


    template<typename _Res>
      using _Ptr = unique_ptr<_Res, _Result_base::_Deleter>;


    template<typename _Res>
      struct _Result : _Result_base
      {
      private:
 __gnu_cxx::__aligned_buffer<_Res> _M_storage;
 bool _M_initialized;

      public:
 typedef _Res result_type;

 _Result() noexcept : _M_initialized() { }

 ~_Result()
 {
   if (_M_initialized)
     _M_value().~_Res();
 }


 _Res&
 _M_value() noexcept { return *_M_storage._M_ptr(); }

 void
 _M_set(const _Res& __res)
 {
   ::new (_M_storage._M_addr()) _Res(__res);
   _M_initialized = true;
 }

 void
 _M_set(_Res&& __res)
 {
   ::new (_M_storage._M_addr()) _Res(std::move(__res));
   _M_initialized = true;
 }

      private:
 void _M_destroy() { delete this; }
    };


    template<typename _Res, typename _Alloc>
      struct _Result_alloc final : _Result<_Res>, _Alloc
      {
 using __allocator_type = __alloc_rebind<_Alloc, _Result_alloc>;

        explicit
 _Result_alloc(const _Alloc& __a) : _Result<_Res>(), _Alloc(__a)
 { }

      private:
 void _M_destroy()
 {
   __allocator_type __a(*this);
   __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
   this->~_Result_alloc();
 }
      };


    template<typename _Res, typename _Allocator>
      static _Ptr<_Result_alloc<_Res, _Allocator>>
      _S_allocate_result(const _Allocator& __a)
      {
 using __result_type = _Result_alloc<_Res, _Allocator>;
 typename __result_type::__allocator_type __a2(__a);
 auto __guard = std::__allocate_guarded(__a2);
 __result_type* __p = ::new((void*)__guard.get()) __result_type{__a};
 __guard = nullptr;
 return _Ptr<__result_type>(__p);
      }


    template<typename _Res, typename _Tp>
      static _Ptr<_Result<_Res>>
      _S_allocate_result(const std::allocator<_Tp>& __a)
      {
 return _Ptr<_Result<_Res>>(new _Result<_Res>);
      }




    class _State_baseV2
    {
      typedef _Ptr<_Result_base> _Ptr_type;

      enum _Status : unsigned {
 __not_ready,
 __ready
      };

      _Ptr_type _M_result;
      __atomic_futex_unsigned<> _M_status;
      atomic_flag _M_retrieved = { 0 };
      once_flag _M_once;

    public:
      _State_baseV2() noexcept : _M_result(), _M_status(_Status::__not_ready)
 { }
      _State_baseV2(const _State_baseV2&) = delete;
      _State_baseV2& operator=(const _State_baseV2&) = delete;
      virtual ~_State_baseV2() = default;

      _Result_base&
      wait()
      {

 _M_complete_async();


 _M_status._M_load_when_equal(_Status::__ready, memory_order_acquire);
 return *_M_result;
      }

      template<typename _Rep, typename _Period>
        future_status
        wait_for(const chrono::duration<_Rep, _Period>& __rel)
        {


   if (_M_status._M_load(memory_order_acquire) == _Status::__ready)
     return future_status::ready;
   if (_M_is_deferred_future())
     return future_status::deferred;
   if (_M_status._M_load_when_equal_for(_Status::__ready,
       memory_order_acquire, __rel))
     {
# 348 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/future" 3
       _M_complete_async();

       return future_status::ready;
     }
   return future_status::timeout;
 }

      template<typename _Clock, typename _Duration>
        future_status
        wait_until(const chrono::time_point<_Clock, _Duration>& __abs)
        {


   if (_M_status._M_load(memory_order_acquire) == _Status::__ready)
     return future_status::ready;
   if (_M_is_deferred_future())
     return future_status::deferred;
   if (_M_status._M_load_when_equal_until(_Status::__ready,
       memory_order_acquire, __abs))
     {



       _M_complete_async();

       return future_status::ready;
     }
   return future_status::timeout;
 }



      void
      _M_set_result(function<_Ptr_type()> __res, bool __ignore_failure = false)
      {
 bool __did_set = false;


 call_once(_M_once, &_State_baseV2::_M_do_set, this,
    std::__addressof(__res), std::__addressof(__did_set));
 if (__did_set)

   _M_status._M_store_notify_all(_Status::__ready,
     memory_order_release);
 else if (!__ignore_failure)
          __throw_future_error(int(future_errc::promise_already_satisfied));
      }




      void
      _M_set_delayed_result(function<_Ptr_type()> __res,
       weak_ptr<_State_baseV2> __self)
      {
 bool __did_set = false;
 unique_ptr<_Make_ready> __mr{new _Make_ready};


 call_once(_M_once, &_State_baseV2::_M_do_set, this,
    std::__addressof(__res), std::__addressof(__did_set));
 if (!__did_set)
          __throw_future_error(int(future_errc::promise_already_satisfied));
 __mr->_M_shared_state = std::move(__self);
 __mr->_M_set();
 __mr.release();
      }


      void
      _M_break_promise(_Ptr_type __res)
      {
 if (static_cast<bool>(__res))
   {
     error_code __ec(make_error_code(future_errc::broken_promise));
     __res->_M_error = make_exception_ptr(future_error(__ec));




     _M_result.swap(__res);

     _M_status._M_store_notify_all(_Status::__ready,
       memory_order_release);
   }
      }


      void
      _M_set_retrieved_flag()
      {
 if (_M_retrieved.test_and_set())
   __throw_future_error(int(future_errc::future_already_retrieved));
      }

      template<typename _Res, typename _Arg>
        struct _Setter;


      template<typename _Res, typename _Arg>
        struct _Setter<_Res, _Arg&>
        {


          static_assert(is_same<_Res, _Arg&>::value
              || is_same<const _Res, _Arg>::value,
              "Invalid specialisation");


          typename promise<_Res>::_Ptr_type operator()() const
          {
            _State_baseV2::_S_check(_M_promise->_M_future);
            _M_promise->_M_storage->_M_set(*_M_arg);
            return std::move(_M_promise->_M_storage);
          }
          promise<_Res>* _M_promise;
          _Arg* _M_arg;
        };


      template<typename _Res>
        struct _Setter<_Res, _Res&&>
        {

          typename promise<_Res>::_Ptr_type operator()() const
          {
            _State_baseV2::_S_check(_M_promise->_M_future);
            _M_promise->_M_storage->_M_set(std::move(*_M_arg));
            return std::move(_M_promise->_M_storage);
          }
          promise<_Res>* _M_promise;
          _Res* _M_arg;
        };

      struct __exception_ptr_tag { };


      template<typename _Res>
        struct _Setter<_Res, __exception_ptr_tag>
        {

          typename promise<_Res>::_Ptr_type operator()() const
          {
            _State_baseV2::_S_check(_M_promise->_M_future);
            _M_promise->_M_storage->_M_error = *_M_ex;
            return std::move(_M_promise->_M_storage);
          }

          promise<_Res>* _M_promise;
          exception_ptr* _M_ex;
        };

      template<typename _Res, typename _Arg>
        static _Setter<_Res, _Arg&&>
        __setter(promise<_Res>* __prom, _Arg&& __arg)
        {
          return _Setter<_Res, _Arg&&>{ __prom, &__arg };
        }

      template<typename _Res>
        static _Setter<_Res, __exception_ptr_tag>
        __setter(exception_ptr& __ex, promise<_Res>* __prom)
        {
          return _Setter<_Res, __exception_ptr_tag>{ __prom, &__ex };
        }

      template<typename _Tp>
        static void
        _S_check(const shared_ptr<_Tp>& __p)
        {
          if (!static_cast<bool>(__p))
            __throw_future_error((int)future_errc::no_state);
        }

    private:

      void
      _M_do_set(function<_Ptr_type()>* __f, bool* __did_set)
      {
        _Ptr_type __res = (*__f)();



 *__did_set = true;
        _M_result.swap(__res);
      }


      virtual void _M_complete_async() { }


      virtual bool _M_is_deferred_future() const { return false; }

      struct _Make_ready final : __at_thread_exit_elt
      {
 weak_ptr<_State_baseV2> _M_shared_state;
 static void _S_run(void*);
 void _M_set();
      };
    };





    using _State_base = _State_baseV2;
    class _Async_state_commonV2;


    template<typename _BoundFn, typename = typename _BoundFn::result_type>
      class _Deferred_state;

    template<typename _BoundFn, typename = typename _BoundFn::result_type>
      class _Async_state_impl;

    template<typename _Signature>
      class _Task_state_base;

    template<typename _Fn, typename _Alloc, typename _Signature>
      class _Task_state;

    template<typename _BoundFn>
      static std::shared_ptr<_State_base>
      _S_make_deferred_state(_BoundFn&& __fn);

    template<typename _BoundFn>
      static std::shared_ptr<_State_base>
      _S_make_async_state(_BoundFn&& __fn);

    template<typename _Res_ptr, typename _Fn,
      typename _Res = typename _Res_ptr::element_type::result_type>
      struct _Task_setter;

    template<typename _Res_ptr, typename _BoundFn>
      static _Task_setter<_Res_ptr, _BoundFn>
      _S_task_setter(_Res_ptr& __ptr, _BoundFn& __call)
      {
 return { std::__addressof(__ptr), std::__addressof(__call) };
      }
  };


  template<typename _Res>
    struct __future_base::_Result<_Res&> : __future_base::_Result_base
    {
      typedef _Res& result_type;

      _Result() noexcept : _M_value_ptr() { }

      void
      _M_set(_Res& __res) noexcept
      { _M_value_ptr = std::addressof(__res); }

      _Res& _M_get() noexcept { return *_M_value_ptr; }

    private:
      _Res* _M_value_ptr;

      void _M_destroy() { delete this; }
    };


  template<>
    struct __future_base::_Result<void> : __future_base::_Result_base
    {
      typedef void result_type;

    private:
      void _M_destroy() { delete this; }
    };




  template<typename _Res, typename _Arg>
    struct __is_location_invariant
    <__future_base::_State_base::_Setter<_Res, _Arg>>
    : true_type { };


  template<typename _Res_ptr, typename _Fn, typename _Res>
    struct __is_location_invariant
    <__future_base::_Task_setter<_Res_ptr, _Fn, _Res>>
    : true_type { };


  template<typename _Res>
    class __basic_future : public __future_base
    {
    protected:
      typedef shared_ptr<_State_base> __state_type;
      typedef __future_base::_Result<_Res>& __result_type;

    private:
      __state_type _M_state;

    public:

      __basic_future(const __basic_future&) = delete;
      __basic_future& operator=(const __basic_future&) = delete;

      bool
      valid() const noexcept { return static_cast<bool>(_M_state); }

      void
      wait() const
      {
        _State_base::_S_check(_M_state);
        _M_state->wait();
      }

      template<typename _Rep, typename _Period>
        future_status
        wait_for(const chrono::duration<_Rep, _Period>& __rel) const
        {
          _State_base::_S_check(_M_state);
          return _M_state->wait_for(__rel);
        }

      template<typename _Clock, typename _Duration>
        future_status
        wait_until(const chrono::time_point<_Clock, _Duration>& __abs) const
        {
          _State_base::_S_check(_M_state);
          return _M_state->wait_until(__abs);
        }

    protected:

      __result_type
      _M_get_result() const
      {
        _State_base::_S_check(_M_state);
        _Result_base& __res = _M_state->wait();
        if (!(__res._M_error == 0))
          rethrow_exception(__res._M_error);
        return static_cast<__result_type>(__res);
      }

      void _M_swap(__basic_future& __that) noexcept
      {
        _M_state.swap(__that._M_state);
      }


      explicit
      __basic_future(const __state_type& __state) : _M_state(__state)
      {
        _State_base::_S_check(_M_state);
        _M_state->_M_set_retrieved_flag();
      }


      explicit
      __basic_future(const shared_future<_Res>&) noexcept;


      explicit
      __basic_future(shared_future<_Res>&&) noexcept;


      explicit
      __basic_future(future<_Res>&&) noexcept;

      constexpr __basic_future() noexcept : _M_state() { }

      struct _Reset
      {
        explicit _Reset(__basic_future& __fut) noexcept : _M_fut(__fut) { }
        ~_Reset() { _M_fut._M_state.reset(); }
        __basic_future& _M_fut;
      };
    };



  template<typename _Res>
    class future : public __basic_future<_Res>
    {
      friend class promise<_Res>;
      template<typename> friend class packaged_task;
      template<typename _Fn, typename... _Args>
        friend future<typename result_of<_Fn(_Args...)>::type>
        async(launch, _Fn&&, _Args&&...);

      typedef __basic_future<_Res> _Base_type;
      typedef typename _Base_type::__state_type __state_type;

      explicit
      future(const __state_type& __state) : _Base_type(__state) { }

    public:
      constexpr future() noexcept : _Base_type() { }


      future(future&& __uf) noexcept : _Base_type(std::move(__uf)) { }


      future(const future&) = delete;
      future& operator=(const future&) = delete;

      future& operator=(future&& __fut) noexcept
      {
        future(std::move(__fut))._M_swap(*this);
        return *this;
      }


      _Res
      get()
      {
        typename _Base_type::_Reset __reset(*this);
        return std::move(this->_M_get_result()._M_value());
      }

      shared_future<_Res> share();
    };


  template<typename _Res>
    class future<_Res&> : public __basic_future<_Res&>
    {
      friend class promise<_Res&>;
      template<typename> friend class packaged_task;
      template<typename _Fn, typename... _Args>
        friend future<typename result_of<_Fn(_Args...)>::type>
        async(launch, _Fn&&, _Args&&...);

      typedef __basic_future<_Res&> _Base_type;
      typedef typename _Base_type::__state_type __state_type;

      explicit
      future(const __state_type& __state) : _Base_type(__state) { }

    public:
      constexpr future() noexcept : _Base_type() { }


      future(future&& __uf) noexcept : _Base_type(std::move(__uf)) { }


      future(const future&) = delete;
      future& operator=(const future&) = delete;

      future& operator=(future&& __fut) noexcept
      {
        future(std::move(__fut))._M_swap(*this);
        return *this;
      }


      _Res&
      get()
      {
        typename _Base_type::_Reset __reset(*this);
        return this->_M_get_result()._M_get();
      }

      shared_future<_Res&> share();
    };


  template<>
    class future<void> : public __basic_future<void>
    {
      friend class promise<void>;
      template<typename> friend class packaged_task;
      template<typename _Fn, typename... _Args>
        friend future<typename result_of<_Fn(_Args...)>::type>
        async(launch, _Fn&&, _Args&&...);

      typedef __basic_future<void> _Base_type;
      typedef typename _Base_type::__state_type __state_type;

      explicit
      future(const __state_type& __state) : _Base_type(__state) { }

    public:
      constexpr future() noexcept : _Base_type() { }


      future(future&& __uf) noexcept : _Base_type(std::move(__uf)) { }


      future(const future&) = delete;
      future& operator=(const future&) = delete;

      future& operator=(future&& __fut) noexcept
      {
        future(std::move(__fut))._M_swap(*this);
        return *this;
      }


      void
      get()
      {
        typename _Base_type::_Reset __reset(*this);
        this->_M_get_result();
      }

      shared_future<void> share();
    };



  template<typename _Res>
    class shared_future : public __basic_future<_Res>
    {
      typedef __basic_future<_Res> _Base_type;

    public:
      constexpr shared_future() noexcept : _Base_type() { }


      shared_future(const shared_future& __sf) : _Base_type(__sf) { }


      shared_future(future<_Res>&& __uf) noexcept
      : _Base_type(std::move(__uf))
      { }


      shared_future(shared_future&& __sf) noexcept
      : _Base_type(std::move(__sf))
      { }

      shared_future& operator=(const shared_future& __sf)
      {
        shared_future(__sf)._M_swap(*this);
        return *this;
      }

      shared_future& operator=(shared_future&& __sf) noexcept
      {
        shared_future(std::move(__sf))._M_swap(*this);
        return *this;
      }


      const _Res&
      get() const { return this->_M_get_result()._M_value(); }
    };


  template<typename _Res>
    class shared_future<_Res&> : public __basic_future<_Res&>
    {
      typedef __basic_future<_Res&> _Base_type;

    public:
      constexpr shared_future() noexcept : _Base_type() { }


      shared_future(const shared_future& __sf) : _Base_type(__sf) { }


      shared_future(future<_Res&>&& __uf) noexcept
      : _Base_type(std::move(__uf))
      { }


      shared_future(shared_future&& __sf) noexcept
      : _Base_type(std::move(__sf))
      { }

      shared_future& operator=(const shared_future& __sf)
      {
        shared_future(__sf)._M_swap(*this);
        return *this;
      }

      shared_future& operator=(shared_future&& __sf) noexcept
      {
        shared_future(std::move(__sf))._M_swap(*this);
        return *this;
      }


      _Res&
      get() const { return this->_M_get_result()._M_get(); }
    };


  template<>
    class shared_future<void> : public __basic_future<void>
    {
      typedef __basic_future<void> _Base_type;

    public:
      constexpr shared_future() noexcept : _Base_type() { }


      shared_future(const shared_future& __sf) : _Base_type(__sf) { }


      shared_future(future<void>&& __uf) noexcept
      : _Base_type(std::move(__uf))
      { }


      shared_future(shared_future&& __sf) noexcept
      : _Base_type(std::move(__sf))
      { }

      shared_future& operator=(const shared_future& __sf)
      {
        shared_future(__sf)._M_swap(*this);
        return *this;
      }

      shared_future& operator=(shared_future&& __sf) noexcept
      {
        shared_future(std::move(__sf))._M_swap(*this);
        return *this;
      }


      void
      get() const { this->_M_get_result(); }
    };


  template<typename _Res>
    inline __basic_future<_Res>::
    __basic_future(const shared_future<_Res>& __sf) noexcept
    : _M_state(__sf._M_state)
    { }

  template<typename _Res>
    inline __basic_future<_Res>::
    __basic_future(shared_future<_Res>&& __sf) noexcept
    : _M_state(std::move(__sf._M_state))
    { }

  template<typename _Res>
    inline __basic_future<_Res>::
    __basic_future(future<_Res>&& __uf) noexcept
    : _M_state(std::move(__uf._M_state))
    { }

  template<typename _Res>
    inline shared_future<_Res>
    future<_Res>::share()
    { return shared_future<_Res>(std::move(*this)); }

  template<typename _Res>
    inline shared_future<_Res&>
    future<_Res&>::share()
    { return shared_future<_Res&>(std::move(*this)); }

  inline shared_future<void>
  future<void>::share()
  { return shared_future<void>(std::move(*this)); }


  template<typename _Res>
    class promise
    {
      typedef __future_base::_State_base _State;
      typedef __future_base::_Result<_Res> _Res_type;
      typedef __future_base::_Ptr<_Res_type> _Ptr_type;
      template<typename, typename> friend class _State::_Setter;

      shared_ptr<_State> _M_future;
      _Ptr_type _M_storage;

    public:
      promise()
      : _M_future(std::make_shared<_State>()),
 _M_storage(new _Res_type())
      { }

      promise(promise&& __rhs) noexcept
      : _M_future(std::move(__rhs._M_future)),
 _M_storage(std::move(__rhs._M_storage))
      { }

      template<typename _Allocator>
        promise(allocator_arg_t, const _Allocator& __a)
        : _M_future(std::allocate_shared<_State>(__a)),
   _M_storage(__future_base::_S_allocate_result<_Res>(__a))
        { }

      template<typename _Allocator>
        promise(allocator_arg_t, const _Allocator&, promise&& __rhs)
        : _M_future(std::move(__rhs._M_future)),
   _M_storage(std::move(__rhs._M_storage))
        { }

      promise(const promise&) = delete;

      ~promise()
      {
        if (static_cast<bool>(_M_future) && !_M_future.unique())
          _M_future->_M_break_promise(std::move(_M_storage));
      }


      promise&
      operator=(promise&& __rhs) noexcept
      {
        promise(std::move(__rhs)).swap(*this);
        return *this;
      }

      promise& operator=(const promise&) = delete;

      void
      swap(promise& __rhs) noexcept
      {
        _M_future.swap(__rhs._M_future);
        _M_storage.swap(__rhs._M_storage);
      }


      future<_Res>
      get_future()
      { return future<_Res>(_M_future); }


      void
      set_value(const _Res& __r)
      { _M_future->_M_set_result(_State::__setter(this, __r)); }

      void
      set_value(_Res&& __r)
      { _M_future->_M_set_result(_State::__setter(this, std::move(__r))); }

      void
      set_exception(exception_ptr __p)
      { _M_future->_M_set_result(_State::__setter(__p, this)); }

      void
      set_value_at_thread_exit(const _Res& __r)
      {
 _M_future->_M_set_delayed_result(_State::__setter(this, __r),
      _M_future);
      }

      void
      set_value_at_thread_exit(_Res&& __r)
      {
 _M_future->_M_set_delayed_result(
     _State::__setter(this, std::move(__r)), _M_future);
      }

      void
      set_exception_at_thread_exit(exception_ptr __p)
      {
 _M_future->_M_set_delayed_result(_State::__setter(__p, this),
      _M_future);
      }
    };

  template<typename _Res>
    inline void
    swap(promise<_Res>& __x, promise<_Res>& __y) noexcept
    { __x.swap(__y); }

  template<typename _Res, typename _Alloc>
    struct uses_allocator<promise<_Res>, _Alloc>
    : public true_type { };



  template<typename _Res>
    class promise<_Res&>
    {
      typedef __future_base::_State_base _State;
      typedef __future_base::_Result<_Res&> _Res_type;
      typedef __future_base::_Ptr<_Res_type> _Ptr_type;
      template<typename, typename> friend class _State::_Setter;

      shared_ptr<_State> _M_future;
      _Ptr_type _M_storage;

    public:
      promise()
      : _M_future(std::make_shared<_State>()),
 _M_storage(new _Res_type())
      { }

      promise(promise&& __rhs) noexcept
      : _M_future(std::move(__rhs._M_future)),
 _M_storage(std::move(__rhs._M_storage))
      { }

      template<typename _Allocator>
        promise(allocator_arg_t, const _Allocator& __a)
        : _M_future(std::allocate_shared<_State>(__a)),
   _M_storage(__future_base::_S_allocate_result<_Res&>(__a))
        { }

      template<typename _Allocator>
        promise(allocator_arg_t, const _Allocator&, promise&& __rhs)
        : _M_future(std::move(__rhs._M_future)),
   _M_storage(std::move(__rhs._M_storage))
        { }

      promise(const promise&) = delete;

      ~promise()
      {
        if (static_cast<bool>(_M_future) && !_M_future.unique())
          _M_future->_M_break_promise(std::move(_M_storage));
      }


      promise&
      operator=(promise&& __rhs) noexcept
      {
        promise(std::move(__rhs)).swap(*this);
        return *this;
      }

      promise& operator=(const promise&) = delete;

      void
      swap(promise& __rhs) noexcept
      {
        _M_future.swap(__rhs._M_future);
        _M_storage.swap(__rhs._M_storage);
      }


      future<_Res&>
      get_future()
      { return future<_Res&>(_M_future); }


      void
      set_value(_Res& __r)
      { _M_future->_M_set_result(_State::__setter(this, __r)); }

      void
      set_exception(exception_ptr __p)
      { _M_future->_M_set_result(_State::__setter(__p, this)); }

      void
      set_value_at_thread_exit(_Res& __r)
      {
 _M_future->_M_set_delayed_result(_State::__setter(this, __r),
      _M_future);
      }

      void
      set_exception_at_thread_exit(exception_ptr __p)
      {
 _M_future->_M_set_delayed_result(_State::__setter(__p, this),
      _M_future);
      }
    };


  template<>
    class promise<void>
    {
      typedef __future_base::_State_base _State;
      typedef __future_base::_Result<void> _Res_type;
      typedef __future_base::_Ptr<_Res_type> _Ptr_type;
      template<typename, typename> friend class _State::_Setter;

      shared_ptr<_State> _M_future;
      _Ptr_type _M_storage;

    public:
      promise()
      : _M_future(std::make_shared<_State>()),
 _M_storage(new _Res_type())
      { }

      promise(promise&& __rhs) noexcept
      : _M_future(std::move(__rhs._M_future)),
 _M_storage(std::move(__rhs._M_storage))
      { }

      template<typename _Allocator>
        promise(allocator_arg_t, const _Allocator& __a)
        : _M_future(std::allocate_shared<_State>(__a)),
   _M_storage(__future_base::_S_allocate_result<void>(__a))
        { }



      template<typename _Allocator>
        promise(allocator_arg_t, const _Allocator&, promise&& __rhs)
        : _M_future(std::move(__rhs._M_future)),
   _M_storage(std::move(__rhs._M_storage))
        { }

      promise(const promise&) = delete;

      ~promise()
      {
        if (static_cast<bool>(_M_future) && !_M_future.unique())
          _M_future->_M_break_promise(std::move(_M_storage));
      }


      promise&
      operator=(promise&& __rhs) noexcept
      {
        promise(std::move(__rhs)).swap(*this);
        return *this;
      }

      promise& operator=(const promise&) = delete;

      void
      swap(promise& __rhs) noexcept
      {
        _M_future.swap(__rhs._M_future);
        _M_storage.swap(__rhs._M_storage);
      }


      future<void>
      get_future()
      { return future<void>(_M_future); }


      void set_value();

      void
      set_exception(exception_ptr __p)
      { _M_future->_M_set_result(_State::__setter(__p, this)); }

      void
      set_value_at_thread_exit();

      void
      set_exception_at_thread_exit(exception_ptr __p)
      {
 _M_future->_M_set_delayed_result(_State::__setter(__p, this),
      _M_future);
      }
    };


  template<>
    struct __future_base::_State_base::_Setter<void, void>
    {
      promise<void>::_Ptr_type operator()() const
      {
        _State_base::_S_check(_M_promise->_M_future);
        return std::move(_M_promise->_M_storage);
      }

      promise<void>* _M_promise;
    };

  inline void
  promise<void>::set_value()
  { _M_future->_M_set_result(_State::_Setter<void, void>{ this }); }

  inline void
  promise<void>::set_value_at_thread_exit()
  {
    _M_future->_M_set_delayed_result(_State::_Setter<void, void>{this},
         _M_future);
  }

  template<typename _Ptr_type, typename _Fn, typename _Res>
    struct __future_base::_Task_setter
    {

      _Ptr_type operator()() const
      {
 try
   {
     (*_M_result)->_M_set((*_M_fn)());
   }
 catch(const __cxxabiv1::__forced_unwind&)
   {
     throw;
   }
 catch(...)
   {
     (*_M_result)->_M_error = current_exception();
   }
 return std::move(*_M_result);
      }
      _Ptr_type* _M_result;
      _Fn* _M_fn;
    };

  template<typename _Ptr_type, typename _Fn>
    struct __future_base::_Task_setter<_Ptr_type, _Fn, void>
    {
      _Ptr_type operator()() const
      {
 try
   {
     (*_M_fn)();
   }
 catch(const __cxxabiv1::__forced_unwind&)
   {
     throw;
   }
 catch(...)
   {
     (*_M_result)->_M_error = current_exception();
   }
 return std::move(*_M_result);
      }
      _Ptr_type* _M_result;
      _Fn* _M_fn;
    };


  template<typename _Res, typename... _Args>
    struct __future_base::_Task_state_base<_Res(_Args...)>
    : __future_base::_State_base
    {
      typedef _Res _Res_type;

      template<typename _Alloc>
 _Task_state_base(const _Alloc& __a)
 : _M_result(_S_allocate_result<_Res>(__a))
 { }


      virtual void
      _M_run(_Args&&... __args) = 0;


      virtual void
      _M_run_delayed(_Args&&... __args, weak_ptr<_State_base>) = 0;

      virtual shared_ptr<_Task_state_base>
      _M_reset() = 0;

      typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;
      _Ptr_type _M_result;
    };


  template<typename _Fn, typename _Alloc, typename _Res, typename... _Args>
    struct __future_base::_Task_state<_Fn, _Alloc, _Res(_Args...)> final
    : __future_base::_Task_state_base<_Res(_Args...)>
    {
      template<typename _Fn2>
 _Task_state(_Fn2&& __fn, const _Alloc& __a)
 : _Task_state_base<_Res(_Args...)>(__a),
   _M_impl(std::forward<_Fn2>(__fn), __a)
 { }

    private:
      virtual void
      _M_run(_Args&&... __args)
      {

 auto __boundfn = std::__bind_simple(std::ref(_M_impl._M_fn),
     _S_maybe_wrap_ref(std::forward<_Args>(__args))...);
 this->_M_set_result(_S_task_setter(this->_M_result, __boundfn));
      }

      virtual void
      _M_run_delayed(_Args&&... __args, weak_ptr<_State_base> __self)
      {

 auto __boundfn = std::__bind_simple(std::ref(_M_impl._M_fn),
     _S_maybe_wrap_ref(std::forward<_Args>(__args))...);
 this->_M_set_delayed_result(_S_task_setter(this->_M_result, __boundfn),
        std::move(__self));
      }

      virtual shared_ptr<_Task_state_base<_Res(_Args...)>>
      _M_reset();

      template<typename _Tp>
 static reference_wrapper<_Tp>
 _S_maybe_wrap_ref(_Tp& __t)
 { return std::ref(__t); }

      template<typename _Tp>
 static
 typename enable_if<!is_lvalue_reference<_Tp>::value, _Tp>::type&&
 _S_maybe_wrap_ref(_Tp&& __t)
 { return std::forward<_Tp>(__t); }

      struct _Impl : _Alloc
      {
 template<typename _Fn2>
   _Impl(_Fn2&& __fn, const _Alloc& __a)
   : _Alloc(__a), _M_fn(std::forward<_Fn2>(__fn)) { }
 _Fn _M_fn;
      } _M_impl;
    };

  template<typename _Signature, typename _Fn, typename _Alloc>
    static shared_ptr<__future_base::_Task_state_base<_Signature>>
    __create_task_state(_Fn&& __fn, const _Alloc& __a)
    {
      typedef typename decay<_Fn>::type _Fn2;
      typedef __future_base::_Task_state<_Fn2, _Alloc, _Signature> _State;
      return std::allocate_shared<_State>(__a, std::forward<_Fn>(__fn), __a);
    }

  template<typename _Fn, typename _Alloc, typename _Res, typename... _Args>
    shared_ptr<__future_base::_Task_state_base<_Res(_Args...)>>
    __future_base::_Task_state<_Fn, _Alloc, _Res(_Args...)>::_M_reset()
    {
      return __create_task_state<_Res(_Args...)>(std::move(_M_impl._M_fn),
       static_cast<_Alloc&>(_M_impl));
    }

  template<typename _Task, typename _Fn, bool
    = is_same<_Task, typename decay<_Fn>::type>::value>
    struct __constrain_pkgdtask
    { typedef void __type; };

  template<typename _Task, typename _Fn>
    struct __constrain_pkgdtask<_Task, _Fn, true>
    { };


  template<typename _Res, typename... _ArgTypes>
    class packaged_task<_Res(_ArgTypes...)>
    {
      typedef __future_base::_Task_state_base<_Res(_ArgTypes...)> _State_type;
      shared_ptr<_State_type> _M_state;

    public:

      packaged_task() noexcept { }



      template<typename _Allocator>
 packaged_task(allocator_arg_t, const _Allocator& __a) noexcept
 { }

      template<typename _Fn, typename = typename
        __constrain_pkgdtask<packaged_task, _Fn>::__type>
 explicit
 packaged_task(_Fn&& __fn)
 : packaged_task(allocator_arg, std::allocator<int>(),
   std::forward<_Fn>(__fn))
 { }



      template<typename _Fn, typename _Alloc, typename = typename
        __constrain_pkgdtask<packaged_task, _Fn>::__type>
 explicit
 packaged_task(allocator_arg_t, const _Alloc& __a, _Fn&& __fn)
 : _M_state(__create_task_state<_Res(_ArgTypes...)>(
      std::forward<_Fn>(__fn), __a))
 { }

      ~packaged_task()
      {
        if (static_cast<bool>(_M_state) && !_M_state.unique())
   _M_state->_M_break_promise(std::move(_M_state->_M_result));
      }


      packaged_task(const packaged_task&) = delete;
      packaged_task& operator=(const packaged_task&) = delete;

      template<typename _Allocator>
 packaged_task(allocator_arg_t, const _Allocator&,
        const packaged_task&) = delete;


      packaged_task(packaged_task&& __other) noexcept
      { this->swap(__other); }

      template<typename _Allocator>
 packaged_task(allocator_arg_t, const _Allocator&,
        packaged_task&& __other) noexcept
 { this->swap(__other); }

      packaged_task& operator=(packaged_task&& __other) noexcept
      {
 packaged_task(std::move(__other)).swap(*this);
 return *this;
      }

      void
      swap(packaged_task& __other) noexcept
      { _M_state.swap(__other._M_state); }

      bool
      valid() const noexcept
      { return static_cast<bool>(_M_state); }


      future<_Res>
      get_future()
      { return future<_Res>(_M_state); }


      void
      operator()(_ArgTypes... __args)
      {
 __future_base::_State_base::_S_check(_M_state);
 _M_state->_M_run(std::forward<_ArgTypes>(__args)...);
      }

      void
      make_ready_at_thread_exit(_ArgTypes... __args)
      {
 __future_base::_State_base::_S_check(_M_state);
 _M_state->_M_run_delayed(std::forward<_ArgTypes>(__args)..., _M_state);
      }

      void
      reset()
      {
 __future_base::_State_base::_S_check(_M_state);
 packaged_task __tmp;
 __tmp._M_state = _M_state;
 _M_state = _M_state->_M_reset();
      }
    };


  template<typename _Res, typename... _ArgTypes>
    inline void
    swap(packaged_task<_Res(_ArgTypes...)>& __x,
  packaged_task<_Res(_ArgTypes...)>& __y) noexcept
    { __x.swap(__y); }

  template<typename _Res, typename _Alloc>
    struct uses_allocator<packaged_task<_Res>, _Alloc>
    : public true_type { };




  template<typename _BoundFn, typename _Res>
    class __future_base::_Deferred_state final
    : public __future_base::_State_base
    {
    public:
      explicit
      _Deferred_state(_BoundFn&& __fn)
      : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn))
      { }

    private:
      typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;
      _Ptr_type _M_result;
      _BoundFn _M_fn;


      virtual void
      _M_complete_async()
      {






        _M_set_result(_S_task_setter(_M_result, _M_fn), true);
      }



      virtual bool _M_is_deferred_future() const { return true; }
    };


  class __future_base::_Async_state_commonV2
    : public __future_base::_State_base
  {
  protected:
    ~_Async_state_commonV2() = default;
# 1636 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/future" 3
    virtual void _M_complete_async() { _M_join(); }

    void _M_join() { std::call_once(_M_once, &thread::join, ref(_M_thread)); }

    thread _M_thread;
    once_flag _M_once;
  };



  template<typename _BoundFn, typename _Res>
    class __future_base::_Async_state_impl final
    : public __future_base::_Async_state_commonV2
    {
    public:
      explicit
      _Async_state_impl(_BoundFn&& __fn)
      : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn))
      {
 _M_thread = std::thread{ [this] {
     try
       {
  _M_set_result(_S_task_setter(_M_result, _M_fn));
       }
     catch(const __cxxabiv1::__forced_unwind&)
       {

  if (static_cast<bool>(_M_result))
    this->_M_break_promise(std::move(_M_result));
  throw;
       }
        } };
      }




      ~_Async_state_impl() { if (_M_thread.joinable()) _M_thread.join(); }

    private:
      typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;
      _Ptr_type _M_result;
      _BoundFn _M_fn;
    };

  template<typename _BoundFn>
    inline std::shared_ptr<__future_base::_State_base>
    __future_base::_S_make_deferred_state(_BoundFn&& __fn)
    {
      typedef typename remove_reference<_BoundFn>::type __fn_type;
      typedef _Deferred_state<__fn_type> __state_type;
      return std::make_shared<__state_type>(std::move(__fn));
    }

  template<typename _BoundFn>
    inline std::shared_ptr<__future_base::_State_base>
    __future_base::_S_make_async_state(_BoundFn&& __fn)
    {
      typedef typename remove_reference<_BoundFn>::type __fn_type;
      typedef _Async_state_impl<__fn_type> __state_type;
      return std::make_shared<__state_type>(std::move(__fn));
    }



  template<typename _Fn, typename... _Args>
    future<typename result_of<_Fn(_Args...)>::type>
    async(launch __policy, _Fn&& __fn, _Args&&... __args)
    {
      typedef typename result_of<_Fn(_Args...)>::type result_type;
      std::shared_ptr<__future_base::_State_base> __state;
      if ((__policy & (launch::async|launch::deferred)) == launch::async)
 {
   __state = __future_base::_S_make_async_state(std::__bind_simple(
              std::forward<_Fn>(__fn), std::forward<_Args>(__args)...));
 }
      else
 {
   __state = __future_base::_S_make_deferred_state(std::__bind_simple(
              std::forward<_Fn>(__fn), std::forward<_Args>(__args)...));
 }
      return future<result_type>(__state);
    }


  template<typename _Fn, typename... _Args>
    inline future<typename result_of<_Fn(_Args...)>::type>
    async(_Fn&& __fn, _Args&&... __args)
    {
      return async(launch::async|launch::deferred, std::forward<_Fn>(__fn),
     std::forward<_Args>(__args)...);
    }







}
# 11 "/opt/rocm/hcc/include/hc_defines.h" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/map" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/map" 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tree.h" 1 3
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tree.h" 3
# 72 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tree.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 92 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tree.h" 3
  enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;
    typedef const _Rb_tree_node_base* _Const_Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x) noexcept
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Const_Base_ptr
    _S_minimum(_Const_Base_ptr __x) noexcept
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x) noexcept
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }

    static _Const_Base_ptr
    _S_maximum(_Const_Base_ptr __x) noexcept
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;
# 149 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tree.h" 3
      __gnu_cxx::__aligned_membuf<_Val> _M_storage;

      _Val*
      _M_valptr()
      { return _M_storage._M_ptr(); }

      const _Val*
      _M_valptr() const
      { return _M_storage._M_ptr(); }

    };

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Base_ptr __x) noexcept
      : _M_node(__x) { }

      reference
      operator*() const noexcept
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
  };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_const_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Base_ptr __x) noexcept
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it) noexcept
      : _M_node(__it._M_node) { }

      iterator
      _M_const_cast() const noexcept
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }

      reference
      operator*() const noexcept
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y) noexcept
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y) noexcept
    { return __x._M_node != __y._M_node; }

  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
                                _Rb_tree_node_base* __x,
                                _Rb_tree_node_base* __p,
                                _Rb_tree_node_base& __header) throw ();

  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header) throw ();


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Rb_tree_node<_Val> >::other _Node_allocator;

      typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;

    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef const _Rb_tree_node_base* _Const_Base_ptr;
      typedef _Rb_tree_node<_Val>* _Link_type;
      typedef const _Rb_tree_node<_Val>* _Const_Link_type;

    private:


      struct _Reuse_or_alloc_node
      {
 _Reuse_or_alloc_node(_Rb_tree& __t)
   : _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 {
   if (_M_root)
     {
       _M_root->_M_parent = 0;

       if (_M_nodes->_M_left)
  _M_nodes = _M_nodes->_M_left;
     }
   else
     _M_nodes = 0;
 }


 _Reuse_or_alloc_node(const _Reuse_or_alloc_node&) = delete;


 ~_Reuse_or_alloc_node()
 { _M_t._M_erase(static_cast<_Link_type>(_M_root)); }

 template<typename _Arg>
   _Link_type



   operator()(_Arg&& __arg)

   {
     _Link_type __node = static_cast<_Link_type>(_M_extract());
     if (__node)
       {
  _M_t._M_destroy_node(__node);
  _M_t._M_construct_node(__node, std::forward<_Arg>(__arg));
  return __node;
       }

     return _M_t._M_create_node(std::forward<_Arg>(__arg));
   }

      private:
 _Base_ptr
 _M_extract()
 {
   if (!_M_nodes)
     return _M_nodes;

   _Base_ptr __node = _M_nodes;
   _M_nodes = _M_nodes->_M_parent;
   if (_M_nodes)
     {
       if (_M_nodes->_M_right == __node)
  {
    _M_nodes->_M_right = 0;

    if (_M_nodes->_M_left)
      {
        _M_nodes = _M_nodes->_M_left;

        while (_M_nodes->_M_right)
   _M_nodes = _M_nodes->_M_right;

        if (_M_nodes->_M_left)
   _M_nodes = _M_nodes->_M_left;
      }
  }
       else
  _M_nodes->_M_left = 0;
     }
   else
     _M_root = 0;

   return __node;
 }

 _Base_ptr _M_root;
 _Base_ptr _M_nodes;
 _Rb_tree& _M_t;
      };



      struct _Alloc_node
      {
 _Alloc_node(_Rb_tree& __t)
   : _M_t(__t) { }

 template<typename _Arg>
   _Link_type



   operator()(_Arg&& __arg) const

   { return _M_t._M_create_node(std::forward<_Arg>(__arg)); }

      private:
 _Rb_tree& _M_t;
      };

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator() noexcept
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }

      const _Node_allocator&
      _M_get_Node_allocator() const noexcept
      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }

      void
      _M_put_node(_Link_type __p) noexcept
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
# 522 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tree.h" 3
      template<typename... _Args>
 void
 _M_construct_node(_Link_type __node, _Args&&... __args)
 {
   try
     {
       ::new(__node) _Rb_tree_node<_Val>;
       _Alloc_traits::construct(_M_get_Node_allocator(),
           __node->_M_valptr(),
           std::forward<_Args>(__args)...);
     }
   catch(...)
     {
       __node->~_Rb_tree_node<_Val>();
       _M_put_node(__node);
       throw;
     }
 }

      template<typename... _Args>
        _Link_type
        _M_create_node(_Args&&... __args)
 {
   _Link_type __tmp = _M_get_node();
   _M_construct_node(__tmp, std::forward<_Args>(__args)...);
   return __tmp;
 }

      void
      _M_destroy_node(_Link_type __p) noexcept
      {
 _Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 __p->~_Rb_tree_node<_Val>();
      }


      void
      _M_drop_node(_Link_type __p) noexcept
      {
 _M_destroy_node(__p);
 _M_put_node(__p);
      }

      template<typename _NodeGen>
 _Link_type
 _M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
 {
   _Link_type __tmp = __node_gen(*__x->_M_valptr());
   __tmp->_M_color = __x->_M_color;
   __tmp->_M_left = 0;
   __tmp->_M_right = 0;
   return __tmp;
 }

    protected:

      template<typename _Key_compare,
        bool = __is_pod(_Key_compare)>
        struct _Rb_tree_impl : public _Node_allocator
        {
   _Key_compare _M_key_compare;
   _Rb_tree_node_base _M_header;
   size_type _M_node_count;

   _Rb_tree_impl()
   : _Node_allocator(), _M_key_compare(), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

   _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
   : _Node_allocator(__a), _M_key_compare(__comp), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }


   _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
   : _Node_allocator(std::move(__a)), _M_key_compare(__comp),
     _M_header(), _M_node_count(0)
   { _M_initialize(); }


   void
   _M_reset()
   {
     this->_M_header._M_parent = 0;
     this->_M_header._M_left = &this->_M_header;
     this->_M_header._M_right = &this->_M_header;
     this->_M_node_count = 0;
   }

 private:
   void
   _M_initialize()
   {
     this->_M_header._M_color = _S_red;
     this->_M_header._M_parent = 0;
     this->_M_header._M_left = &this->_M_header;
     this->_M_header._M_right = &this->_M_header;
   }
 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root() noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Const_Base_ptr
      _M_root() const noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost() noexcept
      { return this->_M_impl._M_header._M_left; }

      _Const_Base_ptr
      _M_leftmost() const noexcept
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost() noexcept
      { return this->_M_impl._M_header._M_right; }

      _Const_Base_ptr
      _M_rightmost() const noexcept
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin() noexcept
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }

      _Const_Link_type
      _M_begin() const noexcept
      {
 return static_cast<_Const_Link_type>
   (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() noexcept
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }

      _Const_Link_type
      _M_end() const noexcept
      { return reinterpret_cast<_Const_Link_type>(&this->_M_impl._M_header); }

      static const_reference
      _S_value(_Const_Link_type __x)
      { return *__x->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x) noexcept
      { return static_cast<_Link_type>(__x->_M_left); }

      static _Const_Link_type
      _S_left(_Const_Base_ptr __x) noexcept
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x) noexcept
      { return static_cast<_Link_type>(__x->_M_right); }

      static _Const_Link_type
      _S_right(_Const_Base_ptr __x) noexcept
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Base_ptr
      _S_minimum(_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Const_Base_ptr
      _S_minimum(_Const_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Base_ptr
      _S_maximum(_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_maximum(__x); }

      static _Const_Base_ptr
      _S_maximum(_Const_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type> iterator;
      typedef _Rb_tree_const_iterator<value_type> const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    private:
      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_unique_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_equal_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_unique_pos(const_iterator __pos,
        const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_equal_pos(const_iterator __pos,
       const key_type& __k);


      template<typename _Arg, typename _NodeGen>
        iterator
 _M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v, _NodeGen&);

      iterator
      _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z);

      template<typename _Arg>
        iterator
        _M_insert_lower(_Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
        iterator
        _M_insert_equal_lower(_Arg&& __x);

      iterator
      _M_insert_lower_node(_Base_ptr __p, _Link_type __z);

      iterator
      _M_insert_equal_lower_node(_Link_type __z);
# 775 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tree.h" 3
      template<typename _NodeGen>
 _Link_type
 _M_copy(_Const_Link_type __x, _Link_type __p, _NodeGen&);

      _Link_type
      _M_copy(_Const_Link_type __x, _Link_type __p)
      {
 _Alloc_node __an(*this);
 return _M_copy(__x, __p, __an);
      }

      void
      _M_erase(_Link_type __x);

      iterator
      _M_lower_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

      iterator
      _M_upper_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

    public:

      _Rb_tree() { }

      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl._M_key_compare,
         _Alloc_traits::_S_select_on_copy(__x._M_get_Node_allocator()))
      {
 if (__x._M_root() != 0)
   {
     _M_root() = _M_copy(__x._M_begin(), _M_end());
     _M_leftmost() = _S_minimum(_M_root());
     _M_rightmost() = _S_maximum(_M_root());
     _M_impl._M_node_count = __x._M_impl._M_node_count;
   }
      }


      _Rb_tree(const allocator_type& __a)
      : _M_impl(_Compare(), _Node_allocator(__a))
      { }

      _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)
      : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))
      {
 if (__x._M_root() != nullptr)
   {
     _M_root() = _M_copy(__x._M_begin(), _M_end());
     _M_leftmost() = _S_minimum(_M_root());
     _M_rightmost() = _S_maximum(_M_root());
     _M_impl._M_node_count = __x._M_impl._M_node_count;
   }
      }

      _Rb_tree(_Rb_tree&& __x)
      : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())
      {
 if (__x._M_root() != 0)
   _M_move_data(__x, std::true_type());
      }

      _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)
      : _Rb_tree(std::move(__x), _Node_allocator(__a))
      { }

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);


      ~_Rb_tree() noexcept
      { _M_erase(_M_begin()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_header._M_left); }

      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_header._M_left); }

      iterator
      end() noexcept
      { return iterator(&this->_M_impl._M_header); }

      const_iterator
      end() const noexcept
      { return const_iterator(&this->_M_impl._M_header); }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      bool
      empty() const noexcept
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const noexcept
      { return _M_impl._M_node_count; }

      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Node_allocator()); }

      void

      swap(_Rb_tree& __t) noexcept(_Alloc_traits::_S_nothrow_swap());






      template<typename _Arg>
        pair<iterator, bool>
        _M_insert_unique(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal(_Arg&& __x);

      template<typename _Arg, typename _NodeGen>
        iterator
 _M_insert_unique_(const_iterator __pos, _Arg&& __x, _NodeGen&);

      template<typename _Arg>
 iterator
 _M_insert_unique_(const_iterator __pos, _Arg&& __x)
 {
   _Alloc_node __an(*this);
   return _M_insert_unique_(__pos, std::forward<_Arg>(__x), __an);
 }

      template<typename _Arg, typename _NodeGen>
 iterator
 _M_insert_equal_(const_iterator __pos, _Arg&& __x, _NodeGen&);

      template<typename _Arg>
 iterator
 _M_insert_equal_(const_iterator __pos, _Arg&& __x)
 {
   _Alloc_node __an(*this);
   return _M_insert_equal_(__pos, std::forward<_Arg>(__x), __an);
 }

      template<typename... _Args>
 pair<iterator, bool>
 _M_emplace_unique(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_equal(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);
# 999 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tree.h" 3
      template<typename _InputIterator>
        void
        _M_insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
        void
        _M_insert_equal(_InputIterator __first, _InputIterator __last);

    private:
      void
      _M_erase_aux(const_iterator __position);

      void
      _M_erase_aux(const_iterator __first, const_iterator __last);

    public:



      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      {
 const_iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result._M_const_cast();
      }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      {
 iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result;
      }
# 1047 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tree.h" 3
      size_type
      erase(const key_type& __x);




      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      {
 _M_erase_aux(__first, __last);
 return __last._M_const_cast();
      }
# 1069 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tree.h" 3
      void
      erase(const key_type* __first, const key_type* __last);

      void
      clear() noexcept
      {
        _M_erase(_M_begin());
 _M_impl._M_reset();
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      lower_bound(const key_type& __k) const
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      iterator
      upper_bound(const key_type& __k)
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      upper_bound(const key_type& __k) const
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;
# 1243 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_tree.h" 3
      bool
      __rb_verify() const;


      _Rb_tree&
      operator=(_Rb_tree&&) noexcept(_Alloc_traits::_S_nothrow_move());

      template<typename _Iterator>
 void
 _M_assign_unique(_Iterator, _Iterator);

      template<typename _Iterator>
 void
 _M_assign_equal(_Iterator, _Iterator);

    private:

      void
      _M_move_data(_Rb_tree&, std::true_type);



      void
      _M_move_data(_Rb_tree&, std::false_type);

    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)
    : _M_impl(__x._M_impl._M_key_compare, std::move(__a))
    {
      using __eq = integral_constant<bool, _Alloc_traits::_S_always_equal()>;
      if (__x._M_root() != nullptr)
 _M_move_data(__x, __eq());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_data(_Rb_tree& __x, std::true_type)
    {
      _M_root() = __x._M_root();
      _M_leftmost() = __x._M_leftmost();
      _M_rightmost() = __x._M_rightmost();
      _M_root()->_M_parent = _M_end();

      __x._M_root() = 0;
      __x._M_leftmost() = __x._M_end();
      __x._M_rightmost() = __x._M_end();

      this->_M_impl._M_node_count = __x._M_impl._M_node_count;
      __x._M_impl._M_node_count = 0;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_data(_Rb_tree& __x, std::false_type)
    {
      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
   _M_move_data(__x, std::true_type());
      else
 {
   _Alloc_node __an(*this);
   auto __lbd =
     [&__an](const value_type& __cval)
     {
       auto& __val = const_cast<value_type&>(__cval);
       return __an(std::move_if_noexcept(__val));
     };
   _M_root() = _M_copy(__x._M_begin(), _M_end(), __lbd);
   _M_leftmost() = _S_minimum(_M_root());
   _M_rightmost() = _S_maximum(_M_root());
   _M_impl._M_node_count = __x._M_impl._M_node_count;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(_Rb_tree&& __x)
    noexcept(_Alloc_traits::_S_nothrow_move())
    {
      _M_impl._M_key_compare = __x._M_impl._M_key_compare;
      if (_Alloc_traits::_S_propagate_on_move_assign()
   || _Alloc_traits::_S_always_equal()
   || _M_get_Node_allocator() == __x._M_get_Node_allocator())
 {
   clear();
   if (__x._M_root() != nullptr)
     _M_move_data(__x, std::true_type());
   std::__alloc_on_move(_M_get_Node_allocator(),
          __x._M_get_Node_allocator());
   return *this;
 }



      _Reuse_or_alloc_node __roan(*this);
      _M_impl._M_reset();
      if (__x._M_root() != nullptr)
 {
   auto __lbd =
     [&__roan](const value_type& __cval)
     {
       auto& __val = const_cast<value_type&>(__cval);
       return __roan(std::move_if_noexcept(__val));
     };
   _M_root() = _M_copy(__x._M_begin(), _M_end(), __lbd);
   _M_leftmost() = _S_minimum(_M_root());
   _M_rightmost() = _S_maximum(_M_root());
   _M_impl._M_node_count = __x._M_impl._M_node_count;
   __x.clear();
 }
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename _Iterator>
      void
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_assign_unique(_Iterator __first, _Iterator __last)
      {
 _Reuse_or_alloc_node __roan(*this);
 _M_impl._M_reset();
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first, __roan);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename _Iterator>
      void
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_assign_equal(_Iterator __first, _Iterator __last)
      {
 _Reuse_or_alloc_node __roan(*this);
 _M_impl._M_reset();
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first, __roan);
      }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree& __x)
    {
      if (this != &__x)
 {


   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       auto& __this_alloc = this->_M_get_Node_allocator();
       auto& __that_alloc = __x._M_get_Node_allocator();
       if (!_Alloc_traits::_S_always_equal()
    && __this_alloc != __that_alloc)
  {


    clear();
    std::__alloc_on_copy(__this_alloc, __that_alloc);
  }
     }


   _Reuse_or_alloc_node __roan(*this);
   _M_impl._M_reset();
   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root() != 0)
     {
       _M_root() = _M_copy(__x._M_begin(), _M_end(), __roan);
       _M_leftmost() = _S_minimum(_M_root());
       _M_rightmost() = _S_maximum(_M_root());
       _M_impl._M_node_count = __x._M_impl._M_node_count;
     }
 }

      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_(_Base_ptr __x, _Base_ptr __p,

   _Arg&& __v,



   _NodeGen& __node_gen)
      {
 bool __insert_left = (__x != 0 || __p == _M_end()
         || _M_impl._M_key_compare(_KeyOfValue()(__v),
       _S_key(__p)));

 _Link_type __z = __node_gen(std::forward<_Arg>(__v));

 _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
          this->_M_impl._M_header);
 ++_M_impl._M_node_count;
 return iterator(__z);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_lower(_Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_lower(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KoV,
    typename _Compare, typename _Alloc>
    template<typename _NodeGen>
      typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
      _M_copy(_Const_Link_type __x, _Link_type __p, _NodeGen& __node_gen)
      {

 _Link_type __top = _M_clone_node(__x, __node_gen);
 __top->_M_parent = __p;

 try
   {
     if (__x->_M_right)
       __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
     __p = __top;
     __x = _S_left(__x);

     while (__x != 0)
       {
  _Link_type __y = _M_clone_node(__x, __node_gen);
  __p->_M_left = __y;
  __y->_M_parent = __p;
  if (__x->_M_right)
    __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  __p = __y;
  __x = _S_left(__x);
       }
   }
 catch(...)
   {
     _M_erase(__top);
     throw;
   }
 return __top;
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {

      while (__x != 0)
 {
   _M_erase(_S_right(__x));
   _Link_type __y = _S_left(__x);
   _M_drop_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<iterator,
            iterator>(_M_lower_bound(__x, __y, __k),
        _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<iterator, iterator>(iterator(__y),
          iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      _Const_Link_type __x = _M_begin();
      _Const_Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Const_Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<const_iterator,
            const_iterator>(_M_lower_bound(__x, __y, __k),
       _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<const_iterator, const_iterator>(const_iterator(__y),
        const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)

    noexcept(_Alloc_traits::_S_nothrow_swap())

    {
      if (_M_root() == 0)
 {
   if (__t._M_root() != 0)
     {
       _M_root() = __t._M_root();
       _M_leftmost() = __t._M_leftmost();
       _M_rightmost() = __t._M_rightmost();
       _M_root()->_M_parent = _M_end();
       _M_impl._M_node_count = __t._M_impl._M_node_count;

       __t._M_impl._M_reset();
     }
 }
      else if (__t._M_root() == 0)
 {
   __t._M_root() = _M_root();
   __t._M_leftmost() = _M_leftmost();
   __t._M_rightmost() = _M_rightmost();
   __t._M_root()->_M_parent = __t._M_end();
   __t._M_impl._M_node_count = _M_impl._M_node_count;

   _M_impl._M_reset();
 }
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
   std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
 }

      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);

      _Alloc_traits::_S_on_swap(_M_get_Node_allocator(),
    __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return _Res(__x, __y);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_equal_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _Res(__x, __y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique(_Arg&& __v)



    {
      typedef pair<iterator, bool> _Res;
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_unique_pos(_KeyOfValue()(__v));

      if (__res.second)
 {
   _Alloc_node __an(*this);
   return _Res(_M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v), __an),
        true);
 }

      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal(_Arg&& __v)



    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_equal_pos(_KeyOfValue()(__v));
      _Alloc_node __an(*this);
      return _M_insert_(__res.first, __res.second,
   std::forward<_Arg>(__v), __an);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_unique_pos(const_iterator __position,
      const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else

 return _Res(__pos._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_unique_(const_iterator __position,

   _Arg&& __v,



   _NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));

      if (__res.second)
 return _M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v),
     __node_gen);
      return iterator(static_cast<_Link_type>(__res.first));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_equal_pos(__k);
 }
      else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_equal_pos(__k);
 }
      else
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _Res(0, 0);
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_equal_(const_iterator __position,

         _Arg&& __v,



         _NodeGen& __node_gen)
      {
 pair<_Base_ptr, _Base_ptr> __res
   = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));

 if (__res.second)
   return _M_insert_(__res.first, __res.second,
       std::forward<_Arg>(__v),
       __node_gen);

 return _M_insert_equal_lower(std::forward<_Arg>(__v));
      }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_S_key(__z),
            _S_key(__p)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_lower_node(_Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _S_key(__z)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_equal_lower_node(_Link_type __z)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower_node(__y, __z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator, bool>
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_unique(_Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     typedef pair<iterator, bool> _Res;
     auto __res = _M_get_insert_unique_pos(_S_key(__z));
     if (__res.second)
       return _Res(_M_insert_node(__res.first, __res.second, __z), true);

     _M_drop_node(__z);
     return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
   }
 catch(...)
   {
     _M_drop_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_equal(_Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_equal_pos(_S_key(__z));
     return _M_insert_node(__res.first, __res.second, __z);
   }
 catch(...)
   {
     _M_drop_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

     if (__res.second)
       return _M_insert_node(__res.first, __res.second, __z);

     _M_drop_node(__z);
     return iterator(static_cast<_Link_type>(__res.first));
   }
 catch(...)
   {
     _M_drop_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_hint_equal_pos(__pos, _S_key(__z));

     if (__res.second)
       return _M_insert_node(__res.first, __res.second, __z);

     return _M_insert_equal_lower_node(__z);
   }
 catch(...)
   {
     _M_drop_node(__z);
     throw;
   }
      }


  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_unique(_II __first, _II __last)
      {
 _Alloc_node __an(*this);
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first, __an);
      }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_equal(_II __first, _II __last)
      {
 _Alloc_node __an(*this);
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first, __an);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (const_cast<_Base_ptr>(__position._M_node),
     this->_M_impl._M_header));
      _M_drop_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   erase(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      erase(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
 erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  __attribute__ ((__pure__)) unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
                       const _Rb_tree_node_base* __root) throw ();

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
   _Const_Link_type __L = _S_left(__x);
   _Const_Link_type __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }


}
# 61 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/map" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 1 3
# 66 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 94 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      map()

      noexcept(is_nothrow_default_constructible<allocator_type>::value)

      : _M_t() { }






      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 185 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      map(const map& __x)
      : _M_t(__x._M_t) { }
# 196 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      map(map&& __x)
      noexcept(is_nothrow_copy_constructible<_Compare>::value)
      : _M_t(std::move(__x._M_t)) { }
# 211 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      map(initializer_list<value_type> __l,
   const _Compare& __comp = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      explicit
      map(const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }


      map(const map& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      map(map&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      map(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last,
     const allocator_type& __a)
 : _M_t(_Compare(), _Pair_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 255 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_unique(__first, __last); }
# 272 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 295 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      map&
      operator=(const map& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }



      map&
      operator=(map&&) = default;
# 318 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      map&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_unique(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }






      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 473 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))

   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
         std::tuple<const key_type&>(__k),
         std::tuple<>());



 return (*__i).second;
      }


      mapped_type&
      operator[](key_type&& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
     std::forward_as_tuple(std::move(__k)),
     std::tuple<>());
 return (*__i).second;
      }
# 518 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 556 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
# 586 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_unique(__pos,
          std::forward<_Args>(__args)...);
 }
# 611 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
        std::pair<iterator, bool>
        insert(_Pair&& __x)
        { return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }
# 632 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      void
      insert(std::initializer_list<value_type> __list)
      { insert(__list.begin(), __list.end()); }
# 660 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_unique_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_unique_(__position,
     std::forward<_Pair>(__x)); }
# 686 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_unique(__first, __last); }
# 707 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 743 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 763 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 795 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      void
      swap(map& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 844 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 869 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 890 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
# 914 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 939 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }
# 959 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }
# 979 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 1008 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 1037 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }
# 1050 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);
    };
# 1071 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1088 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/map" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 1 3
# 64 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 92 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
  template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      multimap()

      noexcept(is_nothrow_default_constructible<allocator_type>::value)

      : _M_t() { }






      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 183 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      multimap(const multimap& __x)
      : _M_t(__x._M_t) { }
# 194 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      multimap(multimap&& __x)
      noexcept(is_nothrow_copy_constructible<_Compare>::value)
      : _M_t(std::move(__x._M_t)) { }
# 208 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      multimap(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      explicit
      multimap(const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }


      multimap(const multimap& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      multimap(multimap&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      multimap(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last,
   const allocator_type& __a)
 : _M_t(_Compare(), _Pair_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 251 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_equal(__first, __last); }
# 267 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 290 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      multimap&
      operator=(const multimap& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }



      multimap&
      operator=(multimap&&) = default;
# 313 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      multimap&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_equal(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }




      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 471 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_equal(std::forward<_Args>(__args)...); }
# 498 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_equal(__pos,
         std::forward<_Args>(__args)...);
 }
# 519 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
        iterator
        insert(_Pair&& __x)
        { return _M_t._M_insert_equal(std::forward<_Pair>(__x)); }
# 552 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_equal_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_equal_(__position,
           std::forward<_Pair>(__x)); }
# 579 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_equal(__first, __last); }
# 592 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 613 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 649 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 670 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 705 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      void
      swap(multimap& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 753 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 777 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 795 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }
# 819 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 844 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }
# 864 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }
# 884 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 911 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 938 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }
# 951 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);
  };
# 972 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 989 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
         multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/map" 2 3
# 13 "/opt/rocm/hcc/include/hc_defines.h" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/set" 1 3
# 59 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/set" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 1 3
# 64 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 88 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
  template<typename _Key, typename _Compare = std::less<_Key>,
    typename _Alloc = std::allocator<_Key> >
    class set
    {

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:



      typedef _Key key_type;
      typedef _Key value_type;
      typedef _Compare key_compare;
      typedef _Compare value_compare;
      typedef _Alloc allocator_type;


    private:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Key>::other _Key_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Identity<value_type>,
         key_compare, _Key_alloc_type> _Rep_type;
      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Key_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;



      typedef typename _Rep_type::const_iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::const_reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;






      set()

      noexcept(is_nothrow_default_constructible<allocator_type>::value)

      : _M_t() { }






      explicit
      set(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a)) { }
# 168 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      template<typename _InputIterator>
 set(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_unique(__first, __last); }
# 185 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      template<typename _InputIterator>
 set(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Key_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 199 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      set(const set& __x)
      : _M_t(__x._M_t) { }
# 210 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      set(set&& __x)
      noexcept(is_nothrow_copy_constructible<_Compare>::value)
      : _M_t(std::move(__x._M_t)) { }
# 224 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      set(initializer_list<value_type> __l,
   const _Compare& __comp = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      explicit
      set(const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a)) { }


      set(const set& __x, const allocator_type& __a)
      : _M_t(__x._M_t, _Key_alloc_type(__a)) { }


      set(set&& __x, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__x._M_t), _Key_alloc_type(__a)) { }


      set(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      template<typename _InputIterator>
        set(_InputIterator __first, _InputIterator __last,
     const allocator_type& __a)
 : _M_t(_Compare(), _Key_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 265 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      set&
      operator=(const set& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }



      set&
      operator=(set&&) = default;
# 288 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      set&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_unique(__l.begin(), __l.end());
 return *this;
      }





      key_compare
      key_comp() const
      { return _M_t.key_comp(); }

      value_compare
      value_comp() const
      { return _M_t.key_comp(); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }






      iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      iterator
      cend() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }



      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 411 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      void
      swap(set& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      { _M_t.swap(__x._M_t); }
# 433 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
# 459 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_unique(__pos,
          std::forward<_Args>(__args)...);
 }
# 481 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      {
 std::pair<typename _Rep_type::iterator, bool> __p =
   _M_t._M_insert_unique(__x);
 return std::pair<iterator, bool>(__p.first, __p.second);
      }


      std::pair<iterator, bool>
      insert(value_type&& __x)
      {
 std::pair<typename _Rep_type::iterator, bool> __p =
   _M_t._M_insert_unique(std::move(__x));
 return std::pair<iterator, bool>(__p.first, __p.second);
      }
# 518 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x)
      { return _M_t._M_insert_unique_(__position, __x); }


      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_unique_(__position, std::move(__x)); }
# 537 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_unique(__first, __last); }
# 550 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 571 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }
# 602 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 623 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 651 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      void
      clear() noexcept
      { _M_t.clear(); }
# 666 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
# 693 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 728 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }

      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }
# 758 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }

      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 797 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }
# 820 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator==(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);

      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator<(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);
    };
# 840 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator==(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 857 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_set.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<(const set<_Key, _Compare, _Alloc>& __x,
       const set<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>(const set<_Key, _Compare, _Alloc>& __x,
       const set<_Key, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline void
    swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 62 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/set" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 1 3
# 64 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 90 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
  template <typename _Key, typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<_Key> >
    class multiset
    {

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:

      typedef _Key key_type;
      typedef _Key value_type;
      typedef _Compare key_compare;
      typedef _Compare value_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Key>::other _Key_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Identity<value_type>,
         key_compare, _Key_alloc_type> _Rep_type;

      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Key_alloc_type> _Alloc_traits;

    public:
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;



      typedef typename _Rep_type::const_iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::const_reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;





      multiset()

      noexcept(is_nothrow_default_constructible<allocator_type>::value)

      : _M_t() { }






      explicit
      multiset(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a)) { }
# 165 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      template<typename _InputIterator>
        multiset(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_equal(__first, __last); }
# 181 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      template<typename _InputIterator>
        multiset(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Key_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 195 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      multiset(const multiset& __x)
      : _M_t(__x._M_t) { }
# 206 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      multiset(multiset&& __x)
      noexcept(is_nothrow_copy_constructible<_Compare>::value)
      : _M_t(std::move(__x._M_t)) { }
# 220 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      multiset(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      explicit
      multiset(const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a)) { }


      multiset(const multiset& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Key_alloc_type(__a)) { }


      multiset(multiset&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Key_alloc_type(__a)) { }


      multiset(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      template<typename _InputIterator>
        multiset(_InputIterator __first, _InputIterator __last,
   const allocator_type& __a)
 : _M_t(_Compare(), _Key_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 261 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      multiset&
      operator=(const multiset& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }



      multiset&
      operator=(multiset&&) = default;
# 284 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      multiset&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_equal(__l.begin(), __l.end());
 return *this;
      }





      key_compare
      key_comp() const
      { return _M_t.key_comp(); }

      value_compare
      value_comp() const
      { return _M_t.key_comp(); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }






      iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      iterator
      cend() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }



      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 407 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      void
      swap(multiset& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      { _M_t.swap(__x._M_t); }
# 428 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_equal(std::forward<_Args>(__args)...); }
# 454 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_equal(__pos,
         std::forward<_Args>(__args)...);
 }
# 474 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }


      iterator
      insert(value_type&& __x)
      { return _M_t._M_insert_equal(std::move(__x)); }
# 504 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x)
      { return _M_t._M_insert_equal_(__position, __x); }


      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_equal_(__position, std::move(__x)); }
# 522 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_equal(__first, __last); }
# 535 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 556 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }
# 587 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 608 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 636 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      void
      clear() noexcept
      { _M_t.clear(); }
# 648 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }
# 674 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 709 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }

      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }
# 739 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }

      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 778 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }
# 801 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
      template<typename _K1, typename _C1, typename _A1>
        friend bool
        operator==(const multiset<_K1, _C1, _A1>&,
     const multiset<_K1, _C1, _A1>&);

      template<typename _K1, typename _C1, typename _A1>
        friend bool
        operator< (const multiset<_K1, _C1, _A1>&,
     const multiset<_K1, _C1, _A1>&);
    };
# 823 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 840 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_multiset.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multiset<_Key, _Compare, _Alloc>& __x,
       const multiset<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multiset<_Key,_Compare,_Alloc>& __x,
       const multiset<_Key,_Compare,_Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline void
    swap(multiset<_Key, _Compare, _Alloc>& __x,
  multiset<_Key, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 63 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/set" 2 3
# 15 "/opt/rocm/hcc/include/hc_defines.h" 2
# 26 "/opt/rocm/hcc/include/hc_defines.h"
namespace hc {
  typedef __fp16 half;
}




extern "C" __attribute__((const,hc)) int64_t hc_get_grid_size(unsigned int n);
extern "C" __attribute__((const,hc)) int64_t hc_get_workitem_absolute_id(unsigned int n);
extern "C" __attribute__((const,hc)) int64_t hc_get_group_size(unsigned int n);
extern "C" __attribute__((const,hc)) int64_t hc_get_workitem_id(unsigned int n);
extern "C" __attribute__((const,hc)) int64_t hc_get_num_groups(unsigned int n);
extern "C" __attribute__((const,hc)) int64_t hc_get_group_id(unsigned int n);

extern "C" __attribute__((const,amp)) int64_t amp_get_global_size(unsigned int n);
extern "C" __attribute__((const,amp)) int64_t amp_get_global_id(unsigned int n);
extern "C" __attribute__((const,amp)) int64_t amp_get_local_size(unsigned int n);
extern "C" __attribute__((const,amp)) int64_t amp_get_local_id(unsigned int n);
extern "C" __attribute__((const,amp)) int64_t amp_get_num_groups(unsigned int n);
extern "C" __attribute__((const,amp)) int64_t amp_get_group_id(unsigned int n);







extern "C" __attribute__((noduplicate,hc)) void hc_barrier(unsigned int n);
extern "C" __attribute__((noduplicate,amp)) void amp_barrier(unsigned int n) ;
# 72 "/opt/rocm/hcc/include/hc_defines.h"
namespace Kalmar {
}


class auto_voidp {
    void *_ptr;
    public:
        auto_voidp (void *ptr) : _ptr (ptr) {}
        template<class T> operator T *() { return (T *) _ptr; }
};
# 6 "/opt/rocm/hcc/include/grid_launch.h" 2




namespace hc{
class completion_future;
class accelerator_view;
}



typedef struct gl_dim3
{
  int x,y,z;
  gl_dim3(uint32_t _x=1, uint32_t _y=1, uint32_t _z=1) : x(_x), y(_y), z(_z) {};
} gl_dim3;

typedef enum gl_barrier_bit {
    barrier_bit_queue_default,
    barrier_bit_none,
    barrier_bit_wait,
} gl_barrier_bit;



typedef struct grid_launch_parm
{

  gl_dim3 grid_dim;


  gl_dim3 group_dim;;



  unsigned int dynamic_group_mem_bytes;;




  enum gl_barrier_bit barrier_bit;






  unsigned int launch_fence;



  hc::accelerator_view *av;





  hc::completion_future *cf;

  grid_launch_parm() = default;
} grid_launch_parm;


extern void init_grid_launch(grid_launch_parm *gl);
# 65 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h" 2






namespace hip_impl
{
    struct Empty_launch_parm {};
}
# 86 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h"
# 1 "/opt/rocm/hip/include/hip/hcc_detail/grid_launch_GGL.hpp" 1
# 27 "/opt/rocm/hip/include/hip/hcc_detail/grid_launch_GGL.hpp"
# 1 "/opt/rocm/hip/include/hip/hcc_detail/concepts.hpp" 1
# 25 "/opt/rocm/hip/include/hip/hcc_detail/concepts.hpp"
namespace hip_impl
{



}
# 28 "/opt/rocm/hip/include/hip/hcc_detail/grid_launch_GGL.hpp" 2
# 1 "/opt/rocm/hip/include/hip/hcc_detail/helpers.hpp" 1
# 30 "/opt/rocm/hip/include/hip/hcc_detail/helpers.hpp"
namespace std
{


            template<bool cond, typename T = void>
            using enable_if_t = typename enable_if<cond, T>::type;
            template<bool cond, typename T, typename U>
            using conditional_t = typename conditional<cond, T, U>::type;
            template<typename T>
            using decay_t = typename decay<T>::type;
            template<typename F, typename... Ts>
            using result_of_t = typename result_of<F(Ts...)>::type;
            template<typename T>
            using remove_reference_t = typename remove_reference<T>::type;


}

namespace hip_impl
{
    template<typename...>
    using void_t_ = void;


        template<
            typename F,
            unsigned int n = 0u,
            typename = void>
        struct is_callable_impl : is_callable_impl<F, n + 1u> {};


        template<typename F, typename C, typename... Ts>
        struct is_callable_impl<
            F(C, Ts...),
            0u,
            void_t_<decltype((std::declval<C>().*std::declval<F>())(
                std::declval<Ts>()...))>
        > : std::true_type {};


        template<typename F, typename C, typename... Ts>
        struct is_callable_impl<
            F(C, Ts...),
            1u,
            void_t_<decltype(((*std::declval<C>()).*std::declval<F>())(
                std::declval<Ts>()...))>
        > : std::true_type {};


        template<typename F, typename C>
        struct is_callable_impl<
            F(C),
            2u,
            void_t_<decltype(std::declval<C>().*std::declval<F>())>
        > : std::true_type {};


        template<typename F, typename C>
        struct is_callable_impl<
            F(C),
            3u,
            void_t_<decltype(*std::declval<C>().*std::declval<F>())>
        > : std::true_type {};


        template<typename F, typename... Ts>
        struct is_callable_impl<
            F(Ts...),
            4u,
            void_t_<decltype(std::declval<F>()(std::declval<Ts>()...))>
        > : std::true_type {};


        template<typename F>
        struct is_callable_impl<F, 5u> : std::false_type {};
# 114 "/opt/rocm/hip/include/hip/hcc_detail/helpers.hpp"
        template<typename Call>
        struct is_callable : is_callable_impl<Call> {};
# 133 "/opt/rocm/hip/include/hip/hcc_detail/helpers.hpp"
}
# 29 "/opt/rocm/hip/include/hip/hcc_detail/grid_launch_GGL.hpp" 2

# 1 "/opt/rocm/hcc/include/hc.hpp" 1
# 16 "/opt/rocm/hcc/include/hc.hpp"
# 1 "/opt/rocm/hcc/include/kalmar_exception.h" 1
# 13 "/opt/rocm/hcc/include/kalmar_exception.h"
namespace Kalmar {





static const char *__errorMsg_UnsupportedAccelerator = "concurrency::parallel_for_each is not supported on the selected accelerator \"CPU accelerator\".";

typedef int HRESULT;
class runtime_exception : public std::exception
{
public:
  runtime_exception(const char * message, HRESULT hresult) throw() : _M_msg(message), err_code(hresult) {}
  explicit runtime_exception(HRESULT hresult) throw() : err_code(hresult) {}
  runtime_exception(const runtime_exception& other) throw() : _M_msg(other.what()), err_code(other.err_code) {}
  runtime_exception& operator=(const runtime_exception& other) throw() {
    _M_msg = *(other.what());
    err_code = other.err_code;
    return *this;
  }
  virtual ~runtime_exception() throw() {}
  virtual const char* what() const throw() {return _M_msg.c_str();}
  HRESULT get_error_code() const {return err_code;}

private:
  std::string _M_msg;
  HRESULT err_code;
};

class invalid_compute_domain : public runtime_exception
{
public:
  explicit invalid_compute_domain (const char * message) throw()
  : runtime_exception(message, 0x80004005) {}
  invalid_compute_domain() throw()
  : runtime_exception(0x80004005) {}
};

class accelerator_view_removed : public runtime_exception
{
public:
  explicit accelerator_view_removed (const char * message, HRESULT view_removed_reason) throw()
  : runtime_exception(message, view_removed_reason) {}
  accelerator_view_removed(HRESULT view_removed_reason) throw()
  : runtime_exception(view_removed_reason) {}
  HRESULT get_view_removed_reason() const throw() { return get_error_code(); }
};

}
# 17 "/opt/rocm/hcc/include/hc.hpp" 2
# 1 "/opt/rocm/hcc/include/kalmar_index.h" 1



namespace Concurrency {
template <int N> class extent;
}


namespace hc {
template <int N> class extent;
}

namespace Kalmar {


template <int...> struct __indices {};

template <int _Sp, class _IntTuple, int _Ep>
struct __make_indices_imp;

template <int _Sp, int ..._Indices, int _Ep>
struct __make_indices_imp<_Sp, __indices<_Indices...>, _Ep> {
    typedef typename __make_indices_imp<_Sp+1, __indices<_Indices..., _Sp>, _Ep>::type type;
};

template <int _Ep, int ..._Indices>
struct __make_indices_imp<_Ep, __indices<_Indices...>, _Ep> {
    typedef __indices<_Indices...> type;
};

template <int _Ep, int _Sp = 0>
struct __make_indices {
    static_assert(_Sp <= _Ep, "__make_indices input error");
    typedef typename __make_indices_imp<_Sp, __indices<>, _Ep>::type type;
};

template <int _Ip>
class __index_leaf {
    int __idx;
    int dummy;
public:
    explicit __index_leaf(int __t) restrict(amp,cpu) : __idx(__t) {}

    __index_leaf& operator=(const int __t) restrict(amp,cpu) {
        __idx = __t;
        return *this;
    }
    __index_leaf& operator+=(const int __t) restrict(amp,cpu) {
        __idx += __t;
        return *this;
    }
    __index_leaf& operator-=(const int __t) restrict(amp,cpu) {
        __idx -= __t;
        return *this;
    }
    __index_leaf& operator*=(const int __t) restrict(amp,cpu) {
        __idx *= __t;
        return *this;
    }
    __index_leaf& operator/=(const int __t) restrict(amp,cpu) {
        __idx /= __t;
        return *this;
    }
    __index_leaf& operator%=(const int __t) restrict(amp,cpu) {
        __idx %= __t;
        return *this;
    }
          int& get() restrict(amp,cpu) { return __idx; }
    const int& get() const restrict(amp,cpu) { return __idx; }
};

template <class _Indx> struct index_impl;

template <int ...N>
struct index_impl<__indices<N...> > : public __index_leaf<N>... {
    index_impl() restrict(amp,cpu) : __index_leaf<N>(0)... {}

    template<class ..._Up>
        explicit index_impl(_Up... __u) restrict(amp,cpu)
        : __index_leaf<N>(__u)... {}

    index_impl(const index_impl& other) restrict(amp,cpu)
        : index_impl(static_cast<const __index_leaf<N>&>(other).get()...) {}

    index_impl(int component) restrict(amp,cpu)
        : __index_leaf<N>(component)... {}
    index_impl(int components[]) restrict(amp,cpu)
        : __index_leaf<N>(components[N])... {}
    index_impl(const int components[]) restrict(amp,cpu)
        : __index_leaf<N>(components[N])... {}

    template<class ..._Tp>
        inline void __swallow(_Tp...) restrict(amp,cpu) {}

    int operator[] (unsigned int c) const restrict(amp,cpu) {
        return static_cast<const __index_leaf<0>&>(*((__index_leaf<0> *)this + c)).get();
    }
    int& operator[] (unsigned int c) restrict(amp,cpu) {
        return static_cast<__index_leaf<0>&>(*((__index_leaf<0> *)this + c)).get();
    }
    index_impl& operator=(const index_impl& __t) restrict(amp,cpu) {
        __swallow(__index_leaf<N>::operator=(static_cast<const __index_leaf<N>&>(__t).get())...);
        return *this;
    }
    index_impl& operator+=(const index_impl& __t) restrict(amp,cpu) {
        __swallow(__index_leaf<N>::operator+=(static_cast<const __index_leaf<N>&>(__t).get())...);
        return *this;
    }
    index_impl& operator-=(const index_impl& __t) restrict(amp,cpu) {
        __swallow(__index_leaf<N>::operator-=(static_cast<const __index_leaf<N>&>(__t).get())...);
        return *this;
    }
    index_impl& operator*=(const index_impl& __t) restrict(amp,cpu) {
        __swallow(__index_leaf<N>::operator*=(static_cast<const __index_leaf<N>&>(__t).get())...);
        return *this;
    }
    index_impl& operator/=(const index_impl& __t) restrict(amp,cpu) {
        __swallow(__index_leaf<N>::operator/=(static_cast<const __index_leaf<N>&>(__t).get())...);
        return *this;
    }
    index_impl& operator%=(const index_impl& __t) restrict(amp,cpu) {
        __swallow(__index_leaf<N>::operator%=(static_cast<const __index_leaf<N>&>(__t).get())...);
        return *this;
    }
    index_impl& operator+=(const int __t) restrict(amp,cpu) {
        __swallow(__index_leaf<N>::operator+=(__t)...);
        return *this;
    }
    index_impl& operator-=(const int __t) restrict(amp,cpu) {
        __swallow(__index_leaf<N>::operator-=(__t)...);
        return *this;
    }
    index_impl& operator*=(const int __t) restrict(amp,cpu) {
        __swallow(__index_leaf<N>::operator*=(__t)...);
        return *this;
    }
    index_impl& operator/=(const int __t) restrict(amp,cpu) {
        __swallow(__index_leaf<N>::operator/=(__t)...);
        return *this;
    }
    index_impl& operator%=(const int __t) restrict(amp,cpu) {
        __swallow(__index_leaf<N>::operator%=(__t)...);
        return *this;
    }
};

template <int N, typename _Tp>
struct index_helper
{
    static inline void set(_Tp& now) restrict(amp,cpu) {
        now[N - 1] = amp_get_global_id(_Tp::rank - N);
        index_helper<N - 1, _Tp>::set(now);
    }
    static inline bool equal(const _Tp& _lhs, const _Tp& _rhs) restrict(amp,cpu) {
        return (_lhs[N - 1] == _rhs[N - 1]) &&
            (index_helper<N - 1, _Tp>::equal(_lhs, _rhs));
    }
    static inline int count_size(const _Tp& now) restrict(amp,cpu) {
        return now[N - 1] * index_helper<N - 1, _Tp>::count_size(now);
    }
};

template<typename _Tp>
struct index_helper<1, _Tp>
{
    static inline void set(_Tp& now) restrict(amp,cpu) {
        now[0] = amp_get_global_id(_Tp::rank - 1);
    }
    static inline bool equal(const _Tp& _lhs, const _Tp& _rhs) restrict(amp,cpu) {
        return (_lhs[0] == _rhs[0]);
    }
    static inline int count_size(const _Tp& now) restrict(amp,cpu) {
        return now[0];
    }
};

template <int N, typename _Tp1, typename _Tp2>
struct amp_helper
{
    static bool inline contains(const _Tp1& idx, const _Tp2& ext) restrict(amp,cpu) {
        return idx[N - 1] >= 0 && idx[N - 1] < ext[N - 1] &&
            amp_helper<N - 1, _Tp1, _Tp2>::contains(idx, ext);
    }

    static bool inline contains(const _Tp1& idx, const _Tp2& ext,const _Tp2& ext2) restrict(amp,cpu) {
        return idx[N - 1] >= 0 && ext[N - 1] > 0 && (idx[N - 1] + ext[N - 1]) <= ext2[N - 1] &&
            amp_helper<N - 1, _Tp1, _Tp2>::contains(idx, ext,ext2);
    }

    static int inline flatten(const _Tp1& idx, const _Tp2& ext) restrict(amp,cpu) {
        return idx[N - 1] + ext[N - 1] * amp_helper<N - 1, _Tp1, _Tp2>::flatten(idx, ext);
    }
    static void inline minus(const _Tp1& idx, _Tp2& ext) restrict(amp,cpu) {
        ext.base_ -= idx.base_;
    }
};

template <typename _Tp1, typename _Tp2>
struct amp_helper<1, _Tp1, _Tp2>
{
    static bool inline contains(const _Tp1& idx, const _Tp2& ext) restrict(amp,cpu) {
        return idx[0] >= 0 && idx[0] < ext[0];
    }

    static bool inline contains(const _Tp1& idx, const _Tp2& ext,const _Tp2& ext2) restrict(amp,cpu) {
        return idx[0] >= 0 && ext[0] > 0 && (idx[0] + ext[0]) <= ext2[0] ;
    }

    static int inline flatten(const _Tp1& idx, const _Tp2& ext) restrict(amp,cpu) {
        return idx[0];
    }
    static void inline minus(const _Tp1& idx, _Tp2& ext) restrict(amp,cpu) {
        ext.base_ -= idx.base_;
    }
};
# 225 "/opt/rocm/hcc/include/kalmar_index.h"
template <int N>
class index {
public:



    static const int rank = N;




    typedef int value_type;





    index() restrict(amp,cpu) : base_() {
        static_assert( N>0, "rank should bigger than 0 ");
    };
# 253 "/opt/rocm/hcc/include/kalmar_index.h"
    index(const index& other) restrict(amp,cpu)
        : base_(other.base_) {}
# 265 "/opt/rocm/hcc/include/kalmar_index.h"
    explicit index(int i0) restrict(amp,cpu)
        : base_(i0) {}

    template <typename ..._Tp>
        explicit index(_Tp ... __t) restrict(amp,cpu)
        : base_(__t...) {
            static_assert(sizeof...(_Tp) <= 3, "Explicit constructor with rank greater than 3 is not allowed");
            static_assert(sizeof...(_Tp) == N, "rank should be consistency");
        }
# 285 "/opt/rocm/hcc/include/kalmar_index.h"
    explicit index(const int components[]) restrict(amp,cpu)
        : base_(components) {}
# 297 "/opt/rocm/hcc/include/kalmar_index.h"
    explicit index(int components[]) restrict(amp,cpu)
        : base_(components) {}
# 307 "/opt/rocm/hcc/include/kalmar_index.h"
    index& operator=(const index& other) restrict(amp,cpu) {
        base_.operator=(other.base_);
        return *this;
    }
# 319 "/opt/rocm/hcc/include/kalmar_index.h"
    int operator[] (unsigned int c) const restrict(amp,cpu) {
        return base_[c];
    }
    int& operator[] (unsigned int c) restrict(amp,cpu) {
        return base_[c];
    }
# 340 "/opt/rocm/hcc/include/kalmar_index.h"
    bool operator== (const index& other) const restrict(amp,cpu) {
        return index_helper<N, index<N> >::equal(*this, other);
    }
    bool operator!= (const index& other) const restrict(amp,cpu) {
        return !(*this == other);
    }
# 357 "/opt/rocm/hcc/include/kalmar_index.h"
    index& operator+=(const index& rhs) restrict(amp,cpu) {
        base_.operator+=(rhs.base_);
        return *this;
    }
    index& operator-=(const index& rhs) restrict(amp,cpu) {
        base_.operator-=(rhs.base_);
        return *this;
    }


    index& operator*=(const index& __r) restrict(amp,cpu) {
        base_.operator*=(__r.base_);
        return *this;
    }

    index& operator/=(const index& __r) restrict(amp,cpu) {
        base_.operator/=(__r.base_);
        return *this;
    }

    index& operator%=(const index& __r) restrict(amp,cpu) {
        base_.operator%=(__r.base_);
        return *this;
    }
# 392 "/opt/rocm/hcc/include/kalmar_index.h"
    index& operator+=(int value) restrict(amp,cpu) {
        base_.operator+=(value);
        return *this;
    }
    index& operator-=(int value) restrict(amp,cpu) {
        base_.operator-=(value);
        return *this;
    }
    index& operator*=(int value) restrict(amp,cpu) {
        base_.operator*=(value);
        return *this;
    }
    index& operator/=(int value) restrict(amp,cpu) {
        base_.operator/=(value);
        return *this;
    }
    index& operator%=(int value) restrict(amp,cpu) {
        base_.operator%=(value);
        return *this;
    }
# 423 "/opt/rocm/hcc/include/kalmar_index.h"
    index& operator++() restrict(amp,cpu) {
        base_.operator+=(1);
        return *this;
    }
    index operator++(int) restrict(amp,cpu) {
        index ret = *this;
        base_.operator+=(1);
        return ret;
    }
    index& operator--() restrict(amp,cpu) {
        base_.operator-=(1);
        return *this;
    }
    index operator--(int) restrict(amp,cpu) {
        index ret = *this;
        base_.operator-=(1);
        return ret;
    }



private:
    typedef index_impl<typename __make_indices<N>::type> base;
    base base_;
    template <int T> friend class Concurrency::extent;
    template <int T> friend class hc::extent;
    template <int K, typename Q> friend struct index_helper;
    template <int K, typename Q1, typename Q2> friend struct amp_helper;

public:
    __attribute__((annotate("__cxxamp_opencl_index")))
    void __cxxamp_opencl_index() restrict(amp,cpu)

    {
        index_helper<N, index<N>>::set(*this);
    }





};




template class index<1>;
template class index<2>;
template class index<3>;
# 491 "/opt/rocm/hcc/include/kalmar_index.h"
template <int N>
index<N> operator+(const index<N>& lhs, const index<N>& rhs) restrict(amp,cpu) {
    index<N> __r = lhs;
    __r += rhs;
    return __r;
}
template <int N>
index<N> operator-(const index<N>& lhs, const index<N>& rhs) restrict(amp,cpu) {
    index<N> __r = lhs;
    __r -= rhs;
    return __r;
}
# 522 "/opt/rocm/hcc/include/kalmar_index.h"
template <int N>
index<N> operator+(const index<N>& idx, int value) restrict(amp,cpu) {
    index<N> __r = idx;
    __r += value;
    return __r;
}
template <int N>
index<N> operator+(int value, const index<N>& idx) restrict(amp,cpu) {
    index<N> __r = idx;
    __r += value;
    return __r;
}
template <int N>
index<N> operator-(const index<N>& idx, int value) restrict(amp,cpu) {
    index<N> __r = idx;
    __r -= value;
    return __r;
}
template <int N>
index<N> operator-(int value, const index<N>& idx) restrict(amp,cpu) {
    index<N> __r(value);
    __r -= idx;
    return __r;
}
template <int N>
index<N> operator*(const index<N>& idx, int value) restrict(amp,cpu) {
    index<N> __r = idx;
    __r *= value;
    return __r;
}
template <int N>
index<N> operator*(int value, const index<N>& idx) restrict(amp,cpu) {
    index<N> __r(value);
    __r *= idx;
    return __r;
}
template <int N>
index<N> operator/(const index<N>& idx, int value) restrict(amp,cpu) {
    index<N> __r = idx;
    __r /= value;
    return __r;
}
template <int N>
index<N> operator/(int value, const index<N>& idx) restrict(amp,cpu) {
    index<N> __r(value);
    __r /= idx;
    return __r;
}
template <int N>
index<N> operator%(const index<N>& idx, int value) restrict(amp,cpu) {
    index<N> __r = idx;
    __r %= value;
    return __r;
}
template <int N>
index<N> operator%(int value, const index<N>& idx) restrict(amp,cpu) {
    index<N> __r(value);
    __r %= idx;
    return __r;
}




}
# 18 "/opt/rocm/hcc/include/hc.hpp" 2
# 1 "/opt/rocm/hcc/include/kalmar_runtime.h" 1



# 1 "/opt/rocm/hcc/include/kalmar_aligned_alloc.h" 1
# 14 "/opt/rocm/hcc/include/kalmar_aligned_alloc.h"
namespace Kalmar {

constexpr inline bool kalmar_is_alignment(std::size_t value) noexcept {
    return (value > 0) && ((value & (value - 1)) == 0);
}

inline void* kalmar_aligned_alloc(std::size_t alignment, std::size_t size) noexcept {
    ((kalmar_is_alignment(alignment)) ? static_cast<void> (0) : __assert_fail ("kalmar_is_alignment(alignment)", "/opt/rocm/hcc/include/kalmar_aligned_alloc.h", 21, __PRETTY_FUNCTION__));
    enum {
        N = std::alignment_of<void*>::value
    };
    if (alignment < N) {
        alignment = N;
    }
    void* memptr = __null;

    posix_memalign(&memptr, alignment, size);
    ((memptr) ? static_cast<void> (0) : __assert_fail ("memptr", "/opt/rocm/hcc/include/kalmar_aligned_alloc.h", 31, __PRETTY_FUNCTION__));

    return memptr;
}

inline void kalmar_aligned_free(void* ptr) noexcept {
    if (ptr) {
        free(ptr);
    }
}

}
# 5 "/opt/rocm/hcc/include/kalmar_runtime.h" 2

namespace hc {
class AmPointerInfo;
class completion_future;
};

typedef struct hsa_kernel_dispatch_packet_s hsa_kernel_dispatch_packet_t;

namespace Kalmar {
namespace enums {




enum access_type
{
    access_type_none = 0,
    access_type_read = (1 << 0),
    access_type_write = (1 << 1),
    access_type_read_write = access_type_read | access_type_write,
    access_type_auto = (1 << 31)
};

enum queuing_mode
{
    queuing_mode_immediate,
    queuing_mode_automatic
};

enum execute_order
{
    execute_in_order,
    execute_any_order
};



enum memory_scope
{
    no_scope=0,
    accelerator_scope=1,
    system_scope=2,
};

static inline memory_scope greater_scope(memory_scope scope1, memory_scope scope2)
{
    if ((scope1==system_scope) || (scope2 == system_scope)) {
        return system_scope;
    } else if ((scope1==accelerator_scope) || (scope2 == accelerator_scope)) {
        return accelerator_scope;
    } else {
        return no_scope;
    }
}


enum hcCommandKind {
    hcCommandInvalid= -1,

    hcMemcpyHostToHost = 0,
    hcMemcpyHostToDevice = 1,
    hcMemcpyDeviceToHost = 2,
    hcMemcpyDeviceToDevice = 3,
    hcCommandKernel = 4,
    hcCommandMarker = 5,
};



static inline bool isCopyCommand(hcCommandKind k)
{
    switch (k) {
        case hcMemcpyHostToHost:
        case hcMemcpyHostToDevice:
        case hcMemcpyDeviceToHost:
        case hcMemcpyDeviceToDevice:
            return true;
        default:
            return false;
    };
};



static inline bool isComputeQueueCommand(hcCommandKind k) {
    return (k == hcCommandKernel) || (k == hcCommandMarker);
};




enum hcWaitMode {
    hcWaitModeBlocked = 0,
    hcWaitModeActive = 1
};

enum hcAgentProfile {
    hcAgentProfileNone = 0,
    hcAgentProfileBase = 1,
    hcAgentProfileFull = 2
};

}
}



namespace Kalmar {

using namespace Kalmar::enums;


class KalmarDevice;
class KalmarQueue;
struct rw_info;




class KalmarAsyncOp {
public:
  KalmarAsyncOp(KalmarQueue *xqueue, hcCommandKind xCommandKind) : queue(xqueue), commandKind(xCommandKind), seqNum(0) {}

  virtual ~KalmarAsyncOp() {}
  virtual std::shared_future<void>* getFuture() { return nullptr; }
  virtual void* getNativeHandle() { return nullptr;}






  virtual uint64_t getBeginTimestamp() { return 0L; }






  virtual uint64_t getEndTimestamp() { return 0L; }






  virtual uint64_t getTimestampFrequency() { return 0L; }






  virtual bool isReady() { return false; }






  virtual void setWaitMode(hcWaitMode mode) {}

  uint64_t getSeqNum () const { return seqNum;};
  void setSeqNum (uint64_t s) {seqNum = s;};

  hcCommandKind getCommandKind() const { return commandKind; };
  void setCommandKind(hcCommandKind xCommandKind) { commandKind = xCommandKind; };

  KalmarQueue *getQueue() const { return queue; };

private:
  KalmarQueue *queue;


  hcCommandKind commandKind;



  uint64_t seqNum;

};




class KalmarQueue
{
public:

  KalmarQueue(KalmarDevice* pDev, queuing_mode mode = queuing_mode_automatic, execute_order order = execute_in_order)
      : pDev(pDev), mode(mode), order(order) {}

  virtual ~KalmarQueue() {}

  virtual void flush() {}
  virtual void wait(hcWaitMode mode = hcWaitModeBlocked) {}


  virtual void LaunchKernelWithDynamicGroupMemory(void *kernel, size_t dim_ext, size_t *ext, size_t *local_size, size_t dynamic_group_size) {}


  virtual std::shared_ptr<KalmarAsyncOp> LaunchKernelWithDynamicGroupMemoryAsync(void *kernel, size_t dim_ext, size_t *ext, size_t *local_size, size_t dynamic_group_size) { return nullptr; }


  virtual void LaunchKernel(void *kernel, size_t dim_ext, size_t *ext, size_t *local_size) {}


  virtual std::shared_ptr<KalmarAsyncOp> LaunchKernelAsync(void *kernel, size_t dim_ext, size_t *ext, size_t *local_size) { return LaunchKernelWithDynamicGroupMemoryAsync(kernel, dim_ext, ext, local_size, 0); }


  virtual void read(void* device, void* dst, size_t count, size_t offset) = 0;


  virtual void write(void* device, const void* src, size_t count, size_t offset, bool blocking) = 0;


  virtual void copy(void* src, void* dst, size_t count, size_t src_offset, size_t dst_offset, bool blocking) = 0;




  virtual void* map(void* device, size_t count, size_t offset, bool modify) = 0;


  virtual void unmap(void* device, void* addr, size_t count, size_t offset, bool modify) = 0;


  virtual void Push(void *kernel, int idx, void* device, bool modify) = 0;

  virtual uint32_t GetGroupSegmentSize(void *kernel) { return 0; }

  KalmarDevice* getDev() const { return pDev; }
  queuing_mode get_mode() const { return mode; }
  void set_mode(queuing_mode mod) { mode = mod; }

  execute_order get_execute_order() const { return order; }


  virtual int getPendingAsyncOps() { return 0; }


  virtual bool isEmpty() { return 0; }


  virtual void* getHSAQueue() { return nullptr; }


  virtual void* getHSAAgent() { return nullptr; }


  virtual void* getHSAAMRegion() { return nullptr; }

  virtual void* getHSAAMHostRegion() { return nullptr; }

  virtual void* getHSACoherentAMHostRegion() { return nullptr; }


  virtual void* getHSAKernargRegion() { return nullptr; }


  virtual bool hasHSAInterOp() { return false; }


  virtual std::shared_ptr<KalmarAsyncOp> EnqueueMarker(memory_scope) { return nullptr; }


  virtual std::shared_ptr<KalmarAsyncOp> EnqueueMarkerWithDependency(int count, std::shared_ptr <KalmarAsyncOp> *depOps, memory_scope scope) { return nullptr; }

  virtual std::shared_ptr<KalmarAsyncOp> detectStreamDeps(hcCommandKind commandKind, KalmarAsyncOp *newCopyOp) { return nullptr; };



  virtual std::shared_ptr<KalmarAsyncOp> EnqueueAsyncCopy(const void* src, void* dst, size_t size_bytes) { return nullptr; }
  virtual std::shared_ptr<KalmarAsyncOp> EnqueueAsyncCopyExt(const void* src, void* dst, size_t size_bytes,
                                                             hcCommandKind copyDir, const hc::AmPointerInfo &srcInfo, const hc::AmPointerInfo &dstInfo,
                                                             const Kalmar::KalmarDevice *copyDevice) { return nullptr; };


  virtual void copy(const void *src, void *dst, size_t size_bytes) { }



  virtual void copy_ext(const void *src, void *dst, size_t size_bytes, hcCommandKind copyDir, const hc::AmPointerInfo &srcInfo, const hc::AmPointerInfo &dstInfo, bool forceUnpinnedCopy) { };
  virtual void copy_ext(const void *src, void *dst, size_t size_bytes, hcCommandKind copyDir, const hc::AmPointerInfo &srcInfo, const hc::AmPointerInfo &dstInfo,
                        const Kalmar::KalmarDevice *copyDev, bool forceUnpinnedCopy) { };





  virtual void dispose() {}

  virtual void dispatch_hsa_kernel(const hsa_kernel_dispatch_packet_t *aql,
                                   const void * args, size_t argsize,
                                   hc::completion_future *cf) { };




  virtual bool set_cu_mask(const std::vector<bool>& cu_mask) { return false; };

private:
  KalmarDevice* pDev;
  queuing_mode mode;
  execute_order order;
};




class KalmarDevice
{
private:
    access_type cpu_type;
# 329 "/opt/rocm/hcc/include/kalmar_runtime.h"
    std::map< std::thread::id, std::shared_ptr<KalmarQueue> > tlsDefaultQueueMap;

    std::mutex tlsDefaultQueueMap_mutex;


protected:


    bool cpu_accessible_am;


    KalmarDevice(access_type type = access_type_read_write)
        : cpu_type(type),



          tlsDefaultQueueMap(), tlsDefaultQueueMap_mutex()

          {}
public:
    access_type get_access() const { return cpu_type; }
    void set_access(access_type type) { cpu_type = type; }

    virtual std::wstring get_path() const = 0;
    virtual std::wstring get_description() const = 0;
    virtual size_t get_mem() const = 0;
    virtual bool is_double() const = 0;
    virtual bool is_lim_double() const = 0;
    virtual bool is_unified() const = 0;
    virtual bool is_emulated() const = 0;
    virtual uint32_t get_version() const = 0;




    virtual void* create(size_t count, struct rw_info* key) = 0;



    virtual void release(void* ptr, struct rw_info* key) = 0;


    virtual void BuildProgram(void* size, void* source) {}


    virtual void* CreateKernel(const char* fun, KalmarQueue *queue) { return nullptr; }


    virtual bool IsCompatibleKernel(void* size, void* source) { return true; }


    virtual bool check(size_t* size, size_t dim_ext) { return true; }


    virtual std::shared_ptr<KalmarQueue> createQueue(execute_order order = execute_in_order) = 0;
    virtual ~KalmarDevice() {}

    std::shared_ptr<KalmarQueue> get_default_queue() {






        std::thread::id tid = std::this_thread::get_id();
        tlsDefaultQueueMap_mutex.lock();
        if (tlsDefaultQueueMap.find(tid) == tlsDefaultQueueMap.end()) {
            tlsDefaultQueueMap[tid] = createQueue();
        }
        std::shared_ptr<KalmarQueue> result = tlsDefaultQueueMap[tid];
        tlsDefaultQueueMap_mutex.unlock();
        return result;

    }


    virtual size_t GetMaxTileStaticSize() { return 0; }


    virtual std::vector< std::shared_ptr<KalmarQueue> > get_all_queues() { return std::vector< std::shared_ptr<KalmarQueue> >(); }

    virtual void memcpySymbol(const char* symbolName, void* hostptr, size_t count, size_t offset = 0, hcCommandKind kind = hcMemcpyHostToDevice) {}

    virtual void memcpySymbol(void* symbolAddr, void* hostptr, size_t count, size_t offset = 0, hcCommandKind kind = hcMemcpyHostToDevice) {}

    virtual void* getSymbolAddress(const char* symbolName) { return nullptr; }


    virtual void* getHSAAgent() { return nullptr; }


    virtual hcAgentProfile getProfile() { return hcAgentProfileNone; }


    virtual bool is_peer(const KalmarDevice* other) {return false;}


    virtual unsigned int get_compute_unit_count() {return 0;}

    virtual int get_seqnum() const {return -1;}

    virtual bool has_cpu_accessible_am() {return false;}

};

class CPUQueue final : public KalmarQueue
{
public:

  CPUQueue(KalmarDevice* pDev) : KalmarQueue(pDev) {}

  void read(void* device, void* dst, size_t count, size_t offset) override {
      if (dst != device)
          memmove(dst, (char*)device + offset, count);
  }

  void write(void* device, const void* src, size_t count, size_t offset, bool blocking) override {
      if (src != device)
          memmove((char*)device + offset, src, count);
  }

  void copy(void* src, void* dst, size_t count, size_t src_offset, size_t dst_offset, bool blocking) override {
      if (src != dst)
          memmove((char*)dst + dst_offset, (char*)src + src_offset, count);
  }

  void* map(void* device, size_t count, size_t offset, bool modify) override {
      return (char*)device + offset;
  }

  void unmap(void* device, void* addr, size_t count, size_t offset, bool modify) override {}

  void Push(void *kernel, int idx, void* device, bool modify) override {}
};


class CPUDevice final : public KalmarDevice
{
public:
    std::wstring get_path() const override { return L"cpu"; }
    std::wstring get_description() const override { return L"CPU Device"; }
    size_t get_mem() const override { return 0; }
    bool is_double() const override { return true; }
    bool is_lim_double() const override { return true; }
    bool is_unified() const override { return true; }
    bool is_emulated() const override { return true; }
    uint32_t get_version() const override { return 0; }

    std::shared_ptr<KalmarQueue> createQueue(execute_order order = execute_in_order) override { return std::shared_ptr<KalmarQueue>(new CPUQueue(this)); }
    void* create(size_t count, struct rw_info* ) override { return kalmar_aligned_alloc(0x1000, count); }
    void release(void* ptr, struct rw_info* ) override { kalmar_aligned_free(ptr); }
    void* CreateKernel(const char* fun, KalmarQueue *queue) { return nullptr; }
};




class KalmarContext
{
private:



    KalmarDevice* get_default_dev() {
        if (!def) {
            if (Devices.size() <= 1) {
                fprintf(stderr, "There is no device can be used to do the computation\n");
                exit(-1);
            }
            def = Devices[1];
        }
        return def;
    }
protected:

    KalmarDevice* def;
    std::vector<KalmarDevice*> Devices;
    KalmarContext() : def(nullptr), Devices() { Devices.push_back(new CPUDevice); }
public:
    virtual ~KalmarContext() {}

    std::vector<KalmarDevice*> getDevices() { return Devices; }


    bool set_default(const std::wstring& path) {
        auto result = std::find_if(std::begin(Devices), std::end(Devices),
                                   [&] (const KalmarDevice* pDev)
                                   { return pDev->get_path() == path; });
        if (result == std::end(Devices))
            return false;
        else {
            def = *result;
            return true;
        }
    }


    std::shared_ptr<KalmarQueue> auto_select() {
        return get_default_dev()->get_default_queue();
    }


    KalmarDevice* getDevice(std::wstring path = L"") {
        if (path == L"default" || path == L"")
            return get_default_dev();
        auto result = std::find_if(std::begin(Devices), std::end(Devices),
                                   [&] (const KalmarDevice* dev)
                                   { return dev->get_path() == path; });
        if (result != std::end(Devices))
            return *result;
        else
            return get_default_dev();
    }


    virtual uint64_t getSystemTicks() { return 0L; };


    virtual uint64_t getSystemTickFrequency() { return 0L; };
};

KalmarContext *getContext();

namespace CLAMP {
# 561 "/opt/rocm/hcc/include/kalmar_runtime.h"
extern void *CreateKernel(std::string, KalmarQueue*);

extern void PushArg(void *, int, size_t, const void *);
extern void PushArgPtr(void *, int, size_t, const void *);

}

static inline const std::shared_ptr<KalmarQueue> get_cpu_queue() {
    static auto cpu_queue = getContext()->getDevice(L"cpu")->get_default_queue();
    return cpu_queue;
}

static inline bool is_cpu_queue(const std::shared_ptr<KalmarQueue>& Queue) {
    return Queue->getDev()->get_path() == L"cpu";
}

static inline void copy_helper(std::shared_ptr<KalmarQueue>& srcQueue, void* src,
                               std::shared_ptr<KalmarQueue>& dstQueue, void* dst,
                               size_t cnt, bool block,
                               size_t src_offset = 0, size_t dst_offset = 0) {


    if (src == dst)
        return ;




    if (is_cpu_queue(dstQueue))
        srcQueue->read(src, (char*)dst + dst_offset, cnt, src_offset);
    else
        dstQueue->write(dst, (char*)src + src_offset, cnt, dst_offset, block);
}




enum states
{

    modified,

    shared,

    invalid
};







struct dev_info
{
    void* data;
    states state;
};
# 629 "/opt/rocm/hcc/include/kalmar_runtime.h"
struct rw_info
{




    void *data;
    const size_t count;

    std::shared_ptr<KalmarQueue> curr;


    std::shared_ptr<KalmarQueue> master;

    std::shared_ptr<KalmarQueue> stage;



    std::map<KalmarDevice*, dev_info> devs;
    access_type mode;


    unsigned int HostPtr : 1;




    bool toReleaseDevPointer;







    rw_info(const size_t count, void* ptr)
        : data(ptr), count(count), curr(nullptr), master(nullptr), stage(nullptr),
        devs(), mode(access_type_none), HostPtr(ptr != nullptr), toReleaseDevPointer(true) {
# 675 "/opt/rocm/hcc/include/kalmar_runtime.h"
            if (ptr) {
                mode = access_type_read_write;
                curr = master = get_cpu_queue();
                devs[curr->getDev()] = {ptr, modified};
            }
        }







    rw_info(const std::shared_ptr<KalmarQueue>& Queue, const std::shared_ptr<KalmarQueue>& Stage,
            const size_t count, access_type mode_) : data(nullptr), count(count),
    curr(Queue), master(Queue), stage(nullptr), devs(), mode(mode_), HostPtr(false), toReleaseDevPointer(true) {






        if (mode == access_type_auto)
            mode = curr->getDev()->get_access();
        devs[curr->getDev()] = {curr->getDev()->create(count, this), modified};


        if (is_cpu_queue(curr) || (curr->getDev()->is_unified() && mode != access_type_none))
            data = devs[curr->getDev()].data;
        if (is_cpu_queue(curr)) {
            stage = Stage;
            if (Stage != curr)
                devs[stage->getDev()] = {stage->getDev()->create(count, this), invalid};
        } else

            stage = curr;
    }






    rw_info(const std::shared_ptr<KalmarQueue>& Queue, const std::shared_ptr<KalmarQueue>& Stage,
            const size_t count,
            void* device_pointer,
            access_type mode_) : data(nullptr), count(count), curr(Queue), master(Queue), stage(nullptr), devs(), mode(mode_), HostPtr(false), toReleaseDevPointer(false) {
         if (mode == access_type_auto)
             mode = curr->getDev()->get_access();
         devs[curr->getDev()] = { device_pointer, modified };


         if (is_cpu_queue(curr) || (curr->getDev()->is_unified() && mode != access_type_none))
             data = devs[curr->getDev()].data;
         if (is_cpu_queue(curr)) {
             stage = Stage;
             if (Stage != curr)
                 devs[stage->getDev()] = {stage->getDev()->create(count, this), invalid};
         } else

             stage = curr;
    }

    void* get_device_pointer() {
        return devs[curr->getDev()].data;
    }

    void construct(std::shared_ptr<KalmarQueue> pQueue) {
        curr = pQueue;
        devs[pQueue->getDev()] = {pQueue->getDev()->create(count, this), invalid};
        if (is_cpu_queue(pQueue))
            data = devs[pQueue->getDev()].data;
    }

    void disc() {
        for (auto& it : devs)
            it.second.state = invalid;
    }







    void try_switch_to_cpu() {
        if (is_cpu_queue(curr))
            return;
        auto cpu_queue = get_cpu_queue();
        if (devs.find(cpu_queue->getDev()) != std::end(devs))
            if (devs[cpu_queue->getDev()].state == shared)
                curr = cpu_queue;
    }






    void sync(std::shared_ptr<KalmarQueue> pQueue, bool modify, bool block = true) {




        if (!curr) {


            dev_info dev = {pQueue->getDev()->create(count, this),
                modify ? modified : shared};
            devs[pQueue->getDev()] = dev;
            if (is_cpu_queue(pQueue))
                data = dev.data;
            curr = pQueue;
            return;
        }

        if (curr == pQueue)
            return;


        if (curr->getDev() == pQueue->getDev()) {

            curr = pQueue;
            if (modify) {
                disc();
                devs[curr->getDev()].state = modified;
            }
            return;
        }


        if (devs.find(pQueue->getDev()) == std::end(devs)) {
            dev_info dev = {pQueue->getDev()->create(count, this), invalid};
            devs[pQueue->getDev()] = dev;
            if (is_cpu_queue(pQueue))
                data = dev.data;
        }

        try_switch_to_cpu();
        dev_info& dst = devs[pQueue->getDev()];
        dev_info& src = devs[curr->getDev()];
        if (dst.state == invalid && src.state != invalid)
            copy_helper(curr, src.data, pQueue, dst.data, count, block);


        curr = pQueue;
        if (modify) {
            disc();
            dst.state = modified;
        } else {
            dst.state = shared;
            if (src.state == modified)
                src.state = shared;
        }
    }





    void* map(size_t cnt, size_t offset, bool modify) {
        if (cnt == 0)
            cnt = count;


        if (!curr) {
            curr = getContext()->auto_select();
            devs[curr->getDev()] = {curr->getDev()->create(count, this), modify ? modified : shared};
            return curr->map(data, cnt, offset, modify);
        }
        try_switch_to_cpu();
        dev_info& info = devs[curr->getDev()];
        if (info.state == shared && modify) {
            disc();
            info.state = modified;
        }
        return curr->map(info.data, cnt, offset, modify);
    }

    void unmap(void* addr, size_t cnt, size_t offset, bool modify) { curr->unmap(devs[curr->getDev()].data, addr, cnt, offset, modify); }




    void synchronize(bool modify) { sync(master, modify); }



    void get_cpu_access(bool modify) { sync(get_cpu_queue(), modify); }



    void write(const void* src, int cnt, int offset, bool blocking) {
        curr->write(devs[curr->getDev()].data, src, cnt, offset, blocking);
        dev_info& dev = devs[curr->getDev()];
        if (dev.state != modified) {
            disc();
            dev.state = modified;
        }
    }


    void read(void* dst, int cnt, int offset) {
        curr->read(devs[curr->getDev()].data, dst, cnt, offset);
    }


    void copy(rw_info* other, int src_offset, int dst_offset, int cnt) {
        if (cnt == 0)
            cnt = count;
        if (!curr) {
            if (!other->curr)
                return;
            else
                construct(other->curr);
        } else {
            if (!other->curr)
                other->construct(curr);
        }
        dev_info& dst = other->devs[other->curr->getDev()];
        dev_info& src = devs[curr->getDev()];

        if (src.state == invalid) {
            src.state = shared;
            if (is_cpu_queue(curr))
                memset((char*)src.data + src_offset, 0, cnt);
            else {
                void *ptr = kalmar_aligned_alloc(0x1000, cnt);
                memset(ptr, 0, cnt);
                curr->write(src.data, ptr, cnt, src_offset, true);
                kalmar_aligned_free(ptr);
            }
        }
        copy_helper(curr, src.data, other->curr, dst.data, cnt, true, src_offset, dst_offset);
        other->disc();
        dst.state = modified;
    }

    ~rw_info() {
# 924 "/opt/rocm/hcc/include/kalmar_runtime.h"
        if (HostPtr)
            synchronize(false);
        if (curr) {


            curr->wait();
        }
        auto cpu_dev = get_cpu_queue()->getDev();
        if (devs.find(cpu_dev) != std::end(devs)) {
            if (!HostPtr)
                cpu_dev->release(devs[cpu_dev].data, this);
            devs.erase(cpu_dev);
        }
        KalmarDevice* pDev;
        dev_info info;
        for (const auto it : devs) {
            std::tie(pDev, info) = it;
            if (toReleaseDevPointer)
                pDev->release(info.data, this);
        }
    }
};

}
# 19 "/opt/rocm/hcc/include/hc.hpp" 2
# 1 "/opt/rocm/hcc/include/kalmar_serialize.h" 1







namespace Kalmar
{


class FunctorBufferWalker {
public:
    virtual void Append(size_t sz, const void* s) {}
    virtual void AppendPtr(size_t sz, const void* s) {}
    virtual void visit_buffer(struct rw_info* rw, bool modify, bool isArray) = 0;
};


class Serialize {
    FunctorBufferWalker* vis;
public:
    Serialize(FunctorBufferWalker* vis) : vis(vis) {}
    void Append(size_t sz, const void* s) { vis->Append(sz, s); }
    void AppendPtr(size_t sz, const void* s) { vis->AppendPtr(sz, s); }
    void visit_buffer(struct rw_info* rw, bool modify, bool isArray) {
        vis->visit_buffer(rw, modify, isArray);
    }
};



class CPUVisitor : public FunctorBufferWalker
{
    std::shared_ptr<KalmarQueue> pQueue;
    std::set<struct rw_info*> bufs;
public:
    CPUVisitor(std::shared_ptr<KalmarQueue> pQueue) : pQueue(pQueue) {}
    void visit_buffer(struct rw_info* rw, bool modify, bool isArray) override {
        if (isArray) {
            auto curr = pQueue->getDev()->get_path();
            auto path = rw->master->getDev()->get_path();
            if (path == L"cpu") {
                auto asoc = rw->stage->getDev()->get_path();
                if (asoc == L"cpu" || path != curr)
                    throw runtime_exception(__errorMsg_UnsupportedAccelerator, 0x80004005);
            }
        }
        rw->sync(pQueue, modify, false);
        if (bufs.find(rw) == std::end(bufs)) {
            void*& device = rw->devs[pQueue->getDev()].data;
            void*& data = rw->data;
            bufs.insert(rw);
            std::swap(device, data);
        }
    }
};


class BufferArgumentsAppender : public FunctorBufferWalker
{
    std::shared_ptr<KalmarQueue> pQueue;
    void* k_;
    int current_idx_;
public:
    BufferArgumentsAppender(std::shared_ptr<KalmarQueue> pQueue, void* k)
        : pQueue(pQueue), k_(k), current_idx_(0) {}
    void Append(size_t sz, const void *s) override {
        CLAMP::PushArg(k_, current_idx_++, sz, s);
    }
    void AppendPtr(size_t sz, const void *s) override {
        CLAMP::PushArgPtr(k_, current_idx_++, sz, s);
    }
    void visit_buffer(struct rw_info* rw, bool modify, bool isArray) override {
        if (isArray) {
            auto curr = pQueue->getDev()->get_path();
            auto path = rw->master->getDev()->get_path();
            if (path == L"cpu") {
                auto asoc = rw->stage->getDev()->get_path();
                if (asoc == L"cpu" || path != curr)
                    throw runtime_exception(__errorMsg_UnsupportedAccelerator, 0x80004005);
            }
        }
        rw->sync(pQueue, modify, false);
        pQueue->Push(k_, current_idx_++, rw->devs[pQueue->getDev()].data, modify);
    }
};







class QueueSearcher : public FunctorBufferWalker
{
    std::shared_ptr<KalmarQueue> pQueue;
public:
    QueueSearcher() = default;
    void visit_buffer(struct rw_info* rw, bool modify, bool isArray) override {
        if (isArray && !pQueue) {
            if (rw->master->getDev()->get_path() != L"cpu")
                pQueue = rw->master;
            else if (rw->stage->getDev()->get_path() != L"cpu")
                pQueue = rw->stage;
        }
    }
    std::shared_ptr<KalmarQueue> get_que() const { return pQueue; }
};

}
# 20 "/opt/rocm/hcc/include/hc.hpp" 2
# 1 "/opt/rocm/hcc/include/kalmar_launch.h" 1
# 15 "/opt/rocm/hcc/include/kalmar_launch.h"
namespace Kalmar {

template <typename Kernel>
static void append_kernel(const std::shared_ptr<KalmarQueue>& pQueue, const Kernel& f, void* kernel)
{
  Kalmar::BufferArgumentsAppender vis(pQueue, kernel);
  Kalmar::Serialize s(&vis);
  f.__cxxamp_serialize(s);
}

template <typename Kernel>
static inline std::shared_ptr<KalmarQueue> get_availabe_que(const Kernel& f)
{
    Kalmar::QueueSearcher ser;
    Kalmar::Serialize s(&ser);
    f.__cxxamp_serialize(s);
    if (ser.get_que())
        return ser.get_que();
    else
        return getContext()->auto_select();
}

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
template<typename Kernel, int dim_ext>
inline std::shared_ptr<KalmarAsyncOp>
mcw_cxxamp_launch_kernel_async(const std::shared_ptr<KalmarQueue>& pQueue, size_t *ext,
  size_t *local_size, const Kernel& f) restrict(cpu,amp) {
# 57 "/opt/rocm/hcc/include/kalmar_launch.h"
}
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
template<typename Kernel, int dim_ext>
inline
void mcw_cxxamp_launch_kernel(const std::shared_ptr<KalmarQueue>& pQueue, size_t *ext,
                              size_t *local_size, const Kernel& f) restrict(cpu,amp) {
# 80 "/opt/rocm/hcc/include/kalmar_launch.h"
}
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
template<typename Kernel>
inline void* mcw_cxxamp_get_kernel(const std::shared_ptr<KalmarQueue>& pQueue, const Kernel& f) restrict(cpu,amp) {
# 98 "/opt/rocm/hcc/include/kalmar_launch.h"
  return __null;

}
#pragma clang diagnostic pop

template<typename Kernel, int dim_ext>
inline
void mcw_cxxamp_execute_kernel_with_dynamic_group_memory(
  const std::shared_ptr<KalmarQueue>& pQueue, size_t *ext, size_t *local_size,
  const Kernel& f, void *kernel, size_t dynamic_group_memory_size) restrict(cpu,amp) {




}

template<typename Kernel, int dim_ext>
inline std::shared_ptr<KalmarAsyncOp>
mcw_cxxamp_execute_kernel_with_dynamic_group_memory_async(
  const std::shared_ptr<KalmarQueue>& pQueue, size_t *ext, size_t *local_size,
  const Kernel& f, void *kernel, size_t dynamic_group_memory_size) restrict(cpu,amp) {




}

}
# 21 "/opt/rocm/hcc/include/hc.hpp" 2
# 1 "/opt/rocm/hcc/include/kalmar_buffer.h" 1
# 14 "/opt/rocm/hcc/include/kalmar_buffer.h"
namespace Kalmar {


template <typename T>
class _data {
public:
    _data() = delete;
    _data(int count) : p_(nullptr) {}
    _data(const _data& d) restrict(cpu, amp)
        : p_(d.p_) {}
    _data(int count, void* d) restrict(cpu, amp)
        : p_(static_cast<T*>(d)) {}
    template <typename U>
        _data(const _data<U>& d) restrict(cpu, amp)
        : p_(reinterpret_cast<T *>(d.get())) {}
    __attribute__((annotate("user_deserialize")))
        explicit _data(T* t) restrict(cpu, amp) { p_ = t; }
    T* get(void) const restrict(cpu, amp) { return p_; }
    T* get_device_pointer() const restrict(cpu, amp) { return p_; }
    std::shared_ptr<KalmarQueue> get_av() const { return nullptr; }
    void reset() const {}

    T* map_ptr(bool modify, size_t count, size_t offset) const { return nullptr; }
    void unmap_ptr(const void* addr, bool modify, size_t count, size_t offset) const {}
    void synchronize(bool modify = false) const {}
    void get_cpu_access(bool modify = false) const {}
    void copy(_data<T> other, int, int, int) const {}
    void write(const T*, int , int offset = 0, bool blocking = false) const {}
    void read(T*, int , int offset = 0) const {}
    void refresh() const {}
    void set_const() const {}
    access_type get_access() const { return access_type_auto; }
    std::shared_ptr<KalmarQueue> get_stage() const { return nullptr; }

private:
    T* p_;
};

template <typename T>
class _data_host {
    mutable std::shared_ptr<rw_info> mm;
    bool isArray;
    template <typename U> friend class _data_host;
public:
    _data_host(size_t count, const void* src = nullptr)
        : mm(std::make_shared<rw_info>(count*sizeof(T), const_cast<void*>(src))),
        isArray(false) {}

    _data_host(std::shared_ptr<KalmarQueue> av, std::shared_ptr<KalmarQueue> stage, int count,
               access_type mode)
        : mm(std::make_shared<rw_info>(av, stage, count*sizeof(T), mode)), isArray(true) {}

    _data_host(std::shared_ptr<KalmarQueue> av, std::shared_ptr<KalmarQueue> stage, int count,
               void* device_pointer, access_type mode)
        : mm(std::make_shared<rw_info>(av, stage, count*sizeof(T), device_pointer, mode)), isArray(true) {}

    _data_host(const _data_host& other) : mm(other.mm), isArray(false) {}

    template <typename U>
        _data_host(const _data_host<U>& other) : mm(other.mm), isArray(false) {}

    T *get() const { return static_cast<T*>(mm->data); }
    T* get_device_pointer() const { return static_cast<T*>(mm->get_device_pointer()); }
    void synchronize(bool modify = false) const { mm->synchronize(modify); }
    void discard() const { mm->disc(); }
    void refresh() const {}
    size_t size() const { return mm->count; }
    void reset() const { mm.reset(); }
    void get_cpu_access(bool modify = false) const { mm->get_cpu_access(modify); }
    std::shared_ptr<KalmarQueue> get_av() const { return mm->master; }
    std::shared_ptr<KalmarQueue> get_stage() const { return mm->stage; }
    access_type get_access() const { return mm->mode; }
    void copy(_data_host<T> other, int src_offset, int dst_offset, int size) const {
        mm->copy(other.mm.get(), src_offset * sizeof(T), dst_offset * sizeof(T), size * sizeof(T));
    }
    void write(const T* src, int size, int offset = 0, bool blocking = false) const {
        mm->write(src, size * sizeof(T), offset * sizeof(T), blocking);
    }
    void read(T* dst, int size, int offset = 0) const {
        mm->read(dst, size * sizeof(T), offset * sizeof(T));
    }
    T* map_ptr(bool modify, size_t count, size_t offset) const {
        return (T*)mm->map(count * sizeof(T), offset * sizeof(T), modify);
    }
    void unmap_ptr(const void* addr, bool modify, size_t count, size_t offset) const { return mm->unmap(const_cast<void*>(addr), count * sizeof(T), offset * sizeof(T), modify); }
    void sync_to(std::shared_ptr<KalmarQueue> pQueue) const { mm->sync(pQueue, false); }

    __attribute__((annotate("serialize")))
        void __cxxamp_serialize(Serialize& s) const {
            s.visit_buffer(mm.get(), !std::is_const<T>::value, isArray);
        }
    __attribute__((annotate("user_deserialize")))
        explicit _data_host(typename std::remove_const<T>::type* t) {}
};

}
# 22 "/opt/rocm/hcc/include/hc.hpp" 2
# 1 "/opt/rocm/hcc/include/kalmar_math.h" 1
# 10 "/opt/rocm/hcc/include/kalmar_math.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 1 3
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/cmath" 3
# 11 "/opt/rocm/hcc/include/kalmar_math.h" 2


extern "C" __fp16 __hc_acos_half(__fp16 x) restrict(amp);
extern "C" float __hc_acos(float x) restrict(amp);
extern "C" double __hc_acos_double(double x) restrict(amp);

extern "C" __fp16 __hc_acosh_half(__fp16 x) restrict(amp);
extern "C" float __hc_acosh(float x) restrict(amp);
extern "C" double __hc_acosh_double(double x) restrict(amp);

extern "C" __fp16 __hc_asin_half(__fp16 x) restrict(amp);
extern "C" float __hc_asin(float x) restrict(amp);
extern "C" double __hc_asin_double(double x) restrict(amp);

extern "C" __fp16 __hc_asinh_half(__fp16 x) restrict(amp);
extern "C" float __hc_asinh(float x) restrict(amp);
extern "C" double __hc_asinh_double(double x) restrict(amp);

extern "C" __fp16 __hc_atan_half(__fp16 x) restrict(amp);
extern "C" float __hc_atan(float x) restrict(amp);
extern "C" double __hc_atan_double(double x) restrict(amp);

extern "C" __fp16 __hc_atanh_half(__fp16 x) restrict(amp);
extern "C" float __hc_atanh(float x) restrict(amp);
extern "C" double __hc_atanh_double(double x) restrict(amp);

extern "C" __fp16 __hc_atan2_half(__fp16 y, __fp16 x) restrict(amp);
extern "C" float __hc_atan2(float y, float x) restrict(amp);
extern "C" double __hc_atan2_double(double y, double x) restrict(amp);

extern "C" __fp16 __hc_cbrt_half(__fp16 x) restrict(amp);
extern "C" float __hc_cbrt(float x) restrict(amp);
extern "C" double __hc_cbrt_double(double x) restrict(amp);

extern "C" __fp16 __hc_ceil_half(__fp16 x) restrict(amp);
extern "C" float __hc_ceil(float x) restrict(amp);
extern "C" double __hc_ceil_double(double x) restrict(amp);

extern "C" __fp16 __hc_copysign_half(__fp16 x, __fp16 y) restrict(amp);
extern "C" float __hc_copysign(float x, float y) restrict(amp);
extern "C" double __hc_copysign_double(double x, double y) restrict(amp);

extern "C" __fp16 __hc_cos_half(__fp16 x) restrict(amp);
extern "C" __fp16 __hc_cos_native_half(__fp16 x) restrict(amp);
extern "C" float __hc_cos(float x) restrict(amp);
extern "C" float __hc_cos_native(float x) restrict(amp);
extern "C" double __hc_cos_double(double x) restrict(amp);

extern "C" __fp16 __hc_cosh_half(__fp16 x) restrict(amp);
extern "C" float __hc_cosh(float x) restrict(amp);
extern "C" double __hc_cosh_double(double x) restrict(amp);

extern "C" __fp16 __hc_cospi_half(__fp16 x) restrict(amp);
extern "C" float __hc_cospi(float x) restrict(amp);
extern "C" double __hc_cospi_double(double x) restrict(amp);

extern "C" __fp16 __hc_erf_half(__fp16 x) restrict(amp);
extern "C" float __hc_erf(float x) restrict(amp);
extern "C" double __hc_erf_double(double x) restrict(amp);

extern "C" __fp16 __hc_erfc_half(__fp16 x) restrict(amp);
extern "C" float __hc_erfc(float x) restrict(amp);
extern "C" double __hc_erfc_double(double x) restrict(amp);

extern "C" __fp16 __hc_erfcinv_half(__fp16 x) restrict(amp);
extern "C" float __hc_erfcinv(float x) restrict(amp);
extern "C" double __hc_erfcinv_double(double x) restrict(amp);

extern "C" __fp16 __hc_erfinv_half(__fp16 x) restrict(amp);
extern "C" float __hc_erfinv(float x) restrict(amp);
extern "C" double __hc_erfinv_double(double x) restrict(amp);

extern "C" __fp16 __hc_exp_half(__fp16 x) restrict(amp);
extern "C" float __hc_exp(float x) restrict(amp);
extern "C" double __hc_exp_double(double x) restrict(amp);

extern "C" __fp16 __hc_exp10_half(__fp16 x) restrict(amp);
extern "C" float __hc_exp10(float x) restrict(amp);
extern "C" double __hc_exp10_double(double x) restrict(amp);

extern "C" __fp16 __hc_exp2_native_half(__fp16 x) restrict(amp);
extern "C" __fp16 __hc_exp2_half(__fp16 x) restrict(amp);
extern "C" float __hc_exp2(float x) restrict(amp);
extern "C" float __hc_exp2_native(float x) restrict(amp);
extern "C" double __hc_exp2_double(double x) restrict(amp);

extern "C" __fp16 __hc_expm1_half(__fp16 x) restrict(amp);
extern "C" float __hc_expm1(float x) restrict(amp);
extern "C" double __hc_expm1_double(double x) restrict(amp);

extern "C" __fp16 __hc_fabs_half(__fp16 x) restrict(amp);
extern "C" float __hc_fabs(float x) restrict(amp);
extern "C" double __hc_fabs_double(double x) restrict(amp);

extern "C" __fp16 __hc_fdim_half(__fp16 x, __fp16 y) restrict(amp);
extern "C" float __hc_fdim(float x, float y) restrict(amp);
extern "C" double __hc_fdim_double(double x, double y) restrict(amp);

extern "C" __fp16 __hc_floor_half(__fp16 x) restrict(amp);
extern "C" float __hc_floor(float x) restrict(amp);
extern "C" double __hc_floor_double(double x) restrict(amp);

extern "C" __fp16 __hc_fma_half(__fp16 x, __fp16 y, __fp16 z) restrict(amp);
extern "C" float __hc_fma(float x, float y, float z) restrict(amp);
extern "C" double __hc_fma_double(double x, double y, double z) restrict(amp);

extern "C" __fp16 __hc_fmax_half(__fp16 x, __fp16 y) restrict(amp);
extern "C" float __hc_fmax(float x, float y) restrict(amp);
extern "C" double __hc_fmax_double(double x, double y) restrict(amp);

extern "C" __fp16 __hc_fmin_half(__fp16 x, __fp16 y) restrict(amp);
extern "C" float __hc_fmin(float x, float y) restrict(amp);
extern "C" double __hc_fmin_double(double x, double y) restrict(amp);

extern "C" __fp16 __hc_fmod_half(__fp16 x, __fp16 y) restrict(amp);
extern "C" float __hc_fmod(float x, float y) restrict(amp);
extern "C" double __hc_fmod_double(double x, double y) restrict(amp);

extern "C" int __hc_fpclassify_half(__fp16 x) restrict(amp);
extern "C" int __hc_fpclassify(float x) restrict(amp);
extern "C" int __hc_fpclassify_double(double x) restrict(amp);

extern "C" __fp16 __hc_frexp_half(__fp16 x, int *exp) restrict(amp);
extern "C" float __hc_frexp(float x, int *exp) restrict(amp);
extern "C" double __hc_frexp_double(double x, int *exp) restrict(amp);

extern "C" __fp16 __hc_hypot_half(__fp16 x, __fp16 y) restrict(amp);
extern "C" float __hc_hypot(float x, float y) restrict(amp);
extern "C" double __hc_hypot_double(double x, double y) restrict(amp);

extern "C" int __hc_ilogb_half(__fp16 x) restrict(amp);
extern "C" int __hc_ilogb(float x) restrict(amp);
extern "C" int __hc_ilogb_double(double x) restrict(amp);

extern "C" int __hc_isfinite_half(__fp16 x) restrict(amp);
extern "C" int __hc_isfinite(float x) restrict(amp);
extern "C" int __hc_isfinite_double(double x) restrict(amp);

extern "C" int __hc_isinf_half(__fp16 x) restrict(amp);
extern "C" int __hc_isinf(float x) restrict(amp);
extern "C" int __hc_isinf_double(double x) restrict(amp);

extern "C" int __hc_isnan_half(__fp16 x) restrict(amp);
extern "C" int __hc_isnan(float x) restrict(amp);
extern "C" int __hc_isnan_double(double x) restrict(amp);

extern "C" int __hc_isnormal_half(__fp16 x) restrict(amp);
extern "C" int __hc_isnormal(float x) restrict(amp);
extern "C" int __hc_isnormal_double(double x) restrict(amp);

extern "C" __fp16 __hc_ldexp_half(__fp16 x, std::int16_t exp) [[hc]];
extern "C" float __hc_ldexp(float x, int exp) restrict(amp);
extern "C" double __hc_ldexp_double(double x, int exp) restrict(amp);

extern "C" __fp16 __hc_lgamma_half(__fp16 x) restrict(amp);
extern "C" float __hc_lgamma(float x) restrict(amp);
extern "C" double __hc_lgamma_double(double x) restrict(amp);

extern "C" __fp16 __hc_log_half(__fp16 x) restrict(amp);
extern "C" float __hc_log(float x) restrict(amp);
extern "C" float __hc_log_native(float x) restrict(amp);
extern "C" double __hc_log_double(double x) restrict(amp);

extern "C" __fp16 __hc_log10_half(__fp16 x) restrict(amp);
extern "C" float __hc_log10(float x) restrict(amp);
extern "C" double __hc_log10_double(double x) restrict(amp);

extern "C" __fp16 __hc_log2_half(__fp16 x) restrict(amp);
extern "C" __fp16 __hc_log2_native_half(__fp16 x) restrict(amp);
extern "C" float __hc_log2(float x) restrict(amp);
extern "C" float __hc_log2_native(float x) restrict(amp);
extern "C" double __hc_log2_double(double x) restrict(amp);

extern "C" __fp16 __hc_log1p_half(__fp16 x) restrict(amp);
extern "C" float __hc_log1p(float x) restrict(amp);
extern "C" double __hc_log1p_double(double x) restrict(amp);

extern "C" __fp16 __hc_logb_half(__fp16 x) restrict(amp);
extern "C" float __hc_logb(float x) restrict(amp);
extern "C" double __hc_logb_double(double x) restrict(amp);

extern "C" __fp16 __hc_modf_half(__fp16 x, __fp16 *iptr) restrict(amp);
extern "C" float __hc_modf(float x, float *iptr) restrict(amp);
extern "C" double __hc_modf_double(double x, double *iptr) restrict(amp);

extern "C" __fp16 __hc_nan_half(int tagp) restrict(amp);
extern "C" float __hc_nan(int tagp) restrict(amp);
extern "C" double __hc_nan_double(unsigned long tagp) restrict(amp);

extern "C" __fp16 __hc_nearbyint_half(__fp16 x) restrict(amp);
extern "C" float __hc_nearbyint(float x) restrict(amp);
extern "C" double __hc_nearbyint_double(double x) restrict(amp);

extern "C" __fp16 __hc_nextafter_half(__fp16 x, __fp16 y) restrict(amp);
extern "C" float __hc_nextafter(float x, float y) restrict(amp);
extern "C" double __hc_nextafter_double(double x, double y) restrict(amp);

extern "C" __fp16 __hc_pow_half(__fp16 x, __fp16 y) restrict(amp);
extern "C" float __hc_pow(float x, float y) restrict(amp);
extern "C" double __hc_pow_double(double x, double y) restrict(amp);

extern "C" __fp16 __hc_rcbrt_half(__fp16 x) restrict(amp);
extern "C" float __hc_rcbrt(float x) restrict(amp);
extern "C" double __hc_rcbrt_double(double x) restrict(amp);


extern "C" __fp16 __hc_rcp_native_half(__fp16 x) restrict(amp);
extern "C" float __hc_rcp_native(float x) restrict(amp);

extern "C" __fp16 __hc_remainder_half(__fp16 x, __fp16 y) restrict(amp);
extern "C" float __hc_remainder(float x, float y) restrict(amp);
extern "C" double __hc_remainder_double(double x, double y) restrict(amp);

extern "C" __fp16 __hc_remquo_half(__fp16 x, __fp16 y, int *quo) restrict(amp);
extern "C" float __hc_remquo(float x, float y, int *quo) restrict(amp);
extern "C" double __hc_remquo_double(double x, double y, int *quo) restrict(amp);

extern "C" __fp16 __hc_round_half(__fp16 x) restrict(amp);
extern "C" float __hc_round(float x) restrict(amp);
extern "C" double __hc_round_double(double x) restrict(amp);

extern "C" __fp16 __hc_rsqrt_half(__fp16 x) restrict(amp);
extern "C" __fp16 __hc_rsqrt_native_half(__fp16 x) restrict(amp);
extern "C" float __hc_rsqrt(float x) restrict(amp);
extern "C" float __hc_rsqrt_native(float x) restrict(amp);
extern "C" double __hc_rsqrt_double(double x) restrict(amp);

extern "C" __fp16 __hc_scalb_half(__fp16 x, __fp16 exp) restrict(amp);
extern "C" float __hc_scalb(float x, float exp) restrict(amp);
extern "C" double __hc_scalb_double(double x, double exp) restrict(amp);

extern "C" __fp16 __hc_scalbn_half(__fp16 x, int exp) restrict(amp);
extern "C" float __hc_scalbn(float x, int exp) restrict(amp);
extern "C" double __hc_scalbn_double(double x, int exp) restrict(amp);

extern "C" __fp16 __hc_sinpi_half(__fp16 x) restrict(amp);
extern "C" float __hc_sinpi(float x) restrict(amp);
extern "C" double __hc_sinpi_double(double x) restrict(amp);

extern "C" int __hc_signbit_half(__fp16 x) restrict(amp);
extern "C" int __hc_signbit(float x) restrict(amp);
extern "C" int __hc_signbit_double(double x) restrict(amp);

extern "C" __fp16 __hc_sin_half(__fp16 x) restrict(amp);
extern "C" __fp16 __hc_sin_native_half(__fp16 x) restrict(amp);
extern "C" float __hc_sin(float x) restrict(amp);
extern "C" float __hc_sin_native(float x) restrict(amp);
extern "C" double __hc_sin_double(double x) restrict(amp);

extern "C" __fp16 __hc_sincos_half(__fp16 x, __fp16 *c) restrict(amp);
extern "C" float __hc_sincos(float x, float *c) restrict(amp);
extern "C" double __hc_sincos_double(double x, double *c) restrict(amp);

extern "C" __fp16 __hc_sinh_half(__fp16 x) restrict(amp);
extern "C" float __hc_sinh(float x) restrict(amp);
extern "C" double __hc_sinh_double(double x) restrict(amp);

extern "C" __fp16 __hc_sqrt_half(__fp16 x) restrict(amp);
extern "C" __fp16 __hc_sqrt_native_half(__fp16 x) restrict(amp);
extern "C" float __hc_sqrt(float x) restrict(amp);
extern "C" float __hc_sqrt_native(float x) restrict(amp);
extern "C" double __hc_sqrt_double(double x) restrict(amp);

extern "C" __fp16 __hc_tgamma_half(__fp16 x) restrict(amp);
extern "C" float __hc_tgamma(float x) restrict(amp);
extern "C" double __hc_tgamma_double(double x) restrict(amp);

extern "C" __fp16 __hc_tan_half(__fp16 x) restrict(amp);
extern "C" float __hc_tan(float x) restrict(amp);
extern "C" double __hc_tan_double(double x) restrict(amp);

extern "C" __fp16 __hc_tanh_half(__fp16 x) restrict(amp);
extern "C" float __hc_tanh(float x) restrict(amp);
extern "C" double __hc_tanh_double(double x) restrict(amp);

extern "C" __fp16 __hc_tanpi_half(__fp16 x) restrict(amp);
extern "C" float __hc_tanpi(float x) restrict(amp);
extern "C" double __hc_tanpi_double(double x) restrict(amp);

extern "C" __fp16 __hc_trunc_half(__fp16 x) restrict(amp);
extern "C" float __hc_trunc(float x) restrict(amp);
extern "C" double __hc_trunc_double(double x) restrict(amp);


namespace Kalmar
{
    namespace fast_math
    {
        using std::acos;
        using ::acosf;
        using std::asin;
        using ::asinf;
        using std::atan;
        using ::atanf;
        using std::atan2;
        using ::atan2f;
        using std::ceil;
        using ::ceilf;
        using std::cos;
        using ::cosf;
        using std::cosh;
        using ::coshf;
        using std::exp;
        using ::exp10;
        using std::exp2;
        using ::exp10f;
        using ::exp2f;
        using ::expf;
        using std::fabs;
        using ::fabsf;
        using std::floor;
        using ::floorf;
        using std::fmax;
        using ::fmaxf;
        using std::fmin;
        using ::fminf;
        using std::fmod;
        using ::fmodf;
        using std::frexp;
        using ::frexpf;
        using std::isfinite;
        using std::isinf;
        using std::isnan;
        using std::isnormal;
        using std::ldexp;
        using ::ldexpf;
        using std::log;
        using ::logf;
        using std::log10;
        using ::log10f;
        using std::log2;
        using ::log2f;
        using std::modf;
        using ::modff;
        using std::pow;
        using ::powf;
        using std::round;
        using ::roundf;
        using std::signbit;
        using std::sin;
        using ::sinf;
        using std::sinh;
        using ::sinhf;
        using std::sqrt;
        using ::sqrtf;
        using std::tan;
        using ::tanf;
        using std::tanh;
        using ::tanhf;
        using std::trunc;
        using ::truncf;

        inline __attribute__((used, hc))
        float acosf(float x) { return __hc_acos(x); }

        inline __attribute__((used, hc))
        __fp16 acos(__fp16 x) { return __hc_acos_half(x); }

        inline __attribute__((used, hc))
        float acos(float x) { return fast_math::acosf(x); }

        inline __attribute__((used, hc))
        float asinf(float x) { return __hc_asin(x); }

        inline __attribute__((used, hc))
        __fp16 asin(__fp16 x) { return __hc_asin_half(x); }

        inline __attribute__((used, hc))
        float asin(float x) { return fast_math::asinf(x); }

        inline __attribute__((used, hc))
        float atanf(float x) { return __hc_atan(x); }

        inline __attribute__((used, hc))
        __fp16 atan(__fp16 x) { return __hc_atan_half(x); }

        inline __attribute__((used, hc))
        float atan(float x) { return fast_math::atanf(x); }

        inline __attribute__((used, hc))
        float atan2f(float y, float x) { return __hc_atan2(y, x); }

        inline __attribute__((used, hc))
        __fp16 atan2(__fp16 y, __fp16 x) { return __hc_atan2_half(y, x); }

        inline __attribute__((used, hc))
        float atan2(float y, float x) { return fast_math::atan2f(y, x); }

        inline __attribute__((used, hc))
        float ceilf(float x) { return __hc_ceil(x); }

        inline __attribute__((used, hc))
        __fp16 ceil(__fp16 x) { return __hc_ceil_half(x); }

        inline __attribute__((used, hc))
        float ceil(float x) { return fast_math::ceilf(x); }

        inline __attribute__((used, hc))
        float cosf(float x) { return __hc_cos_native(x); }

        inline __attribute__((used, hc))
        __fp16 cos(__fp16 x) { return __hc_cos_native_half(x); }

        inline __attribute__((used, hc))
        float cos(float x) { return fast_math::cosf(x); }

        inline __attribute__((used, hc))
        float coshf(float x) { return __hc_cosh(x); }

        inline __attribute__((used, hc))
        __fp16 cosh(__fp16 x) { return __hc_cosh_half(x); }

        inline __attribute__((used, hc))
        float cosh(float x) { return fast_math::coshf(x); }

        inline __attribute__((used, hc))
        float expf(float x) { return __hc_exp2_native(1.4426950408889634074 * x); }

        inline __attribute__((used, hc))
        __fp16 exp(__fp16 x) { return __hc_exp2_native_half(1.4426950408889634074 * x); }

        inline __attribute__((used, hc))
        float exp(float x) { return fast_math::expf(x); }

        inline __attribute__((used, hc))
        float exp2f(float x) { return __hc_exp2_native(x); }

        inline __attribute__((used, hc))
        __fp16 exp2(__fp16 x) { return __hc_exp2_native_half(x); }

        inline __attribute__((used, hc))
        float exp2(float x) { return fast_math::exp2f(x); }

        inline __attribute__((used, hc))
        float fabsf(float x) { return __hc_fabs(x); }

        inline __attribute__((used, hc))
        __fp16 fabs(__fp16 x) { return __hc_fabs_half(x); }

        inline __attribute__((used, hc))
        float fabs(float x) { return fast_math::fabsf(x); }

        inline __attribute__((used, hc))
        float floorf(float x) { return __hc_floor(x); }

        inline __attribute__((used, hc))
        __fp16 floor(__fp16 x) { return __hc_floor_half(x); }

        inline __attribute__((used, hc))
        float floor(float x) { return fast_math::floorf(x); }

        inline __attribute__((used, hc))
        float fmaxf(float x, float y) { return __hc_fmax(x, y); }

        inline __attribute__((used, hc))
        __fp16 fmax(__fp16 x, __fp16 y) { return __hc_fmax_half(x, y); }

        inline __attribute__((used, hc))
        float fmax(float x, float y) { return fast_math::fmaxf(x, y); }

        inline __attribute__((used, hc))
        float fminf(float x, float y) { return __hc_fmin(x, y); }

        inline __attribute__((used, hc))
        __fp16 fmin(__fp16 x, __fp16 y) { return __hc_fmin_half(x, y); }

        inline __attribute__((used, hc))
        float fmin(float x, float y) { return fast_math::fminf(x, y); }

        inline __attribute__((used, hc))
        float fmodf(float x, float y) { return __hc_fmod(x, y); }

        inline __attribute__((used, hc))
        __fp16 fmod(__fp16 x, __fp16 y) { return __hc_fmod_half(x, y); }

        inline __attribute__((used, hc))
        float fmod(float x, float y) { return fast_math::fmodf(x, y); }

        inline __attribute__((used, hc))
        float frexpf(float x, int *exp) { return __hc_frexp(x, exp); }

        inline __attribute__((used, hc))
        __fp16 frexp(__fp16 x, int *exp) { return __hc_frexp_half(x, exp); }

        inline __attribute__((used, hc))
        float frexp(float x, int *exp) { return fast_math::frexpf(x, exp); }

        inline __attribute__((used, hc))
        int isfinite(__fp16 x) { return __hc_isfinite_half(x); }

        inline __attribute__((used, hc))
        int isfinite(float x) { return __hc_isfinite(x); }

        inline __attribute__((used, hc))
        int isinf(__fp16 x) { return __hc_isinf_half(x); }

        inline __attribute__((used, hc))
        int isinf(float x) { return __hc_isinf(x); }

        inline __attribute__((used, hc))
        int isnan(__fp16 x) { return __hc_isnan_half(x); }

        inline __attribute__((used, hc))
        int isnan(float x) { return __hc_isnan(x); }

        inline __attribute__((used, hc))
        float ldexpf(float x, int exp) { return __hc_ldexp(x,exp); }

        inline __attribute__((used, hc))
        __fp16 ldexp(__fp16 x, std::uint16_t exp)
        {
            return __hc_ldexp_half(x, exp);
        }

        inline __attribute__((used, hc))
        float ldexp(float x, int exp) { return fast_math::ldexpf(x, exp); }

        namespace
        {






        }

        inline __attribute__((used, hc))
        float logf(float x) { return __hc_log2_native(x) * 0x1.62e430p-1f; }

        inline __attribute__((used, hc))
        __fp16 log(__fp16 x)
        {
            return __hc_log2_native_half(x) * static_cast<__fp16>(0x1.62e430p-1f);
        }

        inline __attribute__((used, hc))
        float log(float x) { return fast_math::logf(x); }

        inline __attribute__((used, hc))
        float log10f(float x) { return __hc_log2_native(x) * 0x1.344136p-2f; }

        inline __attribute__((used, hc))
        __fp16 log10(__fp16 x)
        {
            return __hc_log2_native_half(x) * static_cast<__fp16>(0x1.344136p-2f);
        }

        inline __attribute__((used, hc))
        float log10(float x) { return fast_math::log10f(x); }

        inline __attribute__((used, hc))
        float log2f(float x) { return __hc_log2_native(x); }

        inline __attribute__((used, hc))
        __fp16 log2(__fp16 x) { return __hc_log2_native_half(x); }

        inline __attribute__((used, hc))
        float log2(float x) { return fast_math::log2f(x); }

        inline __attribute__((used, hc))
        float modff(float x, float *iptr) { return __hc_modf(x, iptr); }

        inline __attribute__((used, hc))
        __fp16 modf(__fp16 x, __fp16 *iptr) { return __hc_modf_half(x, iptr); }


        inline __attribute__((used, hc))
        float modf(float x, float *iptr) { return fast_math::modff(x, iptr); }

        inline __attribute__((used, hc))
        float powf(float x, float y) { return __hc_pow(x, y); }

        inline __attribute__((used, hc))
        __fp16 pow(__fp16 x, __fp16 y) { return __hc_pow_half(x, y); }

        inline __attribute__((used, hc))
        float pow(float x, float y) { return fast_math::powf(x, y); }

        inline __attribute__((used, hc))
        float roundf(float x) { return __hc_round(x); }

        inline __attribute__((used, hc))
        __fp16 round(__fp16 x) { return __hc_round_half(x); }

        inline __attribute__((used, hc))
        float round(float x) { return fast_math::roundf(x); }

        inline __attribute__((used, hc))
        float rsqrtf(float x) { return __hc_rsqrt_native(x); }

        inline __attribute__((used, hc))
        __fp16 rsqrt(__fp16 x) { return __hc_rsqrt_native_half(x); }

        inline __attribute__((used, hc))
        float rsqrt(float x) { return fast_math::rsqrtf(x); }

        inline __attribute__((used, hc))
        int signbitf(float x) { return __hc_signbit(x); }

        inline __attribute__((used, hc))
        int signbit(__fp16 x) { return __hc_signbit_half(x); }

        inline __attribute__((used, hc))
        int signbit(float x) { return fast_math::signbitf(x); }

        inline __attribute__((used, hc))
        float sinf(float x) { return __hc_sin_native(x); }

        inline __attribute__((used, hc))
        __fp16 sin(__fp16 x) { return __hc_sin_native_half(x); }

        inline __attribute__((used, hc))
        float sin(float x) { return fast_math::sinf(x); }

        inline __attribute__((used, hc))
        void sincosf(float x, float *s, float *c) { *s = __hc_sincos(x, c); }

        inline __attribute__((used, hc))
        void sincos(__fp16 x, __fp16 *s, __fp16 *c)
        {
            *s = __hc_sincos_half(x, c);
        }

        inline __attribute__((used, hc))
        void sincos(float x, float *s, float *c)
        {
            fast_math::sincosf(x, s, c);
        }

        inline __attribute__((used, hc))
        float sinhf(float x) { return __hc_sinh(x); }

        inline __attribute__((used, hc))
        __fp16 sinh(__fp16 x) { return __hc_sinh_half(x); }

        inline __attribute__((used, hc))
        float sinh(float x) { return fast_math::sinhf(x); }

        inline __attribute__((used, hc))
        float sqrtf(float x) { return __hc_sqrt_native(x); }

        inline __attribute__((used, hc))
        __fp16 sqrt(__fp16 x) { return __hc_sqrt_native_half(x); }

        inline __attribute__((used, hc))
        float sqrt(float x) { return fast_math::sqrtf(x); }

        inline __attribute__((used, hc))
        float tanf(float x) { return __hc_tan(x); }

        inline __attribute__((used, hc))
        __fp16 tan(__fp16 x)
        {
            return __hc_sin_native_half(x) *
                __hc_rcp_native_half(__hc_cos_native_half(x));
        }

        inline __attribute__((used, hc))
        float tan(float x) { return fast_math::tanf(x); }

        inline __attribute__((used, hc))
        float tanhf(float x) { return __hc_tanh(x); }

        inline __attribute__((used, hc))
        __fp16 tanh(__fp16 x) { return __hc_tanh_half(x); }

        inline __attribute__((used, hc))
        float tanh(float x) { return fast_math::tanhf(x); }

        inline __attribute__((used, hc))
        float truncf(float x) { return __hc_trunc(x); }

        inline __attribute__((used, hc))
        __fp16 trunc(__fp16 x) { return __hc_trunc_half(x); }

        inline __attribute__((used, hc))
        float trunc(float x) { return fast_math::truncf(x); }
    }

    namespace precise_math
    {
        using std::acos;
        using std::acosh;
        using ::acoshf;
        using ::acosf;
        using std::asin;
        using std::asinh;
        using ::asinhf;
        using ::asinf;
        using std::atan;
        using std::atan2;
        using ::atan2f;
        using std::atanh;
        using ::atanhf;
        using ::atanf;
        using std::cbrt;
        using ::cbrtf;
        using std::ceil;
        using ::ceilf;
        using std::copysign;
        using ::copysignf;
        using std::cos;
        using std::cosh;
        using ::coshf;
        using ::cosf;
        using std::erf;
        using std::erfc;
        using ::erfcf;
        using ::erff;
        using std::exp;
        using ::exp10;
        using ::exp10f;
        using std::exp2;
        using ::exp2f;
        using ::expf;
        using std::expm1;
        using ::expm1f;
        using std::fabs;
        using ::fabsf;
        using std::fdim;
        using ::fdimf;
        using std::floor;
        using ::floorf;
        using std::fma;
        using ::fmaf;
        using std::fmax;
        using ::fmaxf;
        using std::fmin;
        using ::fminf;
        using std::fmod;
        using ::fmodf;
        using std::frexp;
        using ::frexpf;
        using std::hypot;
        using ::hypotf;
        using std::ilogb;
        using ::ilogbf;
        using std::isfinite;
        using std::isinf;
        using std::isnan;
        using std::isnormal;
        using std::ldexp;
        using ::ldexpf;
        using std::log;
        using std::log10;
        using std::log1p;
        using std::log2;
        using std::logb;
        using ::log10f;
        using ::log1pf;
        using ::log2f;
        using ::logbf;
        using ::logf;
        using std::modf;
        using ::modff;
        using std::nearbyint;
        using ::nearbyintf;
        using std::nextafter;
        using ::nextafterf;
        using std::pow;
        using ::powf;
        using std::remainder;
        using ::remainderf;
        using std::remquo;
        using ::remquof;
        using std::round;
        using ::roundf;
        using std::scalbn;
        using ::scalbnf;
        using std::signbit;
        using std::sin;
        using std::sinh;
        using ::sinhf;
        using ::sinf;
        using std::sqrt;
        using ::sqrtf;
        using std::tan;
        using std::tanh;
        using ::tanhf;
        using ::tanf;
        using std::tgamma;
        using ::tgammaf;
        using std::trunc;
        using ::truncf;

        inline __attribute__((used, hc))
        float acosf(float x) { return __hc_acos(x); }

        inline __attribute__((used, hc))
        __fp16 acos(__fp16 x) { return __hc_acos_half(x); }

        inline __attribute__((used, hc))
        float acos(float x) { return precise_math::acosf(x); }

        inline __attribute__((used, hc))
        double acos(double x) { return __hc_acos_double(x); }

        inline __attribute__((used, hc))
        float acoshf(float x) { return __hc_acosh(x); }

        inline __attribute__((used, hc))
        __fp16 acosh(__fp16 x) { return __hc_acosh_half(x); }

        inline __attribute__((used, hc))
        float acosh(float x) { return precise_math::acoshf(x); }

        inline __attribute__((used, hc))
        double acosh(double x) { return __hc_acosh_double(x); }

        inline __attribute__((used, hc))
        float asinf(float x) { return __hc_asin(x); }

        inline __attribute__((used, hc))
        __fp16 asin(__fp16 x) { return __hc_asin_half(x); }

        inline __attribute__((used, hc))
        float asin(float x) { return precise_math::asinf(x); }

        inline __attribute__((used, hc))
        double asin(double x) { return __hc_asin_double(x); }

        inline __attribute__((used, hc))
        float asinhf(float x) { return __hc_asinh(x); }

        inline __attribute__((used, hc))
        __fp16 asinh(__fp16 x) { return __hc_asinh_half(x); }

        inline __attribute__((used, hc))
        float asinh(float x) { return precise_math::asinhf(x); }

        inline __attribute__((used, hc))
        double asinh(double x) { return __hc_asinh_double(x); }

        inline __attribute__((used, hc))
        float atanf(float x) { return __hc_atan(x); }

        inline __attribute__((used, hc))
        __fp16 atan(__fp16 x) { return __hc_atan_half(x); }

        inline __attribute__((used, hc))
        float atan(float x) { return precise_math::atanf(x); }

        inline __attribute__((used, hc))
        double atan(double x) { return __hc_atan_double(x); }

        inline __attribute__((used, hc))
        float atanhf(float x) { return __hc_atanh(x); }

        inline __attribute__((used, hc))
        __fp16 atanh(__fp16 x) { return __hc_atanh_half(x); }

        inline __attribute__((used, hc))
        float atanh(float x) { return precise_math::atanhf(x); }

        inline __attribute__((used, hc))
        double atanh(double x) { return __hc_atanh_double(x); }

        inline __attribute__((used, hc))
        float atan2f(float y, float x) { return __hc_atan2(y, x); }

        inline __attribute__((used, hc))
        __fp16 atan2(__fp16 x, __fp16 y) { return __hc_atan2_half(x, y); }

        inline __attribute__((used, hc))
        float atan2(float y, float x) { return precise_math::atan2f(y, x); }

        inline __attribute__((used, hc))
        double atan2(double y, double x) { return __hc_atan2_double(y, x); }

        inline __attribute__((used, hc))
        float cbrtf(float x) { return __hc_cbrt(x); }

        inline __attribute__((used, hc))
        __fp16 cbrt(__fp16 x) { return __hc_cbrt_half(x); }

        inline __attribute__((used, hc))
        float cbrt(float x) { return precise_math::cbrtf(x); }

        inline __attribute__((used, hc))
        double cbrt(double x) { return __hc_cbrt_double(x); }

        inline __attribute__((used, hc))
        float ceilf(float x) { return __hc_ceil(x); }

        inline __attribute__((used, hc))
        __fp16 ceil(__fp16 x) { return __hc_ceil_half(x); }

        inline __attribute__((used, hc))
        float ceil(float x) { return precise_math::ceilf(x); }

        inline __attribute__((used, hc))
        double ceil(double x) { return __hc_ceil_double(x); }

        inline __attribute__((used, hc))
        float copysignf(float x, float y) { return __hc_copysign(x, y); }

        inline __attribute__((used, hc))
        __fp16 copysign(__fp16 x, __fp16 y) { return __hc_copysign_half(x, y); }

        inline __attribute__((used, hc))
        float copysign(float x, float y)
        {
            return precise_math::copysignf(x, y);
        }

        inline __attribute__((used, hc))
        double copysign(double x, double y)
        {
            return __hc_copysign_double(x, y);
        }

        inline __attribute__((used, hc))
        float cosf(float x) { return __hc_cos(x); }

        inline __attribute__((used, hc))
        __fp16 cos(__fp16 x) { return __hc_cos_half(x); }

        inline __attribute__((used, hc))
        float cos(float x) { return precise_math::cosf(x); }

        inline __attribute__((used, hc))
        double cos(double x) { return __hc_cos_double(x); }

        inline __attribute__((used, hc))
        float coshf(float x) { return __hc_cosh(x); }

        inline __attribute__((used, hc))
        __fp16 cosh(__fp16 x) { return __hc_cosh_half(x); }

        inline __attribute__((used, hc))
        float cosh(float x) { return precise_math::coshf(x); }

        inline __attribute__((used, hc))
        double cosh(double x) { return __hc_cosh_double(x); }

        inline __attribute__((used, hc))
        float cospif(float x) { return __hc_cospi(x); }

        inline __attribute__((used, hc))
        __fp16 cospi(__fp16 x) { return __hc_cospi_half(x); }

        inline __attribute__((used, hc))
        float cospi(float x) { return precise_math::cospif(x); }

        inline __attribute__((used, hc))
        double cospi(double x) { return __hc_cospi_double(x); }

        inline __attribute__((used, hc))
        float erff(float x) { return __hc_erf(x); }

        inline __attribute__((used, hc))
        __fp16 erf(__fp16 x) { return __hc_erf_half(x); }

        inline __attribute__((used, hc))
        float erf(float x) { return precise_math::erff(x); }

        inline __attribute__((used, hc))
        double erf(double x) { return __hc_erf_double(x); }

        inline __attribute__((used, hc))
        float erfcf(float x) { return __hc_erfc(x); }

        inline __attribute__((used, hc))
        __fp16 erfc(__fp16 x) { return __hc_erfc_half(x); }

        inline __attribute__((used, hc))
        float erfc(float x) { return precise_math::erfcf(x); }

        inline __attribute__((used, hc))
        double erfc(double x) { return __hc_erfc_double(x); }

        inline __attribute__((used, hc))
        float erfcinvf(float x) { return __hc_erfcinv(x); }

        inline __attribute__((used, hc))
        __fp16 erfcinv(__fp16 x) { return __hc_erfcinv_half(x); }

        inline __attribute__((used, hc))
        float erfcinv(float x) { return precise_math::erfcinvf(x); }

        inline __attribute__((used, hc))
        double erfcinv(double x) { return __hc_erfcinv_double(x); }

        inline __attribute__((used, hc))
        float erfinvf(float x) { return __hc_erfinv(x); }

        inline __attribute__((used, hc))
        __fp16 erfinv(__fp16 x) { return __hc_erfinv_half(x); }

        inline __attribute__((used, hc))
        float erfinv(float x) { return precise_math::erfinvf(x); }

        inline __attribute__((used, hc))
        double erfinv(double x) { return __hc_erfinv_double(x); }

        inline __attribute__((used, hc))
        float expf(float x) { return __hc_exp(x); }

        inline __attribute__((used, hc))
        __fp16 exp(__fp16 x) { return __hc_exp_half(x); }

        inline __attribute__((used, hc))
        float exp(float x) { return precise_math::expf(x); }

        inline __attribute__((used, hc))
        double exp(double x) { return __hc_exp_double(x); }

        inline __attribute__((used, hc))
        float exp2f(float x) { return __hc_exp2(x); }

        inline __attribute__((used, hc))
        __fp16 exp2(__fp16 x) { return __hc_exp2_half(x); }

        inline __attribute__((used, hc))
        float exp2(float x) { return precise_math::exp2f(x); }

        inline __attribute__((used, hc))
        double exp2(double x) { return __hc_exp2_double(x); }

        inline __attribute__((used, hc))
        float exp10f(float x) { return __hc_exp10(x); }

        inline __attribute__((used, hc))
        __fp16 exp10(__fp16 x) { return __hc_exp10_half(x); }

        inline __attribute__((used, hc))
        float exp10(float x) { return precise_math::exp10f(x); }

        inline __attribute__((used, hc))
        double exp10(double x) { return __hc_exp10_double(x); }

        inline __attribute__((used, hc))
        float expm1f(float x) { return __hc_expm1(x); }

        inline __attribute__((used, hc))
        __fp16 expm1(__fp16 x) { return __hc_expm1_half(x); }

        inline __attribute__((used, hc))
        float expm1(float x) { return precise_math::expm1f(x); }

        inline __attribute__((used, hc))
        double expm1(double x) { return __hc_expm1_double(x); }

        inline __attribute__((used, hc))
        float fabsf(float x) { return __hc_fabs(x); }

        inline __attribute__((used, hc))
        __fp16 fabs(__fp16 x) { return __hc_fabs_half(x); }

        inline __attribute__((used, hc))
        float fabs(float x) { return precise_math::fabsf(x); }

        inline __attribute__((used, hc))
        double fabs(double x) { return __hc_fabs_double(x); }

        inline __attribute__((used, hc))
        float fdimf(float x, float y) { return __hc_fdim(x, y); }

        inline __attribute__((used, hc))
        __fp16 fdim(__fp16 x, __fp16 y) { return __hc_fdim_half(x, y); }

        inline __attribute__((used, hc))
        float fdim(float x, float y) { return precise_math::fdimf(x, y); }

        inline __attribute__((used, hc))
        double fdim(double x, double y) { return __hc_fdim_double(x, y); }

        inline __attribute__((used, hc))
        float floorf(float x) { return __hc_floor(x); }

        inline __attribute__((used, hc))
        __fp16 floor(__fp16 x) { return __hc_floor_half(x); }

        inline __attribute__((used, hc))
        float floor(float x) { return precise_math::floorf(x); }

        inline __attribute__((used, hc))
        double floor(double x) { return __hc_floor_double(x); }

        inline __attribute__((used, hc))
        float fmaf(float x, float y, float z) { return __hc_fma(x, y, z); }

        inline __attribute__((used, hc))
        __fp16 fma(__fp16 x, __fp16 y, __fp16 z)
        {
            return __hc_fma_half(x, y, z);
        }

        inline __attribute__((used, hc))
        float fma(float x, float y, float z)
        {
            return precise_math::fmaf(x, y, z);
        }

        inline __attribute__((used, hc))
        double fma(double x, double y, double z)
        {
            return __hc_fma_double(x, y, z);
        }

        inline __attribute__((used, hc))
        float fmaxf(float x, float y) { return __hc_fmax(x, y); }

        inline __attribute__((used, hc))
        __fp16 fmax(__fp16 x, __fp16 y) { return __hc_fmax_half(x, y); }

        inline __attribute__((used, hc))
        float fmax(float x, float y) { return precise_math::fmaxf(x, y); }

        inline __attribute__((used, hc))
        double fmax(double x, double y) { return __hc_fmax_double(x, y); }

        inline __attribute__((used, hc))
        float fminf(float x, float y) { return __hc_fmin(x, y); }

        inline __attribute__((used, hc))
        __fp16 fmin(__fp16 x, __fp16 y) { return __hc_fmin_half(x, y); }

        inline __attribute__((used, hc))
        float fmin(float x, float y) { return precise_math::fminf(x, y); }

        inline __attribute__((used, hc))
        double fmin(double x, double y) { return __hc_fmin_double(x, y); }

        inline __attribute__((used, hc))
        float fmodf(float x, float y) { return __hc_fmod(x, y); }

        inline __attribute__((used, hc))
        __fp16 fmod(__fp16 x, __fp16 y) { return __hc_fmod_half(x, y); }

        inline __attribute__((used, hc))
        float fmod(float x, float y) { return precise_math::fmodf(x, y); }

        inline __attribute__((used, hc))
        double fmod(double x, double y) { return __hc_fmod_double(x, y); }

        inline __attribute__((used, hc))
        int fpclassify(__fp16 x) { return __hc_fpclassify_half(x); }

        inline __attribute__((used, hc))
        int fpclassify(float x) { return __hc_fpclassify(x); }

        inline __attribute__((used, hc))
        int fpclassify(double x) { return __hc_fpclassify_double(x); }

        inline __attribute__((used, hc))
        float frexpf(float x, int *exp) { return __hc_frexp(x, exp); }

        inline __attribute__((used, hc))
        __fp16 frexp(__fp16 x, int* exp) { return __hc_frexp_half(x, exp); }

        inline __attribute__((used, hc))
        float frexp(float x, int *exp) { return precise_math::frexpf(x, exp); }

        inline __attribute__((used, hc))
        double frexp(double x, int *exp) { return __hc_frexp_double(x, exp); }

        inline __attribute__((used, hc))
        float hypotf(float x, float y) { return __hc_hypot(x, y); }

        inline __attribute__((used, hc))
        __fp16 hypot(__fp16 x, __fp16 y) { return __hc_hypot_half(x, y); }

        inline __attribute__((used, hc))
        float hypot(float x, float y) { return precise_math::hypotf(x, y); }

        inline __attribute__((used, hc))
        double hypot(double x, double y) { return __hc_hypot_double(x, y); }

        inline __attribute__((used, hc))
        int ilogbf(float x) { return __hc_ilogb(x); }

        inline __attribute__((used, hc))
        int ilogb(__fp16 x) { return __hc_ilogb_half(x); }

        inline __attribute__((used, hc))
        int ilogb(float x) { return precise_math::ilogbf(x); }

        inline __attribute__((used, hc))
        int ilogb(double x) { return __hc_ilogb_double(x); }

        inline __attribute__((used, hc))
        int isfinite(__fp16 x) { return __hc_isfinite_half(x); }

        inline __attribute__((used, hc))
        int isfinite(float x) { return __hc_isfinite(x); }

        inline __attribute__((used, hc))
        int isfinite(double x) { return __hc_isfinite_double(x); }

        inline __attribute__((used, hc))
        int isinf(__fp16 x) { return __hc_isinf_half(x); }

        inline __attribute__((used, hc))
        int isinf(float x) { return __hc_isinf(x); }

        inline __attribute__((used, hc))
        int isinf(double x) { return __hc_isinf_double(x); }

        inline __attribute__((used, hc))
        int isnan(__fp16 x) { return __hc_isnan_half(x); }

        inline __attribute__((used, hc))
        int isnan(float x) { return __hc_isnan(x); }

        inline __attribute__((used, hc))
        int isnan(double x) { return __hc_isnan_double(x); }

        inline __attribute__((used, hc))
        int isnormal(__fp16 x) { return __hc_isnormal_half(x); }

        inline __attribute__((used, hc))
        int isnormal(float x) { return __hc_isnormal(x); }

        inline __attribute__((used, hc))
        int isnormal(double x) { return __hc_isnormal_double(x); }

        inline __attribute__((used, hc))
        float ldexpf(float x, int exp) { return __hc_ldexp(x, exp); }

        inline __attribute__((used, hc))
        __fp16 ldexp(__fp16 x, std::int16_t e) { return __hc_ldexp_half(x, e); }

        inline __attribute__((used, hc))
        float ldexp(float x, int exp) { return precise_math::ldexpf(x, exp); }

        inline __attribute__((used, hc))
        double ldexp(double x, int exp) { return __hc_ldexp_double(x,exp); }

        inline __attribute__((used, hc))
        float lgammaf(float x) { return __hc_lgamma(x); }

        inline __attribute__((used, hc))
        __fp16 lgamma(__fp16 x) { return __hc_lgamma_half(x); }

        inline __attribute__((used, hc))
        float lgamma(float x) { return precise_math::lgammaf(x); }

        inline __attribute__((used, hc))
        double lgamma(double x) { return __hc_lgamma_double(x); }

        inline __attribute__((used, hc))
        float logf(float x) { return __hc_log(x); }

        inline __attribute__((used, hc))
        __fp16 log(__fp16 x) { return __hc_log_half(x); }

        inline __attribute__((used, hc))
        float log(float x) { return precise_math::logf(x); }

        inline __attribute__((used, hc))
        double log(double x) { return __hc_log_double(x); }

        inline __attribute__((used, hc))
        float log10f(float x) { return __hc_log10(x); }

        inline __attribute__((used, hc))
        __fp16 log10(__fp16 x) { return __hc_log10_half(x); }

        inline __attribute__((used, hc))
        float log10(float x) { return precise_math::log10f(x); }

        inline __attribute__((used, hc))
        double log10(double x) { return __hc_log10_double(x); }

        inline __attribute__((used, hc))
        float log2f(float x) { return __hc_log2(x); }

        inline __attribute__((used, hc))
        __fp16 log2(__fp16 x) { return __hc_log2_half(x); }

        inline __attribute__((used, hc))
        float log2(float x) { return precise_math::log2f(x); }

        inline __attribute__((used, hc))
        double log2(double x) { return __hc_log2_double(x); }

        inline __attribute__((used, hc))
        float log1pf(float x) { return __hc_log1p(x); }

        inline __attribute__((used, hc))
        __fp16 log1p(__fp16 x) { return __hc_log1p_half(x); }

        inline __attribute__((used, hc))
        float log1p(float x) { return precise_math::log1pf(x); }

        inline __attribute__((used, hc))
        double log1p(double x) { return __hc_log1p(x); }

        inline __attribute__((used, hc))
        float logbf(float x) { return __hc_logb(x); }

        inline __attribute__((used, hc))
        __fp16 logb(__fp16 x) { return __hc_logb_half(x); }

        inline __attribute__((used, hc))
        float logb(float x) { return precise_math::logbf(x); }

        inline __attribute__((used, hc))
        double logb(double x) { return __hc_logb_double(x); }

        inline __attribute__((used, hc))
        float modff(float x, float *iptr) { return __hc_modf(x, iptr); }

        inline __attribute__((used, hc))
        __fp16 modf(__fp16 x, __fp16* p) { return __hc_modf_half(x, p); }

        inline __attribute__((used, hc))
        float modf(float x, float* p) { return precise_math::modff(x, p); }

        inline __attribute__((used, hc))
        double modf(double x, double* p) { return __hc_modf_double(x, p); }

        inline __attribute__((used, hc))
        __fp16 nanh(int x) { return __hc_nan_half(x); }

        inline __attribute__((used, hc))
        float nanf(int tagp) { return __hc_nan(tagp); }

        inline __attribute__((used, hc))
        double nan(int tagp)
        {
            return __hc_nan_double(static_cast<unsigned long>(tagp));
        }

        inline __attribute__((used, hc))
        float nearbyintf(float x) { return __hc_nearbyint(x); }

        inline __attribute__((used, hc))
        __fp16 nearbyint(__fp16 x) { return __hc_nearbyint_half(x); }

        inline __attribute__((used, hc))
        float nearbyint(float x) { return precise_math::nearbyintf(x); }

        inline __attribute__((used, hc))
        double nearbyint(double x) { return __hc_nearbyint_double(x); }

        inline __attribute__((used, hc))
        float nextafterf(float x, float y) { return __hc_nextafter(x, y); }

        inline __attribute__((used, hc))
        __fp16 nextafter(__fp16 x, __fp16 y)
        {
            return __hc_nextafter_half(x, y);
        }

        inline __attribute__((used, hc))
        float nextafter(float x, float y)
        {
            return precise_math::nextafterf(x, y);
        }

        inline __attribute__((used, hc))
        double nextafter(double x, double y)
        {
            return __hc_nextafter_double(x, y);
        }

        inline __attribute__((used, hc))
        float powf(float x, float y) { return __hc_pow(x, y); }

        inline __attribute__((used, hc))
        __fp16 pow(__fp16 x, __fp16 y) { return __hc_pow_half(x, y); }

        inline __attribute__((used, hc))
        float pow(float x, float y) { return precise_math::powf(x, y); }

        inline __attribute__((used, hc))
        double pow(double x, double y) { return __hc_pow_double(x, y); }

        inline __attribute__((used, hc))
        float rcbrtf(float x) { return __hc_rcbrt(x); }

        inline __attribute__((used, hc))
        __fp16 rcbrt(__fp16 x) { return __hc_rcbrt_half(x); }

        inline __attribute__((used, hc))
        float rcbrt(float x) { return precise_math::rcbrtf(x); }

        inline __attribute__((used, hc))
        double rcbrt(double x) { return __hc_rcbrt_double(x); }

        inline __attribute__((used, hc))
        float remainderf(float x, float y) { return __hc_remainder(x, y); }

        inline __attribute__((used, hc))
        __fp16 remainder(__fp16 x, __fp16 y)
        {
            return __hc_remainder_half(x, y);
        }

        inline __attribute__((used, hc))
        float remainder(float x, float y)
        {
            return precise_math::remainderf(x, y);
        }

        inline __attribute__((used, hc))
        double remainder(double x, double y)
        {
            return __hc_remainder_double(x, y);
        }

        inline __attribute__((used, hc))
        float remquof(float x, float y, int *quo)
        {
            return __hc_remquo(x, y, quo);
        }

        inline __attribute__((used, hc))
        __fp16 remquo(__fp16 x, __fp16 y, int* q)
        {
            return __hc_remquo_half(x, y, q);
        }

        inline __attribute__((used, hc))
        float remquo(float x, float y, int *quo)
        {
            return precise_math::remquof(x, y, quo);
        }

        inline __attribute__((used, hc))
        double remquo(double x, double y, int *quo)
        {
            return __hc_remquo_double(x, y, quo);
        }

        inline __attribute__((used, hc))
        float roundf(float x) { return __hc_round(x); }

        inline __attribute__((used, hc))
        __fp16 round(__fp16 x) { return __hc_round_half(x); }

        inline __attribute__((used, hc))
        float round(float x) { return precise_math::roundf(x); }

        inline __attribute__((used, hc))
        double round(double x) { return __hc_round_double(x); }

        inline __attribute__((used, hc))
        float rsqrtf(float x) { return __hc_rsqrt(x); }

        inline __attribute__((used, hc))
        __fp16 rsqrt(__fp16 x) { return __hc_rsqrt_half(x); }

        inline __attribute__((used, hc))
        float rsqrt(float x) { return precise_math::rsqrtf(x); }

        inline __attribute__((used, hc))
        double rsqrt(double x) { return __hc_rsqrt_double(x); }

        inline __attribute__((used, hc))
        float sinpif(float x) { return __hc_sinpi(x); }

        inline __attribute__((used, hc))
        __fp16 sinpi(__fp16 x) { return __hc_sinpi_half(x); }

        inline __attribute__((used, hc))
        float sinpi(float x) { return precise_math::sinpif(x); }

        inline __attribute__((used, hc))
        double sinpi(double x) { return __hc_sinpi_double(x); }

        inline __attribute__((used, hc))
        float scalbf(float x, float exp) { return __hc_scalb(x, exp); }

        inline __attribute__((used, hc))
        __fp16 scalb(__fp16 x, __fp16 y) { return __hc_scalb_half(x, y); }

        inline __attribute__((used, hc))
        float scalb(float x, float exp) { return precise_math::scalbf(x, exp); }

        inline __attribute__((used, hc))
        double scalb(double x, double exp) { return __hc_scalb_double(x, exp); }

        inline __attribute__((used, hc))
        float scalbnf(float x, int exp) { return __hc_scalbn(x, exp); }

        inline __attribute__((used, hc))
        __fp16 scalbn(__fp16 x, int e) { return __hc_scalbn_half(x, e); }

        inline __attribute__((used, hc))
        float scalbn(float x, int exp) { return precise_math::scalbnf(x, exp); }

        inline __attribute__((used, hc))
        double scalbn(double x, int exp) { return __hc_scalbn_double(x, exp); }

        inline __attribute__((used, hc))
        int signbitf(float x) { return __hc_signbit(x); }

        inline __attribute__((used, hc))
        int signbit(__fp16 x) { return __hc_signbit_half(x); }

        inline __attribute__((used, hc))
        int signbit(float x) { return precise_math::signbitf(x); }

        inline __attribute__((used, hc))
        int signbit(double x) { return __hc_signbit_double(x); }

        inline __attribute__((used, hc))
        float sinf(float x) { return __hc_sin(x); }

        inline __attribute__((used, hc))
        __fp16 sin(__fp16 x) { return __hc_sin_half(x); }

        inline __attribute__((used, hc))
        float sin(float x) { return precise_math::sinf(x); }

        inline __attribute__((used, hc))
        double sin(double x) { return __hc_sin_double(x); }

        inline __attribute__((used, hc))
        void sincosf(float x, float *s, float *c) { *s = __hc_sincos(x, c); }

        inline __attribute__((used, hc))
        void sincos(__fp16 x, __fp16* s, __fp16* c)
        {
            *s = __hc_sincos_half(x, c);
        }

        inline __attribute__((used, hc))
        void sincos(float x, float *s, float *c)
        {
            precise_math::sincosf(x, s, c);
        }

        inline __attribute__((used, hc))
        void sincos(double x, double *s, double *c)
        {
            *s = __hc_sincos_double(x, c);
        }

        inline __attribute__((used, hc))
        float sinhf(float x) { return __hc_sinh(x); }

        inline __attribute__((used, hc))
        __fp16 sinh(__fp16 x) { return __hc_sinh_half(x); }

        inline __attribute__((used, hc))
        float sinh(float x) { return precise_math::sinhf(x); }

        inline __attribute__((used, hc))
        double sinh(double x) { return __hc_sinh_double(x); }

        inline __attribute__((used, hc))
        float sqrtf(float x) { return __hc_sqrt(x); }

        inline __attribute__((used, hc))
        __fp16 sqrt(__fp16 x) { return __hc_sqrt_half(x); }

        inline __attribute__((used, hc))
        float sqrt(float x) { return precise_math::sqrtf(x); }

        inline __attribute__((used, hc))
        double sqrt(double x) { return __hc_sqrt_double(x); }

        inline __attribute__((used, hc))
        float tgammaf(float x) { return __hc_tgamma(x); }

        inline __attribute__((used, hc))
        __fp16 tgamma(__fp16 x) { return __hc_tgamma_half(x); }

        inline __attribute__((used, hc))
        float tgamma(float x) { return precise_math::tgammaf(x); }

        inline __attribute__((used, hc))
        double tgamma(double x) { return __hc_tgamma_double(x); }

        inline __attribute__((used, hc))
        float tanf(float x) { return __hc_tan(x); }

        inline __attribute__((used, hc))
        __fp16 tan(__fp16 x) { return __hc_tan_half(x); }

        inline __attribute__((used, hc))
        float tan(float x) { return precise_math::tanf(x); }

        inline __attribute__((used, hc))
        double tan(double x) { return __hc_tan_double(x); }

        inline __attribute__((used, hc))
        float tanhf(float x) { return __hc_tanh(x); }

        inline __attribute__((used, hc))
        __fp16 tanh(__fp16 x) { return __hc_tanh_half(x); }

        inline __attribute__((used, hc))
        float tanh(float x) { return precise_math::tanhf(x); }

        inline __attribute__((used, hc))
        double tanh(double x) { return __hc_tanh(x); }

        inline __attribute__((used, hc))
        float tanpif(float x) { return __hc_tanpi(x); }

        inline __attribute__((used, hc))
        __fp16 tanpi(__fp16 x) { return __hc_tanpi_half(x); }

        inline __attribute__((used, hc))
        float tanpi(float x) { return precise_math::tanpif(x); }

        inline __attribute__((used, hc))
        double tanpi(double x) { return __hc_tanpi_double(x); }

        inline __attribute__((used, hc))
        float truncf(float x) { return __hc_trunc(x); }

        inline __attribute__((used, hc))
        __fp16 trunc(__fp16 x) { return __hc_trunc_half(x); }

        inline __attribute__((used, hc))
        float trunc(float x) { return precise_math::truncf(x); }

        inline __attribute__((used, hc))
        double trunc(double x) { return __hc_trunc_double(x); }
    }
}
# 23 "/opt/rocm/hcc/include/hc.hpp" 2

# 1 "/opt/rocm/hcc/include/hsa_atomic.h" 1








extern "C" __attribute__((hc)) int __hsail_atomic_fetch_add_int(int* dest, int val);
extern "C" __attribute__((hc)) unsigned int __hsail_atomic_fetch_add_unsigned(unsigned int* dest, unsigned int val);
extern "C" __attribute__((hc)) int64_t __hsail_atomic_fetch_add_int64(int64_t* dest, int64_t val);
extern "C" __attribute__((hc)) uint64_t __hsail_atomic_fetch_add_uint64(uint64_t* dest, uint64_t val);


extern "C" __attribute__((hc)) int __hsail_atomic_fetch_sub_int(int* dest, int val);
extern "C" __attribute__((hc)) unsigned int __hsail_atomic_fetch_sub_unsigned(unsigned int* dest, unsigned int val);
extern "C" __attribute__((hc)) int64_t __hsail_atomic_fetch_sub_int64(int64_t* dest, int64_t val);
extern "C" __attribute__((hc)) uint64_t __hsail_atomic_fetch_sub_uint64(uint64_t* dest, uint64_t val);


extern "C" __attribute__((hc)) int __hsail_atomic_fetch_and_int(int* dest, int val);
extern "C" __attribute__((hc)) unsigned int __hsail_atomic_fetch_and_unsigned(unsigned int* dest, unsigned int val);
extern "C" __attribute__((hc)) int64_t __hsail_atomic_fetch_and_int64(int64_t* dest, int64_t val);
extern "C" __attribute__((hc)) uint64_t __hsail_atomic_fetch_and_uint64(uint64_t* dest, uint64_t val);


extern "C" __attribute__((hc)) int __hsail_atomic_fetch_or_int(int* dest, int val);
extern "C" __attribute__((hc)) unsigned int __hsail_atomic_fetch_or_unsigned(unsigned int* dest, unsigned int val);
extern "C" __attribute__((hc)) int64_t __hsail_atomic_fetch_or_int64(int64_t* dest, int64_t val);
extern "C" __attribute__((hc)) uint64_t __hsail_atomic_fetch_or_uint64(uint64_t* dest, uint64_t val);


extern "C" __attribute__((hc)) int __hsail_atomic_fetch_xor_int(int* dest, int val);
extern "C" __attribute__((hc)) unsigned int __hsail_atomic_fetch_xor_unsigned(unsigned int* dest, unsigned int val);
extern "C" __attribute__((hc)) int64_t __hsail_atomic_fetch_xor_int64(int64_t* dest, int64_t val);
extern "C" __attribute__((hc)) uint64_t __hsail_atomic_fetch_xor_uint64(uint64_t* dest, uint64_t val);


extern "C" __attribute__((hc)) int __hsail_atomic_exchange_int(int* dest, int val);
extern "C" __attribute__((hc)) unsigned int __hsail_atomic_exchange_unsigned(unsigned int* dest, unsigned int val);
extern "C" __attribute__((hc)) int64_t __hsail_atomic_exchange_int64(int64_t* dest, int64_t val);
extern "C" __attribute__((hc)) uint64_t __hsail_atomic_exchange_uint64(uint64_t* dest, uint64_t val);


extern "C" __attribute__((hc)) int __hsail_atomic_compare_exchange_int(int* dest, int compare, int val);
extern "C" __attribute__((hc)) unsigned int __hsail_atomic_compare_exchange_unsigned(unsigned int* dest, unsigned int compare, unsigned int val);
extern "C" __attribute__((hc)) int64_t __hsail_atomic_compare_exchange_int64(int64_t* dest, int64_t compare, int64_t val);
extern "C" __attribute__((hc)) uint64_t __hsail_atomic_compare_exchange_uint64(uint64_t* dest, uint64_t compare, uint64_t val);
# 25 "/opt/rocm/hcc/include/hc.hpp" 2
# 1 "/opt/rocm/hcc/include/kalmar_cpu_launch.h" 1
# 14 "/opt/rocm/hcc/include/kalmar_cpu_launch.h"
namespace Kalmar {
template <int D0, int D1=0, int D2=0> class tiled_extent;
# 48 "/opt/rocm/hcc/include/kalmar_cpu_launch.h"
}
# 26 "/opt/rocm/hcc/include/hc.hpp" 2
# 35 "/opt/rocm/hcc/include/hc.hpp"
typedef struct hsa_kernel_dispatch_packet_s hsa_kernel_dispatch_packet_t;





namespace Kalmar {
    class HSAQueue;
};

namespace hc {

class AmPointerInfo;

using namespace Kalmar::enums;
using namespace Kalmar::CLAMP;



class accelerator;
class accelerator_view;
class completion_future;
template <int N> class extent;
template <int N> class tiled_extent;
template <typename T, int N> class array_view;
template <typename T, int N> class array;





namespace fast_math = Kalmar::fast_math;


namespace precise_math = Kalmar::precise_math;






template <int N>
using index = Kalmar::index<N>;

using runtime_exception = Kalmar::runtime_exception;
using invalid_compute_domain = Kalmar::invalid_compute_domain;
using accelerator_view_removed = Kalmar::accelerator_view_removed;
# 92 "/opt/rocm/hcc/include/hc.hpp"
inline uint64_t get_system_ticks() {
    return Kalmar::getContext()->getSystemTicks();
}







inline uint64_t get_tick_frequency() {
    return Kalmar::getContext()->getSystemTickFrequency();
}
# 119 "/opt/rocm/hcc/include/hc.hpp"
class accelerator_view {
public:







    accelerator_view(const accelerator_view& other) :
        pQueue(other.pQueue) {}
# 140 "/opt/rocm/hcc/include/hc.hpp"
    accelerator_view& operator=(const accelerator_view& other) {
        pQueue = other.pQueue;
        return *this;
    }







    queuing_mode get_queuing_mode() const { return pQueue->get_mode(); }




    execute_order get_execute_order() const { return pQueue->get_execute_order(); }
# 170 "/opt/rocm/hcc/include/hc.hpp"
    bool get_is_auto_selection() { return false; }
# 181 "/opt/rocm/hcc/include/hc.hpp"
    unsigned int get_version() const;




    accelerator get_accelerator() const;
# 196 "/opt/rocm/hcc/include/hc.hpp"
    bool get_is_debug() const { return 0; }
# 207 "/opt/rocm/hcc/include/hc.hpp"
    void wait(hcWaitMode waitMode = hcWaitModeBlocked) { pQueue->wait(waitMode); }
# 237 "/opt/rocm/hcc/include/hc.hpp"
    void flush() { pQueue->flush(); }
# 258 "/opt/rocm/hcc/include/hc.hpp"
    completion_future create_marker(memory_scope release_scope=system_scope) const;
# 285 "/opt/rocm/hcc/include/hc.hpp"
    completion_future create_blocking_marker(completion_future& dependent_future, memory_scope release_scope=system_scope) const;
# 309 "/opt/rocm/hcc/include/hc.hpp"
    completion_future create_blocking_marker(std::initializer_list<completion_future> dependent_future_list, memory_scope release_scope=system_scope) const;
# 329 "/opt/rocm/hcc/include/hc.hpp"
    template<typename InputIterator>
    completion_future create_blocking_marker(InputIterator first, InputIterator last, memory_scope scope) const;
# 339 "/opt/rocm/hcc/include/hc.hpp"
    void copy(const void *src, void *dst, size_t size_bytes) {
        pQueue->copy(src, dst, size_bytes);
    }
# 356 "/opt/rocm/hcc/include/hc.hpp"
    void copy_ext(const void *src, void *dst, size_t size_bytes, hcCommandKind copyDir, const hc::AmPointerInfo &srcInfo, const hc::AmPointerInfo &dstInfo, const hc::accelerator *copyAcc, bool forceUnpinnedCopy);



    void copy_ext(const void *src, void *dst, size_t size_bytes, hcCommandKind copyDir, const hc::AmPointerInfo &srcInfo, const hc::AmPointerInfo &dstInfo, bool forceUnpinnedCopy) ;
# 376 "/opt/rocm/hcc/include/hc.hpp"
    completion_future copy_async(const void *src, void *dst, size_t size_bytes);
# 403 "/opt/rocm/hcc/include/hc.hpp"
    completion_future copy_async_ext(const void *src, void *dst, size_t size_bytes,
                                     hcCommandKind copyDir, const hc::AmPointerInfo &srcInfo, const hc::AmPointerInfo &dstInfo,
                                     const hc::accelerator *copyAcc);
# 415 "/opt/rocm/hcc/include/hc.hpp"
    bool operator==(const accelerator_view& other) const {
        return pQueue == other.pQueue;
    }
# 427 "/opt/rocm/hcc/include/hc.hpp"
    bool operator!=(const accelerator_view& other) const { return !(*this == other); }





    size_t get_max_tile_static_size() {
        return pQueue.get()->getDev()->GetMaxTileStaticSize();
    }







    int get_pending_async_ops() {
        return pQueue->getPendingAsyncOps();
    }
# 454 "/opt/rocm/hcc/include/hc.hpp"
    bool get_is_empty() {
        return pQueue->isEmpty();
    }







    void* get_hsa_queue() {
        return pQueue->getHSAQueue();
    }







    void* get_hsa_agent() {
        return pQueue->getHSAAgent();
    }
# 486 "/opt/rocm/hcc/include/hc.hpp"
    void* get_hsa_am_region() {
        return pQueue->getHSAAMRegion();
    }
# 499 "/opt/rocm/hcc/include/hc.hpp"
    void* get_hsa_am_system_region() {
        return pQueue->getHSAAMHostRegion();
    }
# 511 "/opt/rocm/hcc/include/hc.hpp"
    void* get_hsa_am_finegrained_system_region() {
        return pQueue->getHSACoherentAMHostRegion();
    }
# 522 "/opt/rocm/hcc/include/hc.hpp"
    void* get_hsa_kernarg_region() {
        return pQueue->getHSAKernargRegion();
    }




    bool is_hsa_accelerator() {
        return pQueue->hasHSAInterOp();
    }
# 590 "/opt/rocm/hcc/include/hc.hpp"
    void dispatch_hsa_kernel(const hsa_kernel_dispatch_packet_t *aql,
                           const void * args, size_t argsize,
                           hc::completion_future *cf=__null)
    {
        pQueue->dispatch_hsa_kernel(aql, args, argsize, cf);
    }
# 611 "/opt/rocm/hcc/include/hc.hpp"
     bool set_cu_mask(const std::vector<bool>& cu_mask) {

        if(is_hsa_accelerator()) {
            return pQueue->set_cu_mask(cu_mask);
        }
        return false;
     }

private:
    accelerator_view(std::shared_ptr<Kalmar::KalmarQueue> pQueue) : pQueue(pQueue) {}
    std::shared_ptr<Kalmar::KalmarQueue> pQueue;

    friend class accelerator;
    template <typename Q, int K> friend class array;
    template <typename Q, int K> friend class array_view;

    template<typename Kernel> friend
        void* Kalmar::mcw_cxxamp_get_kernel(const std::shared_ptr<Kalmar::KalmarQueue>&, const Kernel&);
    template<typename Kernel, int dim_ext> friend
        void Kalmar::mcw_cxxamp_execute_kernel_with_dynamic_group_memory(const std::shared_ptr<Kalmar::KalmarQueue>&, size_t *, size_t *, const Kernel&, void*, size_t);
    template<typename Kernel, int dim_ext> friend
        std::shared_ptr<Kalmar::KalmarAsyncOp> Kalmar::mcw_cxxamp_execute_kernel_with_dynamic_group_memory_async(const std::shared_ptr<Kalmar::KalmarQueue>&, size_t *, size_t *, const Kernel&, void*, size_t);
    template<typename Kernel, int dim_ext> friend
        void Kalmar::mcw_cxxamp_launch_kernel(const std::shared_ptr<Kalmar::KalmarQueue>&, size_t *, size_t *, const Kernel&);
    template<typename Kernel, int dim_ext> friend
        std::shared_ptr<Kalmar::KalmarAsyncOp> Kalmar::mcw_cxxamp_launch_kernel_async(const std::shared_ptr<Kalmar::KalmarQueue>&, size_t *, size_t *, const Kernel&);
# 645 "/opt/rocm/hcc/include/hc.hpp"
    template <int N, typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const extent<N>&, const Kernel&);


    template <typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const extent<1>&, const Kernel&);


    template <typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const extent<2>&, const Kernel&);


    template <typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const extent<3>&, const Kernel&);


    template <typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const tiled_extent<3>&, const Kernel&);


    template <typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const tiled_extent<2>&, const Kernel&);


    template <typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const tiled_extent<1>&, const Kernel&);





    __attribute__((annotate("user_deserialize")))
    accelerator_view() [[cpu]] [[hc]] {



    }
};
# 693 "/opt/rocm/hcc/include/hc.hpp"
class accelerator
{
public:
# 706 "/opt/rocm/hcc/include/hc.hpp"
    accelerator() : accelerator(L"default") {}
# 723 "/opt/rocm/hcc/include/hc.hpp"
    explicit accelerator(const std::wstring& path)
        : pDev(Kalmar::getContext()->getDevice(path)) {}
# 733 "/opt/rocm/hcc/include/hc.hpp"
    accelerator(const accelerator& other) : pDev(other.pDev) {}
# 742 "/opt/rocm/hcc/include/hc.hpp"
    static std::vector<accelerator> get_all() {
        auto Devices = Kalmar::getContext()->getDevices();
        std::vector<accelerator> ret(Devices.size());
        for (int i = 0; i < ret.size(); ++i)
            ret[i] = Devices[i];
        return ret;
    }
# 763 "/opt/rocm/hcc/include/hc.hpp"
    static bool set_default(const std::wstring& path) {
        return Kalmar::getContext()->set_default(path);
    }
# 782 "/opt/rocm/hcc/include/hc.hpp"
    static accelerator_view get_auto_selection_view() {
        return Kalmar::getContext()->auto_select();
    }
# 795 "/opt/rocm/hcc/include/hc.hpp"
    accelerator& operator=(const accelerator& other) {
        pDev = other.pDev;
        return *this;
    }







    accelerator_view get_default_view() const { return pDev->get_default_queue(); }
# 816 "/opt/rocm/hcc/include/hc.hpp"
    accelerator_view create_view(execute_order order = execute_in_order, queuing_mode mode = queuing_mode_automatic) {
        auto pQueue = pDev->createQueue(order);
        pQueue->set_mode(mode);
        return pQueue;
    }
# 830 "/opt/rocm/hcc/include/hc.hpp"
    bool operator==(const accelerator& other) const { return pDev == other.pDev; }
# 840 "/opt/rocm/hcc/include/hc.hpp"
    bool operator!=(const accelerator& other) const { return !(*this == other); }
# 860 "/opt/rocm/hcc/include/hc.hpp"
    bool set_default_cpu_access_type(access_type type) {
        pDev->set_access(type);
        return true;
    }






    std::wstring get_device_path() const { return pDev->get_path(); }




    std::wstring get_description() const { return pDev->get_description(); }







    unsigned int get_version() const { return pDev->get_version(); }
# 893 "/opt/rocm/hcc/include/hc.hpp"
    bool get_has_display() const { return false; }






    size_t get_dedicated_memory() const { return pDev->get_mem(); }






    bool get_supports_double_precision() const { return pDev->is_double(); }







    bool get_supports_limited_double_precision() const { return pDev->is_lim_double(); }






    bool get_is_debug() const { return false; }





    bool get_is_emulated() const { return pDev->is_emulated(); }





    bool get_supports_cpu_shared_memory() const { return pDev->is_unified(); }




    access_type get_default_cpu_access_type() const { return pDev->get_access(); }






    size_t get_max_tile_static_size() {
      return get_default_view().get_max_tile_static_size();
    }




    std::vector<accelerator_view> get_all_views() {
        std::vector<accelerator_view> result;
        std::vector< std::shared_ptr<Kalmar::KalmarQueue> > queues = pDev->get_all_queues();
        for (auto q : queues) {
            result.push_back(q);
        }
        return result;
    }
# 970 "/opt/rocm/hcc/include/hc.hpp"
    void* get_hsa_am_region() const {
        return get_default_view().get_hsa_am_region();
    }
# 982 "/opt/rocm/hcc/include/hc.hpp"
    void* get_hsa_am_system_region() const {
        return get_default_view().get_hsa_am_system_region();
    }
# 994 "/opt/rocm/hcc/include/hc.hpp"
    void* get_hsa_am_finegrained_system_region() const {
        return get_default_view().get_hsa_am_finegrained_system_region();
    }
# 1005 "/opt/rocm/hcc/include/hc.hpp"
    void* get_hsa_kernarg_region() const {
        return get_default_view().get_hsa_kernarg_region();
    }




    bool is_hsa_accelerator() const {
        return get_default_view().is_hsa_accelerator();
    }







    hcAgentProfile get_profile() const {
        return pDev->getProfile();
    }

    void memcpy_symbol(const char* symbolName, void* hostptr, size_t count, size_t offset = 0, hcCommandKind kind = hcMemcpyHostToDevice) {
        pDev->memcpySymbol(symbolName, hostptr, count, offset, kind);
    }

    void memcpy_symbol(void* symbolAddr, void* hostptr, size_t count, size_t offset = 0, hcCommandKind kind = hcMemcpyHostToDevice) {
        pDev->memcpySymbol(symbolAddr, hostptr, count, offset, kind);
    }

    void* get_symbol_address(const char* symbolName) {
        return pDev->getSymbolAddress(symbolName);
    }







    void* get_hsa_agent() const {
        return pDev->getHSAAgent();
    }







    bool get_is_peer(const accelerator& other) const {
        return pDev->is_peer(other.pDev);
    }






    std::vector<accelerator> get_peers() const {
        std::vector<accelerator> peers;

        const auto &accs = get_all();

        for(auto iter = accs.begin(); iter != accs.end(); iter++)
        {
            if(this->get_is_peer(*iter))
                peers.push_back(*iter);
        }
        return peers;
    }





    unsigned int get_cu_count() const {
        return pDev->get_compute_unit_count();
    }





    int get_seqnum() const {
        return pDev->get_seqnum();
    }
# 1099 "/opt/rocm/hcc/include/hc.hpp"
    bool has_cpu_accessible_am() {
        return pDev->has_cpu_accessible_am();
    };

    Kalmar::KalmarDevice *get_dev_ptr() const { return pDev; };

private:
    accelerator(Kalmar::KalmarDevice* pDev) : pDev(pDev) {}
    friend class accelerator_view;
    Kalmar::KalmarDevice* pDev;
};
# 1123 "/opt/rocm/hcc/include/hc.hpp"
class completion_future {
public:






    completion_future() : __amp_future(), __thread_then(nullptr), __asyncOp(nullptr) {};
# 1140 "/opt/rocm/hcc/include/hc.hpp"
    completion_future(const completion_future& other)
        : __amp_future(other.__amp_future), __thread_then(other.__thread_then), __asyncOp(other.__asyncOp) {}
# 1152 "/opt/rocm/hcc/include/hc.hpp"
    completion_future(completion_future&& other)
        : __amp_future(std::move(other.__amp_future)), __thread_then(other.__thread_then), __asyncOp(other.__asyncOp) {}
# 1163 "/opt/rocm/hcc/include/hc.hpp"
    completion_future& operator=(const completion_future& _Other) {
        if (this != &_Other) {
           __amp_future = _Other.__amp_future;
           __thread_then = _Other.__thread_then;
           __asyncOp = _Other.__asyncOp;
        }
        return (*this);
    }
# 1181 "/opt/rocm/hcc/include/hc.hpp"
    completion_future& operator=(completion_future&& _Other) {
        if (this != &_Other) {
            __amp_future = std::move(_Other.__amp_future);
            __thread_then = _Other.__thread_then;
           __asyncOp = _Other.__asyncOp;
        }
        return (*this);
    }
# 1197 "/opt/rocm/hcc/include/hc.hpp"
    void get() const {
        __amp_future.get();
    }






    bool valid() const {
        return __amp_future.valid();
    }
# 1228 "/opt/rocm/hcc/include/hc.hpp"
    void wait(hcWaitMode mode = hcWaitModeBlocked) const {
        if (this->valid()) {
            if (__asyncOp != nullptr) {
                __asyncOp->setWaitMode(mode);
            }

            __amp_future.wait();
        }
    }

    template <class _Rep, class _Period>
    std::future_status wait_for(const std::chrono::duration<_Rep, _Period>& _Rel_time) const {
        return __amp_future.wait_for(_Rel_time);
    }

    template <class _Clock, class _Duration>
    std::future_status wait_until(const std::chrono::time_point<_Clock, _Duration>& _Abs_time) const {
        return __amp_future.wait_until(_Abs_time);
    }
# 1255 "/opt/rocm/hcc/include/hc.hpp"
    operator std::shared_future<void>() const {
        return __amp_future;
    }
# 1269 "/opt/rocm/hcc/include/hc.hpp"
    template<typename functor>
    void then(const functor & func) {
# 1282 "/opt/rocm/hcc/include/hc.hpp"
    }
# 1293 "/opt/rocm/hcc/include/hc.hpp"
    void* get_native_handle() const {
      if (__asyncOp != nullptr) {
        return __asyncOp->getNativeHandle();
      } else {
        return nullptr;
      }
    }







    uint64_t get_begin_tick() {
      if (__asyncOp != nullptr) {
        return __asyncOp->getBeginTimestamp();
      } else {
        return 0L;
      }
    }







    uint64_t get_end_tick() {
      if (__asyncOp != nullptr) {
        return __asyncOp->getEndTimestamp();
      } else {
        return 0L;
      }
    }







    uint64_t get_tick_frequency() {
      if (__asyncOp != nullptr) {
        return __asyncOp->getTimestampFrequency();
      } else {
        return 0L;
      }
    }






    bool is_ready() {
      if (__asyncOp != nullptr) {
        return __asyncOp->isReady();
      } else {
        return false;
      }
    }

    ~completion_future() {
      if (__thread_then != nullptr) {
        __thread_then->join();
      }
      delete __thread_then;
      __thread_then = nullptr;

      if (__asyncOp != nullptr) {
        __asyncOp = nullptr;
      }
    }





    int get_use_count() const { return __asyncOp.use_count(); };

private:
    std::shared_future<void> __amp_future;
    std::thread* __thread_then = nullptr;
    std::shared_ptr<Kalmar::KalmarAsyncOp> __asyncOp;

    completion_future(std::shared_ptr<Kalmar::KalmarAsyncOp> event) : __amp_future(*(event->getFuture())), __asyncOp(event) {}

    completion_future(const std::shared_future<void> &__future)
        : __amp_future(__future), __thread_then(nullptr), __asyncOp(nullptr) {}

    friend class Kalmar::HSAQueue;



    template <int N, typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const extent<N>&, const Kernel&);


    template <typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const extent<1>&, const Kernel&);


    template <typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const extent<2>&, const Kernel&);


    template <typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const extent<3>&, const Kernel&);


    template <typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const tiled_extent<3>&, const Kernel&);


    template <typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const tiled_extent<2>&, const Kernel&);


    template <typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const tiled_extent<1>&, const Kernel&);


    template <typename T, int N> friend
        completion_future copy_async(const array_view<const T, N>& src, const array_view<T, N>& dest);
    template <typename T, int N> friend
        completion_future copy_async(const array<T, N>& src, array<T, N>& dest);
    template <typename T, int N> friend
        completion_future copy_async(const array<T, N>& src, const array_view<T, N>& dest);
    template <typename T, int N> friend
        completion_future copy_async(const array_view<T, N>& src, const array_view<T, N>& dest);
    template <typename T, int N> friend
        completion_future copy_async(const array_view<const T, N>& src, array<T, N>& dest);

    template <typename InputIter, typename T, int N> friend
        completion_future copy_async(InputIter srcBegin, InputIter srcEnd, array<T, N>& dest);
    template <typename InputIter, typename T, int N> friend
        completion_future copy_async(InputIter srcBegin, InputIter srcEnd, const array_view<T, N>& dest);
    template <typename InputIter, typename T, int N> friend
        completion_future copy_async(InputIter srcBegin, array<T, N>& dest);
    template <typename InputIter, typename T, int N> friend
        completion_future copy_async(InputIter srcBegin, const array_view<T, N>& dest);
    template <typename OutputIter, typename T, int N> friend
        completion_future copy_async(const array<T, N>& src, OutputIter destBegin);
    template <typename OutputIter, typename T, int N> friend
        completion_future copy_async(const array_view<T, N>& src, OutputIter destBegin);


    template <typename T, int N> friend class array_view;


    friend class accelerator_view;
};





inline accelerator
accelerator_view::get_accelerator() const { return pQueue->getDev(); }

inline completion_future
accelerator_view::create_marker(memory_scope scope) const {
    std::shared_ptr<Kalmar::KalmarAsyncOp> deps[1];


    std::shared_ptr<Kalmar::KalmarAsyncOp> depOp = pQueue->detectStreamDeps(hcCommandMarker, nullptr);

    int cnt = 0;
    if (depOp) {
        deps[cnt++] = depOp;
    }

    return completion_future(pQueue->EnqueueMarkerWithDependency(cnt, deps, scope));
}

inline unsigned int accelerator_view::get_version() const { return get_accelerator().get_version(); }

inline completion_future accelerator_view::create_blocking_marker(completion_future& dependent_future, memory_scope scope) const {
    std::shared_ptr<Kalmar::KalmarAsyncOp> deps[2];



    std::shared_ptr<Kalmar::KalmarAsyncOp> depOp = pQueue->detectStreamDeps(hcCommandMarker, nullptr);

    int cnt = 0;
    if (depOp) {
        deps[cnt++] = depOp;
    }

    if (dependent_future.__asyncOp) {
        deps[cnt++] = dependent_future.__asyncOp;
    }

    return completion_future(pQueue->EnqueueMarkerWithDependency(cnt, deps, scope));
}

template<typename InputIterator>
inline completion_future
accelerator_view::create_blocking_marker(InputIterator first, InputIterator last, memory_scope scope) const {
    std::shared_ptr<Kalmar::KalmarAsyncOp> deps[5];
    hc::completion_future lastMarker;




    std::shared_ptr<Kalmar::KalmarAsyncOp> depOp = pQueue->detectStreamDeps(hcCommandMarker, nullptr);

    int cnt = 0;
    if (depOp) {
        deps[cnt++] = depOp;
    }






    for (auto iter = first; iter != last; ++iter) {
        if (iter->__asyncOp) {
            deps[cnt++] = iter->__asyncOp;
            if (cnt == 5) {
                lastMarker = completion_future(pQueue->EnqueueMarkerWithDependency(cnt, deps, hc::no_scope));
                cnt = 0;
            }
        }
    }

    if (cnt) {
        lastMarker = completion_future(pQueue->EnqueueMarkerWithDependency(cnt, deps, scope));
    }

    return lastMarker;
}

inline completion_future
accelerator_view::create_blocking_marker(std::initializer_list<completion_future> dependent_future_list, memory_scope scope) const {
    return create_blocking_marker(dependent_future_list.begin(), dependent_future_list.end(), scope);
}


inline void accelerator_view::copy_ext(const void *src, void *dst, size_t size_bytes, hcCommandKind copyDir, const hc::AmPointerInfo &srcInfo, const hc::AmPointerInfo &dstInfo, const hc::accelerator *copyAcc, bool forceUnpinnedCopy) {
    pQueue->copy_ext(src, dst, size_bytes, copyDir, srcInfo, dstInfo, copyAcc ? copyAcc->pDev : nullptr, forceUnpinnedCopy);
};

inline void accelerator_view::copy_ext(const void *src, void *dst, size_t size_bytes, hcCommandKind copyDir, const hc::AmPointerInfo &srcInfo, const hc::AmPointerInfo &dstInfo, bool forceHostCopyEngine) {
    pQueue->copy_ext(src, dst, size_bytes, copyDir, srcInfo, dstInfo, forceHostCopyEngine);
};

inline completion_future
accelerator_view::copy_async(const void *src, void *dst, size_t size_bytes) {
    return completion_future(pQueue->EnqueueAsyncCopy(src, dst, size_bytes));
}

inline completion_future
accelerator_view::copy_async_ext(const void *src, void *dst, size_t size_bytes,
                             hcCommandKind copyDir,
                             const hc::AmPointerInfo &srcInfo, const hc::AmPointerInfo &dstInfo,
                             const hc::accelerator *copyAcc)
{
    return completion_future(pQueue->EnqueueAsyncCopyExt(src, dst, size_bytes, copyDir, srcInfo, dstInfo, copyAcc ? copyAcc->pDev : nullptr));
};
# 1568 "/opt/rocm/hcc/include/hc.hpp"
template <int N>
class extent {
public:



    static const int rank = N;




    typedef int value_type;





    extent() [[cpu]] [[hc]] : base_() {
      static_assert(N > 0, "Dimensionality must be positive");
    };







    extent(const extent& other) [[cpu]] [[hc]]
        : base_(other.base_) {}
# 1607 "/opt/rocm/hcc/include/hc.hpp"
    explicit extent(int e0) [[cpu]] [[hc]]
        : base_(e0) {}

    template <typename ..._Tp>
        explicit extent(_Tp ... __t) [[cpu]] [[hc]]
        : base_(__t...) {
      static_assert(sizeof...(__t) <= 3, "Can only supply at most 3 individual coordinates in the constructor");
      static_assert(sizeof...(__t) == N, "rank should be consistency");
    }
# 1627 "/opt/rocm/hcc/include/hc.hpp"
    explicit extent(const int components[]) [[cpu]] [[hc]]
        : base_(components) {}
# 1638 "/opt/rocm/hcc/include/hc.hpp"
    explicit extent(int components[]) [[cpu]] [[hc]]
        : base_(components) {}
# 1648 "/opt/rocm/hcc/include/hc.hpp"
    extent& operator=(const extent& other) [[cpu]] [[hc]] {
        base_.operator=(other.base_);
        return *this;
    }
# 1660 "/opt/rocm/hcc/include/hc.hpp"
    int operator[] (unsigned int c) const [[cpu]] [[hc]] {
        return base_[c];
    }
    int& operator[] (unsigned int c) [[cpu]] [[hc]] {
        return base_[c];
    }
# 1677 "/opt/rocm/hcc/include/hc.hpp"
    bool contains(const index<N>& idx) const [[cpu]] [[hc]] {
        return Kalmar::amp_helper<N, index<N>, extent<N>>::contains(idx, *this);
    }






    unsigned int size() const [[cpu]] [[hc]] {
        return Kalmar::index_helper<N, extent<N>>::count_size(*this);
    }
# 1702 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent<1> tile(int t0) const;
    tiled_extent<2> tile(int t0, int t1) const;
    tiled_extent<3> tile(int t0, int t1, int t2) const;
# 1713 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent<1> tile_with_dynamic(int t0, int dynamic_size) const;
    tiled_extent<2> tile_with_dynamic(int t0, int t1, int dynamic_size) const;
    tiled_extent<3> tile_with_dynamic(int t0, int t1, int t2, int dynamic_size) const;
# 1729 "/opt/rocm/hcc/include/hc.hpp"
    bool operator==(const extent& other) const [[cpu]] [[hc]] {
        return Kalmar::index_helper<N, extent<N> >::equal(*this, other);
    }
    bool operator!=(const extent& other) const [[cpu]] [[hc]] {
        return !(*this == other);
    }
# 1746 "/opt/rocm/hcc/include/hc.hpp"
    extent& operator+=(const extent& __r) [[cpu]] [[hc]] {
        base_.operator+=(__r.base_);
        return *this;
    }
    extent& operator-=(const extent& __r) [[cpu]] [[hc]] {
        base_.operator-=(__r.base_);
        return *this;
    }
    extent& operator*=(const extent& __r) [[cpu]] [[hc]] {
        base_.operator*=(__r.base_);
        return *this;
    }
    extent& operator/=(const extent& __r) [[cpu]] [[hc]] {
        base_.operator/=(__r.base_);
        return *this;
    }
    extent& operator%=(const extent& __r) [[cpu]] [[hc]] {
        base_.operator%=(__r.base_);
        return *this;
    }
# 1777 "/opt/rocm/hcc/include/hc.hpp"
    extent operator+(const index<N>& idx) [[cpu]] [[hc]] {
        extent __r = *this;
        __r += idx;
        return __r;
    }
    extent operator-(const index<N>& idx) [[cpu]] [[hc]] {
        extent __r = *this;
        __r -= idx;
        return __r;
    }
    extent& operator+=(const index<N>& idx) [[cpu]] [[hc]] {
        base_.operator+=(idx.base_);
        return *this;
    }
    extent& operator-=(const index<N>& idx) [[cpu]] [[hc]] {
        base_.operator-=(idx.base_);
        return *this;
    }
# 1807 "/opt/rocm/hcc/include/hc.hpp"
    extent& operator+=(int value) [[cpu]] [[hc]] {
        base_.operator+=(value);
        return *this;
    }
    extent& operator-=(int value) [[cpu]] [[hc]] {
        base_.operator-=(value);
        return *this;
    }
    extent& operator*=(int value) [[cpu]] [[hc]] {
        base_.operator*=(value);
        return *this;
    }
    extent& operator/=(int value) [[cpu]] [[hc]] {
        base_.operator/=(value);
        return *this;
    }
    extent& operator%=(int value) [[cpu]] [[hc]] {
        base_.operator%=(value);
        return *this;
    }
# 1838 "/opt/rocm/hcc/include/hc.hpp"
    extent& operator++() [[cpu]] [[hc]] {
        base_.operator+=(1);
        return *this;
    }
    extent operator++(int) [[cpu]] [[hc]] {
        extent ret = *this;
        base_.operator+=(1);
        return ret;
    }
    extent& operator--() [[cpu]] [[hc]] {
        base_.operator-=(1);
        return *this;
    }
    extent operator--(int) [[cpu]] [[hc]] {
        extent ret = *this;
        base_.operator-=(1);
        return ret;
    }



private:
    typedef Kalmar::index_impl<typename Kalmar::__make_indices<N>::type> base;
    base base_;
    template <int K, typename Q> friend struct Kalmar::index_helper;
    template <int K, typename Q1, typename Q2> friend struct Kalmar::amp_helper;
};
# 1882 "/opt/rocm/hcc/include/hc.hpp"
template <int N>
extent<N> operator+(const extent<N>& lhs, const extent<N>& rhs) [[cpu]] [[hc]] {
    extent<N> __r = lhs;
    __r += rhs;
    return __r;
}
template <int N>
extent<N> operator-(const extent<N>& lhs, const extent<N>& rhs) [[cpu]] [[hc]] {
    extent<N> __r = lhs;
    __r -= rhs;
    return __r;
}
# 1913 "/opt/rocm/hcc/include/hc.hpp"
template <int N>
extent<N> operator+(const extent<N>& ext, int value) [[cpu]] [[hc]] {
    extent<N> __r = ext;
    __r += value;
    return __r;
}
template <int N>
extent<N> operator+(int value, const extent<N>& ext) [[cpu]] [[hc]] {
    extent<N> __r = ext;
    __r += value;
    return __r;
}
template <int N>
extent<N> operator-(const extent<N>& ext, int value) [[cpu]] [[hc]] {
    extent<N> __r = ext;
    __r -= value;
    return __r;
}
template <int N>
extent<N> operator-(int value, const extent<N>& ext) [[cpu]] [[hc]] {
    extent<N> __r(value);
    __r -= ext;
    return __r;
}
template <int N>
extent<N> operator*(const extent<N>& ext, int value) [[cpu]] [[hc]] {
    extent<N> __r = ext;
    __r *= value;
    return __r;
}
template <int N>
extent<N> operator*(int value, const extent<N>& ext) [[cpu]] [[hc]] {
    extent<N> __r = ext;
    __r *= value;
    return __r;
}
template <int N>
extent<N> operator/(const extent<N>& ext, int value) [[cpu]] [[hc]] {
    extent<N> __r = ext;
    __r /= value;
    return __r;
}
template <int N>
extent<N> operator/(int value, const extent<N>& ext) [[cpu]] [[hc]] {
    extent<N> __r(value);
    __r /= ext;
    return __r;
}
template <int N>
extent<N> operator%(const extent<N>& ext, int value) [[cpu]] [[hc]] {
    extent<N> __r = ext;
    __r %= value;
    return __r;
}
template <int N>
extent<N> operator%(int value, const extent<N>& ext) [[cpu]] [[hc]] {
    extent<N> __r(value);
    __r %= ext;
    return __r;
}
# 1986 "/opt/rocm/hcc/include/hc.hpp"
template <int N>
class tiled_extent : public extent<N> {
public:
    static const int rank = N;




    int tile_dim[N];





    tiled_extent() [[cpu]] [[hc]] : extent<N>(), tile_dim{0} {}
# 2009 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(const tiled_extent& other) [[cpu]] [[hc]] : extent<N>(other) {
      for (int i = 0; i < N; ++i) {
        tile_dim[i] = other.tile_dim[i];
      }
    }
};






template <>
class tiled_extent<1> : public extent<1> {
private:



    unsigned int dynamic_group_segment_size;

public:
    static const int rank = 1;




    int tile_dim[1];





    tiled_extent() [[cpu]] [[hc]] : extent(0), dynamic_group_segment_size(0), tile_dim{0} {}
# 2050 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(int e0, int t0) [[cpu]] [[hc]] : extent(e0), dynamic_group_segment_size(0), tile_dim{t0} {}
# 2060 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(int e0, int t0, int size) [[cpu]] [[hc]] : extent(e0), dynamic_group_segment_size(size), tile_dim{t0} {}
# 2069 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(const tiled_extent<1>& other) [[cpu]] [[hc]] : extent(other[0]), dynamic_group_segment_size(other.dynamic_group_segment_size), tile_dim{other.tile_dim[0]} {}
# 2078 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(const extent<1>& ext, int t0) [[cpu]] [[hc]] : extent(ext), dynamic_group_segment_size(0), tile_dim{t0} {}
# 2087 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(const extent<1>& ext, int t0, int size) [[cpu]] [[hc]] : extent(ext), dynamic_group_segment_size(size), tile_dim{t0} {}







    void set_dynamic_group_segment_size(unsigned int size) [[cpu]] {
        dynamic_group_segment_size = size;
    }




    unsigned int get_dynamic_group_segment_size() const [[cpu]] {
        return dynamic_group_segment_size;
    }
};






template <>
class tiled_extent<2> : public extent<2> {
private:



    unsigned int dynamic_group_segment_size;

public:
    static const int rank = 2;




    int tile_dim[2];





    tiled_extent() [[cpu]] [[hc]] : extent(0, 0), dynamic_group_segment_size(0), tile_dim{0, 0} {}
# 2143 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(int e0, int e1, int t0, int t1) [[cpu]] [[hc]] : extent(e0, e1), dynamic_group_segment_size(0), tile_dim{t0, t1} {}
# 2155 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(int e0, int e1, int t0, int t1, int size) [[cpu]] [[hc]] : extent(e0, e1), dynamic_group_segment_size(size), tile_dim{t0, t1} {}
# 2164 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(const tiled_extent<2>& other) [[cpu]] [[hc]] : extent(other[0], other[1]), dynamic_group_segment_size(other.dynamic_group_segment_size), tile_dim{other.tile_dim[0], other.tile_dim[1]} {}
# 2173 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(const extent<2>& ext, int t0, int t1) [[cpu]] [[hc]] : extent(ext), dynamic_group_segment_size(0), tile_dim{t0, t1} {}
# 2183 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(const extent<2>& ext, int t0, int t1, int size) [[cpu]] [[hc]] : extent(ext), dynamic_group_segment_size(size), tile_dim{t0, t1} {}







    void set_dynamic_group_segment_size(unsigned int size) [[cpu]] {
        dynamic_group_segment_size = size;
    }




    unsigned int get_dynamic_group_segment_size() const [[cpu]] {
        return dynamic_group_segment_size;
    }
};






template <>
class tiled_extent<3> : public extent<3> {
private:



    unsigned int dynamic_group_segment_size;

public:
    static const int rank = 3;




    int tile_dim[3];





    tiled_extent() [[cpu]] [[hc]] : extent(0, 0, 0), dynamic_group_segment_size(0), tile_dim{0, 0, 0} {}
# 2241 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(int e0, int e1, int e2, int t0, int t1, int t2) [[cpu]] [[hc]] : extent(e0, e1, e2), dynamic_group_segment_size(0), tile_dim{t0, t1, t2} {}
# 2255 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(int e0, int e1, int e2, int t0, int t1, int t2, int size) [[cpu]] [[hc]] : extent(e0, e1, e2), dynamic_group_segment_size(size), tile_dim{t0, t1, t2} {}
# 2264 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(const tiled_extent<3>& other) [[cpu]] [[hc]] : extent(other[0], other[1], other[2]), dynamic_group_segment_size(other.dynamic_group_segment_size), tile_dim{other.tile_dim[0], other.tile_dim[1], other.tile_dim[2]} {}
# 2274 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(const extent<3>& ext, int t0, int t1, int t2) [[cpu]] [[hc]] : extent(ext), dynamic_group_segment_size(0), tile_dim{t0, t1, t2} {}
# 2285 "/opt/rocm/hcc/include/hc.hpp"
    tiled_extent(const extent<3>& ext, int t0, int t1, int t2, int size) [[cpu]] [[hc]] : extent(ext), dynamic_group_segment_size(size), tile_dim{t0, t1, t2} {}







    void set_dynamic_group_segment_size(unsigned int size) [[cpu]] {
        dynamic_group_segment_size = size;
    }




    unsigned int get_dynamic_group_segment_size() const [[cpu]] {
        return dynamic_group_segment_size;
    }
};





template <int N>
inline
tiled_extent<1> extent<N>::tile(int t0) const [[cpu]] [[hc]] {
  static_assert(N == 1, "One-dimensional tile() method only available on extent<1>");
  return tiled_extent<1>(*this, t0);
}

template <int N>
inline
tiled_extent<2> extent<N>::tile(int t0, int t1) const [[cpu]] [[hc]] {
  static_assert(N == 2, "Two-dimensional tile() method only available on extent<2>");
  return tiled_extent<2>(*this, t0, t1);
}

template <int N>
inline
tiled_extent<3> extent<N>::tile(int t0, int t1, int t2) const [[cpu]] [[hc]] {
  static_assert(N == 3, "Three-dimensional tile() method only available on extent<3>");
  return tiled_extent<3>(*this, t0, t1, t2);
}





template <int N>
inline
tiled_extent<1> extent<N>::tile_with_dynamic(int t0, int dynamic_size) const [[cpu]] [[hc]] {
  static_assert(N == 1, "One-dimensional tile() method only available on extent<1>");
  return tiled_extent<1>(*this, t0, dynamic_size);
}

template <int N>
inline
tiled_extent<2> extent<N>::tile_with_dynamic(int t0, int t1, int dynamic_size) const [[cpu]] [[hc]] {
  static_assert(N == 2, "Two-dimensional tile() method only available on extent<2>");
  return tiled_extent<2>(*this, t0, t1, dynamic_size);
}

template <int N>
inline
tiled_extent<3> extent<N>::tile_with_dynamic(int t0, int t1, int t2, int dynamic_size) const [[cpu]] [[hc]] {
  static_assert(N == 3, "Three-dimensional tile() method only available on extent<3>");
  return tiled_extent<3>(*this, t0, t1, t2, dynamic_size);
}
# 2365 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int __wavesize() [[hc]];



extern "C" inline unsigned int __wavesize() [[hc]] {
  return (64);
}
# 2380 "/opt/rocm/hcc/include/hc.hpp"
extern "C" inline unsigned int __popcount_u32_b32(unsigned int input) [[hc]] {
  return __builtin_popcount(input);
}







extern "C" inline unsigned int __popcount_u32_b64(unsigned long long int input) [[hc]] {
  return __builtin_popcountl(input);
}







extern "C" inline unsigned int __bitextract_u32(unsigned int src0, unsigned int src1, unsigned int src2) [[hc]] {
  return (src0 << (32 - src1 - src2)) >> (32 - src2);
}

extern "C" uint64_t __bitextract_u64(uint64_t src0, unsigned int src1, unsigned int src2) [[hc]];

extern "C" int __bitextract_s32(int src0, unsigned int src1, unsigned int src2) [[hc]];

extern "C" int64_t __bitextract_s64(int64_t src0, unsigned int src1, unsigned int src2) [[hc]];
# 2417 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int __bitinsert_u32(unsigned int src0, unsigned int src1, unsigned int src2, unsigned int src3) [[hc]];

extern "C" uint64_t __bitinsert_u64(uint64_t src0, uint64_t src1, unsigned int src2, unsigned int src3) [[hc]];

extern "C" int __bitinsert_s32(int src0, int src1, unsigned int src2, unsigned int src3) [[hc]];

extern "C" int64_t __bitinsert_s64(int64_t src0, int64_t src1, unsigned int src2, unsigned int src3) [[hc]];
# 2432 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int __bitmask_b32(unsigned int src0, unsigned int src1) [[hc]];

extern "C" uint64_t __bitmask_b64(unsigned int src0, unsigned int src1) [[hc]];
# 2444 "/opt/rocm/hcc/include/hc.hpp"
unsigned int __bitrev_b32(unsigned int src0) [[hc]] __asm("llvm.bitreverse.i32");

uint64_t __bitrev_b64(uint64_t src0) [[hc]] __asm("llvm.bitreverse.i64");
# 2456 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int __bitselect_b32(unsigned int src0, unsigned int src1, unsigned int src2) [[hc]];

extern "C" uint64_t __bitselect_b64(uint64_t src0, uint64_t src1, uint64_t src2) [[hc]];
# 2468 "/opt/rocm/hcc/include/hc.hpp"
extern "C" inline unsigned int __firstbit_u32_u32(unsigned int input) [[hc]] {
  return input == 0 ? -1 : __builtin_clz(input);
}
# 2480 "/opt/rocm/hcc/include/hc.hpp"
extern "C" inline unsigned int __firstbit_u32_u64(unsigned long long int input) [[hc]] {
  return input == 0 ? -1 : __builtin_clzl(input);
}
# 2493 "/opt/rocm/hcc/include/hc.hpp"
extern "C" inline unsigned int __firstbit_u32_s32(int input) [[hc]] {
  if (input == 0) {
    return -1;
  }

  return input > 0 ? __firstbit_u32_u32(input) : __firstbit_u32_u32(~input);
}
# 2511 "/opt/rocm/hcc/include/hc.hpp"
extern "C" inline unsigned int __firstbit_u32_s64(long long int input) [[hc]] {
  if (input == 0) {
    return -1;
  }

  return input > 0 ? __firstbit_u32_u64(input) : __firstbit_u32_u64(~input);
}
# 2526 "/opt/rocm/hcc/include/hc.hpp"
extern "C" inline unsigned int __lastbit_u32_u32(unsigned int input) [[hc]] {
  return input == 0 ? -1 : __builtin_ctz(input);
}

extern "C" inline unsigned int __lastbit_u32_u64(unsigned long long int input) [[hc]] {
  return input == 0 ? -1 : __builtin_ctzl(input);
}

extern "C" inline unsigned int __lastbit_u32_s32(int input) [[hc]] {
  return __lastbit_u32_u32(input);
}

extern "C" inline unsigned int __lastbit_u32_s64(unsigned long long input) [[hc]] {
  return __lastbit_u32_u64(input);
}
# 2550 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int __unpacklo_u8x4(unsigned int src0, unsigned int src1) [[hc]];

extern "C" uint64_t __unpacklo_u8x8(uint64_t src0, uint64_t src1) [[hc]];

extern "C" unsigned int __unpacklo_u16x2(unsigned int src0, unsigned int src1) [[hc]];

extern "C" uint64_t __unpacklo_u16x4(uint64_t src0, uint64_t src1) [[hc]];

extern "C" uint64_t __unpacklo_u32x2(uint64_t src0, uint64_t src1) [[hc]];

extern "C" int __unpacklo_s8x4(int src0, int src1) [[hc]];

extern "C" int64_t __unpacklo_s8x8(int64_t src0, int64_t src1) [[hc]];

extern "C" int __unpacklo_s16x2(int src0, int src1) [[hc]];

extern "C" int64_t __unpacklo_s16x4(int64_t src0, int64_t src1) [[hc]];

extern "C" int64_t __unpacklo_s32x2(int64_t src0, int64_t src1) [[hc]];
# 2578 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int __unpackhi_u8x4(unsigned int src0, unsigned int src1) [[hc]];

extern "C" uint64_t __unpackhi_u8x8(uint64_t src0, uint64_t src1) [[hc]];

extern "C" unsigned int __unpackhi_u16x2(unsigned int src0, unsigned int src1) [[hc]];

extern "C" uint64_t __unpackhi_u16x4(uint64_t src0, uint64_t src1) [[hc]];

extern "C" uint64_t __unpackhi_u32x2(uint64_t src0, uint64_t src1) [[hc]];

extern "C" int __unpackhi_s8x4(int src0, int src1) [[hc]];

extern "C" int64_t __unpackhi_s8x8(int64_t src0, int64_t src1) [[hc]];

extern "C" int __unpackhi_s16x2(int src0, int src1) [[hc]];

extern "C" int64_t __unpackhi_s16x4(int64_t src0, int64_t src1) [[hc]];

extern "C" int64_t __unpackhi_s32x2(int64_t src0, int64_t src1) [[hc]];
# 2606 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int __pack_u8x4_u32(unsigned int src0, unsigned int src1, unsigned int src2) [[hc]];

extern "C" uint64_t __pack_u8x8_u32(uint64_t src0, unsigned int src1, unsigned int src2) [[hc]];

extern "C" unsigned __pack_u16x2_u32(unsigned int src0, unsigned int src1, unsigned int src2) [[hc]];

extern "C" uint64_t __pack_u16x4_u32(uint64_t src0, unsigned int src1, unsigned int src2) [[hc]];

extern "C" uint64_t __pack_u32x2_u32(uint64_t src0, unsigned int src1, unsigned int src2) [[hc]];

extern "C" int __pack_s8x4_s32(int src0, int src1, unsigned int src2) [[hc]];

extern "C" int64_t __pack_s8x8_s32(int64_t src0, int src1, unsigned int src2) [[hc]];

extern "C" int __pack_s16x2_s32(int src0, int src1, unsigned int src2) [[hc]];

extern "C" int64_t __pack_s16x4_s32(int64_t src0, int src1, unsigned int src2) [[hc]];

extern "C" int64_t __pack_s32x2_s32(int64_t src0, int src1, unsigned int src2) [[hc]];

extern "C" double __pack_f32x2_f32(double src0, float src1, unsigned int src2) [[hc]];
# 2635 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int __unpack_u32_u8x4(unsigned int src0, unsigned int src1) [[hc]];

extern "C" unsigned int __unpack_u32_u8x8(uint64_t src0, unsigned int src1) [[hc]];

extern "C" unsigned int __unpack_u32_u16x2(unsigned int src0, unsigned int src1) [[hc]];

extern "C" unsigned int __unpack_u32_u16x4(uint64_t src0, unsigned int src1) [[hc]];

extern "C" unsigned int __unpack_u32_u32x2(uint64_t src0, unsigned int src1) [[hc]];

extern "C" int __unpack_s32_s8x4(int src0, unsigned int src1) [[hc]];

extern "C" int __unpack_s32_s8x8(int64_t src0, unsigned int src1) [[hc]];

extern "C" int __unpack_s32_s16x2(int src0, unsigned int src1) [[hc]];

extern "C" int __unpack_s32_s16x4(int64_t src0, unsigned int src1) [[hc]];

extern "C" int __unpack_s32_s3x2(int64_t src0, unsigned int src1) [[hc]];

extern "C" float __unpack_f32_f32x2(double src0, unsigned int src1) [[hc]];







extern "C" unsigned int __bitalign_b32(unsigned int src0, unsigned int src1, unsigned int src2) [[hc]];






extern "C" unsigned int __bytealign_b32(unsigned int src0, unsigned int src1, unsigned int src2) [[hc]];







extern "C" unsigned int __lerp_u8x4(unsigned int src0, unsigned int src1, unsigned int src2) [[hc]];







extern "C" unsigned int __packcvt_u8x4_f32(float src0, float src1, float src2, float src3) [[hc]];






extern "C" float __unpackcvt_f32_u8x4(unsigned int src0, unsigned int src1) [[hc]];
# 2702 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int __sad_u32_u32(unsigned int src0, unsigned int src1, unsigned int src2) [[hc]];

extern "C" unsigned int __sad_u32_u16x2(unsigned int src0, unsigned int src1, unsigned int src2) [[hc]];

extern "C" unsigned int __sad_u32_u8x4(unsigned int src0, unsigned int src1, unsigned int src2) [[hc]];
# 2715 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int __sadhi_u16x2_u8x4(unsigned int src0, unsigned int src1, unsigned int src2) [[hc]];




extern "C" uint64_t __clock_u64() [[hc]];






extern "C" uint64_t __cycle_u64() [[hc]];







extern "C" unsigned int __activelaneid_u32() [[hc]];
# 2749 "/opt/rocm/hcc/include/hc.hpp"
extern "C" uint64_t __activelanemask_v4_b64_b1(unsigned int input) [[hc]];
# 2759 "/opt/rocm/hcc/include/hc.hpp"
extern "C" inline unsigned int __activelanecount_u32_b1(unsigned int input) [[hc]] {
 return __popcount_u32_b64(__activelanemask_v4_b64_b1(input));
}
# 2772 "/opt/rocm/hcc/include/hc.hpp"
extern "C" inline int __any(int predicate) [[hc]] {
    return __popcount_u32_b64(__activelanemask_v4_b64_b1(predicate));
}






extern "C" inline int __all(int predicate) [[hc]] {
    return __popcount_u32_b64(__activelanemask_v4_b64_b1(predicate)) == __activelanecount_u32_b1(1);
}







extern "C" inline uint64_t __ballot(int predicate) [[hc]] {
    return __activelanemask_v4_b64_b1(predicate);
}






union __u {
    int i;
    unsigned int u;
    float f;
};
# 2833 "/opt/rocm/hcc/include/hc.hpp"
int __amdgcn_mbcnt_lo(int mask, int src) [[hc]] __asm("llvm.amdgcn.mbcnt.lo");
int __amdgcn_mbcnt_hi(int mask, int src) [[hc]] __asm("llvm.amdgcn.mbcnt.hi");

inline int __lane_id(void) [[hc]] {
  int lo = __amdgcn_mbcnt_lo(-1, 0);
  return __amdgcn_mbcnt_hi(-1, lo);
}
# 2850 "/opt/rocm/hcc/include/hc.hpp"
int __amdgcn_ds_bpermute(int index, int src) [[hc]] __asm("llvm.amdgcn.ds.bpermute");
inline unsigned int __amdgcn_ds_bpermute(int index, unsigned int src) [[hc]] {
  __u tmp; tmp.u = src;
  tmp.i = __amdgcn_ds_bpermute(index, tmp.i);
  return tmp.u;
}
inline float __amdgcn_ds_bpermute(int index, float src) [[hc]] {
  __u tmp; tmp.f = src;
  tmp.i = __amdgcn_ds_bpermute(index, tmp.i);
  return tmp.f;
}




extern "C" int __amdgcn_ds_permute(int index, int src) [[hc]];
inline unsigned int __amdgcn_ds_permute(int index, unsigned int src) [[hc]] {
  __u tmp; tmp.u = src;
  tmp.i = __amdgcn_ds_permute(index, tmp.i);
  return tmp.u;
}
inline float __amdgcn_ds_permute(int index, float src) [[hc]] {
  __u tmp; tmp.f = src;
  tmp.i = __amdgcn_ds_permute(index, tmp.i);
  return tmp.f;
}





extern "C" int __amdgcn_ds_swizzle(int src, int pattern) [[hc]];
inline unsigned int __amdgcn_ds_swizzle(unsigned int src, int pattern) [[hc]] {
  __u tmp; tmp.u = src;
  tmp.i = __amdgcn_ds_swizzle(tmp.i, pattern);
  return tmp.u;
}
inline float __amdgcn_ds_swizzle(float src, int pattern) [[hc]] {
  __u tmp; tmp.f = src;
  tmp.i = __amdgcn_ds_swizzle(tmp.i, pattern);
  return tmp.f;
}






extern "C" int __amdgcn_move_dpp(int src, int dpp_ctrl, int row_mask, int bank_mask, bool bound_ctrl) [[hc]];
# 2908 "/opt/rocm/hcc/include/hc.hpp"
extern "C" int __amdgcn_wave_sr1(int src, bool bound_ctrl) [[hc]];
inline unsigned int __amdgcn_wave_sr1(unsigned int src, bool bound_ctrl) [[hc]] {
  __u tmp; tmp.u = src;
  tmp.i = __amdgcn_wave_sr1(tmp.i, bound_ctrl);
  return tmp.u;
}
inline float __amdgcn_wave_sr1(float src, bool bound_ctrl) [[hc]] {
  __u tmp; tmp.f = src;
  tmp.i = __amdgcn_wave_sr1(tmp.i, bound_ctrl);
  return tmp.f;
}
# 2928 "/opt/rocm/hcc/include/hc.hpp"
extern "C" int __amdgcn_wave_sl1(int src, bool bound_ctrl) [[hc]];
inline unsigned int __amdgcn_wave_sl1(unsigned int src, bool bound_ctrl) [[hc]] {
  __u tmp; tmp.u = src;
  tmp.i = __amdgcn_wave_sl1(tmp.i, bound_ctrl);
  return tmp.u;
}
inline float __amdgcn_wave_sl1(float src, bool bound_ctrl) [[hc]] {
  __u tmp; tmp.f = src;
  tmp.i = __amdgcn_wave_sl1(tmp.i, bound_ctrl);
  return tmp.f;
}
# 2948 "/opt/rocm/hcc/include/hc.hpp"
extern "C" int __amdgcn_wave_rr1(int src) [[hc]];
inline unsigned int __amdgcn_wave_rr1(unsigned int src) [[hc]] {
  __u tmp; tmp.u = src;
  tmp.i = __amdgcn_wave_rr1(tmp.i);
  return tmp.u;
}
inline float __amdgcn_wave_rr1(float src) [[hc]] {
  __u tmp; tmp.f = src;
  tmp.i = __amdgcn_wave_rr1(tmp.i);
  return tmp.f;
}
# 2967 "/opt/rocm/hcc/include/hc.hpp"
extern "C" int __amdgcn_wave_rl1(int src) [[hc]];
inline unsigned int __amdgcn_wave_rl1(unsigned int src) [[hc]] {
  __u tmp; tmp.u = src;
  tmp.i = __amdgcn_wave_rl1(tmp.i);
  return tmp.u;
}
inline float __amdgcn_wave_rl1(float src) [[hc]] {
  __u tmp; tmp.f = src;
  tmp.i = __amdgcn_wave_rl1(tmp.i);
  return tmp.f;
}
# 2990 "/opt/rocm/hcc/include/hc.hpp"
inline int __shfl(int var, int srcLane, int width=(64)) [[hc]] {
  int self = __lane_id();
  int index = srcLane + (self & ~(width-1));
  return __amdgcn_ds_bpermute(index<<2, var);
}



inline unsigned int __shfl(unsigned int var, int srcLane, int width=(64)) [[hc]] {
     __u tmp; tmp.u = var;
    tmp.i = __shfl(tmp.i, srcLane, width);
    return tmp.u;
}


inline float __shfl(float var, int srcLane, int width=(64)) [[hc]] {
    __u tmp; tmp.f = var;
    tmp.i = __shfl(tmp.i, srcLane, width);
    return tmp.f;
}
# 3038 "/opt/rocm/hcc/include/hc.hpp"
inline int __shfl_up(int var, const unsigned int delta, const int width=(64)) [[hc]] {
  int self = __lane_id();
  int index = self - delta;
  index = (index < (self & ~(width-1)))?self:index;
  return __amdgcn_ds_bpermute(index<<2, var);
}



inline unsigned int __shfl_up(unsigned int var, const unsigned int delta, const int width=(64)) [[hc]] {
    __u tmp; tmp.u = var;
    tmp.i = __shfl_up(tmp.i, delta, width);
    return tmp.u;
}

inline float __shfl_up(float var, const unsigned int delta, const int width=(64)) [[hc]] {
    __u tmp; tmp.f = var;
    tmp.i = __shfl_up(tmp.i, delta, width);
    return tmp.f;
}
# 3087 "/opt/rocm/hcc/include/hc.hpp"
inline int __shfl_down(int var, const unsigned int delta, const int width=(64)) [[hc]] {
  int self = __lane_id();
  int index = self + delta;
  index = ((self&(width-1))+delta) >= width?self:index;
  return __amdgcn_ds_bpermute(index<<2, var);
}



inline unsigned int __shfl_down(unsigned int var, const unsigned int delta, const int width=(64)) [[hc]] {
    __u tmp; tmp.u = var;
    tmp.i = __shfl_down(tmp.i, delta, width);
    return tmp.u;
}

inline float __shfl_down(float var, const unsigned int delta, const int width=(64)) [[hc]] {
    __u tmp; tmp.f = var;
    tmp.i = __shfl_down(tmp.i, delta, width);
    return tmp.f;
}
# 3133 "/opt/rocm/hcc/include/hc.hpp"
inline int __shfl_xor(int var, int laneMask, int width=(64)) [[hc]] {
  int self = __lane_id();
  int index = self^laneMask;
  index = index >= ((self+width)&~(width-1))?self:index;
  return __amdgcn_ds_bpermute(index<<2, var);
}



inline float __shfl_xor(float var, int laneMask, int width=(64)) [[hc]] {
    __u tmp; tmp.f = var;
    tmp.i = __shfl_xor(tmp.i, laneMask, width);
    return tmp.f;
}




inline unsigned int __shfl_xor(unsigned int var, int laneMask, int width=(64)) [[hc]] {
    __u tmp; tmp.u = var;
    tmp.i = __shfl_xor(tmp.i, laneMask, width);
    return tmp.u;
}
# 3164 "/opt/rocm/hcc/include/hc.hpp"
inline unsigned int __mul24(unsigned int x, unsigned int y) [[hc]] {
  return (x & 0x00FFFFFF) * (y & 0x00FFFFFF);
}
# 3175 "/opt/rocm/hcc/include/hc.hpp"
inline int __mul24(int x, int y) [[hc]] {
  return ((x << 8) >> 8) * ((y << 8) >> 8);
}
# 3188 "/opt/rocm/hcc/include/hc.hpp"
inline unsigned int __mad24(unsigned int x, unsigned int y, unsigned int z) [[hc]] {
  return __mul24(x,y) + z;
}
# 3201 "/opt/rocm/hcc/include/hc.hpp"
inline int __mad24(int x, int y, int z) [[hc]] {
  return __mul24(x,y) + z;
}

inline void abort() [[hc]] {
  __builtin_trap();
}
# 3220 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int get_group_segment_size() [[hc]];






extern "C" unsigned int get_static_group_segment_size() [[hc]];




extern "C" void* get_group_segment_base_pointer() [[hc]];




extern "C" void* get_dynamic_group_segment_base_pointer() [[hc]];
# 3285 "/opt/rocm/hcc/include/hc.hpp"
class tile_barrier {
public:
# 3308 "/opt/rocm/hcc/include/hc.hpp"
    tile_barrier(const tile_barrier& other) [[cpu]] [[hc]] {}
# 3321 "/opt/rocm/hcc/include/hc.hpp"
    void wait() const [[hc]] {

        wait_with_all_memory_fence();



    }
# 3338 "/opt/rocm/hcc/include/hc.hpp"
    void wait_with_all_memory_fence() const [[hc]] {

        amp_barrier((1) | (2));



    }
# 3355 "/opt/rocm/hcc/include/hc.hpp"
    void wait_with_global_memory_fence() const [[hc]] {

        amp_barrier((2));



    }
# 3373 "/opt/rocm/hcc/include/hc.hpp"
    void wait_with_tile_static_memory_fence() const [[hc]] {

        amp_barrier((1));



    }

private:




    tile_barrier() [[hc]] {}


    template <int N> friend
        class tiled_index;
};
# 3403 "/opt/rocm/hcc/include/hc.hpp"
void all_memory_fence(const tile_barrier&) [[hc]];







void global_memory_fence(const tile_barrier&) [[hc]];







void tile_static_memory_fence(const tile_barrier&) [[hc]];
# 3431 "/opt/rocm/hcc/include/hc.hpp"
template <int N=3>
class tiled_index {
public:




    static const int rank = 3;
# 3447 "/opt/rocm/hcc/include/hc.hpp"
    tiled_index(const tiled_index& other) [[cpu]] [[hc]] : global(other.global), local(other.local), tile(other.tile), tile_origin(other.tile_origin), barrier(other.barrier), tile_dim(other.tile_dim) {}





    const index<3> global;





    const index<3> local;





    const index<3> tile;





    const index<3> tile_origin;




    const tile_barrier barrier;




    const index<3> tile_dim;






    operator const index<3>() const [[cpu]] [[hc]] {
        return global;
    }

    tiled_index(const index<3>& g) [[cpu]] [[hc]] : global(g) {}

private:





    __attribute__((annotate("__cxxamp_opencl_index")))

    __attribute__((always_inline)) tiled_index() [[hc]]
        : global(index<3>(amp_get_global_id(2), amp_get_global_id(1), amp_get_global_id(0))),
          local(index<3>(amp_get_local_id(2), amp_get_local_id(1), amp_get_local_id(0))),
          tile(index<3>(amp_get_group_id(2), amp_get_group_id(1), amp_get_group_id(0))),
          tile_origin(index<3>(amp_get_global_id(2) - amp_get_local_id(2),
                               amp_get_global_id(1) - amp_get_local_id(1),
                               amp_get_global_id(0) - amp_get_local_id(0))),
          tile_dim(index<3>(amp_get_local_size(2), amp_get_local_size(1), amp_get_local_size(0)))





    {}

    template<typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const tiled_extent<N>&, const Kernel&);





};







template<>
class tiled_index<1> {
public:




    static const int rank = 1;
# 3548 "/opt/rocm/hcc/include/hc.hpp"
    tiled_index(const tiled_index& other) [[cpu]] [[hc]] : global(other.global), local(other.local), tile(other.tile), tile_origin(other.tile_origin), barrier(other.barrier), tile_dim(other.tile_dim) {}





    const index<1> global;





    const index<1> local;





    const index<1> tile;





    const index<1> tile_origin;




    const tile_barrier barrier;




    const index<1> tile_dim;






    operator const index<1>() const [[cpu]] [[hc]] {
        return global;
    }

    tiled_index(const index<1>& g) [[cpu]] [[hc]] : global(g) {}

private:





    __attribute__((annotate("__cxxamp_opencl_index")))

    __attribute__((always_inline)) tiled_index() [[hc]]
        : global(index<1>(amp_get_global_id(0))),
          local(index<1>(amp_get_local_id(0))),
          tile(index<1>(amp_get_group_id(0))),
          tile_origin(index<1>(amp_get_global_id(0) - amp_get_local_id(0))),
          tile_dim(index<1>(amp_get_local_size(0)))





    {}

    template<typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const tiled_extent<1>&, const Kernel&);





};






template<>
class tiled_index<2> {
public:




    static const int rank = 2;
# 3646 "/opt/rocm/hcc/include/hc.hpp"
    tiled_index(const tiled_index& other) [[cpu]] [[hc]] : global(other.global), local(other.local), tile(other.tile), tile_origin(other.tile_origin), barrier(other.barrier), tile_dim(other.tile_dim) {}





    const index<2> global;





    const index<2> local;





    const index<2> tile;





    const index<2> tile_origin;




    const tile_barrier barrier;




    const index<2> tile_dim;






    operator const index<2>() const [[cpu]] [[hc]] {
      return global;
    }

    tiled_index(const index<2>& g) [[cpu]] [[hc]] : global(g) {}

private:





    __attribute__((annotate("__cxxamp_opencl_index")))

    __attribute__((always_inline)) tiled_index() [[hc]]
        : global(index<2>(amp_get_global_id(1), amp_get_global_id(0))),
          local(index<2>(amp_get_local_id(1), amp_get_local_id(0))),
          tile(index<2>(amp_get_group_id(1), amp_get_group_id(0))),
          tile_origin(index<2>(amp_get_global_id(1) - amp_get_local_id(1),
                               amp_get_global_id(0) - amp_get_local_id(0))),
          tile_dim(index<2>(amp_get_local_size(1), amp_get_local_size(0)))





    {}

    template<typename Kernel> friend
        completion_future parallel_for_each(const accelerator_view&, const tiled_extent<2>&, const Kernel&);





};
# 3919 "/opt/rocm/hcc/include/hc.hpp"
template <typename T, int N>
struct projection_helper
{


    static_assert(N > 1, "projection_helper is only supported on array_view with a rank of 2 or higher");
    typedef array_view<T, N - 1> result_type;
    static result_type project(array_view<T, N>& now, int stride) [[cpu]] [[hc]] {
        int ext[N - 1], i, idx[N - 1], ext_o[N - 1];
        for (i = N - 1; i > 0; --i) {
            ext_o[i - 1] = now.extent[i];
            ext[i - 1] = now.extent_base[i];
            idx[i - 1] = now.index_base[i];
        }
        stride += now.index_base[0];
        extent<N - 1> ext_now(ext_o);
        extent<N - 1> ext_base(ext);
        index<N - 1> idx_base(idx);
        return result_type (now.cache, ext_now, ext_base, idx_base,
                            now.offset + ext_base.size() * stride);
    }
    static result_type project(const array_view<T, N>& now, int stride) [[cpu]] [[hc]] {
        int ext[N - 1], i, idx[N - 1], ext_o[N - 1];
        for (i = N - 1; i > 0; --i) {
            ext_o[i - 1] = now.extent[i];
            ext[i - 1] = now.extent_base[i];
            idx[i - 1] = now.index_base[i];
        }
        stride += now.index_base[0];
        extent<N - 1> ext_now(ext_o);
        extent<N - 1> ext_base(ext);
        index<N - 1> idx_base(idx);
        return result_type (now.cache, ext_now, ext_base, idx_base,
                            now.offset + ext_base.size() * stride);
    }
};

template <typename T>
struct projection_helper<T, 1>
{


    typedef T& result_type;
    static result_type project(array_view<T, 1>& now, int i) [[cpu]] [[hc]] {



        T *ptr = reinterpret_cast<T *>(now.cache.get() + i + now.offset + now.index_base[0]);
        return *ptr;
    }
    static result_type project(const array_view<T, 1>& now, int i) [[cpu]] [[hc]] {



        T *ptr = reinterpret_cast<T *>(now.cache.get() + i + now.offset + now.index_base[0]);
        return *ptr;
    }
};

template <typename T, int N>
struct projection_helper<const T, N>
{


    static_assert(N > 1, "projection_helper is only supported on array_view with a rank of 2 or higher");
    typedef array_view<const T, N - 1> const_result_type;
    static const_result_type project(array_view<const T, N>& now, int stride) [[cpu]] [[hc]] {
        int ext[N - 1], i, idx[N - 1], ext_o[N - 1];
        for (i = N - 1; i > 0; --i) {
            ext_o[i - 1] = now.extent[i];
            ext[i - 1] = now.extent_base[i];
            idx[i - 1] = now.index_base[i];
        }
        stride += now.index_base[0];
        extent<N - 1> ext_now(ext_o);
        extent<N - 1> ext_base(ext);
        index<N - 1> idx_base(idx);
        auto ret = const_result_type (now.cache, ext_now, ext_base, idx_base,
                                      now.offset + ext_base.size() * stride);
        return ret;
    }
    static const_result_type project(const array_view<const T, N>& now, int stride) [[cpu]] [[hc]] {
        int ext[N - 1], i, idx[N - 1], ext_o[N - 1];
        for (i = N - 1; i > 0; --i) {
            ext_o[i - 1] = now.extent[i];
            ext[i - 1] = now.extent_base[i];
            idx[i - 1] = now.index_base[i];
        }
        stride += now.index_base[0];
        extent<N - 1> ext_now(ext_o);
        extent<N - 1> ext_base(ext);
        index<N - 1> idx_base(idx);
        auto ret = const_result_type (now.cache, ext_now, ext_base, idx_base,
                                      now.offset + ext_base.size() * stride);
        return ret;
    }
};

template <typename T>
struct projection_helper<const T, 1>
{


    typedef const T& const_result_type;
    static const_result_type project(array_view<const T, 1>& now, int i) [[cpu]] [[hc]] {



        const T *ptr = reinterpret_cast<const T *>(now.cache.get() + i + now.offset + now.index_base[0]);
        return *ptr;
    }
    static const_result_type project(const array_view<const T, 1>& now, int i) [[cpu]] [[hc]] {



        const T *ptr = reinterpret_cast<const T *>(now.cache.get() + i + now.offset + now.index_base[0]);
        return *ptr;
    }
};





template <typename T>
struct __has_data
{
private:
    struct two {char __lx; char __lxx;};
    template <typename C> static char test(decltype(std::declval<C>().data()));
    template <typename C> static two test(...);
public:
    static const bool value = sizeof(test<T>(0)) == 1;
};

template <typename T>
struct __has_size
{
private:
    struct two {char __lx; char __lxx;};
    template <typename C> static char test(decltype(&C::size));
    template <typename C> static two test(...);
public:
    static const bool value = sizeof(test<T>(0)) == 1;
};

template <typename T>
struct __is_container
{
    using _T = typename std::remove_reference<T>::type;
    static const bool value = __has_size<_T>::value && __has_data<_T>::value;
};






template <typename T, int N>
struct array_projection_helper
{



    static_assert(N > 1, "projection_helper is only supported on array with a rank of 2 or higher");
    typedef array_view<T, N - 1> result_type;
    typedef array_view<const T, N - 1> const_result_type;
    static result_type project(array<T, N>& now, int stride) [[cpu]] [[hc]] {




        int comp[N - 1], i;
        for (i = N - 1; i > 0; --i)
            comp[i - 1] = now.extent[i];
        extent<N - 1> ext(comp);
        int offset = ext.size() * stride;




        return result_type(now.m_device, ext, ext, index<N - 1>(), offset);
    }
    static const_result_type project(const array<T, N>& now, int stride) [[cpu]] [[hc]] {
        int comp[N - 1], i;
        for (i = N - 1; i > 0; --i)
            comp[i - 1] = now.extent[i];
        extent<N - 1> ext(comp);
        int offset = ext.size() * stride;
        return const_result_type(now.m_device, ext, ext, index<N - 1>(), offset);
    }
};

template <typename T>
struct array_projection_helper<T, 1>
{



    typedef T& result_type;
    typedef const T& const_result_type;
    static result_type project(array<T, 1>& now, int i) [[cpu]] [[hc]] {



        T *ptr = reinterpret_cast<T *>(now.m_device.get() + i);
        return *ptr;
    }
    static const_result_type project(const array<T, 1>& now, int i) [[cpu]] [[hc]] {



        const T *ptr = reinterpret_cast<const T *>(now.m_device.get() + i);
        return *ptr;
    }
};

template <int N>
const extent<N>& check(const extent<N>& ext)
{







    return ext;
}





template <typename T, int N>
void copy(const array_view<const T, N>& src, const array_view<T, N>& dest);

template <typename T, int N>
void copy(const array_view<T, N>& src, const array_view<T, N>& dest);

template <typename T, int N>
void copy(const array<T, N>& src, const array_view<T, N>& dest);

template <typename T, int N>
void copy(const array<T, N>& src, array<T, N>& dest);

template <typename T, int N>
void copy(const array_view<const T, N>& src, array<T, N>& dest);

template <typename T, int N>
void copy(const array_view<T, N>& src, array<T, N>& dest);

template <typename InputIter, typename T, int N>
void copy(InputIter srcBegin, InputIter srcEnd, const array_view<T, N>& dest);

template <typename InputIter, typename T, int N>
void copy(InputIter srcBegin, InputIter srcEnd, array<T, N>& dest);

template <typename InputIter, typename T, int N>
void copy(InputIter srcBegin, const array_view<T, N>& dest);

template <typename InputIter, typename T, int N>
void copy(InputIter srcBegin, array<T, N>& dest);

template <typename OutputIter, typename T, int N>
void copy(const array_view<T, N> &src, OutputIter destBegin);

template <typename OutputIter, typename T, int N>
void copy(const array<T, N> &src, OutputIter destBegin);
# 4200 "/opt/rocm/hcc/include/hc.hpp"
template <typename T, int N = 1>
class array {
    static_assert(!std::is_const<T>::value, "array<const T> is not supported");
public:

    typedef Kalmar::_data<T> acc_buffer_t;







    static const int rank = N;




    typedef T value_type;




    array() = delete;
# 4233 "/opt/rocm/hcc/include/hc.hpp"
    array(const array& other)
        : array(other.get_extent(), other.get_accelerator_view())
    { copy(other, *this); }
# 4244 "/opt/rocm/hcc/include/hc.hpp"
    array(array&& other)
        : m_device(other.m_device), extent(other.extent)
    { other.m_device.reset(); }
# 4255 "/opt/rocm/hcc/include/hc.hpp"
    explicit array(const extent<N>& ext)
        : array(ext, accelerator(L"default").get_default_view()) {}
# 4265 "/opt/rocm/hcc/include/hc.hpp"
    explicit array(int e0)
        : array(hc::extent<N>(e0)) { static_assert(N == 1, "illegal"); }
    explicit array(int e0, int e1)
        : array(hc::extent<N>(e0, e1)) {}
    explicit array(int e0, int e1, int e2)
        : array(hc::extent<N>(e0, e1, e2)) {}
# 4288 "/opt/rocm/hcc/include/hc.hpp"
    template <typename InputIter>
        array(const extent<N>& ext, InputIter srcBegin)
            : array(ext, srcBegin, accelerator(L"default").get_default_view()) {}
    template <typename InputIter>
        array(const extent<N>& ext, InputIter srcBegin, InputIter srcEnd)
            : array(ext, srcBegin, srcEnd, accelerator(L"default").get_default_view()) {}
# 4307 "/opt/rocm/hcc/include/hc.hpp"
    template <typename InputIter>
        array(int e0, InputIter srcBegin)
            : array(hc::extent<N>(e0), srcBegin) {}
    template <typename InputIter>
        array(int e0, InputIter srcBegin, InputIter srcEnd)
            : array(hc::extent<N>(e0), srcBegin, srcEnd) {}
    template <typename InputIter>
        array(int e0, int e1, InputIter srcBegin)
            : array(hc::extent<N>(e0, e1), srcBegin) {}
    template <typename InputIter>
        array(int e0, int e1, InputIter srcBegin, InputIter srcEnd)
            : array(hc::extent<N>(e0, e1), srcBegin, srcEnd) {}
    template <typename InputIter>
        array(int e0, int e1, int e2, InputIter srcBegin)
            : array(hc::extent<N>(e0, e1, e2), srcBegin) {}
    template <typename InputIter>
        array(int e0, int e1, int e2, InputIter srcBegin, InputIter srcEnd)
            : array(hc::extent<N>(e0, e1, e2), srcBegin, srcEnd) {}
# 4339 "/opt/rocm/hcc/include/hc.hpp"
    explicit array(const array_view<const T, N>& src)
        : array(src.get_extent(), accelerator(L"default").get_default_view())
    { copy(src, *this); }
# 4365 "/opt/rocm/hcc/include/hc.hpp"
    array(const extent<N>& ext, accelerator_view av, access_type cpu_access_type = access_type_auto)

        : m_device(ext.size()), extent(ext) {}
# 4376 "/opt/rocm/hcc/include/hc.hpp"
    explicit array(int e0, void* accelerator_pointer)
        : array(hc::extent<N>(e0), accelerator(L"default").get_default_view(), accelerator_pointer) {}
    explicit array(int e0, int e1, void* accelerator_pointer)
        : array(hc::extent<N>(e0, e1), accelerator(L"default").get_default_view(), accelerator_pointer) {}
    explicit array(int e0, int e1, int e2, void* accelerator_pointer)
        : array(hc::extent<N>(e0, e1, e2), accelerator(L"default").get_default_view(), accelerator_pointer) {}

    explicit array(const extent<N>& ext, void* accelerator_pointer)
        : array(ext, accelerator(L"default").get_default_view(), accelerator_pointer) {}
# 4396 "/opt/rocm/hcc/include/hc.hpp"
    explicit array(const extent<N>& ext, accelerator_view av, void* accelerator_pointer, access_type cpu_access_type = access_type_auto)

        : m_device(ext.size(), accelerator_pointer), extent(ext) {}
# 4414 "/opt/rocm/hcc/include/hc.hpp"
    array(int e0, accelerator_view av, access_type cpu_access_type = access_type_auto)
        : array(hc::extent<N>(e0), av, cpu_access_type) {}
    array(int e0, int e1, accelerator_view av, access_type cpu_access_type = access_type_auto)
        : array(hc::extent<N>(e0, e1), av, cpu_access_type) {}
    array(int e0, int e1, int e2, accelerator_view av, access_type cpu_access_type = access_type_auto)
        : array(hc::extent<N>(e0, e1, e2), av, cpu_access_type) {}
# 4450 "/opt/rocm/hcc/include/hc.hpp"
    template <typename InputIter>
        array(const extent<N>& ext, InputIter srcBegin, accelerator_view av,
              access_type cpu_access_type = access_type_auto)
        : array(ext, av, cpu_access_type) { copy(srcBegin, *this); }
    template <typename InputIter>
        array(const extent<N>& ext, InputIter srcBegin, InputIter srcEnd,
              accelerator_view av, access_type cpu_access_type = access_type_auto)
        : array(ext, av, cpu_access_type) {
            if (ext.size() < std::distance(srcBegin, srcEnd))
                throw runtime_exception("errorMsg_throw", 0);
            copy(srcBegin, srcEnd, *this);
        }
# 4491 "/opt/rocm/hcc/include/hc.hpp"
    array(const array_view<const T, N>& src, accelerator_view av, access_type cpu_access_type = access_type_auto)
        : array(src.get_extent(), av, cpu_access_type) { copy(src, *this); }
# 4507 "/opt/rocm/hcc/include/hc.hpp"
    template <typename InputIter>
        array(int e0, InputIter srcBegin, accelerator_view av, access_type cpu_access_type = access_type_auto)
            : array(extent<N>(e0), srcBegin, av, cpu_access_type) {}
    template <typename InputIter>
        array(int e0, InputIter srcBegin, InputIter srcEnd, accelerator_view av, access_type cpu_access_type = access_type_auto)
            : array(extent<N>(e0), srcBegin, srcEnd, av, cpu_access_type) {}
    template <typename InputIter>
        array(int e0, int e1, InputIter srcBegin, accelerator_view av, access_type cpu_access_type = access_type_auto)
            : array(hc::extent<N>(e0, e1), srcBegin, av, cpu_access_type) {}
    template <typename InputIter>
        array(int e0, int e1, InputIter srcBegin, InputIter srcEnd, accelerator_view av, access_type cpu_access_type = access_type_auto)
            : array(hc::extent<N>(e0, e1), srcBegin, srcEnd, av, cpu_access_type) {}
    template <typename InputIter>
        array(int e0, int e1, int e2, InputIter srcBegin, accelerator_view av, access_type cpu_access_type = access_type_auto)
            : array(hc::extent<N>(e0, e1, e2), srcBegin, av, cpu_access_type) {}
    template <typename InputIter>
        array(int e0, int e1, int e2, InputIter srcBegin, InputIter srcEnd, accelerator_view av, access_type cpu_access_type = access_type_auto)
            : array(hc::extent<N>(e0, e1, e2), srcBegin, srcEnd, av, cpu_access_type) {}
# 4540 "/opt/rocm/hcc/include/hc.hpp"
    array(const extent<N>& ext, accelerator_view av, accelerator_view associated_av)

        : m_device(ext.size()), extent(ext) {}
# 4559 "/opt/rocm/hcc/include/hc.hpp"
    array(int e0, accelerator_view av, accelerator_view associated_av)
        : array(hc::extent<N>(e0), av, associated_av) {}
    array(int e0, int e1, accelerator_view av, accelerator_view associated_av)
        : array(hc::extent<N>(e0, e1), av, associated_av) {}
    array(int e0, int e1, int e2, accelerator_view av, accelerator_view associated_av)
        : array(hc::extent<N>(e0, e1, e2), av, associated_av) {}
# 4583 "/opt/rocm/hcc/include/hc.hpp"
    template <typename InputIter>
        array(const extent<N>& ext, InputIter srcBegin, accelerator_view av, accelerator_view associated_av)
            : array(ext, av, associated_av) { copy(srcBegin, *this); }
    template <typename InputIter>
        array(const extent<N>& ext, InputIter srcBegin, InputIter srcEnd, accelerator_view av, accelerator_view associated_av)
            : array(ext, av, associated_av) {
            if (ext.size() < std::distance(srcBegin, srcEnd))
                throw runtime_exception("errorMsg_throw", 0);
            copy(srcBegin, srcEnd, *this);
        }
# 4612 "/opt/rocm/hcc/include/hc.hpp"
    array(const array_view<const T, N>& src, accelerator_view av, accelerator_view associated_av)
        : array(src.get_extent(), av, associated_av)
    { copy(src, *this); }
# 4630 "/opt/rocm/hcc/include/hc.hpp"
    template <typename InputIter>
        array(int e0, InputIter srcBegin, accelerator_view av, accelerator_view associated_av)
            : array(extent<N>(e0), srcBegin, av, associated_av) {}
    template <typename InputIter>
        array(int e0, InputIter srcBegin, InputIter srcEnd, accelerator_view av, accelerator_view associated_av)
            : array(extent<N>(e0), srcBegin, srcEnd, av, associated_av) {}
    template <typename InputIter>
        array(int e0, int e1, InputIter srcBegin, accelerator_view av, accelerator_view associated_av)
            : array(hc::extent<N>(e0, e1), srcBegin, av, associated_av) {}
    template <typename InputIter>
        array(int e0, int e1, InputIter srcBegin, InputIter srcEnd, accelerator_view av, accelerator_view associated_av)
            : array(hc::extent<N>(e0, e1), srcBegin, srcEnd, av, associated_av) {}
    template <typename InputIter>
        array(int e0, int e1, int e2, InputIter srcBegin, accelerator_view av, accelerator_view associated_av)
            : array(hc::extent<N>(e0, e1, e2), srcBegin, av, associated_av) {}
    template <typename InputIter>
        array(int e0, int e1, int e2, InputIter srcBegin, InputIter srcEnd, accelerator_view av, accelerator_view associated_av)
            : array(hc::extent<N>(e0, e1, e2), srcBegin, srcEnd, av, associated_av) {}






    extent<N> get_extent() const [[cpu]] [[hc]] { return extent; }





    accelerator_view get_accelerator_view() const { return m_device.get_av(); }





    accelerator_view get_associated_accelerator_view() const { return m_device.get_stage(); }




    access_type get_cpu_access_type() const { return m_device.get_access(); }
# 4681 "/opt/rocm/hcc/include/hc.hpp"
    array& operator=(const array& other) {
        if (this != &other) {
            array arr(other);
            *this = std::move(arr);
        }
        return *this;
    }
# 4696 "/opt/rocm/hcc/include/hc.hpp"
    array& operator=(array&& other) {
        if (this != &other) {
            extent = other.extent;
            m_device = other.m_device;
            other.m_device.reset();
        }
        return *this;
    }
# 4713 "/opt/rocm/hcc/include/hc.hpp"
    array& operator=(const array_view<T,N>& src) {
        array arr(src);
        *this = std::move(arr);
        return *this;
    }
# 4726 "/opt/rocm/hcc/include/hc.hpp"
    void copy_to(array& dest) const {







        copy(*this, dest);
    }
# 4744 "/opt/rocm/hcc/include/hc.hpp"
    void copy_to(const array_view<T,N>& dest) const { copy(*this, dest); }






    T* data() const [[cpu]] [[hc]] {





        return reinterpret_cast<T*>(m_device.get());
    }







    T* accelerator_pointer() const [[cpu]] [[hc]] {
        return reinterpret_cast<T*>(m_device.get_device_pointer());
    }
# 4777 "/opt/rocm/hcc/include/hc.hpp"
    operator std::vector<T>() const {
        std::vector<T> vec(extent.size());
        copy(*this, vec.data());
        return std::move(vec);
    }
# 4794 "/opt/rocm/hcc/include/hc.hpp"
    T& operator[](const index<N>& idx) [[cpu]] [[hc]] {





        T *ptr = reinterpret_cast<T*>(m_device.get());
        return ptr[Kalmar::amp_helper<N, index<N>, hc::extent<N>>::flatten(idx, extent)];
    }
    T& operator()(const index<N>& idx) [[cpu]] [[hc]] {
        return (*this)[idx];
    }
# 4820 "/opt/rocm/hcc/include/hc.hpp"
    const T& operator[](const index<N>& idx) const [[cpu]] [[hc]] {





        T *ptr = reinterpret_cast<T*>(m_device.get());
        return ptr[Kalmar::amp_helper<N, index<N>, hc::extent<N>>::flatten(idx, extent)];
    }
    const T& operator()(const index<N>& idx) const [[cpu]] [[hc]] {
        return (*this)[idx];
    }
# 4843 "/opt/rocm/hcc/include/hc.hpp"
    T& operator()(int i0, int i1) [[cpu]] [[hc]] {
        return (*this)[index<2>(i0, i1)];
    }
    T& operator()(int i0, int i1, int i2) [[cpu]] [[hc]] {
        return (*this)[index<3>(i0, i1, i2)];
    }
# 4860 "/opt/rocm/hcc/include/hc.hpp"
    const T& operator()(int i0, int i1) const [[cpu]] [[hc]] {
        return (*this)[index<2>(i0, i1)];
    }
    const T& operator()(int i0, int i1, int i2) const [[cpu]] [[hc]] {
        return (*this)[index<3>(i0, i1, i2)];
    }
# 4884 "/opt/rocm/hcc/include/hc.hpp"
    typename array_projection_helper<T, N>::result_type
        operator[] (int i) [[cpu]] [[hc]] {
            return array_projection_helper<T, N>::project(*this, i);
        }
    typename array_projection_helper<T, N>::result_type
        operator()(int i0) [[cpu]] [[hc]] {
            return (*this)[i0];
        }
    typename array_projection_helper<T, N>::const_result_type
        operator[] (int i) const [[cpu]] [[hc]] {
            return array_projection_helper<T, N>::project(*this, i);
        }
    typename array_projection_helper<T, N>::const_result_type
        operator()(int i0) const [[cpu]] [[hc]] {
            return (*this)[i0];
        }
# 4921 "/opt/rocm/hcc/include/hc.hpp"
    array_view<T, N> section(const index<N>& origin, const extent<N>& ext) [[cpu]] [[hc]] {




        array_view<T, N> av(*this);
        return av.section(origin, ext);
    }
    array_view<const T, N> section(const index<N>& origin, const extent<N>& ext) const [[cpu]] [[hc]] {
        array_view<const T, N> av(*this);
        return av.section(origin, ext);
    }







    array_view<T, N> section(const index<N>& idx) [[cpu]] [[hc]] {




        array_view<T, N> av(*this);
        return av.section(idx);
    }
    array_view<const T, N> section(const index<N>& idx) const [[cpu]] [[hc]] {
        array_view<const T, N> av(*this);
        return av.section(idx);
    }







    array_view<T,N> section(const extent<N>& ext) [[cpu]] [[hc]] {
        array_view<T, N> av(*this);
        return av.section(ext);
    }
    array_view<const T,N> section(const extent<N>& ext) const [[cpu]] [[hc]] {
        array_view<const T, N> av(*this);
        return av.section(ext);
    }
# 4980 "/opt/rocm/hcc/include/hc.hpp"
    array_view<T, 1> section(int i0, int e0) [[cpu]] [[hc]] {
        static_assert(N == 1, "Rank must be 1");
        return section(index<1>(i0), hc::extent<1>(e0));
    }
    array_view<const T, 1> section(int i0, int e0) const [[cpu]] [[hc]] {
        static_assert(N == 1, "Rank must be 1");
        return section(index<1>(i0), hc::extent<1>(e0));
    }
    array_view<T, 2> section(int i0, int i1, int e0, int e1) const [[cpu]] [[hc]] {
        static_assert(N == 2, "Rank must be 2");
        return section(index<2>(i0, i1), hc::extent<2>(e0, e1));
    }
    array_view<T, 2> section(int i0, int i1, int e0, int e1) [[cpu]] [[hc]] {
        static_assert(N == 2, "Rank must be 2");
        return section(index<2>(i0, i1), hc::extent<2>(e0, e1));
    }
    array_view<T, 3> section(int i0, int i1, int i2, int e0, int e1, int e2) [[cpu]] [[hc]] {
        static_assert(N == 3, "Rank must be 3");
        return section(index<3>(i0, i1, i2), hc::extent<3>(e0, e1, e2));
    }
    array_view<const T, 3> section(int i0, int i1, int i2, int e0, int e1, int e2) const [[cpu]] [[hc]] {
        static_assert(N == 3, "Rank must be 3");
        return section(index<3>(i0, i1, i2), hc::extent<3>(e0, e1, e2));
    }
# 5028 "/opt/rocm/hcc/include/hc.hpp"
    template <typename ElementType>
        array_view<ElementType, 1> reinterpret_as() [[cpu]] [[hc]] {






            int size = extent.size() * sizeof(T) / sizeof(ElementType);
            using buffer_type = typename array_view<ElementType, 1>::acc_buffer_t;
            array_view<ElementType, 1> av(buffer_type(m_device), extent<1>(size), 0);
            return av;
        }
    template <typename ElementType>
        array_view<const ElementType, 1> reinterpret_as() const [[cpu]] [[hc]] {




            int size = extent.size() * sizeof(T) / sizeof(ElementType);
            using buffer_type = typename array_view<ElementType, 1>::acc_buffer_t;
            array_view<const ElementType, 1> av(buffer_type(m_device), extent<1>(size), 0);
            return av;
        }
# 5068 "/opt/rocm/hcc/include/hc.hpp"
    template <int K> array_view<T, K>
        view_as(const extent<K>& viewExtent) [[cpu]] [[hc]] {




            array_view<T, K> av(m_device, viewExtent, 0);
            return av;
        }
    template <int K> array_view<const T, K>
        view_as(const extent<K>& viewExtent) const [[cpu]] [[hc]] {




            const array_view<T, K> av(m_device, viewExtent, 0);
            return av;
        }



    ~array() {}


    const acc_buffer_t& internal() const [[cpu]] [[hc]] { return m_device; }
    int get_offset() const [[cpu]] [[hc]] { return 0; }
    index<N> get_index_base() const [[cpu]] [[hc]] { return index<N>(); }
private:
    template <typename K, int Q> friend struct projection_helper;
    template <typename K, int Q> friend struct array_projection_helper;
    acc_buffer_t m_device;
    extent<N> extent;

    template <typename Q, int K> friend
        void copy(const array<Q, K>&, const array_view<Q, K>&);
    template <typename Q, int K> friend
        void copy(const array_view<const Q, K>&, array<Q, K>&);
};
# 5117 "/opt/rocm/hcc/include/hc.hpp"
template <typename T, int N = 1>
class array_view
{
public:
    typedef typename std::remove_const<T>::type nc_T;

    typedef Kalmar::_data<T> acc_buffer_t;







    static const int rank = N;




    typedef T value_type;




    array_view() = delete;
# 5151 "/opt/rocm/hcc/include/hc.hpp"
    array_view(array<T, N>& src) [[cpu]] [[hc]]
        : cache(src.internal()), extent(src.get_extent()), extent_base(extent), index_base(), offset(0) {}
# 5170 "/opt/rocm/hcc/include/hc.hpp"
    template <typename Container, class = typename std::enable_if<__is_container<Container>::value>::type>
        array_view(const extent<N>& extent, Container& src)
            : array_view(extent, src.data())
        { static_assert( std::is_same<decltype(src.data()), T*>::value, "container element type and array view element type must match"); }
# 5185 "/opt/rocm/hcc/include/hc.hpp"
    array_view(const extent<N>& ext, value_type* src) [[cpu]] [[hc]]

        : cache((T *)(src)), extent(ext), extent_base(ext), offset(0) {}
# 5202 "/opt/rocm/hcc/include/hc.hpp"
    explicit array_view(const extent<N>& ext)
        : cache(ext.size()), extent(ext), extent_base(ext), offset(0) {}
# 5215 "/opt/rocm/hcc/include/hc.hpp"
    template <typename Container, class = typename std::enable_if<__is_container<Container>::value>::type>
        array_view(int e0, Container& src)
            : array_view(hc::extent<N>(e0), src) {}
    template <typename Container, class = typename std::enable_if<__is_container<Container>::value>::type>
        array_view(int e0, int e1, Container& src)
            : array_view(hc::extent<N>(e0, e1), src) {}
    template <typename Container, class = typename std::enable_if<__is_container<Container>::value>::type>
        array_view(int e0, int e1, int e2, Container& src)
            : array_view(hc::extent<N>(e0, e1, e2), src) {}
# 5235 "/opt/rocm/hcc/include/hc.hpp"
    array_view(int e0, value_type *src) [[cpu]] [[hc]]
        : array_view(hc::extent<N>(e0), src) {}
    array_view(int e0, int e1, value_type *src) [[cpu]] [[hc]]
        : array_view(hc::extent<N>(e0, e1), src) {}
    array_view(int e0, int e1, int e2, value_type *src) [[cpu]] [[hc]]
        : array_view(hc::extent<N>(e0, e1, e2), src) {}
# 5249 "/opt/rocm/hcc/include/hc.hpp"
    explicit array_view(int e0) : array_view(hc::extent<N>(e0)) {}
    explicit array_view(int e0, int e1)
        : array_view(hc::extent<N>(e0, e1)) {}
    explicit array_view(int e0, int e1, int e2)
        : array_view(hc::extent<N>(e0, e1, e2)) {}
# 5263 "/opt/rocm/hcc/include/hc.hpp"
    array_view(const array_view& other) [[cpu]] [[hc]]
        : cache(other.cache), extent(other.extent), extent_base(other.extent_base), index_base(other.index_base), offset(other.offset) {}




    extent<N> get_extent() const [[cpu]] [[hc]] { return extent; }
# 5280 "/opt/rocm/hcc/include/hc.hpp"
    accelerator_view get_source_accelerator_view() const { return cache.get_av(); }
# 5290 "/opt/rocm/hcc/include/hc.hpp"
    array_view& operator=(const array_view& other) [[cpu]] [[hc]] {
        if (this != &other) {
            cache = other.cache;
            extent = other.extent;
            index_base = other.index_base;
            extent_base = other.extent_base;
            offset = other.offset;
        }
        return *this;
    }
# 5308 "/opt/rocm/hcc/include/hc.hpp"
    void copy_to(array<T,N>& dest) const {







        copy(*this, dest);
    }
# 5326 "/opt/rocm/hcc/include/hc.hpp"
    void copy_to(const array_view& dest) const { copy(*this, dest); }
# 5343 "/opt/rocm/hcc/include/hc.hpp"
    T* data() const [[cpu]] [[hc]] {




        static_assert(N == 1, "data() is only permissible on array views of rank 1");
        return reinterpret_cast<T*>(cache.get() + offset + index_base[0]);
    }







    T* accelerator_pointer() const [[cpu]] [[hc]] {
        return reinterpret_cast<T*>(cache.get_device_pointer() + offset + index_base[0]);
    }






    void refresh() const { cache.refresh(); }
# 5403 "/opt/rocm/hcc/include/hc.hpp"
    void synchronize() const { cache.get_cpu_access(); }
# 5416 "/opt/rocm/hcc/include/hc.hpp"
    completion_future synchronize_async() const {
        std::future<void> fut = std::async([&]() mutable { synchronize(); });
        return completion_future(fut.share());
    }
# 5455 "/opt/rocm/hcc/include/hc.hpp"
    void synchronize_to(const accelerator_view& av) const {



    }
# 5477 "/opt/rocm/hcc/include/hc.hpp"
    completion_future synchronize_to_async(const accelerator_view& av) const;
# 5486 "/opt/rocm/hcc/include/hc.hpp"
    void discard_data() const {



    }
# 5500 "/opt/rocm/hcc/include/hc.hpp"
    T& operator[] (const index<N>& idx) const [[cpu]] [[hc]] {



        T *ptr = reinterpret_cast<T*>(cache.get() + offset);
        return ptr[Kalmar::amp_helper<N, index<N>, hc::extent<N>>::flatten(idx + index_base, extent_base)];
    }

    T& operator()(const index<N>& idx) const [[cpu]] [[hc]] {
        return (*this)[idx];
    }
# 5526 "/opt/rocm/hcc/include/hc.hpp"
    T& get_ref(const index<N>& idx) const [[cpu]] [[hc]];
# 5536 "/opt/rocm/hcc/include/hc.hpp"
    T& operator() (int i0, int i1) const [[cpu]] [[hc]] {
        static_assert(N == 2, "T& array_view::operator()(int,int) is only permissible on array_view<T, 2>");
        return (*this)[index<2>(i0, i1)];
    }
    T& operator() (int i0, int i1, int i2) const [[cpu]] [[hc]] {
        static_assert(N == 3, "T& array_view::operator()(int,int, int) is only permissible on array_view<T, 3>");
        return (*this)[index<3>(i0, i1, i2)];
    }
# 5566 "/opt/rocm/hcc/include/hc.hpp"
    typename projection_helper<T, N>::result_type
        operator[] (int i) const [[cpu]] [[hc]] {
            return projection_helper<T, N>::project(*this, i);
        }
    typename projection_helper<T, N>::result_type
        operator() (int i0) const [[cpu]] [[hc]] { return (*this)[i0]; }
# 5593 "/opt/rocm/hcc/include/hc.hpp"
    array_view<T, N> section(const index<N>& idx,
                             const extent<N>& ext) const [[cpu]] [[hc]] {




        array_view<T, N> av(cache, ext, extent_base, idx + index_base, offset);
        return av;
    }




    array_view<T, N> section(const index<N>& idx) const [[cpu]] [[hc]] {
        hc::extent<N> ext(extent);
        Kalmar::amp_helper<N, index<N>, hc::extent<N>>::minus(idx, ext);
        return section(idx, ext);
    }




    array_view<T, N> section(const extent<N>& ext) const [[cpu]] [[hc]] {
        index<N> idx;
        return section(idx, ext);
    }
# 5630 "/opt/rocm/hcc/include/hc.hpp"
    array_view<T, 1> section(int i0, int e0) const [[cpu]] [[hc]] {
        static_assert(N == 1, "Rank must be 1");
        return section(index<1>(i0), hc::extent<1>(e0));
    }

    array_view<T, 2> section(int i0, int i1, int e0, int e1) const [[cpu]] [[hc]] {
        static_assert(N == 2, "Rank must be 2");
        return section(index<2>(i0, i1), hc::extent<2>(e0, e1));
    }

    array_view<T, 3> section(int i0, int i1, int i2, int e0, int e1, int e2) const [[cpu]] [[hc]] {
        static_assert(N == 3, "Rank must be 3");
        return section(index<3>(i0, i1, i2), hc::extent<3>(e0, e1, e2));
    }
# 5658 "/opt/rocm/hcc/include/hc.hpp"
    template <typename ElementType>
        array_view<ElementType, N> reinterpret_as() const [[cpu]] [[hc]] {
            static_assert(N == 1, "reinterpret_as is only permissible on array views of rank 1");






            int size = extent.size() * sizeof(T) / sizeof(ElementType);
            using buffer_type = typename array_view<ElementType, 1>::acc_buffer_t;
            array_view<ElementType, 1> av(buffer_type(cache),
                                          extent<1>(size),
                                          (offset + index_base[0])* sizeof(T) / sizeof(ElementType));
            return av;
        }
# 5683 "/opt/rocm/hcc/include/hc.hpp"
    template <int K>
        array_view<T, K> view_as(extent<K> viewExtent) const [[cpu]] [[hc]] {
            static_assert(N == 1, "view_as is only permissible on array views of rank 1");




            array_view<T, K> av(cache, viewExtent, offset + index_base[0]);
            return av;
        }

    ~array_view() [[cpu]] [[hc]] {}


    const acc_buffer_t& internal() const [[cpu]] [[hc]] { return cache; }

    int get_offset() const [[cpu]] [[hc]] { return offset; }

    index<N> get_index_base() const [[cpu]] [[hc]] { return index_base; }

private:
    template <typename K, int Q> friend struct projection_helper;
    template <typename K, int Q> friend struct array_projection_helper;
    template <typename Q, int K> friend class array;
    template <typename Q, int K> friend class array_view;

    template<typename Q, int K> friend
        bool is_flat(const array_view<Q, K>&) noexcept;
    template <typename Q, int K> friend
        void copy(const array<Q, K>&, const array_view<Q, K>&);
    template <typename InputIter, typename Q, int K> friend
        void copy(InputIter, InputIter, const array_view<Q, K>&);
    template <typename Q, int K> friend
        void copy(const array_view<const Q, K>&, array<Q, K>&);
    template <typename OutputIter, typename Q, int K> friend
        void copy(const array_view<Q, K>&, OutputIter);
    template <typename Q, int K> friend
        void copy(const array_view<const Q, K>& src, const array_view<Q, K>& dest);


    array_view(const acc_buffer_t& cache, const hc::extent<N>& ext,
               int offset) [[cpu]] [[hc]]
        : cache(cache), extent(ext), extent_base(ext), offset(offset) {}


    array_view(const acc_buffer_t& cache, const hc::extent<N>& ext_now,
               const hc::extent<N>& ext_b,
               const index<N>& idx_b, int off) [[cpu]] [[hc]]
        : cache(cache), extent(ext_now), extent_base(ext_b), index_base(idx_b),
        offset(off) {}

    acc_buffer_t cache;
    hc::extent<N> extent;
    hc::extent<N> extent_base;
    index<N> index_base;
    int offset;
};
# 5752 "/opt/rocm/hcc/include/hc.hpp"
template <typename T, int N>
class array_view<const T, N>
{
public:
    typedef typename std::remove_const<T>::type nc_T;


  typedef Kalmar::_data<nc_T> acc_buffer_t;







    static const int rank = N;




    typedef const T value_type;




    array_view() = delete;
# 5787 "/opt/rocm/hcc/include/hc.hpp"
    array_view(const array<T,N>& src) [[cpu]] [[hc]]
        : cache(src.internal()), extent(src.get_extent()), extent_base(extent), index_base(), offset(0) {}
# 5806 "/opt/rocm/hcc/include/hc.hpp"
    template <typename Container, class = typename std::enable_if<__is_container<Container>::value>::type>
        array_view(const extent<N>& extent, const Container& src)
            : array_view(extent, src.data())
        { static_assert( std::is_same<typename std::remove_const<typename std::remove_reference<decltype(*src.data())>::type>::type, T>::value, "container element type and array view element type must match"); }
# 5821 "/opt/rocm/hcc/include/hc.hpp"
    array_view(const extent<N>& ext, const value_type* src) [[cpu]] [[hc]]

        : cache((nc_T*)(src)), extent(ext), extent_base(ext), offset(0) {}
# 5838 "/opt/rocm/hcc/include/hc.hpp"
    template <typename Container, class = typename std::enable_if<__is_container<Container>::value>::type>
        array_view(int e0, Container& src) : array_view(hc::extent<1>(e0), src) {}
    template <typename Container, class = typename std::enable_if<__is_container<Container>::value>::type>
        array_view(int e0, int e1, Container& src)
            : array_view(hc::extent<N>(e0, e1), src) {}
    template <typename Container, class = typename std::enable_if<__is_container<Container>::value>::type>
        array_view(int e0, int e1, int e2, Container& src)
            : array_view(hc::extent<N>(e0, e1, e2), src) {}
# 5857 "/opt/rocm/hcc/include/hc.hpp"
    array_view(int e0, const value_type *src) [[cpu]] [[hc]]
        : array_view(hc::extent<1>(e0), src) {}
    array_view(int e0, int e1, const value_type *src) [[cpu]] [[hc]]
        : array_view(hc::extent<2>(e0, e1), src) {}
    array_view(int e0, int e1, int e2, const value_type *src) [[cpu]] [[hc]]
        : array_view(hc::extent<3>(e0, e1, e2), src) {}
# 5872 "/opt/rocm/hcc/include/hc.hpp"
    array_view(const array_view<nc_T, N>& other) [[cpu]] [[hc]]
        : cache(other.cache), extent(other.extent), extent_base(other.extent_base), index_base(other.index_base), offset(other.offset) {}
# 5882 "/opt/rocm/hcc/include/hc.hpp"
    array_view(const array_view& other) [[cpu]] [[hc]]
        : cache(other.cache), extent(other.extent), extent_base(other.extent_base), index_base(other.index_base), offset(other.offset) {}




    extent<N> get_extent() const [[cpu]] [[hc]] { return extent; }
# 5899 "/opt/rocm/hcc/include/hc.hpp"
    accelerator_view get_source_accelerator_view() const { return cache.get_av(); }
# 5910 "/opt/rocm/hcc/include/hc.hpp"
    array_view& operator=(const array_view<T,N>& other) [[cpu]] [[hc]] {
        cache = other.cache;
        extent = other.extent;
        index_base = other.index_base;
        extent_base = other.extent_base;
        offset = other.offset;
        return *this;
    }

    array_view& operator=(const array_view& other) [[cpu]] [[hc]] {
        if (this != &other) {
            cache = other.cache;
            extent = other.extent;
            index_base = other.index_base;
            extent_base = other.extent_base;
            offset = other.offset;
        }
        return *this;
    }
# 5939 "/opt/rocm/hcc/include/hc.hpp"
    void copy_to(array<T,N>& dest) const { copy(*this, dest); }
# 5948 "/opt/rocm/hcc/include/hc.hpp"
    void copy_to(const array_view<T,N>& dest) const { copy(*this, dest); }
# 5965 "/opt/rocm/hcc/include/hc.hpp"
    const T* data() const [[cpu]] [[hc]] {



        static_assert(N == 1, "data() is only permissible on array views of rank 1");
        return reinterpret_cast<const T*>(cache.get() + offset + index_base[0]);
    }







    T* accelerator_pointer() const [[cpu]] [[hc]] {
        return reinterpret_cast<const T*>(cache.get_device_pointer() + offset + index_base[0]);
    }






    void refresh() const { cache.refresh(); }
# 6019 "/opt/rocm/hcc/include/hc.hpp"
    void synchronize() const { cache.get_cpu_access(); }
# 6031 "/opt/rocm/hcc/include/hc.hpp"
    completion_future synchronize_async() const {
        std::future<void> fut = std::async([&]() mutable { synchronize(); });
        return completion_future(fut.share());
    }
# 6047 "/opt/rocm/hcc/include/hc.hpp"
    void synchronize_to(const accelerator_view& av) const {



    }
# 6069 "/opt/rocm/hcc/include/hc.hpp"
    completion_future synchronize_to_async(const accelerator_view& av) const;
# 6079 "/opt/rocm/hcc/include/hc.hpp"
    const T& operator[](const index<N>& idx) const [[cpu]] [[hc]] {



        const T *ptr = reinterpret_cast<const T*>(cache.get() + offset);
        return ptr[Kalmar::amp_helper<N, index<N>, hc::extent<N>>::flatten(idx + index_base, extent_base)];
    }
    const T& operator()(const index<N>& idx) const [[cpu]] [[hc]] {
        return (*this)[idx];
    }
# 6104 "/opt/rocm/hcc/include/hc.hpp"
    const T& get_ref(const index<N>& idx) const [[cpu]] [[hc]];
# 6114 "/opt/rocm/hcc/include/hc.hpp"
    const T& operator()(int i0) const [[cpu]] [[hc]] {
        static_assert(N == 1, "const T& array_view::operator()(int) is only permissible on array_view<T, 1>");
        return (*this)[index<1>(i0)];
    }

    const T& operator()(int i0, int i1) const [[cpu]] [[hc]] {
        static_assert(N == 2, "const T& array_view::operator()(int,int) is only permissible on array_view<T, 2>");
        return (*this)[index<2>(i0, i1)];
    }
    const T& operator()(int i0, int i1, int i2) const [[cpu]] [[hc]] {
        static_assert(N == 3, "const T& array_view::operator()(int,int, int) is only permissible on array_view<T, 3>");
        return (*this)[index<3>(i0, i1, i2)];
    }
# 6149 "/opt/rocm/hcc/include/hc.hpp"
    typename projection_helper<const T, N>::const_result_type
        operator[] (int i) const [[cpu]] [[hc]] {
        return projection_helper<const T, N>::project(*this, i);
    }
# 6178 "/opt/rocm/hcc/include/hc.hpp"
    array_view<const T, N> section(const index<N>& idx,
                                   const extent<N>& ext) const [[cpu]] [[hc]] {
        array_view<const T, N> av(cache, ext, extent_base, idx + index_base, offset);
        return av;
    }




    array_view<const T, N> section(const index<N>& idx) const [[cpu]] [[hc]] {
        hc::extent<N> ext(extent);
        Kalmar::amp_helper<N, index<N>, hc::extent<N>>::minus(idx, ext);
        return section(idx, ext);
    }




    array_view<const T, N> section(const extent<N>& ext) const [[cpu]] [[hc]] {
        index<N> idx;
        return section(idx, ext);
    }
# 6211 "/opt/rocm/hcc/include/hc.hpp"
    array_view<const T, 1> section(int i0, int e0) const [[cpu]] [[hc]] {
        static_assert(N == 1, "Rank must be 1");
        return section(index<1>(i0), hc::extent<1>(e0));
    }

    array_view<const T, 2> section(int i0, int i1, int e0, int e1) const [[cpu]] [[hc]] {
        static_assert(N == 2, "Rank must be 2");
        return section(index<2>(i0, i1), hc::extent<2>(e0, e1));
    }

    array_view<const T, 3> section(int i0, int i1, int i2, int e0, int e1, int e2) const [[cpu]] [[hc]] {
        static_assert(N == 3, "Rank must be 3");
        return section(index<3>(i0, i1, i2), hc::extent<3>(e0, e1, e2));
    }
# 6239 "/opt/rocm/hcc/include/hc.hpp"
    template <typename ElementType>
        array_view<const ElementType, N> reinterpret_as() const [[cpu]] [[hc]] {
            static_assert(N == 1, "reinterpret_as is only permissible on array views of rank 1");




            int size = extent.size() * sizeof(T) / sizeof(ElementType);
            using buffer_type = typename array_view<ElementType, 1>::acc_buffer_t;
            array_view<const ElementType, 1> av(buffer_type(cache),
                                                extent<1>(size),
                                                (offset + index_base[0])* sizeof(T) / sizeof(ElementType));
            return av;
        }
# 6262 "/opt/rocm/hcc/include/hc.hpp"
    template <int K>
        array_view<const T, K> view_as(extent<K> viewExtent) const [[cpu]] [[hc]] {
            static_assert(N == 1, "view_as is only permissible on array views of rank 1");




            array_view<const T, K> av(cache, viewExtent, offset + index_base[0]);
            return av;
        }

    ~array_view() [[cpu]] [[hc]] {}


    const acc_buffer_t& internal() const [[cpu]] [[hc]] { return cache; }

    int get_offset() const [[cpu]] [[hc]] { return offset; }

    index<N> get_index_base() const [[cpu]] [[hc]] { return index_base; }

private:
    template <typename K, int Q> friend struct projection_helper;
    template <typename K, int Q> friend struct array_projection_helper;
    template <typename Q, int K> friend class array;
    template <typename Q, int K> friend class array_view;

    template<typename Q, int K> friend
        bool is_flat(const array_view<Q, K>&) noexcept;
    template <typename Q, int K> friend
        void copy(const array<Q, K>&, const array_view<Q, K>&);
    template <typename InputIter, typename Q, int K>
        void copy(InputIter, InputIter, const array_view<Q, K>&);
    template <typename Q, int K> friend
        void copy(const array_view<const Q, K>&, array<Q, K>&);
    template <typename OutputIter, typename Q, int K> friend
        void copy(const array_view<Q, K>&, OutputIter);
    template <typename Q, int K> friend
        void copy(const array_view<const Q, K>& src, const array_view<Q, K>& dest);


    array_view(const acc_buffer_t& cache, const hc::extent<N>& ext,
               int offset) [[cpu]] [[hc]]
        : cache(cache), extent(ext), extent_base(ext), offset(offset) {}


    array_view(const acc_buffer_t& cache, const hc::extent<N>& ext_now,
               const extent<N>& ext_b,
               const index<N>& idx_b, int off) [[cpu]] [[hc]]
        : cache(cache), extent(ext_now), extent_base(ext_b), index_base(idx_b),
        offset(off) {}

    acc_buffer_t cache;
    hc::extent<N> extent;
    hc::extent<N> extent_base;
    index<N> index_base;
    int offset;
};





template<typename T, int N>
static inline bool is_flat(const array_view<T, N>& av) noexcept {
    return av.extent == av.extent_base && av.index_base == index<N>();
}

template<typename T>
static inline bool is_flat(const array_view<T, 1>& av) noexcept { return true; }

template <typename InputIter, typename T, int N, int dim>
struct copy_input
{
    void operator()(InputIter& It, T* ptr, const extent<N>& ext,
                    const extent<N>& base, const index<N>& idx)
    {
        size_t stride = 1;
        for (int i = dim; i < N; i++)
            stride *= base[i];
        ptr += stride * idx[dim - 1];
        for (int i = 0; i < ext[dim - 1]; i++) {
            copy_input<InputIter, T, N, dim + 1>()(It, ptr, ext, base, idx);
            ptr += stride;
        }
    }
};

template <typename InputIter, typename T, int N>
struct copy_input<InputIter, T, N, N>
{
    void operator()(InputIter& It, T* ptr, const extent<N>& ext,
                    const extent<N>& base, const index<N>& idx)
    {
        InputIter end = It;
        std::advance(end, ext[N - 1]);
        std::copy(It, end, ptr + idx[N - 1]);
        It = end;
    }
};

template <typename OutputIter, typename T, int N, int dim>
struct copy_output
{
    void operator()(const T* ptr, OutputIter& It, const extent<N>& ext,
                    const extent<N>& base, const index<N>& idx)
    {
        size_t stride = 1;
        for (int i = dim; i < N; i++)
            stride *= base[i];
        ptr += stride * idx[dim - 1];
        for (int i = 0; i < ext[dim - 1]; i++) {
            copy_output<OutputIter, T, N, dim + 1>()(ptr, It, ext, base, idx);
            ptr += stride;
        }
    }
};

template <typename OutputIter, typename T, int N>
struct copy_output<OutputIter, T, N, N>
{
    void operator()(const T* ptr, OutputIter& It, const extent<N>& ext,
                    const extent<N>& base, const index<N>& idx)
    {
        ptr += idx[N - 1];
        It = std::copy(ptr, ptr + ext[N - 1], It);
    }
};

template <typename T, int N, int dim>
struct copy_bidir
{
    void operator()(const T* src, T* dst, const extent<N>& ext,
                    const extent<N>& base1, const index<N>& idx1,
                    const extent<N>& base2, const index<N>& idx2)
    {
        size_t stride1 = 1;
        for (int i = dim; i < N; i++)
            stride1 *= base1[i];
        src += stride1 * idx1[dim - 1];

        size_t stride2 = 1;
        for (int i = dim; i < N; i++)
            stride2 *= base2[i];
        dst += stride2 * idx2[dim - 1];

        for (int i = 0; i < ext[dim - 1]; i++) {
            copy_bidir<T, N, dim + 1>()(src, dst, ext, base1, idx1, base2, idx2);
            src += stride1;
            dst += stride2;
        }
    }
};

template <typename T, int N>
struct copy_bidir<T, N, N>
{
    void operator()(const T* src, T* dst, const extent<N>& ext,
                    const extent<N>& base1, const index<N>& idx1,
                    const extent<N>& base2, const index<N>& idx2)
    {
        src += idx1[N - 1];
        dst += idx2[N - 1];
        std::copy(src, src + ext[N - 1], dst);
    }
};

template <typename Iter, typename T, int N>
struct do_copy
{
    template<template <typename, int> class _amp_container>
    void operator()(Iter srcBegin, Iter srcEnd, const _amp_container<T, N>& dest) {
        size_t size = dest.get_extent().size();
        size_t offset = dest.get_offset();
        bool modify = true;

        T* ptr = dest.internal().map_ptr(modify, size, offset);
         std::copy(srcBegin, srcEnd, ptr);
        dest.internal().unmap_ptr(ptr, modify, size, offset);
    }
    template<template <typename, int> class _amp_container>
    void operator()(const _amp_container<T, N> &src, Iter destBegin) {
        size_t size = src.get_extent().size();
        size_t offset = src.get_offset();
        bool modify = false;

        const T* ptr = src.internal().map_ptr(modify, size, offset);
        std::copy(ptr, ptr + src.get_extent().size(), destBegin);
        src.internal().unmap_ptr(ptr, modify, size, offset);
    }
};

template <typename Iter, typename T>
struct do_copy<Iter, T, 1>
{
    template<template <typename, int> class _amp_container>
    void operator()(Iter srcBegin, Iter srcEnd, const _amp_container<T, 1>& dest) {
        size_t size = dest.get_extent().size();
        size_t offset = dest.get_offset() + dest.get_index_base()[0];
        bool modify = true;

        T* ptr = dest.internal().map_ptr(modify, size, offset);
         std::copy(srcBegin, srcEnd, ptr);
        dest.internal().unmap_ptr(ptr, modify, size, offset);
    }
    template<template <typename, int> class _amp_container>
    void operator()(const _amp_container<T, 1> &src, Iter destBegin) {
        size_t size = src.get_extent().size();
        size_t offset = src.get_offset() + src.get_index_base()[0];
        bool modify = false;

        const T* ptr = src.internal().map_ptr(modify, size, offset);
        std::copy(ptr, ptr + src.get_extent().size(), destBegin);
        src.internal().unmap_ptr(ptr, modify, size, offset);
    }
};

template <typename T, int N>
struct do_copy<T*, T, N>
{
    template<template <typename, int> class _amp_container>
    void operator()(T* srcBegin, T* srcEnd, const _amp_container<T, N>& dest) {
        dest.internal().write(srcBegin, std::distance(srcBegin, srcEnd), dest.get_offset(), true);
    }
    template<template <typename, int> class _amp_container>
    void operator()(const _amp_container<T, N> &src, T* destBegin) {
        src.internal().read(destBegin, src.get_extent().size(), src.get_offset());
    }
};

template <typename T>
struct do_copy<T*, T, 1>
{
    template<template <typename, int> class _amp_container>
    void operator()(const T* srcBegin, const T* srcEnd, const _amp_container<T, 1>& dest) {
        dest.internal().write(srcBegin, std::distance(srcBegin, srcEnd),
                              dest.get_offset() + dest.get_index_base()[0], true);
    }
    template<template <typename, int> class _amp_container>
    void operator()(const _amp_container<T, 1> &src, T* destBegin) {
        src.internal().read(destBegin, src.get_extent().size(),
                            src.get_offset() + src.get_index_base()[0]);
    }
};
# 6518 "/opt/rocm/hcc/include/hc.hpp"
template <typename T, int N>
void copy(const array<T, N>& src, array<T, N>& dest) {
    src.internal().copy(dest.internal(), 0, 0, 0);
}
# 6531 "/opt/rocm/hcc/include/hc.hpp"
template <typename T, int N>
void copy(const array<T, N>& src, const array_view<T, N>& dest) {
    if (is_flat(dest))
        src.internal().copy(dest.internal(), src.get_offset(),
                            dest.get_offset(), dest.get_extent().size());
    else {

        size_t srcSize = src.extent.size();
        size_t srcOffset = 0;
        bool srcModify = false;
        size_t destSize = dest.extent_base.size();
        size_t destOffset = dest.offset;
        bool destModify = true;

        T* pSrc = src.internal().map_ptr(srcModify, srcSize, srcOffset);
        T* p = pSrc;
        T* pDst = dest.internal().map_ptr(destModify, destSize, destOffset);
        copy_input<T*, T, N, 1>()(pSrc, pDst, dest.extent, dest.extent_base, dest.index_base);
        dest.internal().unmap_ptr(pDst, destModify, destSize, destOffset);
        src.internal().unmap_ptr(p, srcModify, srcSize, srcOffset);
    }
}

template <typename T>
void copy(const array<T, 1>& src, const array_view<T, 1>& dest) {
    src.internal().copy(dest.internal(),
                        src.get_offset() + src.get_index_base()[0],
                        dest.get_offset() + dest.get_index_base()[0],
                        dest.get_extent().size());
}
# 6573 "/opt/rocm/hcc/include/hc.hpp"
template <typename T, int N>
void copy(const array_view<const T, N>& src, array<T, N>& dest) {
    if (is_flat(src)) {
        src.internal().copy(dest.internal(), src.get_offset(),
                            dest.get_offset(), dest.get_extent().size());
    } else {

        size_t srcSize = src.extent_base.size();
        size_t srcOffset = src.offset;
        bool srcModify = false;
        size_t destSize = dest.extent.size();
        size_t destOffset = 0;
        bool destModify = true;

        T* pDst = dest.internal().map_ptr(destModify, destSize, destOffset);
        T* p = pDst;
        const T* pSrc = src.internal().map_ptr(srcModify, srcSize, srcOffset);
        copy_output<T*, T, N, 1>()(pSrc, pDst, src.extent, src.extent_base, src.index_base);
        src.internal().unmap_ptr(pSrc, srcModify, srcSize, srcOffset);
        dest.internal().unmap_ptr(p, destModify, destSize, destOffset);
    }
}

template <typename T, int N>
void copy(const array_view<T, N>& src, array<T, N>& dest) {
    const array_view<const T, N> buf(src);
    copy(buf, dest);
}

template <typename T>
void copy(const array_view<const T, 1>& src, array<T, 1>& dest) {
    src.internal().copy(dest.internal(),
                        src.get_offset() + src.get_index_base()[0],
                        dest.get_offset() + dest.get_index_base()[0],
                        dest.get_extent().size());
}
# 6621 "/opt/rocm/hcc/include/hc.hpp"
template <typename T, int N>
void copy(const array_view<const T, N>& src, const array_view<T, N>& dest) {
    if (is_flat(src)) {
        if (is_flat(dest))
            src.internal().copy(dest.internal(), src.get_offset(),
                                dest.get_offset(), dest.get_extent().size());
        else {

            size_t srcSize = src.extent.size();
            size_t srcOffset = 0;
            bool srcModify = false;
            size_t destSize = dest.extent_base.size();
            size_t destOffset = dest.offset;
            bool destModify = true;

            const T* pSrc = src.internal().map_ptr(srcModify, srcSize, srcOffset);
            const T* p = pSrc;
            T* pDst = dest.internal().map_ptr(destModify, destSize, destOffset);
            copy_input<const T*, T, N, 1>()(pSrc, pDst, dest.extent, dest.extent_base, dest.index_base);
            dest.internal().unmap_ptr(pDst, destModify, destSize, destOffset);
            src.internal().unmap_ptr(p, srcModify, srcSize, srcOffset);
        }
    } else {
        if (is_flat(dest)) {

            size_t srcSize = src.extent_base.size();
            size_t srcOffset = src.offset;
            bool srcModify = false;
            size_t destSize = dest.extent.size();
            size_t destOffset = 0;
            bool destModify = true;

            T* pDst = dest.internal().map_ptr(destModify, destSize, destOffset);
            T* p = pDst;
            const T* pSrc = src.internal().map_ptr(srcModify, srcSize, srcOffset);
            copy_output<T*, T, N, 1>()(pSrc, pDst, src.extent, src.extent_base, src.index_base);
            dest.internal().unmap_ptr(p, destModify, destSize, destOffset);
            src.internal().unmap_ptr(pSrc, srcModify, srcSize, srcOffset);
        } else {

            size_t srcSize = src.extent_base.size();
            size_t srcOffset = src.offset;
            bool srcModify = false;
            size_t destSize = dest.extent_base.size();
            size_t destOffset = dest.offset;
            bool destModify = true;

            const T* pSrc = src.internal().map_ptr(srcModify, srcSize, srcOffset);
            T* pDst = dest.internal().map_ptr(destModify, destSize, destOffset);
            copy_bidir<T, N, 1>()(pSrc, pDst, src.extent, src.extent_base,
                                  src.index_base, dest.extent_base, dest.index_base);
            dest.internal().unmap_ptr(pDst, destModify, destSize, destOffset);
            src.internal().unmap_ptr(pSrc, srcModify, srcSize, srcOffset);
        }
    }
}

template <typename T, int N>
void copy(const array_view<T, N>& src, const array_view<T, N>& dest) {
    const array_view<const T, N> buf(src);
    copy(buf, dest);
}

template <typename T>
void copy(const array_view<const T, 1>& src, const array_view<T, 1>& dest) {
    src.internal().copy(dest.internal(),
                        src.get_offset() + src.get_index_base()[0],
                        dest.get_offset() + dest.get_index_base()[0],
                        dest.get_extent().size());
}
# 6708 "/opt/rocm/hcc/include/hc.hpp"
template <typename InputIter, typename T, int N>
void copy(InputIter srcBegin, InputIter srcEnd, array<T, N>& dest) {




    do_copy<InputIter, T, N>()(srcBegin, srcEnd, dest);
}

template <typename InputIter, typename T, int N>
void copy(InputIter srcBegin, array<T, N>& dest) {
    InputIter srcEnd = srcBegin;
    std::advance(srcEnd, dest.get_extent().size());
    copy(srcBegin, srcEnd, dest);
}
# 6740 "/opt/rocm/hcc/include/hc.hpp"
template <typename InputIter, typename T, int N>
void copy(InputIter srcBegin, InputIter srcEnd, const array_view<T, N>& dest) {
    if (is_flat(dest))
        do_copy<InputIter, T, N>()(srcBegin, srcEnd, dest);
    else {
        size_t size = dest.extent_base.size();
        size_t offset = dest.offset;
        bool modify = true;

        T* ptr = dest.internal().map_ptr(modify, size, offset);
        copy_input<InputIter, T, N, 1>()(srcBegin, ptr, dest.extent, dest.extent_base, dest.index_base);
        dest.internal().unmap_ptr(ptr, modify, size, offset);
    }
}

template <typename InputIter, typename T, int N>
void copy(InputIter srcBegin, const array_view<T, N>& dest) {
    InputIter srcEnd = srcBegin;
    std::advance(srcEnd, dest.get_extent().size());
    copy(srcBegin, srcEnd, dest);
}
# 6774 "/opt/rocm/hcc/include/hc.hpp"
template <typename OutputIter, typename T, int N>
void copy(const array<T, N> &src, OutputIter destBegin) {
    do_copy<OutputIter, T, N>()(src, destBegin);
}
# 6789 "/opt/rocm/hcc/include/hc.hpp"
template <typename OutputIter, typename T, int N>
void copy(const array_view<T, N> &src, OutputIter destBegin) {
    if (is_flat(src))
        do_copy<OutputIter, T, N>()(src, destBegin);
    else {
        size_t size = src.extent_base.size();
        size_t offset = src.offset;
        bool modify = false;

        T* ptr = src.internal().map_ptr(modify, size, offset);
        copy_output<OutputIter, T, N, 1>()(ptr, destBegin, src.extent, src.extent_base, src.index_base);
        src.internal().unmap_ptr(ptr, modify, size, offset);
    }
}
# 6821 "/opt/rocm/hcc/include/hc.hpp"
template <typename T, int N>
completion_future copy_async(const array<T, N>& src, array<T, N>& dest) {
    std::future<void> fut = std::async(std::launch::deferred, [&]() mutable { copy(src, dest); });
    return completion_future(fut.share());
}
# 6834 "/opt/rocm/hcc/include/hc.hpp"
template <typename T, int N>
completion_future copy_async(const array<T, N>& src, const array_view<T, N>& dest) {
    std::future<void> fut = std::async(std::launch::deferred, [&]() mutable { copy(src, dest); });
    return completion_future(fut.share());
}
# 6849 "/opt/rocm/hcc/include/hc.hpp"
template <typename T, int N>
completion_future copy_async(const array_view<const T, N>& src, array<T, N>& dest) {
    std::future<void> fut = std::async(std::launch::deferred, [&]() mutable { copy(src, dest); });
    return completion_future(fut.share());
}

template <typename T, int N>
completion_future copy_async(const array_view<T, N>& src, array<T, N>& dest) {
    std::future<void> fut = std::async(std::launch::deferred, [&]() mutable { copy(src, dest); });
    return completion_future(fut.share());
}
# 6872 "/opt/rocm/hcc/include/hc.hpp"
template <typename T, int N>
completion_future copy_async(const array_view<const T, N>& src, const array_view<T, N>& dest) {
    std::future<void> fut = std::async(std::launch::deferred, [&]() mutable { copy(src, dest); });
    return completion_future(fut.share());
}

template <typename T, int N>
completion_future copy_async(const array_view<T, N>& src, const array_view<T, N>& dest) {
    std::future<void> fut = std::async(std::launch::deferred, [&]() mutable { copy(src, dest); });
    return completion_future(fut.share());
}
# 6900 "/opt/rocm/hcc/include/hc.hpp"
template <typename InputIter, typename T, int N>
completion_future copy_async(InputIter srcBegin, InputIter srcEnd, array<T, N>& dest) {
    std::future<void> fut = std::async(std::launch::deferred, [&, srcBegin, srcEnd]() mutable { copy(srcBegin, srcEnd, dest); });
    return completion_future(fut.share());
}

template <typename InputIter, typename T, int N>
completion_future copy_async(InputIter srcBegin, array<T, N>& dest) {
    std::future<void> fut = std::async(std::launch::deferred, [&, srcBegin]() mutable { copy(srcBegin, dest); });
    return completion_future(fut.share());
}
# 6928 "/opt/rocm/hcc/include/hc.hpp"
template <typename InputIter, typename T, int N>
completion_future copy_async(InputIter srcBegin, InputIter srcEnd, const array_view<T, N>& dest) {
    std::future<void> fut = std::async(std::launch::deferred, [&, srcBegin, srcEnd]() mutable { copy(srcBegin, srcEnd, dest); });
    return completion_future(fut.share());
}

template <typename InputIter, typename T, int N>
completion_future copy_async(InputIter srcBegin, const array_view<T, N>& dest) {
    std::future<void> fut = std::async(std::launch::deferred, [&, srcBegin]() mutable { copy(srcBegin, dest); });
    return completion_future(fut.share());
}
# 6952 "/opt/rocm/hcc/include/hc.hpp"
template <typename OutputIter, typename T, int N>
completion_future copy_async(const array<T, N>& src, OutputIter destBegin) {
    std::future<void> fut = std::async(std::launch::deferred, [&, destBegin]() mutable { copy(src, destBegin); });
    return completion_future(fut.share());
}
# 6968 "/opt/rocm/hcc/include/hc.hpp"
template <typename OutputIter, typename T, int N>
completion_future copy_async(const array_view<T, N>& src, OutputIter destBegin) {
    std::future<void> fut = std::async(std::launch::deferred, [&, destBegin]() mutable { copy(src, destBegin); });
    return completion_future(fut.share());
}



template <typename T, int N>
completion_future copy_async(const array<T, N>& src, const array<T, N>& dest) {
    std::future<void> fut = std::async(std::launch::deferred, [&]() mutable { copy(src, dest); });
    return completion_future(fut.share());
}

template <typename T, int N>
completion_future copy_async(const array_view<const T, N>& src, const array<T, N>& dest) {
    std::future<void> fut = std::async(std::launch::deferred, [&]() mutable { copy(src, dest); });
    return completion_future(fut.share());
}

template <typename T, int N>
completion_future copy_async(const array_view<T, N>& src, const array<T, N>& dest) {
    std::future<void> fut = std::async(std::launch::deferred, [&]() mutable { copy(src, dest); });
    return completion_future(fut.share());
}
# 7014 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int atomic_exchange_unsigned(unsigned int *p, unsigned int val) [[hc]];
extern "C" int atomic_exchange_int(int *p, int val) [[hc]];
extern "C" float atomic_exchange_float(float *p, float val) [[hc]];
extern "C" uint64_t atomic_exchange_uint64(uint64_t *p, uint64_t val) [[hc]];

static inline unsigned int atomic_exchange(unsigned int * dest, unsigned int val) [[cpu]] [[hc]] {
  return atomic_exchange_unsigned(dest, val);
}
static inline int atomic_exchange(int * dest, int val) [[cpu]] [[hc]] {
  return atomic_exchange_int(dest, val);
}
static inline float atomic_exchange(float * dest, float val) [[cpu]] [[hc]] {
  return atomic_exchange_float(dest, val);
}
static inline uint64_t atomic_exchange(uint64_t * dest, uint64_t val) [[cpu]] [[hc]] {
  return atomic_exchange_uint64(dest, val);
}
# 7089 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int atomic_compare_exchange_unsigned(unsigned int *dest, unsigned int expected_val, unsigned int val) [[hc]];
extern "C" int atomic_compare_exchange_int(int *dest, int expected_val, int val) [[hc]];
extern "C" uint64_t atomic_compare_exchange_uint64(uint64_t *dest, uint64_t expected_val, uint64_t val) [[hc]];

static inline bool atomic_compare_exchange(unsigned int *dest, unsigned int *expected_val, unsigned int val) [[cpu]] [[hc]] {
  *expected_val = atomic_compare_exchange_unsigned(dest, *expected_val, val);
  return (*dest == val);
}
static inline bool atomic_compare_exchange(int *dest, int *expected_val, int val) [[cpu]] [[hc]] {
  *expected_val = atomic_compare_exchange_int(dest, *expected_val, val);
  return (*dest == val);
}
static inline bool atomic_compare_exchange(uint64_t *dest, uint64_t *expected_val, uint64_t val) [[cpu]] [[hc]] {
  *expected_val = atomic_compare_exchange_uint64(dest, *expected_val, val);
  return (*dest == val);
}
# 7158 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int atomic_add_unsigned(unsigned int *p, unsigned int val) [[hc]];
extern "C" int atomic_add_int(int *p, int val) [[hc]];
extern "C" float atomic_add_float(float *p, float val) [[hc]];
extern "C" uint64_t atomic_add_uint64(uint64_t *p, uint64_t val) [[hc]];

static inline unsigned int atomic_fetch_add(unsigned int *x, unsigned int y) [[cpu]] [[hc]] {
  return atomic_add_unsigned(x, y);
}
static inline int atomic_fetch_add(int *x, int y) [[cpu]] [[hc]] {
  return atomic_add_int(x, y);
}
static inline float atomic_fetch_add(float *x, float y) [[cpu]] [[hc]] {
  return atomic_add_float(x, y);
}
static inline uint64_t atomic_fetch_add(uint64_t *x, uint64_t y) [[cpu]] [[hc]] {
  return atomic_add_uint64(x, y);
}

extern "C" unsigned int atomic_sub_unsigned(unsigned int *p, unsigned int val) [[hc]];
extern "C" int atomic_sub_int(int *p, int val) [[hc]];
extern "C" float atomic_sub_float(float *p, float val) [[hc]];

static inline unsigned int atomic_fetch_sub(unsigned int *x, unsigned int y) [[cpu]] [[hc]] {
  return atomic_sub_unsigned(x, y);
}
static inline int atomic_fetch_sub(int *x, int y) [[cpu]] [[hc]] {
  return atomic_sub_int(x, y);
}
static inline int atomic_fetch_sub(float *x, float y) [[cpu]] [[hc]] {
  return atomic_sub_float(x, y);
}

extern "C" unsigned int atomic_and_unsigned(unsigned int *p, unsigned int val) [[hc]];
extern "C" int atomic_and_int(int *p, int val) [[hc]];
extern "C" uint64_t atomic_and_uint64(uint64_t *p, uint64_t val) [[hc]];

static inline unsigned int atomic_fetch_and(unsigned int *x, unsigned int y) [[cpu]] [[hc]] {
  return atomic_and_unsigned(x, y);
}
static inline int atomic_fetch_and(int *x, int y) [[cpu]] [[hc]] {
  return atomic_and_int(x, y);
}
static inline uint64_t atomic_fetch_and(uint64_t *x, uint64_t y) [[cpu]] [[hc]] {
  return atomic_and_uint64(x, y);
}

extern "C" unsigned int atomic_or_unsigned(unsigned int *p, unsigned int val) [[hc]];
extern "C" int atomic_or_int(int *p, int val) [[hc]];
extern "C" uint64_t atomic_or_uint64(uint64_t *p, uint64_t val) [[hc]];

static inline unsigned int atomic_fetch_or(unsigned int *x, unsigned int y) [[cpu]] [[hc]] {
  return atomic_or_unsigned(x, y);
}
static inline int atomic_fetch_or(int *x, int y) [[cpu]] [[hc]] {
  return atomic_or_int(x, y);
}
static inline uint64_t atomic_fetch_or(uint64_t *x, uint64_t y) [[cpu]] [[hc]] {
  return atomic_or_uint64(x, y);
}

extern "C" unsigned int atomic_xor_unsigned(unsigned int *p, unsigned int val) [[hc]];
extern "C" int atomic_xor_int(int *p, int val) [[hc]];
extern "C" uint64_t atomic_xor_uint64(uint64_t *p, uint64_t val) [[hc]];

static inline unsigned int atomic_fetch_xor(unsigned int *x, unsigned int y) [[cpu]] [[hc]] {
  return atomic_xor_unsigned(x, y);
}
static inline int atomic_fetch_xor(int *x, int y) [[cpu]] [[hc]] {
  return atomic_xor_int(x, y);
}
static inline uint64_t atomic_fetch_xor(uint64_t *x, uint64_t y) [[cpu]] [[hc]] {
  return atomic_xor_uint64(x, y);
}
# 7329 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int atomic_max_unsigned(unsigned int *p, unsigned int val) [[hc]];
extern "C" int atomic_max_int(int *p, int val) [[hc]];
extern "C" uint64_t atomic_max_uint64(uint64_t *p, uint64_t val) [[hc]];

static inline unsigned int atomic_fetch_max(unsigned int *x, unsigned int y) [[hc]] {
  return atomic_max_unsigned(x, y);
}
static inline int atomic_fetch_max(int *x, int y) [[hc]] {
  return atomic_max_int(x, y);
}
static inline uint64_t atomic_fetch_max(uint64_t *x, uint64_t y) [[hc]] {
  return atomic_max_uint64(x, y);
}

extern "C" unsigned int atomic_min_unsigned(unsigned int *p, unsigned int val) [[hc]];
extern "C" int atomic_min_int(int *p, int val) [[hc]];
extern "C" uint64_t atomic_min_uint64(uint64_t *p, uint64_t val) [[hc]];

static inline unsigned int atomic_fetch_min(unsigned int *x, unsigned int y) [[hc]] {
  return atomic_min_unsigned(x, y);
}
static inline int atomic_fetch_min(int *x, int y) [[hc]] {
  return atomic_min_int(x, y);
}
static inline uint64_t atomic_fetch_min(uint64_t *x, uint64_t y) [[hc]] {
  return atomic_min_uint64(x, y);
}
# 7410 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int atomic_inc_unsigned(unsigned int *p) [[hc]];
extern "C" int atomic_inc_int(int *p) [[hc]];

static inline unsigned int atomic_fetch_inc(unsigned int *x) [[cpu]] [[hc]] {
  return atomic_inc_unsigned(x);
}
static inline int atomic_fetch_inc(int *x) [[cpu]] [[hc]] {
  return atomic_inc_int(x);
}

extern "C" unsigned int atomic_dec_unsigned(unsigned int *p) [[hc]];
extern "C" int atomic_dec_int(int *p) [[hc]];

static inline unsigned int atomic_fetch_dec(unsigned int *x) [[cpu]] [[hc]] {
  return atomic_dec_unsigned(x);
}
static inline int atomic_fetch_dec(int *x) [[cpu]] [[hc]] {
  return atomic_dec_int(x);
}
# 7469 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int __atomic_wrapinc(unsigned int* address, unsigned int val) [[hc]];
# 7481 "/opt/rocm/hcc/include/hc.hpp"
extern "C" unsigned int __atomic_wrapdec(unsigned int* address, unsigned int val) [[hc]];






template <int N, typename Kernel>
completion_future parallel_for_each(const accelerator_view&, const extent<N>&, const Kernel&);

template <typename Kernel>
completion_future parallel_for_each(const accelerator_view&, const tiled_extent<3>&, const Kernel&);

template <typename Kernel>
completion_future parallel_for_each(const accelerator_view&, const tiled_extent<2>&, const Kernel&);

template <typename Kernel>
completion_future parallel_for_each(const accelerator_view&, const tiled_extent<1>&, const Kernel&);

template <int N, typename Kernel>
completion_future parallel_for_each(const extent<N>& compute_domain, const Kernel& f) {
    return parallel_for_each(accelerator::get_auto_selection_view(), compute_domain, f);
}

template <typename Kernel>
completion_future parallel_for_each(const tiled_extent<3>& compute_domain, const Kernel& f) {
    return parallel_for_each(accelerator::get_auto_selection_view(), compute_domain, f);
}

template <typename Kernel>
completion_future parallel_for_each(const tiled_extent<2>& compute_domain, const Kernel& f) {
    return parallel_for_each(accelerator::get_auto_selection_view(), compute_domain, f);
}

template <typename Kernel>
completion_future parallel_for_each(const tiled_extent<1>& compute_domain, const Kernel& f) {
    return parallel_for_each(accelerator::get_auto_selection_view(), compute_domain, f);
}

template <int N, typename Kernel, typename _Tp>
struct pfe_helper
{
    static inline void call(Kernel& k, _Tp& idx) [[cpu]] [[hc]] {
        int i;
        for (i = 0; i < k.ext[N - 1]; ++i) {
            idx[N - 1] = i;
            pfe_helper<N - 1, Kernel, _Tp>::call(k, idx);
        }
    }
};
template <typename Kernel, typename _Tp>
struct pfe_helper<0, Kernel, _Tp>
{
    static inline void call(Kernel& k, _Tp& idx) [[cpu]] [[hc]] {

        k.k(idx);

    }
};

template <int N, typename Kernel>
class pfe_wrapper
{
public:
    explicit pfe_wrapper(const extent<N>& other, const Kernel& f) [[cpu]] [[hc]]
        : ext(other), k(f) {}
    void operator() (index<N> idx) [[cpu]] [[hc]] {
        pfe_helper<N - 3, pfe_wrapper<N, Kernel>, index<N>>::call(*this, idx);
    }
private:
    const extent<N> ext;
    const Kernel k;
    template <int K, typename Ker, typename _Tp>
        friend struct pfe_helper;
};

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wunused-variable"

template <int N, typename Kernel>
__attribute__((noinline,used)) completion_future parallel_for_each(
    const accelerator_view& av,
    const extent<N>& compute_domain, const Kernel& f) [[cpu]] [[hc]] {
# 7593 "/opt/rocm/hcc/include/hc.hpp"
    auto bar = &pfe_wrapper<N, Kernel>::operator();
    auto qq = &index<N>::__cxxamp_opencl_index;
    int* foo = reinterpret_cast<int*>(&pfe_wrapper<N, Kernel>::__cxxamp_trampoline);

}
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wunused-variable"

template <typename Kernel>
__attribute__((noinline,used)) completion_future parallel_for_each(
    const accelerator_view& av, const extent<1>& compute_domain, const Kernel& f) [[cpu]] [[hc]] {
# 7629 "/opt/rocm/hcc/include/hc.hpp"
  auto foo = &Kernel::__cxxamp_trampoline;
  auto bar = &Kernel::operator();

}
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wunused-variable"

template <typename Kernel>
__attribute__((noinline,used)) completion_future parallel_for_each(
    const accelerator_view& av, const extent<2>& compute_domain, const Kernel& f) [[cpu]] [[hc]] {
# 7667 "/opt/rocm/hcc/include/hc.hpp"
  auto foo = &Kernel::__cxxamp_trampoline;
  auto bar = &Kernel::operator();

}
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wunused-variable"

template <typename Kernel>
__attribute__((noinline,used)) completion_future parallel_for_each(
    const accelerator_view& av, const extent<3>& compute_domain, const Kernel& f) [[cpu]] [[hc]] {
# 7708 "/opt/rocm/hcc/include/hc.hpp"
  auto foo = &Kernel::__cxxamp_trampoline;
  auto bar = &Kernel::operator();

}
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wunused-variable"

template <typename Kernel>
__attribute__((noinline,used)) completion_future parallel_for_each(
    const accelerator_view& av, const tiled_extent<1>& compute_domain, const Kernel& f) [[cpu]] [[hc]] {
# 7743 "/opt/rocm/hcc/include/hc.hpp"
  tiled_index<1> this_is_used_to_instantiate_the_right_index;


  auto foo = &Kernel::__cxxamp_trampoline;
  auto bar = &Kernel::operator();

}
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wunused-variable"

template <typename Kernel>
__attribute__((noinline,used)) completion_future parallel_for_each(
    const accelerator_view& av, const tiled_extent<2>& compute_domain, const Kernel& f) [[cpu]] [[hc]] {
# 7785 "/opt/rocm/hcc/include/hc.hpp"
  tiled_index<2> this_is_used_to_instantiate_the_right_index;


  auto foo = &Kernel::__cxxamp_trampoline;
  auto bar = &Kernel::operator();

}
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wunused-variable"

template <typename Kernel>
__attribute__((noinline,used)) completion_future parallel_for_each(
    const accelerator_view& av, const tiled_extent<3>& compute_domain, const Kernel& f) [[cpu]] [[hc]] {
# 7831 "/opt/rocm/hcc/include/hc.hpp"
  tiled_index<3> this_is_used_to_instantiate_the_right_index;


  auto foo = &Kernel::__cxxamp_trampoline;
  auto bar = &Kernel::operator();

}
#pragma clang diagnostic pop

}
# 31 "/opt/rocm/hip/include/hip/hcc_detail/grid_launch_GGL.hpp" 2
# 1 "/opt/rocm/hip/include/hip/hcc_detail/hip_hcc.h" 1
# 46 "/opt/rocm/hip/include/hip/hcc_detail/hip_hcc.h"
hipError_t hipHccGetAccelerator(int deviceId, hc::accelerator *acc);







hipError_t hipHccGetAcceleratorView(hipStream_t stream, hc::accelerator_view **av);
# 82 "/opt/rocm/hip/include/hip/hcc_detail/hip_hcc.h"
hipError_t hipHccModuleLaunchKernel(hipFunction_t f,
                                    uint32_t globalWorkSizeX,
                                    uint32_t globalWorkSizeY,
                                    uint32_t globalWorkSizeZ,
                                    uint32_t localWorkSizeX,
                                    uint32_t localWorkSizeY,
                                    uint32_t localWorkSizeZ,
                                    size_t sharedMemBytes,
                                    hipStream_t hStream,
                                    void **kernelParams,
                                    void **extra,
                                    hipEvent_t startEvent=nullptr,
                                    hipEvent_t stopEvent=nullptr
                                    );
# 32 "/opt/rocm/hip/include/hip/hcc_detail/grid_launch_GGL.hpp" 2
# 1 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h" 1
# 33 "/opt/rocm/hip/include/hip/hcc_detail/grid_launch_GGL.hpp" 2







namespace hip_impl
{
    namespace
    {
        struct New_grid_launch_tag {};
        struct Old_grid_launch_tag {};

        template<typename C, typename D>
        class RAII_guard {
            D dtor_;
        public:
            RAII_guard() = default;

            RAII_guard(const C& ctor, D dtor) : dtor_{std::move(dtor)}
            {
                ctor();
            }

            RAII_guard(const RAII_guard&) = default;
            RAII_guard(RAII_guard&&) = default;

            RAII_guard& operator=(const RAII_guard&) = default;
            RAII_guard& operator=(RAII_guard&&) = default;

            ~RAII_guard() { dtor_(); }
        };

        template<typename C, typename D>
        RAII_guard<C, D> make_RAII_guard(const C& ctor, D dtor)
        {
            return RAII_guard<C, D>{ctor, std::move(dtor)};
        }

        template<typename F, typename... Ts>
        using is_new_grid_launch_t = typename std::conditional<
            is_callable<F(Ts...)>{},
            New_grid_launch_tag,
            Old_grid_launch_tag>::type;
    }




    template<typename K, typename... Ts>

    inline
    void grid_launch_hip_impl_(
        New_grid_launch_tag,
        dim3 num_blocks,
        dim3 dim_blocks,
        int group_mem_bytes,
        const hc::accelerator_view& acc_v,
        K k)
    {
        const auto d = hc::extent<3>{
            num_blocks.z * dim_blocks.z,
            num_blocks.y * dim_blocks.y,
            num_blocks.x * dim_blocks.x}.tile_with_dynamic(
            dim_blocks.z,
            dim_blocks.y,
            dim_blocks.x,
            group_mem_bytes);

        try {
            hc::parallel_for_each(acc_v, d, k);
        }
        catch (std::exception& ex) {
            std::cerr << "Failed in " << __func__ << ", with exception: "
                      << ex.what() << std::endl;
            throw;
        }
    }



    hc::accelerator_view lock_stream_hip_(hipStream_t&, void*&);
    void print_prelaunch_trace_(const char*, dim3, dim3, int, hipStream_t);
    void unlock_stream_hip_(
        hipStream_t, void*, const char*, hc::accelerator_view*);

    template<typename K, typename... Ts>

    inline
    void grid_launch_hip_impl_(
        New_grid_launch_tag,
        dim3 num_blocks,
        dim3 dim_blocks,
        int group_mem_bytes,
        hipStream_t stream,
        const char* kernel_name,
        K k)
    {
        void* lck_stream = nullptr;
        auto acc_v = lock_stream_hip_(stream, lck_stream);
        auto stream_guard = make_RAII_guard(
            std::bind(
                print_prelaunch_trace_,
                kernel_name,
                num_blocks,
                dim_blocks,
                group_mem_bytes,
                stream),
            std::bind(
                unlock_stream_hip_, stream, lck_stream, kernel_name, &acc_v));

        try {
            grid_launch_hip_impl_(
                New_grid_launch_tag{},
                std::move(num_blocks),
                std::move(dim_blocks),
                group_mem_bytes,
                acc_v,
                std::move(k));
        }
        catch (std::exception& ex) {
            std::cerr << "Failed in " << __func__ << ", with exception: "
                      << ex.what() << std::endl;
            throw;
        }
    }

    template<typename K, typename... Ts>

    inline
    void grid_launch_hip_impl_(
        Old_grid_launch_tag,
        dim3 num_blocks,
        dim3 dim_blocks,
        int group_mem_bytes,
        hipStream_t stream,
        K k)
    {
        grid_launch_hip_impl_(
            New_grid_launch_tag{},
            std::move(num_blocks),
            std::move(dim_blocks),
            group_mem_bytes,
            std::move(stream),
            std::move(k));
    }

    template<typename K, typename... Ts>

    inline
    void grid_launch_hip_impl_(
        Old_grid_launch_tag,
        dim3 num_blocks,
        dim3 dim_blocks,
        int group_mem_bytes,
        hipStream_t stream,
        const char* kernel_name,
        K k)
    {
        grid_launch_hip_impl_(
            New_grid_launch_tag{},
            std::move(num_blocks),
            std::move(dim_blocks),
            group_mem_bytes,
            std::move(stream),
            kernel_name,
            std::move(k));
    }

    template<typename K, typename... Ts>

    inline
    std::enable_if_t<!std::is_function<K>::value> grid_launch_hip_(
        dim3 num_blocks,
        dim3 dim_blocks,
        int group_mem_bytes,
        hipStream_t stream,
        const char* kernel_name,
        K k)
    {
        grid_launch_hip_impl_(
            is_new_grid_launch_t<K, Ts...>{},
            std::move(num_blocks),
            std::move(dim_blocks),
            group_mem_bytes,
            std::move(stream),
            kernel_name,
            std::move(k));
    }

    template<typename K, typename... Ts>

    inline
    std::enable_if_t<!std::is_function<K>::value> grid_launch_hip_(
        dim3 num_blocks,
        dim3 dim_blocks,
        int group_mem_bytes,
        hipStream_t stream,
        K k)
    {
        grid_launch_hip_impl_(
            is_new_grid_launch_t<K, Ts...>{},
            std::move(num_blocks),
            std::move(dim_blocks),
            group_mem_bytes,
            std::move(stream),
            std::move(k));
    }
# 1006 "/opt/rocm/hip/include/hip/hcc_detail/grid_launch_GGL.hpp"
}
# 87 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h" 2


extern int HIP_TRACE_API;




# 1 "/opt/rocm/hip/include/hip/hcc_detail/hip_ldg.h" 1
# 31 "/opt/rocm/hip/include/hip/hcc_detail/hip_ldg.h"
__attribute__((hc)) char __ldg(const char* );
__attribute__((hc)) char2 __ldg(const char2* );
__attribute__((hc)) char4 __ldg(const char4* );
__attribute__((hc)) signed char __ldg(const signed char* );
__attribute__((hc)) unsigned char __ldg(const unsigned char* );

__attribute__((hc)) short __ldg(const short* );
__attribute__((hc)) short2 __ldg(const short2* );
__attribute__((hc)) short4 __ldg(const short4* );
__attribute__((hc)) unsigned short __ldg(const unsigned short* );

__attribute__((hc)) int __ldg(const int* );
__attribute__((hc)) int2 __ldg(const int2* );
__attribute__((hc)) int4 __ldg(const int4* );
__attribute__((hc)) unsigned int __ldg(const unsigned int* );


__attribute__((hc)) long __ldg(const long* );
__attribute__((hc)) unsigned long __ldg(const unsigned long* );

__attribute__((hc)) long long __ldg(const long long* );
__attribute__((hc)) longlong2 __ldg(const longlong2* );
__attribute__((hc)) unsigned long long __ldg(const unsigned long long* );

__attribute__((hc)) uchar2 __ldg(const uchar2* );
__attribute__((hc)) uchar4 __ldg(const uchar4* );

__attribute__((hc)) ushort2 __ldg(const ushort2* );

__attribute__((hc)) uint2 __ldg(const uint2* );
__attribute__((hc)) uint4 __ldg(const uint4* );

__attribute__((hc)) ulonglong2 __ldg(const ulonglong2* );

__attribute__((hc)) float __ldg(const float* );
__attribute__((hc)) float2 __ldg(const float2* );
__attribute__((hc)) float4 __ldg(const float4* );

__attribute__((hc)) double __ldg(const double* );
__attribute__((hc)) double2 __ldg(const double2* );
# 94 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h" 2


# 1 "/opt/rocm/hip/include/hip/hcc_detail/math_functions.h" 1
# 26 "/opt/rocm/hip/include/hip/hcc_detail/math_functions.h"
# 1 "/opt/rocm/hip/include/hip/hip_runtime.h" 1
# 27 "/opt/rocm/hip/include/hip/hcc_detail/math_functions.h" 2
# 1 "/opt/rocm/hip/include/hip/hip_vector_types.h" 1
# 28 "/opt/rocm/hip/include/hip/hcc_detail/math_functions.h" 2
# 1 "/opt/rocm/hip/include/hip/hcc_detail/device_functions.h" 1
# 26 "/opt/rocm/hip/include/hip/hcc_detail/device_functions.h"
# 1 "/opt/rocm/hip/include/hip/hip_runtime.h" 1
# 27 "/opt/rocm/hip/include/hip/hcc_detail/device_functions.h" 2







__attribute__((hc)) float __cosf(float x);
__attribute__((hc)) float __exp10f(float x);
__attribute__((hc)) float __expf(float x);
__attribute__((hc)) static float __fadd_rd(float x, float y);
__attribute__((hc)) static float __fadd_rn(float x, float y);
__attribute__((hc)) static float __fadd_ru(float x, float y);
__attribute__((hc)) static float __fadd_rz(float x, float y);
__attribute__((hc)) static float __fdiv_rd(float x, float y);
__attribute__((hc)) static float __fdiv_rn(float x, float y);
__attribute__((hc)) static float __fdiv_ru(float x, float y);
__attribute__((hc)) static float __fdiv_rz(float x, float y);
__attribute__((hc)) static float __fdividef(float x, float y);
__attribute__((hc)) float __fmaf_rd(float x, float y, float z);
__attribute__((hc)) float __fmaf_rn(float x, float y, float z);
__attribute__((hc)) float __fmaf_ru(float x, float y, float z);
__attribute__((hc)) float __fmaf_rz(float x, float y, float z);
__attribute__((hc)) static float __fmul_rd(float x, float y);
__attribute__((hc)) static float __fmul_rn(float x, float y);
__attribute__((hc)) static float __fmul_ru(float x, float y);
__attribute__((hc)) static float __fmul_rz(float x, float y);
__attribute__((hc)) float __frcp_rd(float x);
__attribute__((hc)) float __frcp_rn(float x);
__attribute__((hc)) float __frcp_ru(float x);
__attribute__((hc)) float __frcp_rz(float x);
__attribute__((hc)) float __frsqrt_rn(float x);
__attribute__((hc)) float __fsqrt_rd(float x);
__attribute__((hc)) float __fsqrt_rn(float x);
__attribute__((hc)) float __fsqrt_ru(float x);
__attribute__((hc)) float __fsqrt_rz(float x);
__attribute__((hc)) static float __fsub_rd(float x, float y);
__attribute__((hc)) static float __fsub_rn(float x, float y);
__attribute__((hc)) static float __fsub_ru(float x, float y);
__attribute__((hc)) float __log10f(float x);
__attribute__((hc)) float __log2f(float x);
__attribute__((hc)) float __logf(float x);
__attribute__((hc)) float __powf(float base, float exponent);
__attribute__((hc)) static float __saturatef(float x);
__attribute__((hc)) void __sincosf(float x, float *s, float *c);
__attribute__((hc)) float __sinf(float x);
__attribute__((hc)) float __tanf(float x);






__attribute__((hc)) static double __dadd_rd(double x, double y);
__attribute__((hc)) static double __dadd_rn(double x, double y);
__attribute__((hc)) static double __dadd_ru(double x, double y);
__attribute__((hc)) static double __dadd_rz(double x, double y);
__attribute__((hc)) static double __ddiv_rd(double x, double y);
__attribute__((hc)) static double __ddiv_rn(double x, double y);
__attribute__((hc)) static double __ddiv_ru(double x, double y);
__attribute__((hc)) static double __ddiv_rz(double x, double y);
__attribute__((hc)) static double __dmul_rd(double x, double y);
__attribute__((hc)) static double __dmul_rn(double x, double y);
__attribute__((hc)) static double __dmul_ru(double x, double y);
__attribute__((hc)) static double __dmul_rz(double x, double y);
__attribute__((hc)) double __drcp_rd(double x);
__attribute__((hc)) double __drcp_rn(double x);
__attribute__((hc)) double __drcp_ru(double x);
__attribute__((hc)) double __drcp_rz(double x);
__attribute__((hc)) double __dsqrt_rd(double x);
__attribute__((hc)) double __dsqrt_rn(double x);
__attribute__((hc)) double __dsqrt_ru(double x);
__attribute__((hc)) double __dsqrt_rz(double x);
__attribute__((hc)) static double __dsub_rd(double x, double y);
__attribute__((hc)) static double __dsub_rn(double x, double y);
__attribute__((hc)) static double __dsub_ru(double x, double y);
__attribute__((hc)) static double __dsub_rz(double x, double y);
__attribute__((hc)) double __fma_rd(double x, double y, double z);
__attribute__((hc)) double __fma_rn(double x, double y, double z);
__attribute__((hc)) double __fma_ru(double x, double y, double z);
__attribute__((hc)) double __fma_rz(double x, double y, double z);


extern __attribute__((const)) float __hip_fast_cosf(float) __asm("llvm.cos.f32");
extern __attribute__((const)) float __hip_fast_exp2f(float) __asm("llvm.exp2.f32");
__attribute__((hc)) float __hip_fast_exp10f(float);
__attribute__((hc)) float __hip_fast_expf(float);
__attribute__((hc)) float __hip_fast_frsqrt_rn(float);
extern __attribute__((const)) float __hip_fast_fsqrt_rd(float) __asm("llvm.sqrt.f32");
__attribute__((hc)) float __hip_fast_fsqrt_rn(float);
__attribute__((hc)) float __hip_fast_fsqrt_ru(float);
__attribute__((hc)) float __hip_fast_fsqrt_rz(float);
__attribute__((hc)) float __hip_fast_log10f(float);
extern __attribute__((const)) float __hip_fast_log2f(float) __asm("llvm.log2.f32");
__attribute__((hc)) float __hip_fast_logf(float);
__attribute__((hc)) float __hip_fast_powf(float, float);
__attribute__((hc)) void __hip_fast_sincosf(float,float*,float*);
extern __attribute__((const)) float __hip_fast_sinf(float) __asm("llvm.sin.f32");
__attribute__((hc)) float __hip_fast_tanf(float);
extern __attribute__((const)) float __hip_fast_fmaf(float,float,float) __asm("llvm.fma.f32");
extern __attribute__((const)) float __hip_fast_frcp(float) __asm("llvm.amdgcn.rcp.f32");

extern __attribute__((const)) double __hip_fast_dsqrt(double) __asm("llvm.sqrt.f64");
extern __attribute__((const)) double __hip_fast_fma(double,double,double) __asm("llvm.fma.f64");
extern __attribute__((const)) double __hip_fast_drcp(double) __asm("llvm.amdgcn.rcp.f64");



__attribute__((hc)) inline float __cosf(float x) {
  return __hip_fast_cosf(x);
}

__attribute__((hc)) inline float __exp10f(float x) {
  return __hip_fast_exp10f(x);
}

__attribute__((hc)) inline float __expf(float x) {
  return __hip_fast_expf(x);
}

__attribute__((hc)) static inline float __fadd_rd(float x, float y) {
  return x + y;
}

__attribute__((hc)) static inline float __fadd_rn(float x, float y) {
  return x + y;
}

__attribute__((hc)) static inline float __fadd_ru(float x, float y) {
  return x + y;
}

__attribute__((hc)) static inline float __fadd_rz(float x, float y) {
  return x + y;
}

__attribute__((hc)) static inline float __fdiv_rd(float x, float y) {
  return x / y;
}

__attribute__((hc)) static inline float __fdiv_rn(float x, float y) {
  return x / y;
}

__attribute__((hc)) static inline float __fdiv_ru(float x, float y) {
  return x / y;
}

__attribute__((hc)) static inline float __fdiv_rz(float x, float y) {
  return x / y;
}

__attribute__((hc)) static inline float __fdividef(float x, float y) {
  return x / y;
}

__attribute__((hc)) inline float __fmaf_rd(float x, float y, float z) {
  return __hip_fast_fmaf(x, y, z);
}

__attribute__((hc)) inline float __fmaf_rn(float x, float y, float z) {
  return __hip_fast_fmaf(x, y, z);
}

__attribute__((hc)) inline float __fmaf_ru(float x, float y, float z) {
  return __hip_fast_fmaf(x, y, z);
}

__attribute__((hc)) inline float __fmaf_rz(float x, float y, float z) {
  return __hip_fast_fmaf(x, y, z);
}

__attribute__((hc)) static inline float __fmul_rd(float x, float y) {
  return x * y;
}

__attribute__((hc)) static inline float __fmul_rn(float x, float y) {
  return x * y;
}

__attribute__((hc)) static inline float __fmul_ru(float x, float y) {
  return x * y;
}

__attribute__((hc)) static inline float __fmul_rz(float x, float y) {
  return x * y;
}

__attribute__((hc)) inline float __frcp_rd(float x) {
  return __hip_fast_frcp(x);
}

__attribute__((hc)) inline float __frcp_rn(float x) {
  return __hip_fast_frcp(x);
}

__attribute__((hc)) inline float __frcp_ru(float x) {
  return __hip_fast_frcp(x);
}

__attribute__((hc)) inline float __frcp_rz(float x) {
  return __hip_fast_frcp(x);
}

__attribute__((hc)) inline float __frsqrt_rn(float x) {
  return __hip_fast_frsqrt_rn(x);
}

__attribute__((hc)) inline float __fsqrt_rd(float x) {
  return __hip_fast_fsqrt_rd(x);
}

__attribute__((hc)) inline float __fsqrt_rn(float x) {
  return __hip_fast_fsqrt_rn(x);
}

__attribute__((hc)) inline float __fsqrt_ru(float x) {
  return __hip_fast_fsqrt_ru(x);
}

__attribute__((hc)) inline float __fsqrt_rz(float x) {
  return __hip_fast_fsqrt_rz(x);
}

__attribute__((hc)) static inline float __fsub_rd(float x, float y) {
  return x - y;
}

__attribute__((hc)) static inline float __fsub_rn(float x, float y) {
  return x - y;
}

__attribute__((hc)) static inline float __fsub_ru(float x, float y) {
  return x - y;
}

__attribute__((hc)) static inline float __fsub_rz(float x, float y) {
  return x - y;
}


__attribute__((hc)) inline float __log10f(float x) {
  return __hip_fast_log10f(x);
}

__attribute__((hc)) inline float __log2f(float x) {
  return __hip_fast_log2f(x);
}

__attribute__((hc)) inline float __logf(float x) {
  return __hip_fast_logf(x);
}

__attribute__((hc)) inline float __powf(float base, float exponent) {
  return __hip_fast_powf(base, exponent);
}

__attribute__((hc)) static inline float __saturatef(float x) {
  x = x > 1.0f ? 1.0f : x;
  x = x < 0.0f ? 0.0f : x;
  return x;
}

__attribute__((hc)) inline void __sincosf(float x, float *s, float *c) {
  return __hip_fast_sincosf(x, s, c);
}

__attribute__((hc)) inline float __sinf(float x) {
  return __hip_fast_sinf(x);
}

__attribute__((hc)) inline float __tanf(float x) {
  return __hip_fast_tanf(x);
}






__attribute__((hc)) static inline double __dadd_rd(double x, double y) {
  return x + y;
}

__attribute__((hc)) static inline double __dadd_rn(double x, double y) {
  return x + y;
}

__attribute__((hc)) static inline double __dadd_ru(double x, double y) {
  return x + y;
}

__attribute__((hc)) static inline double __dadd_rz(double x, double y) {
  return x + y;
}

__attribute__((hc)) static inline double __ddiv_rd(double x, double y) {
  return x / y;
}

__attribute__((hc)) static inline double __ddiv_rn(double x, double y) {
  return x / y;
}

__attribute__((hc)) static inline double __ddiv_ru(double x, double y) {
  return x / y;
}

__attribute__((hc)) static inline double __ddiv_rz(double x, double y) {
  return x / y;
}

__attribute__((hc)) static inline double __dmul_rd(double x, double y) {
  return x * y;
}

__attribute__((hc)) static inline double __dmul_rn(double x, double y) {
  return x * y;
}

__attribute__((hc)) static inline double __dmul_ru(double x, double y) {
  return x * y;
}

__attribute__((hc)) static inline double __dmul_rz(double x, double y) {
  return x * y;
}

__attribute__((hc)) inline double __drcp_rd(double x) {
  return __hip_fast_drcp(x);
}

__attribute__((hc)) inline double __drcp_rn(double x) {
  return __hip_fast_drcp(x);
}

__attribute__((hc)) inline double __drcp_ru(double x) {
  return __hip_fast_drcp(x);
}

__attribute__((hc)) inline double __drcp_rz(double x) {
  return __hip_fast_drcp(x);
}


__attribute__((hc)) inline double __dsqrt_rd(double x) {
  return __hip_fast_dsqrt(x);
}

__attribute__((hc)) inline double __dsqrt_rn(double x) {
  return __hip_fast_dsqrt(x);
}

__attribute__((hc)) inline double __dsqrt_ru(double x) {
  return __hip_fast_dsqrt(x);
}

__attribute__((hc)) inline double __dsqrt_rz(double x) {
  return __hip_fast_dsqrt(x);
}

__attribute__((hc)) static inline double __dsub_rd(double x, double y) {
  return x - y;
}

__attribute__((hc)) static inline double __dsub_rn(double x, double y) {
  return x - y;
}

__attribute__((hc)) static inline double __dsub_ru(double x, double y) {
  return x - y;
}

__attribute__((hc)) static inline double __dsub_rz(double x, double y) {
  return x - y;
}

__attribute__((hc)) inline double __fma_rd(double x, double y, double z) {
  return __hip_fast_fma(x, y, z);
}

__attribute__((hc)) inline double __fma_rn(double x, double y, double z) {
  return __hip_fast_fma(x, y, z);
}

__attribute__((hc)) inline double __fma_ru(double x, double y, double z) {
  return __hip_fast_fma(x, y, z);
}

__attribute__((hc)) inline double __fma_rz(double x, double y, double z) {
  return __hip_fast_fma(x, y, z);
}


extern "C" unsigned int __hip_hc_ir_umul24_int(unsigned int, unsigned int);
extern "C" signed int __hip_hc_ir_mul24_int(signed int, signed int);
extern "C" signed int __hip_hc_ir_mulhi_int(signed int, signed int);
extern "C" unsigned int __hip_hc_ir_umulhi_int(unsigned int, unsigned int);
extern "C" unsigned int __hip_hc_ir_usad_int(unsigned int, unsigned int, unsigned int);


__attribute__((hc)) unsigned int __brev( unsigned int x);
__attribute__((hc)) unsigned long long int __brevll( unsigned long long int x);
__attribute__((hc)) unsigned int __byte_perm(unsigned int x, unsigned int y, unsigned int s);
__attribute__((hc)) unsigned int __clz(int x);
__attribute__((hc)) unsigned int __clzll(long long int x);
__attribute__((hc)) unsigned int __ffs(int x);
__attribute__((hc)) unsigned int __ffsll(long long int x);
__attribute__((hc)) static unsigned int __hadd(int x, int y);
__attribute__((hc)) static int __mul24(int x, int y);
__attribute__((hc)) long long int __mul64hi(long long int x, long long int y);
__attribute__((hc)) static int __mulhi(int x, int y);
__attribute__((hc)) unsigned int __popc(unsigned int x);
__attribute__((hc)) unsigned int __popcll(unsigned long long int x);
__attribute__((hc)) static int __rhadd(int x, int y);
__attribute__((hc)) static unsigned int __sad(int x, int y, int z);
__attribute__((hc)) static unsigned int __uhadd(unsigned int x, unsigned int y);
__attribute__((hc)) static int __umul24(unsigned int x, unsigned int y);
__attribute__((hc)) unsigned long long int __umul64hi(unsigned long long int x, unsigned long long int y);
__attribute__((hc)) static unsigned int __umulhi(unsigned int x, unsigned int y);
__attribute__((hc)) static unsigned int __urhadd(unsigned int x, unsigned int y);
__attribute__((hc)) static unsigned int __usad(unsigned int x, unsigned int y, unsigned int z);

__attribute__((hc)) static inline unsigned int __hadd(int x, int y) {
  int z = x + y;
  int sign = z & 0x8000000;
  int value = z & 0x7FFFFFFF;
  return ((value) >> 1 || sign);
}
__attribute__((hc)) static inline int __mul24(int x, int y) {
  return __hip_hc_ir_mul24_int(x, y);
}
__attribute__((hc)) static inline int __mulhi(int x, int y) {
  return __hip_hc_ir_mulhi_int(x, y);
}
__attribute__((hc)) static inline int __rhadd(int x, int y) {
  int z = x + y + 1;
  int sign = z & 0x8000000;
  int value = z & 0x7FFFFFFF;
  return ((value) >> 1 || sign);
}
__attribute__((hc)) static inline unsigned int __sad(int x, int y, int z) {
  return x > y ? x - y + z : y - x + z;
}
__attribute__((hc)) static inline unsigned int __uhadd(unsigned int x, unsigned int y) {
  return (x + y) >> 1;
}
__attribute__((hc)) static inline int __umul24(unsigned int x, unsigned int y) {
  return __hip_hc_ir_umul24_int(x, y);
}
__attribute__((hc)) static inline unsigned int __umulhi(unsigned int x, unsigned int y) {
  return __hip_hc_ir_umulhi_int(x, y);
}
__attribute__((hc)) static inline unsigned int __urhadd(unsigned int x, unsigned int y) {
  return (x + y + 1) >> 1;
}
__attribute__((hc)) static inline unsigned int __usad(unsigned int x, unsigned int y, unsigned int z)
{
  return __hip_hc_ir_usad_int(x, y, z);
}





__attribute__((hc)) float __double2float_rd(double x);
__attribute__((hc)) float __double2float_rn(double x);
__attribute__((hc)) float __double2float_ru(double x);
__attribute__((hc)) float __double2float_rz(double x);

__attribute__((hc)) int __double2hiint(double x);

__attribute__((hc)) int __double2int_rd(double x);
__attribute__((hc)) int __double2int_rn(double x);
__attribute__((hc)) int __double2int_ru(double x);
__attribute__((hc)) int __double2int_rz(double x);

__attribute__((hc)) long long int __double2ll_rd(double x);
__attribute__((hc)) long long int __double2ll_rn(double x);
__attribute__((hc)) long long int __double2ll_ru(double x);
__attribute__((hc)) long long int __double2ll_rz(double x);

__attribute__((hc)) int __double2loint(double x);

__attribute__((hc)) unsigned int __double2uint_rd(double x);
__attribute__((hc)) unsigned int __double2uint_rn(double x);
__attribute__((hc)) unsigned int __double2uint_ru(double x);
__attribute__((hc)) unsigned int __double2uint_rz(double x);

__attribute__((hc)) unsigned long long int __double2ull_rd(double x);
__attribute__((hc)) unsigned long long int __double2ull_rn(double x);
__attribute__((hc)) unsigned long long int __double2ull_ru(double x);
__attribute__((hc)) unsigned long long int __double2ull_rz(double x);

__attribute__((hc)) long long int __double_as_longlong(double x);
# 536 "/opt/rocm/hip/include/hip/hcc_detail/device_functions.h"
__attribute__((hc)) int __float2int_rd(float x);
__attribute__((hc)) int __float2int_rn(float x);
__attribute__((hc)) int __float2int_ru(float x);
__attribute__((hc)) int __float2int_rz(float x);

__attribute__((hc)) long long int __float2ll_rd(float x);
__attribute__((hc)) long long int __float2ll_rn(float x);
__attribute__((hc)) long long int __float2ll_ru(float x);
__attribute__((hc)) long long int __float2ll_rz(float x);

__attribute__((hc)) unsigned int __float2uint_rd(float x);
__attribute__((hc)) unsigned int __float2uint_rn(float x);
__attribute__((hc)) unsigned int __float2uint_ru(float x);
__attribute__((hc)) unsigned int __float2uint_rz(float x);

__attribute__((hc)) unsigned long long int __float2ull_rd(float x);
__attribute__((hc)) unsigned long long int __float2ull_rn(float x);
__attribute__((hc)) unsigned long long int __float2ull_ru(float x);
__attribute__((hc)) unsigned long long int __float2ull_rz(float x);

__attribute__((hc)) int __float_as_int(float x);
__attribute__((hc)) unsigned int __float_as_uint(float x);
__attribute__((hc)) double __hiloint2double(int hi, int lo);
__attribute__((hc)) double __int2double_rn(int x);

__attribute__((hc)) float __int2float_rd(int x);
__attribute__((hc)) float __int2float_rn(int x);
__attribute__((hc)) float __int2float_ru(int x);
__attribute__((hc)) float __int2float_rz(int x);

__attribute__((hc)) float __int_as_float(int x);

__attribute__((hc)) double __ll2double_rd(long long int x);
__attribute__((hc)) double __ll2double_rn(long long int x);
__attribute__((hc)) double __ll2double_ru(long long int x);
__attribute__((hc)) double __ll2double_rz(long long int x);

__attribute__((hc)) float __ll2float_rd(long long int x);
__attribute__((hc)) float __ll2float_rn(long long int x);
__attribute__((hc)) float __ll2float_ru(long long int x);
__attribute__((hc)) float __ll2float_rz(long long int x);

__attribute__((hc)) double __longlong_as_double(long long int x);

__attribute__((hc)) double __uint2double_rn(int x);

__attribute__((hc)) float __uint2float_rd(unsigned int x);
__attribute__((hc)) float __uint2float_rn(unsigned int x);
__attribute__((hc)) float __uint2float_ru(unsigned int x);
__attribute__((hc)) float __uint2float_rz(unsigned int x);

__attribute__((hc)) float __uint_as_float(unsigned int x);

__attribute__((hc)) double __ull2double_rd(unsigned long long int x);
__attribute__((hc)) double __ull2double_rn(unsigned long long int x);
__attribute__((hc)) double __ull2double_ru(unsigned long long int x);
__attribute__((hc)) double __ull2double_rz(unsigned long long int x);

__attribute__((hc)) float __ull2float_rd(unsigned long long int x);
__attribute__((hc)) float __ull2float_rn(unsigned long long int x);
__attribute__((hc)) float __ull2float_ru(unsigned long long int x);
__attribute__((hc)) float __ull2float_rz(unsigned long long int x);

__attribute__((hc)) char4 __hip_hc_add8pk(char4, char4);
__attribute__((hc)) char4 __hip_hc_sub8pk(char4, char4);
__attribute__((hc)) char4 __hip_hc_mul8pk(char4, char4);
# 29 "/opt/rocm/hip/include/hip/hcc_detail/math_functions.h" 2

__attribute__((hc)) float acosf(float x);
__attribute__((hc)) float acoshf(float x);
__attribute__((hc)) float asinf(float x);
__attribute__((hc)) float asinhf(float x);
__attribute__((hc)) float atan2f(float y, float x);
__attribute__((hc)) float atanf(float x);
__attribute__((hc)) float atanhf(float x);
__attribute__((hc)) float cbrtf(float x);
__attribute__((hc)) float ceilf(float x);
__attribute__((hc)) float copysignf(float x, float y);
__attribute__((hc)) float cosf(float x);
__attribute__((hc)) float coshf(float x);
__attribute__((hc)) float cospif(float x);


__attribute__((hc)) float erfcf(float x);
__attribute__((hc)) float erfcinvf(float y);
__attribute__((hc)) float erfcxf(float x);
__attribute__((hc)) float erff(float x);
__attribute__((hc)) float erfinvf(float y);
__attribute__((hc)) float exp10f(float x);
__attribute__((hc)) float exp2f(float x);
__attribute__((hc)) float expf(float x);
__attribute__((hc)) float expm1f(float x);
__attribute__((hc)) int abs(int x);
__attribute__((hc)) float fabsf(float x);
__attribute__((hc)) float fdimf(float x, float y);
__attribute__((hc)) float fdividef(float x, float y);
__attribute__((hc)) float floorf(float x);
__attribute__((hc)) float fmaf(float x, float y, float z);
__attribute__((hc)) float fmaxf(float x, float y);
__attribute__((hc)) float fminf(float x, float y);
__attribute__((hc)) float fmodf(float x, float y);
__attribute__((hc)) float frexpf(float x, int* nptr);
__attribute__((hc)) float hypotf(float x, float y);
__attribute__((hc)) float ilogbf(float x);
__attribute__((hc)) int isfinite(float a);
__attribute__((hc)) unsigned isinf(float a);
__attribute__((hc)) unsigned isnan(float a);
__attribute__((hc)) float j0f(float x);
__attribute__((hc)) float j1f(float x);
__attribute__((hc)) float jnf(int n, float x);
__attribute__((hc)) float ldexpf(float x, int exp);
__attribute__((hc)) float lgammaf(float x);
__attribute__((hc)) long long int llrintf(float x);
__attribute__((hc)) long long int llroundf(float x);
__attribute__((hc)) float log10f(float x);
__attribute__((hc)) float log1pf(float x);
__attribute__((hc)) float logbf(float x);
__attribute__((hc)) long int lrintf(float x);
__attribute__((hc)) long int lroundf(float x);

__attribute__((hc)) float nanf(const char* tagp);
__attribute__((hc)) float nearbyintf(float x);

__attribute__((hc)) float norm3df(float a, float b, float c);
__attribute__((hc)) float norm4df(float a, float b, float c, float d);
__attribute__((hc)) float normcdff(float y);
__attribute__((hc)) float normcdfinvf(float y);
__attribute__((hc)) float normf(int dim, const float *a);
__attribute__((hc)) float powf(float x, float y);
__attribute__((hc)) float rcbrtf(float x);
__attribute__((hc)) float remainderf(float x, float y);
__attribute__((hc)) float remquof(float x, float y, int *quo);
__attribute__((hc)) float rhypotf(float x, float y);
__attribute__((hc)) float rintf(float x);
__attribute__((hc)) float rnorm3df(float a, float b, float c);
__attribute__((hc)) float rnorm4df(float a, float b, float c, float d);
__attribute__((hc)) float rnormf(int dim, const float* a);
__attribute__((hc)) float roundf(float x);
__attribute__((hc)) float rsqrtf(float x);
__attribute__((hc)) float scalblnf(float x, long int n);
__attribute__((hc)) float scalbnf(float x, int n);
__attribute__((hc)) int signbit(float a);
__attribute__((hc)) void sincosf(float x, float *sptr, float *cptr);
__attribute__((hc)) void sincospif(float x, float *sptr, float *cptr);
__attribute__((hc)) float sinf(float x);
__attribute__((hc)) float sinhf(float x);
__attribute__((hc)) float sinpif(float x);
__attribute__((hc)) float sqrtf(float x);
__attribute__((hc)) float tanf(float x);
__attribute__((hc)) float tanhf(float x);
__attribute__((hc)) float tgammaf(float x);
__attribute__((hc)) float truncf(float x);
__attribute__((hc)) float y0f(float x);
__attribute__((hc)) float y1f(float x);
__attribute__((hc)) float ynf(int n, float x);

__attribute__((hc)) double acos(double x);
__attribute__((hc)) double acosh(double x);
__attribute__((hc)) double asin(double x);
__attribute__((hc)) double asinh(double x);
__attribute__((hc)) double atan(double x);
__attribute__((hc)) double atan2(double y, double x);
__attribute__((hc)) double atanh(double x);
__attribute__((hc)) double cbrt(double x);
__attribute__((hc)) double ceil(double x);
__attribute__((hc)) double copysign(double x, double y);
__attribute__((hc)) double cos(double x);
__attribute__((hc)) double cosh(double x);
__attribute__((hc)) double cospi(double x);


__attribute__((hc)) double erf(double x);
__attribute__((hc)) double erfc(double x);
__attribute__((hc)) double erfcinv(double y);
__attribute__((hc)) double erfcx(double x);
__attribute__((hc)) double erfinv(double x);
__attribute__((hc)) double exp(double x);
__attribute__((hc)) double exp10(double x);
__attribute__((hc)) double exp2(double x);
__attribute__((hc)) double expm1(double x);
__attribute__((hc)) double fabs(double x);
__attribute__((hc)) double fdim(double x, double y);
__attribute__((hc)) double floor(double x);
__attribute__((hc)) double fma(double x, double y, double z);
__attribute__((hc)) double fmax(double x, double y);
__attribute__((hc)) double fmin(double x, double y);
__attribute__((hc)) double fmod(double x, double y);
__attribute__((hc)) double frexp(double x, int *nptr);
__attribute__((hc)) double hypot(double x, double y);
__attribute__((hc)) double ilogb(double x);
__attribute__((hc)) int isfinite(double x);
__attribute__((hc)) unsigned isinf(double x);
__attribute__((hc)) unsigned isnan(double x);
__attribute__((hc)) double j0(double x);
__attribute__((hc)) double j1(double x);
__attribute__((hc)) double jn(int n, double x);
__attribute__((hc)) double ldexp(double x, int exp);
__attribute__((hc)) double lgamma(double x);
__attribute__((hc)) long long llrint(double x);
__attribute__((hc)) long long llround(double x);
__attribute__((hc)) double log(double x);
__attribute__((hc)) double log10(double x);
__attribute__((hc)) double log1p(double x);
__attribute__((hc)) double log2(double x);
__attribute__((hc)) double logb(double x);
__attribute__((hc)) long int lrint(double x);
__attribute__((hc)) long int lround(double x);

__attribute__((hc)) double nan(const char* tagp);
__attribute__((hc)) double nearbyint(double x);
__attribute__((hc)) double nextafter(double x, double y);
__attribute__((hc)) double norm(int dim, const double* t);
__attribute__((hc)) double norm3d(double a, double b, double c);
__attribute__((hc)) double norm4d(double a, double b, double c, double d);
__attribute__((hc)) double normcdf(double y);
__attribute__((hc)) double normcdfinv(double y);
__attribute__((hc)) double pow(double x, double y);
__attribute__((hc)) double rcbrt(double x);
__attribute__((hc)) double remainder(double x, double y);

__attribute__((hc)) double rhypot(double x, double y);
__attribute__((hc)) double rint(double x);
__attribute__((hc)) double rnorm(int dim, const double* t);
__attribute__((hc)) double rnorm3d(double a, double b, double c);
__attribute__((hc)) double rnorm4d(double a, double b, double c, double d);
__attribute__((hc)) double round(double x);
__attribute__((hc)) double rsqrt(double x);
__attribute__((hc)) double scalbln(double x, long int n);
__attribute__((hc)) double scalbn(double x, int n);
__attribute__((hc)) int signbit(double a);
__attribute__((hc)) double sin(double a);
__attribute__((hc)) void sincos(double x, double *sptr, double *cptr);
__attribute__((hc)) void sincospi(double x, double *sptr, double *cptr);
__attribute__((hc)) double sinh(double x);
__attribute__((hc)) double sinpi(double x);
__attribute__((hc)) double sqrt(double x);
__attribute__((hc)) double tan(double x);
__attribute__((hc)) double tanh(double x);
__attribute__((hc)) double tgamma(double x);
__attribute__((hc)) double trunc(double x);
__attribute__((hc)) double y0(double x);
__attribute__((hc)) double y1(double y);
__attribute__((hc)) double yn(int n, double x);
# 253 "/opt/rocm/hip/include/hip/hcc_detail/math_functions.h"
__attribute__((hc)) float sinf(float);
__attribute__((hc)) float cosf(float);
__attribute__((hc)) float tanf(float);
__attribute__((hc)) void sincosf(float, float*, float*);
__attribute__((hc)) float logf(float);
__attribute__((hc)) float log2f(float);
__attribute__((hc)) float log10f(float);
__attribute__((hc)) float expf(float);
__attribute__((hc)) float exp10f(float);
__attribute__((hc)) float powf(float, float);
# 97 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h" 2
# 171 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h"
static constexpr int warpSize = 64;


__attribute__((hc)) long long int clock64();
__attribute__((hc)) long long int clock();


__attribute__((hc)) void abort();


__attribute__((hc)) int atomicAdd(int* address, int val);
__attribute__((hc)) unsigned int atomicAdd(unsigned int* address,
                       unsigned int val);

__attribute__((hc)) unsigned long long int atomicAdd(unsigned long long int* address,
                                 unsigned long long int val);

__attribute__((hc)) float atomicAdd(float* address, float val);



__attribute__((hc)) int atomicSub(int* address, int val);

__attribute__((hc)) unsigned int atomicSub(unsigned int* address,
                       unsigned int val);



__attribute__((hc)) int atomicExch(int* address, int val);

__attribute__((hc)) unsigned int atomicExch(unsigned int* address,
                        unsigned int val);

__attribute__((hc)) unsigned long long int atomicExch(unsigned long long int* address,
                                  unsigned long long int val);

__attribute__((hc)) float atomicExch(float* address, float val);



__attribute__((hc)) int atomicMin(int* address, int val);
__attribute__((hc)) unsigned int atomicMin(unsigned int* address,
                       unsigned int val);
__attribute__((hc)) unsigned long long int atomicMin(unsigned long long int* address,
                                 unsigned long long int val);



__attribute__((hc)) int atomicMax(int* address, int val);
__attribute__((hc)) unsigned int atomicMax(unsigned int* address,
                       unsigned int val);
__attribute__((hc)) unsigned long long int atomicMax(unsigned long long int* address,
                                 unsigned long long int val);



__attribute__((hc)) int atomicCAS(int* address, int compare, int val);
__attribute__((hc)) unsigned int atomicCAS(unsigned int* address,
                       unsigned int compare,
                       unsigned int val);
__attribute__((hc)) unsigned long long int atomicCAS(unsigned long long int* address,
                                 unsigned long long int compare,
                                 unsigned long long int val);



__attribute__((hc)) int atomicAnd(int* address, int val);
__attribute__((hc)) unsigned int atomicAnd(unsigned int* address,
                       unsigned int val);
__attribute__((hc)) unsigned long long int atomicAnd(unsigned long long int* address,
                                 unsigned long long int val);



__attribute__((hc)) int atomicOr(int* address, int val);
__attribute__((hc)) unsigned int atomicOr(unsigned int* address,
                      unsigned int val);
__attribute__((hc)) unsigned long long int atomicOr(unsigned long long int* address,
                                unsigned long long int val);



__attribute__((hc)) int atomicXor(int* address, int val);
__attribute__((hc)) unsigned int atomicXor(unsigned int* address,
                       unsigned int val);
__attribute__((hc)) unsigned long long int atomicXor(unsigned long long int* address,
                                 unsigned long long int val);


__attribute__((hc)) unsigned int atomicInc(unsigned int* address,
                       unsigned int val);



__attribute__((hc)) unsigned int atomicDec(unsigned int* address,
                       unsigned int val);


__attribute__((hc)) int __all( int input);
__attribute__((hc)) int __any( int input);
__attribute__((hc)) unsigned long long int __ballot( int input);





__attribute__((hc)) int __shfl(int input, int lane, int width=warpSize);
__attribute__((hc)) int __shfl_up(int input, unsigned int lane_delta, int width=warpSize);
__attribute__((hc)) int __shfl_down(int input, unsigned int lane_delta, int width=warpSize);
__attribute__((hc)) int __shfl_xor(int input, int lane_mask, int width=warpSize);
__attribute__((hc)) float __shfl(float input, int lane, int width=warpSize);
__attribute__((hc)) float __shfl_up(float input, unsigned int lane_delta, int width=warpSize);
__attribute__((hc)) float __shfl_down(float input, unsigned int lane_delta, int width=warpSize);
__attribute__((hc)) float __shfl_xor(float input, int lane_mask, int width=warpSize);
# 296 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h"
__attribute__((hc)) unsigned __hip_ds_bpermute(int index, unsigned src);
__attribute__((hc)) float __hip_ds_bpermutef(int index, float src);
__attribute__((hc)) unsigned __hip_ds_permute(int index, unsigned src);
__attribute__((hc)) float __hip_ds_permutef(int index, float src);

__attribute__((hc)) unsigned __hip_ds_swizzle(unsigned int src, int pattern);
__attribute__((hc)) float __hip_ds_swizzlef(float src, int pattern);

__attribute__((hc)) int __hip_move_dpp(int src, int dpp_ctrl, int row_mask, int bank_mask, bool bound_ctrl);



__attribute__((cpu)) __attribute__((hc)) int min(int arg1, int arg2);
__attribute__((cpu)) __attribute__((hc)) int max(int arg1, int arg2);

__attribute__((hc)) void* __get_dynamicgroupbaseptr();
# 338 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h"
extern __attribute__((const)) __attribute__((hc)) void __hip_hc_threadfence() __asm("__llvm_fence_sc_dev");
extern __attribute__((const)) __attribute__((hc)) void __hip_hc_threadfence_block() __asm("__llvm_fence_sc_wg");
# 352 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h"
__attribute__((hc)) static inline void __threadfence_block(void) {
  return __hip_hc_threadfence_block();
}
# 366 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h"
__attribute__((hc)) static inline void __threadfence(void) {
  return __hip_hc_threadfence();
}
# 380 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h"
__attribute__((hc)) void __threadfence_system(void) ;
# 404 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h"
extern "C" __attribute__((hc)) void* __hip_hc_memcpy(void* dst, const void* src, size_t size);
extern "C" __attribute__((hc)) void* __hip_hc_memset(void* ptr, uint8_t val, size_t size);
extern "C" __attribute__((hc)) void* __hip_hc_malloc(size_t);
extern "C" __attribute__((hc)) void* __hip_hc_free(void *ptr);

static inline __attribute__((hc)) void* malloc(size_t size)
{
    return __hip_hc_malloc(size);
}

static inline __attribute__((hc)) void* free(void *ptr)
{
    return __hip_hc_free(ptr);
}

static inline __attribute__((hc)) void* memcpy(void* dst, const void* src, size_t size)
{
  return __hip_hc_memcpy(dst, src, size);
}

static inline __attribute__((hc)) void* memset(void* ptr, int val, size_t size)
{
  uint8_t val8 = static_cast <uint8_t> (val);
  return __hip_hc_memset(ptr, val8, size);
}
# 438 "/opt/rocm/hip/include/hip/hcc_detail/hip_runtime.h"
extern hipStream_t ihipPreLaunchKernel(hipStream_t stream, dim3 grid, dim3 block, grid_launch_parm *lp, const char *kernelNameStr);
extern hipStream_t ihipPreLaunchKernel(hipStream_t stream, dim3 grid, size_t block, grid_launch_parm *lp, const char *kernelNameStr);
extern hipStream_t ihipPreLaunchKernel(hipStream_t stream, size_t grid, dim3 block, grid_launch_parm *lp, const char *kernelNameStr);
extern hipStream_t ihipPreLaunchKernel(hipStream_t stream, size_t grid, size_t block, grid_launch_parm *lp, const char *kernelNameStr);
extern void ihipPostLaunchKernel(const char *kernelName, hipStream_t stream, grid_launch_parm &lp);
# 56 "/opt/rocm/hip/include/hip/hip_runtime.h" 2
# 1 "bfs.cpp" 2
# 23 "bfs.cpp"
# 1 "/opt/rocm/hip/include/hip/hcc_detail/cuda/cuda.h" 1
# 23 "bfs.cpp" 2
# 40 "bfs.cpp"
int no_of_nodes;
int edge_list_size;
FILE *fp;


struct Node
{
 int starting;
 int no_of_edges;
};


# 1 "./kernel.h" 1
# 22 "./kernel.h"
__attribute__((annotate("hip__global__"), hc, used, weak)) void
Kernel( Node* g_graph_nodes, int* g_graph_edges, bool* g_graph_mask, bool* g_updating_graph_mask, bool *g_graph_visited, int* g_cost, int no_of_nodes)
{
 int tid = (hc_get_group_id(0))*512 + (hc_get_workitem_id(0));
 if( tid<no_of_nodes && g_graph_mask[tid])
 {
  g_graph_mask[tid]=false;
  for(int i=g_graph_nodes[tid].starting; i<(g_graph_nodes[tid].no_of_edges + g_graph_nodes[tid].starting); i++)
   {
   int id = g_graph_edges[i];
   if(!g_graph_visited[id])
    {
    g_cost[id]=g_cost[tid]+1;
    g_updating_graph_mask[id]=true;
    }
   }
 }
}
# 51 "bfs.cpp" 2

# 1 "./kernel2.h" 1
# 22 "./kernel2.h"
__attribute__((annotate("hip__global__"), hc, used, weak)) void
Kernel2( bool* g_graph_mask, bool *g_updating_graph_mask, bool* g_graph_visited, bool *g_over, int no_of_nodes)
{
 int tid = (hc_get_group_id(0))*512 + (hc_get_workitem_id(0));
 if( tid<no_of_nodes && g_updating_graph_mask[tid])
 {

  g_graph_mask[tid]=true;
  g_graph_visited[tid]=true;
  *g_over=true;
  g_updating_graph_mask[tid]=false;
 }
}
# 52 "bfs.cpp" 2


void BFSGraph(int argc, char** argv);




int main( int argc, char** argv)
{
 no_of_nodes=0;
 edge_list_size=0;
 BFSGraph( argc, argv);
}

void Usage(int argc, char**argv){

fprintf(stderr,"Usage: %s <input_file>\n", argv[0]);

}



void BFSGraph( int argc, char** argv)
{

    char *input_f;
 if(argc!=2){
 Usage(argc, argv);
 exit(0);
 }

 input_f = argv[1];
 printf("Reading File\n");

 fp = fopen(input_f,"r");
 if(!fp)
 {
  printf("Error Reading graph file\n");
  return;
 }

 int source = 0;

 fscanf(fp,"%d",&no_of_nodes);

 int num_of_blocks = 1;
 int num_of_threads_per_block = no_of_nodes;



 if(no_of_nodes>512)
 {
  num_of_blocks = (int)ceil(no_of_nodes/(double)512);
  num_of_threads_per_block = 512;
 }


 Node* h_graph_nodes = (Node*) malloc(sizeof(Node)*no_of_nodes);
 bool *h_graph_mask = (bool*) malloc(sizeof(bool)*no_of_nodes);
 bool *h_updating_graph_mask = (bool*) malloc(sizeof(bool)*no_of_nodes);
 bool *h_graph_visited = (bool*) malloc(sizeof(bool)*no_of_nodes);

 int start, edgeno;

 for( unsigned int i = 0; i < no_of_nodes; i++)
 {
  fscanf(fp,"%d %d",&start,&edgeno);
  h_graph_nodes[i].starting = start;
  h_graph_nodes[i].no_of_edges = edgeno;
  h_graph_mask[i]=false;
  h_updating_graph_mask[i]=false;
  h_graph_visited[i]=false;
 }


 fscanf(fp,"%d",&source);
 source=0;


 h_graph_mask[source]=true;
 h_graph_visited[source]=true;

 fscanf(fp,"%d",&edge_list_size);

 int id,cost;
 int* h_graph_edges = (int*) malloc(sizeof(int)*edge_list_size);
 for(int i=0; i < edge_list_size ; i++)
 {
  fscanf(fp,"%d %d",&id,&cost);
  h_graph_edges[i] = id;
 }

 if(fp)
  fclose(fp);

 printf("Read File\n");


 Node* d_graph_nodes;
 ({fprintf(stderr, "MALLOC\n"); int* tptr = (int*) malloc(sizeof(Node)*no_of_nodes); if (!tptr) {fprintf(stderr, "MALLOC FAILED");}; *(void**) &d_graph_nodes = tptr; hipSuccess;}) ;
 ({fprintf(stderr, "MEMCPY\n"); if (hipMemcpyHostToDevice == hipMemcpyHostToDevice) {memcpy(d_graph_nodes, h_graph_nodes, sizeof(Node)*no_of_nodes);} else {memcpy(d_graph_nodes, h_graph_nodes, sizeof(Node)*no_of_nodes);} hipSuccess;}) ;


 int* d_graph_edges;
 ({fprintf(stderr, "MALLOC\n"); int* tptr = (int*) malloc(sizeof(int)*edge_list_size); if (!tptr) {fprintf(stderr, "MALLOC FAILED");}; *(void**) &d_graph_edges = tptr; hipSuccess;}) ;
 ({fprintf(stderr, "MEMCPY\n"); if (hipMemcpyHostToDevice == hipMemcpyHostToDevice) {memcpy(d_graph_edges, h_graph_edges, sizeof(int)*edge_list_size);} else {memcpy(d_graph_edges, h_graph_edges, sizeof(int)*edge_list_size);} hipSuccess;}) ;


 bool* d_graph_mask;
 ({fprintf(stderr, "MALLOC\n"); int* tptr = (int*) malloc(sizeof(bool)*no_of_nodes); if (!tptr) {fprintf(stderr, "MALLOC FAILED");}; *(void**) &d_graph_mask = tptr; hipSuccess;}) ;
 ({fprintf(stderr, "MEMCPY\n"); if (hipMemcpyHostToDevice == hipMemcpyHostToDevice) {memcpy(d_graph_mask, h_graph_mask, sizeof(bool)*no_of_nodes);} else {memcpy(d_graph_mask, h_graph_mask, sizeof(bool)*no_of_nodes);} hipSuccess;}) ;

 bool* d_updating_graph_mask;
 ({fprintf(stderr, "MALLOC\n"); int* tptr = (int*) malloc(sizeof(bool)*no_of_nodes); if (!tptr) {fprintf(stderr, "MALLOC FAILED");}; *(void**) &d_updating_graph_mask = tptr; hipSuccess;}) ;
 ({fprintf(stderr, "MEMCPY\n"); if (hipMemcpyHostToDevice == hipMemcpyHostToDevice) {memcpy(d_updating_graph_mask, h_updating_graph_mask, sizeof(bool)*no_of_nodes);} else {memcpy(d_updating_graph_mask, h_updating_graph_mask, sizeof(bool)*no_of_nodes);} hipSuccess;}) ;


 bool* d_graph_visited;
 ({fprintf(stderr, "MALLOC\n"); int* tptr = (int*) malloc(sizeof(bool)*no_of_nodes); if (!tptr) {fprintf(stderr, "MALLOC FAILED");}; *(void**) &d_graph_visited = tptr; hipSuccess;}) ;
 ({fprintf(stderr, "MEMCPY\n"); if (hipMemcpyHostToDevice == hipMemcpyHostToDevice) {memcpy(d_graph_visited, h_graph_visited, sizeof(bool)*no_of_nodes);} else {memcpy(d_graph_visited, h_graph_visited, sizeof(bool)*no_of_nodes);} hipSuccess;}) ;


 int* h_cost = (int*) malloc( sizeof(int)*no_of_nodes);
 for(int i=0;i<no_of_nodes;i++)
  h_cost[i]=-1;
 h_cost[source]=0;


 int* d_cost;
 ({fprintf(stderr, "MALLOC\n"); int* tptr = (int*) malloc(sizeof(int)*no_of_nodes); if (!tptr) {fprintf(stderr, "MALLOC FAILED");}; *(void**) &d_cost = tptr; hipSuccess;});


 bool *d_over;
 ({fprintf(stderr, "MALLOC\n"); int* tptr = (int*) malloc(sizeof(bool)); if (!tptr) {fprintf(stderr, "MALLOC FAILED");}; *(void**) &d_over = tptr; hipSuccess;});






 ({fprintf(stderr, "MEMCPY\n"); if (hipMemcpyHostToDevice == hipMemcpyHostToDevice) {memcpy(d_cost, h_cost, sizeof(int)*no_of_nodes);} else {memcpy(d_cost, h_cost, sizeof(int)*no_of_nodes);} hipSuccess;}) ;

 printf("Copied Everything to GPU memory\n");


 dim3 grid( num_of_blocks, 1, 1);
 dim3 threads( num_of_threads_per_block, 1, 1);

 int k=0;
 printf("Start traversing the tree\n");
 bool stop;

 do
 {

  stop=false;
  ({fprintf(stderr, "MEMCPY\n"); if (hipMemcpyHostToDevice == hipMemcpyHostToDevice) {memcpy(d_over, &stop, sizeof(bool));} else {memcpy(d_over, &stop, sizeof(bool));} hipSuccess;}) ;
  do { do { struct HIP_kernel_functor_name_begin_unnamed_HIP_kernel_functor_name_end_7 { std::decay_t<decltype(d_graph_nodes)> _p0_; std::decay_t<decltype(d_graph_edges)> _p1_; std::decay_t<decltype(d_graph_mask)> _p2_; std::decay_t<decltype(d_updating_graph_mask)> _p3_; std::decay_t<decltype(d_graph_visited)> _p4_; std::decay_t<decltype(d_cost)> _p5_; std::decay_t<decltype(no_of_nodes)> _p6_; void operator()(const hc::tiled_index<3>&) const [[hc]] { (Kernel)(_p0_, _p1_, _p2_, _p3_, _p4_, _p5_, _p6_); } } hip_kernel_functor_impl_{d_graph_nodes, d_graph_edges, d_graph_mask, d_updating_graph_mask, d_graph_visited, d_cost, no_of_nodes}; hip_impl::grid_launch_hip_( dim3(grid), dim3(threads), 0, 0, "(Kernel)", hip_kernel_functor_impl_); } while(0); } while (0);



  do { do { struct HIP_kernel_functor_name_begin_unnamed_HIP_kernel_functor_name_end_5 { std::decay_t<decltype(d_graph_mask)> _p0_; std::decay_t<decltype(d_updating_graph_mask)> _p1_; std::decay_t<decltype(d_graph_visited)> _p2_; std::decay_t<decltype(d_over)> _p3_; std::decay_t<decltype(no_of_nodes)> _p4_; void operator()(const hc::tiled_index<3>&) const [[hc]] { (Kernel2)(_p0_, _p1_, _p2_, _p3_, _p4_); } } hip_kernel_functor_impl_{d_graph_mask, d_updating_graph_mask, d_graph_visited, d_over, no_of_nodes}; hip_impl::grid_launch_hip_( dim3(grid), dim3(threads), 0, 0, "(Kernel2)", hip_kernel_functor_impl_); } while(0); } while (0);



  ({fprintf(stderr, "MEMCPY\n"); if (hipMemcpyDeviceToHost == hipMemcpyHostToDevice) {memcpy(&stop, d_over, sizeof(bool));} else {memcpy(&stop, d_over, sizeof(bool));} hipSuccess;}) ;
  k++;
 }
 while(stop);


 printf("Kernel Executed %d times\n",k);


 ({fprintf(stderr, "MEMCPY\n"); if (hipMemcpyDeviceToHost == hipMemcpyHostToDevice) {memcpy(h_cost, d_cost, sizeof(int)*no_of_nodes);} else {memcpy(h_cost, d_cost, sizeof(int)*no_of_nodes);} hipSuccess;}) ;







 FILE *fpo = stdout;
 for(int i=0;i<no_of_nodes&&i<1000;i++)
  fprintf(fpo,"%d) cost:%d\n",i,h_cost[i]);
 fclose(fpo);




 free( h_graph_nodes);
 free( h_graph_edges);
 free( h_graph_mask);
 free( h_updating_graph_mask);
 free( h_graph_visited);
 free( h_cost);
 ({free(d_graph_nodes);});
 ({free(d_graph_edges);});
 ({free(d_graph_mask);});
 ({free(d_updating_graph_mask);});
 ({free(d_graph_visited);});
 ({free(d_cost);});
}
